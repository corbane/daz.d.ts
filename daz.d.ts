/// <reference no-default-lib="true"/>
/// <reference lib="es2015" />

/* Unknown API */ declare type Communication = any;
/* Unknown API */ declare type cameracube_dz = any;
/* Unknown API */ declare type renderview_dz = any;
/* Unknown API */ declare type contenttab_dz = any;
/* Unknown API */ declare type propertysidenavhierarchy_dz = any;
/* Unknown API */ declare type elementclipboard_dz = any;
/* Unknown API */ declare type pbuffer_dz = any;
/* Unknown API */ declare type wsmodifier_dz = any;
/* Unknown API */ declare type iprrenderhandler_dz = any;
/* Unknown API */ declare type propertyclipboard_dz = any;
/* Unknown API */ declare type Permissions  = any;
/* Unknown API */ declare type defaultbrickuser_dz = any;
/* Unknown API */ declare type shaderbrick_dz = any;
/* Unknown API */ declare type brickset_dz = any;
/* Unknown API */ declare type QVariant = any;
/* Unknown API */ declare type naturalspline_dz = any;
/* Unknown API */ declare type facetmesh_dz = any;
/* Unknown API */ declare type sceneshader_dz = any;
/* Unknown API */ declare type panegroupdlg_dz = any;
/* Unknown API */ declare type dformmodifier_dz = any;
/* Unknown API */ declare type vertexmesh_dz = any;
/* Unknown API */ declare type vertexmap_dz = any;
/* Unknown API */ declare type geometryregion_dz = any;
type Signal<F> = F & {
  connect (thisArg: QObject, func: Function): void,
  disconnect (func: Function): void,
}

declare var DzAppSettingsMgr: unknown
type DzAppSettingsMgr = typeof DzAppSettingsMgr

declare var DzFileLoadFilter: unknown
type DzFileLoadFilter = typeof DzFileLoadFilter

declare var DzTextureModifier: unknown
type DzTextureModifier = typeof DzTextureModifier

declare var DzElementDuplicateContext: unknown
type DzElementDuplicateContext = typeof DzElementDuplicateContext

declare var DzBakerOptions: unknown
type DzBakerOptions = typeof DzBakerOptions

declare var DzTextureConvertorOptions: unknown
type DzTextureConvertorOptions = typeof DzTextureConvertorOptions

declare var DzDoubleVector: unknown
type DzDoubleVector = typeof DzDoubleVector

declare var DzWeightMapContext: unknown
type DzWeightMapContext = typeof DzWeightMapContext

declare var DzHelpContentsItem: unknown
type DzHelpContentsItem = typeof DzHelpContentsItem

declare var DzDirFilter: unknown
type DzDirFilter = typeof DzDirFilter

declare var DateTime: unknown
type DateTime = typeof DateTime

declare var QString: unknown
type QString = typeof QString

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewport_dz
 * Viewport for displaying and manipulating three dimensional objects.
 * @seealso DzViewport.get3DViewport()
 */
interface Dz3DViewport extends QWidget
{

  /**
   * The styles of the floor that is drawn in the viewport.
   */
  /**
   * No floor is drawn.
   */
  readonly NoFloor: number;

  /**
   * A grid floor is drawn.
   */
  readonly WireFloor: number;

  /**
   * A solid floor is drawn. (not currently implemented)
   */
  readonly SolidFloor: number;

  /**
   * A list of shading styles for rendering scene objects in OpenGL. These coincide with the ShadeStyle types in DzDrawStyle, and are provided here for scriptability.
   */
  /**
   * Draws unlit wire-frame bounding boxes.
   */
  readonly WireBox: number;

  /**
   * Draws smooth-shaded bounding boxes.
   */
  readonly SolidBox: number;

  /**
   * Draws unlit wire-frames.
   */
  readonly Wireframe: number;

  /**
   * Draws lit wire-frames.
   */
  readonly LitWireframe: number;

  /**
   * Draws unlit wire-frames, front geometry facing only.
   */
  readonly HiddenLine: number;

  /**
   * Draws lit smooth shaded objects with wireframes imposed.
   */
  readonly WireShaded: number;

  /**
   * Draws lit smooth shaded objects.
   */
  readonly SmoothShaded: number;

  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
   */
  readonly WireTextured: number;

  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied.
   */
  readonly Textured: number;

  /**
   * The different toolbar modes for the interface.
   */
  /**
   * A mode that docks the toolbar along the top edge of the viewport.
   */
  readonly DockedToolBar: number;

  /**
   * A mode that uses a Camera Cube HUD in the top right corner of the viewport.
   */
  readonly CameraCubeHUD: number;

  /**
   * Holds whether or not the aspect frame is drawn in the viewport.
   */
  aspectOn: boolean

  /**
   * Holds whether or not the origin axes are drawn in the viewport.
   */
  axesOn: boolean

  /**
   * Holds the background color of the viewport
   */
  background: Color

  /**
   * Holds the style of the floor that is drawn in the viewport.
   */
  floorStyle: number

  /**
   * Holds the shading style of the viewport.
   */
  shadeStyle: number

  /**
   * Holds whether or not the Pose Tool is shown.
   */
  showPoseTool: boolean

  /**
   * Holds whether or not the thirds guide is drawn in the viewport.
   * @since 4.6.3.12
   */
  thirdsGuideOn: boolean

  /**
   * Holds the mode for the viewport display of toolbars/camera cube
   */
  toolBarMode: number

  /**
   * Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
   * @seealso Sample: Aim Camera
   */
  aimCamera (): void;

  /**
   * Aim the viewport's camera at the given box. If the box is invalid this function does nothing.
   * @param box - the box to aim the viewport's camera at.
   */
  aimCameraAtBox (box: DzBox3): void;

  /**
   * Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
   */
  aimCameraAtPrimaryNode (): void;

  /**
   * Captures the current contents from the OpenGL frame buffer as an image.
   * @returns A snap shot of the OpenGL frame buffer.
   * @example
   * // Get the image manager
   * var oImgMgr = App.getImageMgr();
   *  
   * // If there is a main window
   * if( MainWindow ){
   * 	// Get the active viewport
   * 	var oViewportMgr = MainWindow.getViewportMgr();
   * 	var oViewport = oViewportMgr.getActiveViewport().get3DViewport();
   *  
   * 	// Capture the contents of the active viewport
   * 	var oImg = oViewport.captureImage();
   *  
   * 	// Save the image to a file
   * 	oImgMgr.saveImage( String( "%1/viewport.png" ).arg( App.getDocumentsPath()) , oImg );
   * }
   */
  captureImage (): Image;

  /**
   * @returns The current dimensions of the viewport.
   * @since 4.6.4.100
   */
  currentDimensions (): DzInt2;

  /**
   * Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
   * @seealso Sample: Frame Camera
   */
  frameCamera (): void;

  /**
   * Frame the viewport's camera at the given box. If the box is invalid this function does nothing.
   * @param box - the box to frame the viewport's camera on.
   */
  frameCameraOnBox (box: DzBox3): void;

  /**
   * Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
   */
  frameCameraOnSelectedNodes (): void;

  /**
   * @returns A rect describing the aspect frame for this viewport.
   */
  getAspectFrameRect (): Rect;

  /**
   * @returns The currently active camera for this viewport.
   * @example
   * // Get the active viewport
   * var oViewportMgr = MainWindow.getViewportMgr();
   * var oViewport = oViewportMgr.getActiveViewport().get3DViewport();
   *  
   * // Get the active camera
   * var oCamera = oViewport.getCamera();
   * // Reset the camera
   * oCamera.reset();
   * @seealso Sample: Aim Camera
   * Sample: Frame Camera
   * setCamera()
   */
  getCamera (): DzCamera;

  /**
   * @returns The persistent Camera Cube view tool for this viewport; displayed when the toolBarMode is set to CameraCubeHUD.
   * @since 4.9.3.107
   */
  getCameraCube (): cameracube_dz;

  /**
   * @returns If the current DrawStyle is a DzUserDrawStyle, the description of the DrawStyle, otherwise an empty string.
   * @since 4.9.2.22
   */
  getUserDrawStyle (): string;

  /**
   * @returns This 3D view's parent viewport
   */
  getViewport (): DzViewport;

  /**
   * Performs a hardware assisted OpenGL render in this viewport with the given settings.
   * @returns true if the scene was rendered successfully, otherwise false.
   * @param handler - The render handler for the rendering operation.
   */
  hardwareRender (handler: DzRenderHandler): boolean;

  /**
   * Performs a hardware assisted OpenGL render in this viewport with the given settings.
   * @returns true if the scene was rendered successfully, otherwise false.
   * @since 4.9.3.57
   * @param handler - The render handler for the rendering operation.
   * @param options - The render options to use. (since 4.9.3.61)
   * @param [camera=null] - The camera to render through, set to null to render from current view. (since 4.9.3.61)
   * @param [style=null] - The draw style to use, null to use standard render draw style. (since 4.9.3.61)
   */
  hardwareRenderWithOptions (handler: DzRenderHandler, options: DzRenderOptions, camera?: DzCamera, style?: DzDrawStyle): boolean;

  /**
   * @returns true if this viewport supports rendering via OpenGL, otherwise false.
   */
  isHardwareRenderable (): boolean;

  /**
   * @returns true if a mouse button is pressed, otherwise false.
   * @since 4.6.4.20
   */
  mouseIsDown (): boolean;

  /**
   * Performs a facet picking operation on the scene through this viewport.
   * @returns The index of the facet that was hit (if any), otherwise -1.
   * @param pnt - The pixel coordinates of the point in the viewport to pick on.
   */
  pickOnFacet (pnt: Point): number;

  /**
   * Performs a gizmo picking operation through this viewport. View tools (see DzViewTool) can draw a 'gizmo' in the viewport for the user to interact with. The tool can assign different parts of the gizmo to specific indices, so as to tell what part of the gizmo was clicked by the user.
   * @returns The gizmo index that was hit (if any), otherwise 0.
   * @param pnt - The point in the viewport to pick on.
   */
  pickOnGizmo (pnt: Point): number;

  /**
   * Performs a material picking operation on the scene through this viewport. This example shows the mousePress() implementation from a view tool (see DzViewTool) that sets the color of any material that the user clicks in the viewport.
   * @returns The material that was hit, if any.
   * @param pnt - The pixel coordinates of the point in the viewport to pick on.
   */
  pickOnMaterial (pnt: Point): DzMaterial;

  /**
   * Performs a node picking operation on the scene through this viewport. View tools (see DzViewTool) will commonly use this function to determine what node (if any) that the user clicks on. This example shows the mousePress() implementation from a view tool that selects the node that the user clicks in the viewport.
   * @returns The node that was hit, if any.
   * @param pnt - The pixel coordinates of the point in the viewport to pick on.
   * @param [useSelectionMaps=true] - 
   */
  pickOnNode (pnt: Point, useSelectionMaps?: boolean): DzNode;

  /**
   * Performs a quick render of the scene suitable for a thumbnail image.
   * @returns true if the scene was successfully rendered, otherwise false.
   * @param handler - The render handler for the rendering operation.
   */
  renderThumbnail (handler: DzRenderHandler): boolean;

  /**
   * Reset the viewport's camera to its default state.
   */
  resetCamera (): void;

  /**
   * Set the camera for the view. If a matching camera is not found, this function does nothing.
   * @param cam - The name (not label) of a view camera, or a scene camera.
   */
  setCamera (cam: string): void;

  /**
   * Set the camera for the view. The pointer passed in must be a camera in the scene, or one of the view cameras from DzViewportMgr.
   * @example
   * // Get the active viewport
   * var oViewportMgr = MainWindow.getViewportMgr();
   * var oViewport = oViewportMgr.getActiveViewport().get3DViewport();
   *  
   * // Create a new camera
   * var oCam = new DzBasicCamera( oCam.GENERAL_CAMERA );
   * oCam.setName( "Test Camera" );
   *  
   * // Add the camera to the scene
   * Scene.addNode( oCam );
   *  
   * // Set the active viewport to view through the new camera
   * oViewport.setCamera( oCam );
   * @seealso getCamera()
   * @param cam - The camera to use for viewing in the viewport.
   */
  setCamera (cam: DzCamera): void;

  /**
   * Set the draw style for the viewport. DzDrawStyle objects are ref counted, so the viewport refs the style when it is set, and unrefs it when it is no longer using the style. The draw style will then delete itself when its ref count reaches zero.
   * @seealso Sample: Active Viewport DrawStyle
   * @param style - The new draw style for the viewport.
   */
  setDrawStyle (style: DzDrawStyle): void;

  /**
   * Attempts to set the DrawStyle for the viewport.
   * @returns true if a DzUserDrawStyle that matches the description could be found, otherwise false.
   * @since 4.9.2.22
   * @param description - The description of the DzUserDrawStyle to set.
   */
  setUserDrawStyle (description: string): boolean;

  activeCameraChanged: Signal<{
    /**
     * Emitted when a new active camera has been changed for this viewport.
     * @param cam - The new camera for this viewport.
     */
  (cam: DzCamera): void;
  }>;
  activeCameraProjectionChanged: Signal<{
    /**
     * Emitted when the projection of the active camera of this viewport has changed.
     */
  (): void;
  }>;
  activeCameraTransformChanged: Signal<{
    /**
     * Emitted when the transform of the active camera of this viewport has changed.
     */
  (): void;
  }>;
  aspectOnChanged: Signal<{
    /**
     * Emitted when the draw state for the aspect frame changes.
     * @param onOff - true if the aspect frame is displayed, otherwise false.
     */
  (onOff: boolean): void;
  }>;
  axesOnChanged: Signal<{
    /**
     * Emitted when the draw state for the origin axes changes.
     * @param onOff - true if the origin axis is displayed, otherwise false.
     */
  (onOff: boolean): void;
  }>;
  backgroundColorChanged: Signal<{
    /**
     * Emitted when the background color of the viewport changes.
     * @param color - The new background color.
     */
  (color: Color): void;
  }>;
  contextMenuAboutToShow: Signal<{
    /**
     * Emitted when the viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user. Only connect to this signal if you only want to affect this particular viewport - otherwise connect to DzViewportMgr::contextMenuAboutToShow().
     * @param menu - The menu that will be displayed.
     * @param pos - The position in the viewport where the context menu was triggered.
     */
  (menu: DzMenu, pos: Point): void;
  }>;
  currentDimensionsChanged: Signal<{
    /**
     * Emitted when the current dimensions of this viewport has changed.
     */
  (): void;
  }>;
  dimensionsChanged: Signal<{
    /**
     * Emitted when the dimensions of this viewport has changed.
     */
  (): void;
  }>;
  drawStyleChanged: Signal<{
    /**
     * Emitted when the draw style of the viewport has changed.
     * @param style - The new draw style of the viewport.
     */
  (style: DzDrawStyle): void;
  }>;
  floorStyleChanged: Signal<{
    /**
     * Emitted when the floor style of the viewport changes.
     * @param style - The new floor style for the viewport.
     */
  (style: number): void;
  }>;
  thirdsGuideOnChanged: Signal<{
    /**
     * Emitted when the draw state for the thirds guide changes.
     * @param onOff - true if the thirds guide is displayed, otherwise false.
     */
  (onOff: boolean): void;
  }>;
  toolBarDocked: Signal<{
    /**
     * Emitted when the view tool bar is docked or undocked.
     * @param onOff - true if the view tool bar is docked, otherwise false.
     */
  (onOff: boolean): void;
  }>;
  toolModeChanged: Signal<{
    /**
     * Emitted when the toolbar mode has been changed for this viewport.
     * @param mode - The new toolbar mode for this viewport.
     */
  (mode: number): void;
  }>;
  viewChanged: Signal<{
    /**
     * Emitted when the area this viewport displays has changed.
     */
  (): void;
  }>;
}

declare namespace Dz3DViewport
{

  /**
   * The styles of the floor that is drawn in the viewport.
   */
  /**
   * No floor is drawn.
   */
  export const NoFloor: number;
  /**
   * A grid floor is drawn.
   */
  export const WireFloor: number;
  /**
   * A solid floor is drawn. (not currently implemented)
   */
  export const SolidFloor: number;

  /**
   * A list of shading styles for rendering scene objects in OpenGL. These coincide with the ShadeStyle types in DzDrawStyle, and are provided here for scriptability.
   */
  /**
   * Draws unlit wire-frame bounding boxes.
   */
  export const WireBox: number;
  /**
   * Draws smooth-shaded bounding boxes.
   */
  export const SolidBox: number;
  /**
   * Draws unlit wire-frames.
   */
  export const Wireframe: number;
  /**
   * Draws lit wire-frames.
   */
  export const LitWireframe: number;
  /**
   * Draws unlit wire-frames, front geometry facing only.
   */
  export const HiddenLine: number;
  /**
   * Draws lit smooth shaded objects with wireframes imposed.
   */
  export const WireShaded: number;
  /**
   * Draws lit smooth shaded objects.
   */
  export const SmoothShaded: number;
  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
   */
  export const WireTextured: number;
  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied.
   */
  export const Textured: number;

  /**
   * The different toolbar modes for the interface.
   */
  /**
   * A mode that docks the toolbar along the top edge of the viewport.
   */
  export const DockedToolBar: number;
  /**
   * A mode that uses a Camera Cube HUD in the top right corner of the viewport.
   */
  export const CameraCubeHUD: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewrenderhandler_dz
 * A render handler that renders into a viewport.
 * @remarks This render handler is a DzImageRenderHandler that is the size of the aspect frame for the given viewport, and paints all data passed to it over the current view.
 */
interface Dz3DViewRenderHandler extends DzImageRenderHandler
{

  /**
   * @returns The offset for this handler, from the left of the view
   * @since 4.6.4.18
   */
  getLeftOffset (): number;

  /**
   * @returns The offset for this handler, from the top of the view
   * @since 4.6.4.18
   */
  getTopOffset (): number;

  /**
   * @returns The render view for this handler
   * @since 4.6.4.18
   */
  getView (): renderview_dz;

  /**
   * @returns The viewport for this handler
   * @since 4.6.4.18
   */
  getViewport (): DzViewport;

}

declare var Dz3DViewRenderHandler:
{
  prototype: Dz3DViewRenderHandler;

  /**
   * Constructor. Creates a render handler that will render to the given viewport.
   * @example
   * // Get the active viewport and camera
   * var oActiveView = MainWindow.getViewportMgr().getActiveViewport();
   * var oCamera = oActiveView.get3DViewport().getCamera();
   *  
   * // Create a handler
   * var oHandler = new Dz3DViewRenderHandler( oActiveView, 0, App.getTempPath() + "/test.png" );
   *  
   * // If we have a valid handler
   * if( oHandler ){
   * 	// Set the background color
   * 	oHandler.setBackColor( oActiveView.get3DViewport().background );
   *  
   * 	// Get the render options
   * 	var oRenderOptions = App.getRenderOptions();
   *  
   * 	// Get the renderer
   * 	var oRenderer = oRenderOptions.getActiveRenderer();
   *  
   * 	// Render, using our handler and options
   * 	oRenderer.render( oHandler, oCamera, oRenderOptions );
   * }
   * @param view - The viewport to render in.
   * @param startTime - The starting scene time for the render.
   * @param filename - The name of the file to save the render to.
   */
  new (view: DzViewport, startTime: DzTime, filename: string): Dz3DViewRenderHandler;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractassetcontainer_dz
 * interface: DzRefCountedItem ??
 * Base class for all asset containers.
 * @remarks TODO: Add detailed description.
 */
interface DzAbstractAssetContainer extends QObject
{

  /**
   * Holds whether or not sub-containers can be copied. (Read Only)
   */
  canCopyContainers: boolean

  /**
   * Holds whether or not this container can be deleted. (Read Only)
   */
  canDeleteContainer: boolean

  /**
   * Holds whether or not sub-containers can be added to this container. (Read Only)
   */
  canInsertSubContainer: boolean

  /**
   * Holds whether or not the assets in this container can be modified. (Read Only)
   */
  canModifyAssets: boolean

  /**
   * Holds whether or not this container can be renamed. (Read Only)
   */
  canRenameContainer: boolean

  /**
   * Holds the id for this container. (Read Only)
   */
  id: Object

  /**
   * Holds whether or not removing an asset from this container will result in that asset's file being deleted. (Read Only)
   * @since 4.11.0.193
   */
  removeAssetCausesDelete: boolean

  /**
   * Holds the tooltip for this container. (Read Only)
   */
  tooltip: string

  /**
   * Holds the use count for this container.
   */
  useCount: number

  /**
   * Attempts to clear out the assets that can be rebuilt.
   * @returns The current implementation does nothing and always returns false
   */
  clearRebuildableAssets (): boolean;

  /**
   * Attempts to create a new child container.
   * @returns true if the container was successfully created, otherwise false.
   * @param containerName - The name of the new child container.
   */
  createNewChildContainer (containerName: string): boolean;

  /**
   * @returns The asset at the specified index (if valid), otherwise null.
   * @param index - The index of the asset to be returned.
   */
  getAsset (index: number): DzAsset;

  /**
   * @returns A list of assets for this container.
   */
  getAssets (): Array<DzAsset>;

  /**
   * @returns The child container at the given index (if valid), otherwise null.
   * @param index - The index of the child container to get.
   */
  getChildContainer (index: number): DzAbstractAssetContainer;

  /**
   * @returns A list of child containers for this container.
   */
  getChildContainers (): Array<DzAbstractAssetContainer>;

  /**
   * @returns The size of the icon associated with child containers.
   */
  getChildIconSize (): Size;

  /**
   * @returns The name of this container.
   */
  getContainerName (): string;

  /**
   * @returns The ID path for this container.
   */
  getIDPath (): Array<unknown>;

  /**
   * @returns The number of assets associated with this container.
   */
  getNumAssets (): number;

  /**
   * @returns The number of child containers this container has.
   */
  getNumChildContainers (): number;

  /**
   * @returns The owner of this container.
   */
  getOwner (): DzAbstractAssetContainer;

  /**
   * @returns The small icon size of the icon associated with child containers.
   */
  getSmallChildIconSize (): Size;

  /**
   * @returns The support file for this asset container. Base implementation returns an empty string.
   */
  getSupportFile (): string;

  /**
   * @returns true if this container has the given asset, otherwise false.
   * @param asset - The asset to check for.
   */
  hasAsset (asset: DzAsset): boolean;

  /**
   * @returns true if thic container has child containers, otherwise false.
   */
  hasChildContainers (): boolean;

  /**
   * Boolean DzAbstractAssetContainer::ingoreAssetConflicts()
   * @returns true if asset conflicts in this container will be ignored, otherwise false.
   */
  ignoreAssetConflicts (): boolean;

  /**
   * Initializes this containers child containers.
   * @returns true if the containers were successfully initialized, otherwise false.
   */
  initChildren (): boolean;

  /**
   * Attempts to insert the given asset into this container.
   * @returns true if the asset was successfully inserted, otherwise false.
   * @param asset - The asset to add to this container.
   */
  insertAsset (asset: DzAsset): boolean;

  /**
   * Attempts to insert container as a child of this container.
   * @returns true if the container was successfully inserted, otherwise false.
   * @param container - The container to insert.
   */
  insertChildContainer (container: DzAbstractAssetContainer): boolean;

  /**
   * @returns true if this container is based on a filesystem, otherwise false.
   */
  isFileSystemBased (): boolean;

  /**
   * Attempts to move the given container from its parent.
   * @returns true if the container was successfully moved, otherwise false.
   * @param child - The container to move from its parent.
   */
  moveFromParent (child: DzAbstractAssetContainer): boolean;

  /**
   * Attempts to remove the given asset from this container.
   * @returns true if the asset was successfully removed, otherwise false.
   * @param asset - The asset to remove.
   */
  removeAsset (asset: DzAsset): boolean;

  /**
   * @returns true if assets moved to toContainer should be removed from this container, otherwise false.
   * @param toContainer - The container to check.
   */
  removeAssetOnCut (toContainer: DzAbstractAssetContainer): boolean;

  /**
   * Attempts to remove the given container.
   * @returns true if the container was successfully removed, otherwise false.
   * @param container - The container to remove.
   */
  removeChildContainer (container: DzAbstractAssetContainer): boolean;

  /**
   * Attempts to rename this container.
   * @returns true if the rename was successful, otherwise false.
   * @param name - The new name for this container.
   */
  rename (name: string): boolean;

  /**
   * Attempts to rename the given asset.
   * @returns true if the asset was successfully renamed, otherwise false.
   * @param asset - The asset to rename.
   * @param newAssetName - The new name for the asset.
   */
  renameAsset (asset: DzAsset, newAssetName: string): boolean;

  /**
   * Attempts to rename the given child container.
   * @returns true if the container was successfully renamed, otherwise false.
   * @param container - The container to rename.
   * @param name - The new name for the container.
   */
  renameChildContainer (container: DzAbstractAssetContainer, name: string): boolean;

  /**
   * Sets the name for this container.
   * @param name - The new name for this container.
   */
  setContainerName (name: string): void;

  /**
   * Attemps to update this container.
   * @returns true if the update was successful, otherwise false.
   */
  update (): boolean;

  /**
   * Attempts to update the assets associated with this container.
   * @returns true if the update was successful, otherwise false.
   */
  updateAssets (): boolean;

  assetIconChanged: Signal<{
    /**
     * Emitted the icon for an asset has changed.
     * @param asset - The asset that the icon changed for.
     */
  (asset: DzAsset): void;
  }>;
  assetRenamed: Signal<{
    /**
     * Emitted when an asset has been renamed.
     * @param asset - The asset that was renamed.
     * @param index - The index of the asset that was renamed.
     */
  (asset: DzAsset, index: number): void;
  }>;
  beginAssetAdd: Signal<{
    /**
     * Emitted before assets are added.
     * @param start - …
     * @param end - …
     */
  (start: number, end: number): void;
  }>;
  beginAssetRemove: Signal<{
    /**
     * Emitted before assets are removed.
     * @param start - …
     * @param end - …
     */
  (start: number, end: number): void;
  }>;
  beginChildContainerAdd: Signal<{
    /**
     * Emitted before a child container is added.
     * @param container - The container being added.
     * @param start - …
     * @param end - …
     */
  (container: DzAbstractAssetContainer, start: number, end: number): void;
  }>;
  beginChildContainerRemove: Signal<{
    /**
     * Emitted before a child container is removed.
     * @param container - The container being removed.
     * @param start - …
     * @param end - …
     */
  (container: DzAbstractAssetContainer, start: number, end: number): void;
  }>;
  childContainerAboutToBeRemoved: Signal<{
    /**
     * Emitted just before a child container is removed.
     * @param childContainer - The child container that will be removed.
     */
  (childContainer: DzAbstractAssetContainer): void;
  }>;
  childContainerRemoved: Signal<{
    /**
     * Emitted after a child container has been removed.
     * @param childContainer - The child container that was removed.
     */
  (childContainer: DzAbstractAssetContainer): void;
  }>;
  endAssetAdd: Signal<{
    /**
     * Emitted after assets have been added.
     */
  (): void;
  }>;
  endAssetRemove: Signal<{
    /**
     * Emitted after assets have been removed.
     */
  (): void;
  }>;
  endChildContainerAdd: Signal<{
    /**
     * Emitted after a child container has been added.
     */
  (): void;
  }>;
  endChildContainerRemove: Signal<{
    /**
     * Emitted after a child container has been removed.
     */
  (): void;
  }>;
  iconChanged: Signal<{
    /**
     * Emitted after the icon for the container has changed.
     * @param container - The container with the icon that changed.
     */
  (container: DzAbstractAssetContainer): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractnodeeditorpane_dz
 * An intermediate pane class to provide common functionality to several panes.
 * @remarks TODO: Add detailed description.
 */
interface DzAbstractNodeEditorPane extends DzPane
{

  /**
   * @returns true if each selected node is displayed separately in the navigation list, otherwise false.
   */
  displaySeparate (): boolean;

  /**
   * @returns The Presets page widget for this pane.
   */
  getContentTab (): contenttab_dz;

  /**
   * @returns The guide page displayed for the editor page when no property group or property is selected.
   */
  getEditorGuidePage (): DzGuidePage;

  /**
   * @returns The information divider for this pane.
   */
  getInfoDivider (): DzInfoDivider;

  /**
   * @returns The Editor page widget for this pane.
   */
  getNodeEditor (): propertysidenavhierarchy_dz;

  /**
   * @returns The guide page displayed for the presets page when no category is selected.
   */
  getPresetGuidePage (): DzGuidePage;

  /**
   * Sets the current page to the index specified by which; 0 based.
   * @param which - 
   */
  setCurrentTab (which: number): void;

  /**
   * Sets whether or not hidden properties are displayed in the pane.
   * @param onOff - If true, hidden properties will be visible in the parameters list, otherwise hidden properties will not be displayed in the parameters list.
   */
  showHidden (onOff: boolean): void;

  /**
   * @returns true if hidden properties are shown in the parameters list, false if hidden parameters are not being displayed in the parameters list.
   */
  showingHidden (): boolean;

  /**
   * Toggle between whether each selected node is displayed separately in the navigation list or not.
   */
  toggleDisplaySeparate (): void;

  /**
   * Toggle between whether hidden properties are shown in the list or not.
   */
  toggleShowHidden (): void;

  assetHoverChanged: Signal<{
    /**
     * Emitted when the user hovers the cursor over an asset on the Presets page
     * @since 4.6.4.112
     * @param asset - 
     */
  (asset: DzAsset): void;
  }>;
  currentTabChanged: Signal<{
    /**
     * Emitted when the current page changes
     * @param which - 
     */
  (which: number): void;
  }>;
  showingHiddenChanged: Signal<{
    /**
     * Emitted when the option to show hidden properties changes
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/action_dz
 * Class that implements a user action.
 * @remarks This class represents an action that the user can perform in the interface via pressing a hot key or clicking on a menu/toolbar item.
 * All action items are added to a list of interface actions which the user can customize. The user can specify their own keyboard shortcut or 'Hot Key' for the action, and any action item can be moved into a custom toolbar, as well as appear in the DAZ Studio main menu.
 * @seealso DzActionMgr::getAction()
 * DzActionMgr::findAction()
 */
interface DzAction extends QObject
{

  /**
   * The action group that this action belongs to (Read Only)
   */
  actionGroup: string

  /**
   * TODO: Add description.
   */
  autoRepeat: boolean

  /**
   * TODO: Add description.
   */
  checkable: boolean

  /**
   * TODO: Add description.
   */
  checked: boolean

  /**
   * The primary menu that this action is added to by default, if the user has not chosen a custom location (Read Only)
   */
  defaultMenu: string

  /**
   * The menus that this action is added to by default, if the user has not chosen a custom location (Read Only).
   * @since 4.6.2.62
   */
  defaultMenus: Array<String>

  /**
   * The default keyboard shortcut (hotkey) that is associated with this action (Read Only before 4.6.4.48)
   */
  defaultShortcut: string

  /**
   * The primary toolBar that this action is added to by default, if the user has not chosen a custom location (Read Only)
   */
  defaultToolBar: string

  /**
   * The toolBars that this action is added to by default, if the user has not chosen a custom location (Read Only).
   * @since 4.6.2.62
   */
  defaultToolBars: Array<String>

  /**
   * The user-readable description of the action.
   */
  description: string

  /**
   * Emitted when an action is enabled or disabled. onOff is true if the action was enabled, false if it was disabled.
   */
  enabled: boolean

  /**
   * The image file that is used as the icon for this action (if any).
   */
  iconFile: string

  /**
   * TODO: Add description.
   */
  iconText: string

  /**
   * TODO: Add description.
   */
  iconVisibleInMenu: boolean

  /**
   * TODO: Add description.
   */
  shortcut: string

  /**
   * TODO: Add description.
   */
  statusTip: string

  /**
   * The standard pixmap that is used as the icon for this action (if any).
   * @since 4.11.0.43
   */
  styleIcon: number

  /**
   * TODO: Add description.
   */
  text: string

  /**
   * TODO: Add description.
   */
  toolTip: string

  /**
   * TODO: Add description.
   */
  visible: boolean

  /**
   * TODO: Add description.
   */
  whatsThis: string

  /**
   * Activates the action in the 'Hover' state programatically.
   * @seealso trigger()
   */
  hover (): void;

  /**
   * Sets the action's toggle state.
   * @seealso setOff()
   * @param onOff - If true, the action's toggle state is set on, otherwise, its toggle state is set off.
   */
  setChecked (onOff: boolean): void;

  /**
   * Disables/Enables the action in the interface.
   * @seealso setEnabled()
   * @param onOff - If true, the action will be 'grayed out' in menus, and the user will be unable to activate it. If false, the action will be enabled.
   */
  setDisabled (onOff: boolean): void;

  /**
   * Enables/Disables the action in the interface.
   * @seealso setDisabled()
   * @param onOff - If true, the action will be displayed normally in menus, and the user will be able to activate it. If false, the action will be disabled.
   */
  setEnabled (onOff: boolean): void;

  /**
   * The same as calling setChecked( !onOff ). This method is provided for convenience when connecting this slot to a signal that emits a value that is the inverse of the desired onOff state.
   * @seealso setChecked()
   * @param onOff - If true, the action's toggle state is set off, otherwise, its toggle state is set on.
   */
  setOff (onOff: boolean): void;

  /**
   * Sets whether the action is visible in the interface.
   * @param onOff - If true, the action will be displayed in menus and toolbars that it has been added to. If false, the action will not be displayed in any menus or toolbars.
   */
  setVisible (onOff: boolean): void;

  /**
   * Toggles the action programatically.
   * @seealso trigger()
   */
  toggle (): void;

  /**
   * Activates the action programatically.
   * @seealso toggle()
   */
  trigger (): void;

  changed: Signal<{
    /**
     * Emitted when an action has changed.
     */
  (): void;
  }>;
  enabled: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  hovered: Signal<{
    /**
     * Emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.
     */
  (): void;
  }>;
  preExecute: Signal<{
    /**
     * Emitted immediately before executeAction() is called.
     * @since 4.6.3.32
     */
  (): void;
  }>;
  toggled: Signal<{
    /**
     * Emitted when a toggle action changes state. checked is the new action state, true for on, false for off.
     * @param checked - 
     */
  (checked: boolean): void;
  }>;
  triggered: Signal<{
    /**
     * Emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when trigger() was called. Notably, it is not emitted when setChecked() or toggle() is called. checked is true if the action is checked, or false if the action is unchecked.
     * @param checked - 
     */
  (checked: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenu_dz
 * Class that encapsulates a popup menu that contains DzActionMenuItems.
 * @seealso DzActionMgr::getMenu(), DzPane::getOptionsMenu(), DzViewTool::getOptionsMenu(), DzPersistentMenu::getActionMenu()
 */
interface DzActionMenu extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * A menu where each DzActionMenuItem is explicitly defined
   */
  readonly CustomMenu: number;

  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses
   */
  readonly PaneMenu: number;

  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses
   */
  readonly ViewToolMenu: number;

  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses
   */
  readonly SaveAsMenu: number;

  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr::getRecentFileList() Since: 4.6.0.44
   */
  readonly OpenRecentMenu: number;

  /**
   * The type of the menu (Read Only until 4.6.0.74)
   */
  menuType: number

  /**
   * Removes all items from the menu.
   */
  clear (): void;

  /**
   * Displays the menu to the user
   */
  exec (): void;

  /**
   * Displays the menu to the user at the given position.
   * @param pos - The global window coordinates at which to display the popup menu.
   */
  exec (pos: Point): void;

  /**
   * @returns A pointer to the submenu with the given label, NULL if no submenu with the label is found.
   * @param label - The label of the submenu to find.
   */
  findSubMenu (label: string): DzActionMenu;

  /**
   * @returns A pointer to the menu item at the given index, NULL if the index is invalid
   * @param which - The index of the item to return.
   */
  getItem (which: number): DzActionMenuItem;

  /**
   * @returns An Array of DzActionMenuItem in this menu.
   */
  getItemList (): Array<DzActionMenuItem>;

  /**
   * @returns The number of items in the menu
   */
  getNumItems (): number;

  /**
   * @returns A pointer to a submenu with the given label - if one does not already exist, it is created, and added to the end of the menu.
   * @param label - The label of the submenu to get.
   */
  getSubMenu (label: string): DzActionMenu;

  /**
   * @returns true if there are items in this menu, false if the menu is empty.
   */
  hasItems (): boolean;

  /**
   * Inserts the given action into the menu at the given location.
   * @param className - The class name of the DzAction to insert into the menu
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertAction (className: string, at?: number): void;

  /**
   * Inserts the given custom action into the menu at the given location.
   * @param guid - The globally unique identifier for the custom action to insert into the menu
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertCustomAction (guid: string, at?: number): void;

  /**
   * Inserts the given file merge action into the menu at the given location.
   * @since 4.6.0.76
   * @param fileName - The path of the file to insert into the menu
   * @param [label=“”] - The label to display within the interface; defaults to fileName if not specified
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertFileMergeAction (fileName: string, label?: string, at?: number): void;

  /**
   * Inserts the given file open action into the menu at the given location.
   * @since 4.6.0.76
   * @param fileName - The path of the file to insert into the menu
   * @param [label=“”] - The label to display within the interface; defaults to fileName if not specified
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertFileOpenAction (fileName: string, label?: string, at?: number): void;

  /**
   * Inserts the given item into the menu at the given location.
   * @param item - The item to insert into the menu
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertItem (item: DzActionMenuItem, at?: number): void;

  /**
   * Inserts the given menu into the menu at the given location as a submenu.
   * @param label - The label to display in this menu for the submenu item
   * @param menu - The submenu to insert into this menu; if null, a new menu is created at the given index.
   * @param [at=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertMenu (label: string, menu: DzActionMenu, at?: number): void;

  /**
   * Inserts a separator into the menu at the given location.
   * @param [where=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertSeparator (where?: number): void;

  /**
   * Remove the given item from the menu.
   * @param item - The item to remove from the menu
   */
  removeItem (item: DzActionMenuItem): void;

  /**
   * Removes any duplicate separators from the menu by replacing two or more adjacent separators with a single separator.
   */
  simplifySeparators (): void;

  itemListChanged: Signal<{
    /**
     * Emitted when items are added to or removed from this menu
     */
  (): void;
  }>;
}

declare namespace DzActionMenu
{

  /**
   * TODO: Add description.
   */
  /**
   * A menu where each DzActionMenuItem is explicitly defined
   */
  export const CustomMenu: number;
  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses
   */
  export const PaneMenu: number;
  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses
   */
  export const ViewToolMenu: number;
  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses
   */
  export const SaveAsMenu: number;
  /**
   * A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr::getRecentFileList() Since: 4.6.0.44
   */
  export const OpenRecentMenu: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenuitem_dz
 * Class that encapsulates an 'Action Menu Item'.
 * @remarks Action Menu Items are registered with a DzActionMenu and are available to access via methods on that class.
 */
interface DzActionMenuItem extends Object
{

  /**
   * The types of action menu items
   */
  /**
   * A menu separator (i.e. horizontal divider)
   */
  readonly Separator: number;

  /**
   * A menu entry that activates a DzAction object
   */
  readonly Action: number;

  /**
   * A menu entry that activates a custom action. See Also: DzActionMgr - for more about custom actions.
   */
  readonly CustomAction: number;

  /**
   * A menu entry that opens a submenu
   */
  readonly SubMenu: number;

  /**
   * A menu entry that opens a file, replacing the contents of the current scene See Also: DzContentMgr::openFile() - for more about opening a file.
   */
  readonly FileOpenAction: number;

  /**
   * A menu entry that merges a file with the current scene See Also: DzContentMgr::openFile() - for more about merging a file.
   */
  readonly FileMergeAction: number;

  /**
   * The action to perform for an item of the Action, CustomAction, FileOpenAction or FileMergeAction type
   */
  action: string

  /**
   * Whether the menu item is considered to be in a default location.
   * @since 4.6.0.83
   */
  isDefault: boolean

  /**
   * The label to display within the interface for an item of the SubMenu, FileOpenAction or FileMergeAction type.
   * @since 4.6.0.76
   */
  label: string

  /**
   * Deprecated
   * Use label instead
   */
  subMenuLabel: string

  /**
   * The type of the menu item (Read Only)
   * @returns The type of the menu item
   */
  type: number

  /**
   * @returns A pointer to the submenu that is displayed by this menu entry. This function returns NULL if the menu has not been set, or if the type of the item is not SubMenu.
   */
  getSubMenu (): DzActionMenu;

  /**
   * Causes the file for a FileOpenAction or FileMergeAction item to load
   * @since 4.6.0.44
   */
  loadFile (): void;

  /**
   * Sets the menu that is displayed as the submenu when this menu item is activated. This call has no effect unless the type of this item is SubMenu.
   * @param menu - The menu that is displayed as a submenu when this menu entry is activated. The menu item takes ownership of the menu - the menu will be deleted when this item is destroyed.
   */
  setSubMenu (menu: DzActionMenu): void;

}

declare namespace DzActionMenuItem
{

  /**
   * The types of action menu items
   */
  /**
   * A menu separator (i.e. horizontal divider)
   */
  export const Separator: number;
  /**
   * A menu entry that activates a DzAction object
   */
  export const Action: number;
  /**
   * A menu entry that activates a custom action. See Also: DzActionMgr - for more about custom actions.
   */
  export const CustomAction: number;
  /**
   * A menu entry that opens a submenu
   */
  export const SubMenu: number;
  /**
   * A menu entry that opens a file, replacing the contents of the current scene See Also: DzContentMgr::openFile() - for more about opening a file.
   */
  export const FileOpenAction: number;
  /**
   * A menu entry that merges a file with the current scene See Also: DzContentMgr::openFile() - for more about merging a file.
   */
  export const FileMergeAction: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmgr_dz
 * Manager that handles actions.
 * @remarks This class manages actions that the user can perform in the interface by pressing the key combination specified by its shortcut or by clicking on a menu/toolbar item. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Don't create an instance of this class, rather request a pointer to it from DzMainWindow via DzMainWindow::getActionMgr().
 * @seealso DzAction
 */
interface DzActionMgr extends QWidget
{

  /**
   * Uses the regular expression “([A-z]+[A-z0-9]*)” to strip characters/symbols/etc from a string in order to 'legalize' it.
   * @returns A 'legalized' version of name.
   * @since 4.6.2.102
   * @param name - The name to 'legalize.'
   */
  legalizeName (name: string): string;

  /**
   * Adds a custom action to the action manager.
   * @returns The globally unique identifier for the newly created custom action.
   * @param text - The text of the action. This is displayed in menus the action is added to unless a different menu text is specified.
   * @param desc - The description of the action.
   * @param script - The filename of the script to execute, or the actual text of the script to execute.
   * @param [isFile=true] - If true, then script is assumed to contain a filename, otherwise script is assumed to be the actual script.
   * @param [shortcut=“”] - The default keyboard shortcut for the action.
   * @param [iconFile=“”] - The path of an image file that will be the icon for the action.
   */
  addCustomAction (text: string, desc: string, script: string, isFile?: boolean, shortcut?: string, iconFile?: string): string;

  /**
   * Clears the active menu.
   */
  clearActiveMenu (): void;

  /**
   * @returns A pointer to the action object of the given class type.
   * @example
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Find the 'New File' action and print its accelerator to the log file
   * var oAction = oMgr.findAction( "DzNewAction" );
   * if( oAction ){
   * 	print( oAction.text, ": ", oAction.shortcut );
   * }
   * @param className - The class name of the action to find.
   */
  findAction (className: string): DzAction;

  /**
   * @returns The index of the custom action with the given identifier (if any), otherwise -1.
   * @param guid - The globally unique identifier (name) of the custom action to find.
   */
  findCustomAction (guid: string): number;

  /**
   * @returns The action that toggles visibility of the given DzPane class (if any), otherwise NULL.
   * @example
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Find the action for the 'Smart Content' pane and print its accelerator to the log file
   * var oAction = oMgr.findPaneAction( "DzSmartContentPane" );
   * if( oAction ){
   * 	print( oAction.text, ": ", oAction.shortcut );
   * }
   * @since 4.8.1.18
   * @param className - The class name of the DzPane to find the action for.
   */
  findPaneAction (className: string): DzAction;

  /**
   * @returns The persistent menu of the given class type (if any), otherwise NULL.
   * @param className - The class name of the persistent menu to find.
   */
  findPersistentMenu (className: string): DzPersistentMenu;

  /**
   * @returns The action that activates the given DzViewTool subclass (if any), otherwise NULL.
   * @example
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Find the action for the 'Universal' tool and print its accelerator to the log file
   * var oAction = oMgr.findViewToolAction( "DzUniversalTool" );
   * if( oAction ){
   * 	print( oAction.text, ": ", oAction.shortcut );
   * }
   * @since 4.8.1.18
   * @param className - The class name of the DzViewTool to find the action for.
   */
  findViewToolAction (className: string): DzAction;

  /**
   * @returns The action at the given index (if any), otherwise NULL.
   * @example
   * var oAction;
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Go through the list of actions and print their accelerators to the log file
   * var nActions = oMgr.getNumActions();
   * for( var i = 0; i < nActions; i++ ){
   * 	oAction = oMgr.getAction( i );
   * 	print( oAction.text, ": ", oAction.shortcut );
   * }
   * @param which - The index of the action to return.
   */
  getAction (which: number): DzAction;

  /**
   * @returns The currently set active menu (if any), otherwise NULL.
   */
  getActiveMenu (): DzActionMenu;

  /**
   * @returns The index of the custom action with the given GUID; creates a custom action if one does not already exist.
   * @param guid - The globally unique identifier (name) of the custom action to get.
   */
  getCustomAction (guid: string): number;

  /**
   * @returns The description for the custom action at the given index (if any), otherwise an empty string.
   * @param which - The index of the custom action to get the description of.
   */
  getCustomActionDesc (which: number): string;

  /**
   * @returns The path to the file for the custom action at the given index (if any) if the custom action refers a file, otherwise an empty string.
   * @param which - The index of the custom action to get the filename for.
   */
  getCustomActionFile (which: number): string;

  /**
   * @returns The icon file for the custom action at the given index.
   * @param which - The index of the custom action to get the icon file for.
   */
  getCustomActionIcon (which: number): string;

  /**
   * @returns The globally unique identifier for the custom action at the given index (if any), otherwise an empty string.
   * @param which - The index of the custom action to get the name of.
   */
  getCustomActionName (which: number): string;

  /**
   * @returns The script code executed by the custom action or an empty string if the custom action refers to a file (if any), otherwise an empty string.
   * @param which - The index of the custom action to get information for.
   */
  getCustomActionScript (which: number): string;

  /**
   * @returns The keyboard shortcut for the custom action at the given index (if any), otherwise an empty string.
   * @param which - The index of the custom action to return the shortcut for.
   */
  getCustomActionShortcut (which: number): string;

  /**
   * @returns The text for the custom action at the given index (if any), otherwise an empty string.
   * @param which - The index of the custom action to get the text for.
   */
  getCustomActionText (which: number): string;

  /**
   * @returns The Main Menu for the application.
   */
  getMenu (): DzActionMenu;

  /**
   * @returns The number of action items in the application.
   */
  getNumActions (): number;

  /**
   * @returns The number of custom actions in the action manager.
   */
  getNumCustomActions (): number;

  /**
   * @returns The number of persistent menus in the application.
   */
  getNumPersistentMenus (): number;

  /**
   * @returns The persistent menu at the specified index (if any), otherwise NULL.
   * @param which - The index of the persistent menu to return.
   */
  getPersistentMenu (which: number): DzPersistentMenu;

  /**
   * Builds the main menu, pane menus and tool bars from the given file.
   * @returns true if the file was successfully loaded, otherwise false.
   * @since 4.6.0.78
   * @param filename - The name of the interface file to load.
   * @param overrideDefaults - Whether or not default triggers (i.e. version numbers on menus) cause certain items to be rebuilt using their defaults.
   */
  loadInterfaceFile (filename: string, overrideDefaults: boolean): boolean;

  /**
   * Deprecated
   * Exists only to keep old code from crashing. Do not use in new code. Use the overload that takes two arguments instead.
   * @param filename - 
   */
  loadInterfaceFile (filename: string): boolean;

  /**
   * Removes all custom actions from the application.
   */
  removeAllCustomActions (): void;

  /**
   * Removes the custom action at the given index.
   * @param which - The index of the custom action to remove.
   */
  removeCustomAction (which: number): void;

  /**
   * Saves the actions to the given file.
   * @returns true if the file was saved successfully, otherwise false.
   * @param filename - The name of the file to save the interface settings to.
   */
  saveActionsFile (filename: string): boolean;

  /**
   * Saves the actions to the given file.
   * @returns true if the file was saved successfully, otherwise false.
   * @param filename - The name of the file to save the interface settings to.
   */
  saveCustomActionsFile (filename: string): boolean;

  /**
   * Saves the actions, menus and toolbars to their respective files in the default location.
   * @returns true if the files were saved successfully, otherwise false.
   * @seealso saveActionsFile()
   * saveMenusFile()
   * saveToolBarsFile()
   * saveInterfaceFiles()
   */
  saveInterfaceFiles (): boolean;

  /**
   * Saves the main menu, pane menus to the given file.
   * @returns true if the file was saved successfully, otherwise false.
   * @param filename - The name of the file to save the interface settings to.
   */
  saveMenusFile (filename: string): boolean;

  /**
   * Saves the tool bars to the given file.
   * @returns true if the file was saved successfully, otherwise false.
   * @param filename - The name of the file to save the interface settings to.
   */
  saveToolBarsFile (filename: string): boolean;

  /**
   * @example
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Set the accelerator for the 'New File' action to be the 'Ctrl' key and the 'N' key
   * oMgr.setAccel( "DzNewAction", "Ctrl+N" );
   * @param className - The name of the action class to set the accelerator for.
   * @param key - The string representation of the accelerator.
   */
  setAccel (className: string, key: string): void;

  /**
   * Sets the active menu, so that actions relying on the active menu can get it. This may be called before the menu exec() call to allow context for script actions.
   * @param menu - The menu to set as the active menu.
   */
  setActiveMenu (menu: DzActionMenu): void;

  /**
   * Deprecated
   * Exists only to keep old code from crashing. Do not use in new code. Use setCustomActionShortcut() instead.
   * @param which - 
   * @param shortcut - 
   */
  setCustomActionAccel (which: number, shortcut: string): void;

  /**
   * Sets the description for the custom action at the given index.
   * @param which - The index of the custom action to set the description for.
   * @param desc - The description of the custom action.
   */
  setCustomActionDesc (which: number, desc: string): void;

  /**
   * Sets the icon for the custom action at the given index.
   * @param which - The index of the custom action to set the icon file for.
   * @param iconFile - The path of the image file that will be loaded for the action's icon. The path can be absolute, or relative to DzApp::getResourcesPath().
   */
  setCustomActionIcon (which: number, iconFile: string): void;

  /**
   * Sets the script for the custom action at the given index.
   * @param which - The index of the custom action to set the script for.
   * @param script - The script to set as the Custom action's script.
   * @param [isFile=true] - If true, script contains the name of a script file that should be loaded. If false, script contains the code for the action's script.
   */
  setCustomActionScript (which: number, script: string, isFile?: boolean): void;

  /**
   * Sets the keyboard shortcut for the custom action at the given index.
   * @since 4.9.4.102
   * @param which - The index of the custom action to set the shortcut for.
   * @param shortcut - The string representation of the shortcut.
   */
  setCustomActionShortcut (which: number, shortcut: string): void;

  /**
   * Sets whether or not the text of the action is displayed with the icon for the custom action at the given index.
   * @param which - The index of the custom action to set.
   * @param onOff - If true, the text of the action is always displayed with the icon (e.g., in toolbars).
   */
  setCustomActionShowTextWithIcon (which: number, onOff: boolean): void;

  /**
   * Sets the text for the custom action at the given index.
   * @param which - The index of the custom action to set the text for.
   * @param text - The new text for the action.
   */
  setCustomActionText (which: number, text: string): void;

  /**
   * @example
   * var oMgr = MainWindow.getActionMgr();
   *  
   * // Unset the accelerator for the action using 'Control + N'
   * oMgr.unsetAccel( "Ctrl+N" );
   * @param key - The accelerator to remove from actions in the app.
   */
  unsetAccel (key: string): void;

  customActionAdded: Signal<{
    /**
     * Emitted when a custom action is added to the action manager.
     * @param name - 
     */
  (name: string): void;
  }>;
  customActionListChanged: Signal<{
    /**
     * Emitted when custom actions are added to or removed from the action manager.
     */
  (): void;
  }>;
  customActionRemoved: Signal<{
    /**
     * Emitted when a custom action is removed from the action manager.
     * @param name - 
     */
  (name: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/activitylayout_dz
 * Defines the layout of an Activity of the interface.
 * @remarks Defines the layout of Toolbars, Pane Groups, Panes, Viewports and the active View Tool within an Activity of the interface.
 * @seealso DzPaneMgr, DzPaneGroup, DzPane, DzToolBar, DzDockBar, DzActionMgr and DzViewportMgr
 */
interface DzActivityLayout extends QObject, DzRefCountedItem
{

  /**
   * The description of the activity
   */
  description: string

  /**
   * The label of the activity
   */
  label: string

  /**
   * Clears the memorized state of the activity.
   */
  clearMemorizedState (): void;

  /**
   * @returns Whether or not the toolbar with the given name is enabled for this activity layout.
   * @param toolbar - 
   */
  isToolBarEnabled (toolbar: string): boolean;

  /**
   * Sets whether or not the toolbar with the given name is enabled.
   * @param toolbar - 
   * @param onOff - 
   */
  setToolbarEnabled (toolbar: string, onOff: boolean): void;

  labelChanged: Signal<{
    /**
     * Emitted when the layout's label has changed.
     * @param label - The new label for the layout.
     */
  (label: string): void;
  }>;
}

declare var DzActivityLayout:
{
  prototype: DzActivityLayout;

  /**
   * Default Constructor. Creates a new activity layout with the given name and description.
   * @param label - The label that the user will see for this layout in the activity tabs
   * @param desc - The description of the layout.
   */
  new (label: string, desc: string): DzActivityLayout;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/addblend_dz
 * An additive image blending operation.
 * @remarks TODO: Add detailed description.
 */
interface DzAddBlend extends DzImageBlend
{

}

declare var DzAddBlend:
{
  prototype: DzAddBlend;

  /**
   * Default Constructor.
   */
  new (): DzAddBlend;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alembicexporter_dz
 * Class for exporting to the Alembic (*.abc) format.
 * @seealso DzExportMgr::findExporterByClassName()
 * DzExportMgr::findExporter()
 * @attention This class is provided by the Alembic Exporter for DAZ Studio plugin.
 */
interface DzAlembicExporter extends DzExporter
{

}

declare var DzAlembicExporter:
{
  prototype: DzAlembicExporter;

  /**
   * Default Constructor.
   */
  new (): DzAlembicExporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alphablend_dz
 * A blending operation that uses the alpha channel of the source image to blend it into the destination.
 * @remarks TODO: Add detailed description.
 */
interface DzAlphaBlend extends DzImageBlend
{

}

declare var DzAlphaBlend:
{
  prototype: DzAlphaBlend;

  /**
   * Default Constructor
   */
  new (): DzAlphaBlend;
}

/**
 * http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/app_dz
 * The main application object.
 * @remarks Derived from QApplication, this class embodies the main event loop, and owns application-wide settings and objects not directly related to the user interface.
 * Can be directly accessed using the global variable App.
 */
interface DzApp extends QObject
{

  /**
   * The current graphical systems available in the application.
   */
  /**
   * No interface or graphical subsystem is initialized.
   */
  readonly NoInterface: number;

  /**
   * The OpenGL subsystem is initialized without a user interface.
   */
  readonly NoInterfaceWithOpenGL: number;

  /**
   * The user interface and all graphical subsystems are initialized.
   */
  readonly FullInterface: number;

  /**
   * The operating system.
   */
  /**
   * An unknown operating system.
   */
  readonly Unknown: number;

  /**
   * An unknown version of Windows.
   */
  readonly WindowsUnknown: number;

  /**
   * The Windows 95 operating system.
   */
  readonly Windows95: number;

  /**
   * The Windows 98 operating system.
   */
  readonly Windows98: number;

  /**
   * The Windows Me operating system.
   */
  readonly WindowsMe: number;

  /**
   * The Windows 2000 operating system.
   */
  readonly Windows2000: number;

  /**
   * The Windows XP operating system.
   */
  readonly WindowsXP: number;

  /**
   * The Windows 2003 operating system.
   */
  readonly Windows2003: number;

  /**
   * The Windows Vista operating system.
   */
  readonly WindowsVista: number;

  /**
   * The Windows 7 operating system.
   */
  readonly Windows7: number;

  /**
   * The Windows 8 operating system.
   */
  readonly Windows8: number;

  /**
   * The Windows 8.1 operating system.
   */
  readonly Windows8_1: number;

  /**
   * The Windows 10 operating system.
   */
  readonly Windows10: number;

  /**
   * An unknown version of the Macintosh operating system.
   */
  readonly MacUnknown: number;

  /**
   * The OS X 10.0 (Cheetah) operating system.
   */
  readonly Mac10_0: number;

  /**
   * The OS X 10.1 (Puma) operating system.
   */
  readonly Mac10_1: number;

  /**
   * The OS X 10.2 (Jaguar) operating system.
   */
  readonly Mac10_2: number;

  /**
   * The OS X 10.3 (Panther) operating system.
   */
  readonly Mac10_3: number;

  /**
   * The OS X 10.4 (Tiger) operating system.
   */
  readonly Mac10_4: number;

  /**
   * The OS X 10.5 (Leopard) operating system.
   */
  readonly Mac10_5: number;

  /**
   * The OS X 10.6 (Snow Leopard) operating system.
   */
  readonly Mac10_6: number;

  /**
   * The OS X 10.7 (Lion) operating system.
   */
  readonly Mac10_7: number;

  /**
   * The OS X 10.8 (Mountain Lion) operating system.
   */
  readonly Mac10_8: number;

  /**
   * The OS X 10.9 (Mavericks) operating system.
   */
  readonly Mac10_9: number;

  /**
   * The OS X 10.10 (Yosemite) operating system.
   */
  readonly Mac10_10: number;

  /**
   * The OSX 10.11 (El Capitan) operating system.
   */
  readonly Mac10_11: number;

  /**
   * The OSX 10.12 (Sierra) operating system.
   */
  readonly Mac10_12: number;

  /**
   * The platforms the application can run on.
   */
  /**
   * Supported Microsoft Windows Operating Systems.
   */
  readonly Windows: number;

  /**
   * Supported Apple Macintosh OS X Operating Systems.
   */
  readonly MacOSX: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly GeneralRelease: number;

  /**
   * TODO: Add description.
   */
  readonly PublicBuild: number;

  /**
   * TODO: Add description.
   */
  readonly PublishingBuild: number;

  /**
   * TODO: Add description.
   */
  readonly PrivateBuild: number;

  /**
   * TODO: Add description.
   */
  readonly DevBuild: number;

  /**
   * The available editions of the application.
   */
  /**
   * The free edition of the application.
   */
  readonly Free: number;

  /**
   * The standard edition of the application.
   */
  readonly Standard: number;

  /**
   * The advanced edition of the application.
   */
  readonly Advanced: number;

  /**
   * The pro edition of the application.
   */
  readonly Pro: number;

  /**
   * The alpha edition of the application.
   */
  readonly Alpha: number;

  /**
   * The beta edition of the application.
   */
  readonly Beta: number;

  /**
   * Holds the name of the application; i.e., “DAZ Studio”. (Read Only)
   */
  appName: string

  /**
   * Holds the name of the cloud service; i.e., “Daz Connect”. (Read Only)
   * @since 4.9.0.26
   */
  cloudName: string

  /**
   * Holds the exit code returned by the application. (Read Only)
   * @since 4.9.3.51
   */
  exitCode: number

  /**
   * Holds the size, in bytes, of the log file.
   * @since 4.9.4.70
   */
  logSize: number

  /**
   * Holds a string representation of the full product version number; i.e., major.minor.revision.build. (Read Only)
   */
  longVersionString: string

  /**
   * Holds the name of the organization; i.e., “DAZ 3D”. (Read Only)
   */
  orgName: string

  /**
   * Holds the arguments passed to the application on launch. (Read Only)
   * @since 4.9.3.39
   */
  scriptArgs: Array<String>

  /**
   * Holds the full product version number as an encoded 32-bit integer. (Read Only) Deprecated
   * Use version64 instead.
   */
  version: number

  /**
   * Holds the full product version number as an encoded 64-bit integer. (Read Only)
   */
  version64: number

  /**
   * Holds a string representation of the product version number; i.e., major.minor. (Read Only)
   */
  versionString: string

  /**
   * TODO: Add description.
   * @param name - 
   */
  addSessionFileLoad (name: string): void;

  /**
   * @returns A numeric representation of the bit architecture the application was compiled for.
   */
  bitArchitecture (): number;

  /**
   * @returns A user-friendly string representation of the bit architecture the application was compiled for.
   */
  bitArchitectureString (): string;

  /**
   * @returns A string representation of the byte size.
   * @example
   * // The message will be written to the log file
   * print( App.byteSizeToString( 1073741824 ) ); //1.0 GB
   * @param bytes - The numeric value to convert into a string.
   */
  byteSizeToString (bytes: number): string;

  /**
   * @returns true if the Scene Builder dialog would be displayed, otherwise false.
   * @since 4.6.2.69
   * @param [definition=undefined] - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be checked. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
   */
  canShowSceneBuilder (definition?: Object): boolean;

  /**
   * Forces a deletion of all objects currently waiting to be deleted to free up more memory. If you are using this to clear memory you will generally want to clear the Undo Stack first.
   * @seealso DzUndoStack::clearAll()
   * @param doProgress - If true, a progress dialog will be shown to the user while the operation is taking place.
   */
  clearDelayedDeleteStack (doProgress: boolean): void;

  /**
   * @returns A string representing a message digest. The string is formatted as five hexadecimal fields separated by '-', i.e. “xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx” where 'x' is a hexidecimal digit.
   * @param tokens - 
   */
  createDigest (tokens: Array<unknown>): string;

  /**
   * @returns A string representing a message digest. The string is formatted as five hexadecimal fields separated by a hyphen ('-'), i.e. “xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx” where 'x' is a hexidecimal digit.
   * @param data - 
   */
  createDigest (data: ByteArray): string;

  /**
   * @returns A string representing a randomly generated Universally Unique IDentifier (UUID). The string is formatted as five hexadecimal fields separated by '-' and enclosed in curly braces, i.e. “{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}” where 'x' is a hexidecimal digit.
   */
  createUuid (): string;

  /**
   * Write a debug message to the application log file.
   * @seealso log(), warning()
   * @param msg - The debug message to write to the log.
   */
  debug (msg: string): void;

  /**
   * Posts an event that causes the application to exit.
   * @since 4.6.2.55
   * @param [exitCode=0] - The exit code to set. (since 4.9.3.51)
   */
  delayedExit (exitCode?: number): void;

  /**
   * @param onOff - If true, multi-threaded features are enabled, otherwise multi-threaded features are disabled.
   */
  enableMultiThreading (onOff: boolean): void;

  /**
   * Writes any currently buffered log messages to the log file. This is automatically called whenever the log buffer has more than 512 characters of data, but can be called at any time to force all messages to be written out.
   */
  flushLogBuffer (): boolean;

  /**
   * Searches in default locations for a script file of the given name.
   * @returns The absolute path of the found script file (if any), otherwise an empty string.
   * @seealso getGeneratedScriptsPath()
   * getScriptsPath()
   * @param scriptName - The name/path of a script file to find. This can be a file name, a relative file path, or an absoulte file path.
   */
  getAbsoluteScriptPath (scriptName: string): string;

  /**
   * @returns The absolute path of the application data directory for the current machine user, the current major version of the application and the current release cycle of the application.
   * Attention:
   * This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
   * @seealso getDAZDataPath()
   * getApplicationBaseName()
   * versionString
   * releaseCycleSuffix()
   */
  getAppDataPath (): string;

  /**
   * @returns The base name of the application; e.g., “Studio”.
   * @since 4.9.2.33
   */
  getApplicationBaseName (): string;

  /**
   * Deprecated
   * Use the DzAppSettings class now instead.
   * @returns The application-wide persistent Settings Manager - used to set and retrieve application settings.
   */
  getAppSettingsMgr (): DzAppSettingsMgr;

  /**
   * @returns The application-wide Asset I/O Manager in charge of native format assets.
   */
  getAssetIOMgr (): DzAssetIOMgr;

  /**
   * @returns The application-wide Asset Manager.
   */
  getAssetMgr (): DzAssetMgr;

  /**
   * @returns The application-wide Authentication Manager - responsible for tracking user authentication.
   */
  getAuthenticationMgr (): DzAuthenticationMgr;

  /**
   * @returns The application-wide Call Back Manager - responsible for tracking call back objects.
   */
  getCallBackMgr (): DzCallBackMgr;

  /**
   * @returns The absolute path of the public/shared user documents folder.
   * Attention:
   * This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
   */
  getCommonUserDocumentPath (): string;

  /**
   * @returns The application-wide Content Manager.
   */
  getContentMgr (): DzContentMgr;

  /**
   * @returns The current author (user that is currently running the app).
   */
  getCurrentAuthor (): DzAuthor;

  /**
   * @returns The name of the data folder under the content directory.
   */
  getDataFolderName (): string;

  /**
   * @returns The full path for the location where data is stored.
   */
  getDataFolderPath (): string;

  /**
   * @returns The base path for the location where data is stored.
   */
  getDataFolderPathBase (): string;

  /**
   * @returns The absolute path of the data directory for DAZ 3D.
   * Attention:
   * This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
   * @seealso orgName
   */
  getDAZDataPath (): string;

  /**
   * @returns The application-wide Device Manager - responsible for devices supported by the application.
   */
  getDeviceMgr (): DzDeviceMgr;

  /**
   * @returns The active modal widget or the application main window if one exists.
   */
  getDialogParent (): QWidget;

  /**
   * @returns The absolute path of the directory where application documentation files are stored.
   * @seealso getHomePath()
   */
  getDocumentationPath (): string;

  /**
   * @returns The absolute path of the user documents folder for the application.
   * Attention:
   * This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
   */
  getDocumentsPath (): string;

  /**
   * @returns The application-wide Export Manager in charge of file exporters.
   */
  getExportMgr (): DzExportMgr;

  /**
   * @returns The application-wide File I/O Preset Manager.
   */
  getFileIOPresetMgr (): DzFileIOPresetMgr;

  /**
   * @returns The absolute path of the directory where support script files that are automatically generated are stored.
   * @seealso getAppDataPath()
   */
  getGeneratedScriptsPath (): string;

  /**
   * @returns The absolute path of the application data directory for automatically generated shaders.
   * @seealso getAppDataPath()
   */
  getGeneratedShadersPath (): string;

  /**
   * @returns An enumerated value representing the current graphics mode.
   */
  getGraphicsMode (): number;

  /**
   * @returns The application-wide Help Manager.
   */
  getHelpMgr (): DzHelpMgr;

  /**
   * @returns The absolute path of the directory that contains the application executable.
   */
  getHomePath (): string;

  /**
   * @returns The application-wide Image Manager - responsible for image I/O and tracking of currently loaded images.
   */
  getImageMgr (): DzImageMgr;

  /**
   * @returns The application-wide Import Manager in charge of file importers.
   */
  getImportMgr (): DzImportMgr;

  /**
   * @returns The main interface widget if the application is running with an interface, otherwise NULL.
   * @seealso Global::MainWindow
   */
  getInterface (): DzMainWindow;

  /**
   * Last directory that files were loaded or saved to/from.
   * @seealso setLoadSavePath()
   */
  getLoadSavePath (): string;

  /**
   * @returns The application-wide Video and Audio Manager - responsible for video and audio I/O.
   */
  getMultiMediaMgr (): DzMultiMediaMgr;

  /**
   * @returns The application-wide Plug-in Manager - responsible for tracking plug-ins.
   */
  getPluginMgr (): DzPluginMgr;

  /**
   * @returns The absolute path of the base directory where plug-ins are loaded from.
   * @seealso getHomePath()
   */
  getPluginsPath (): string;

  /**
   * @returns The absolute path of the machine's global program data directory for the organization.
   * Attention:
   * This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
   * @seealso orgName
   */
  getProgramDataPath (): string;

  /**
   * @returns The application-wide Render Manager.
   */
  getRenderMgr (): DzRenderMgr;

  /**
   * @returns The absolute path of the directory where application resource files are stored.
   * @seealso getHomePath()
   */
  getResourcesPath (): string;

  /**
   * @returns The application-wide Save Filter Manager in charge of save filters.
   */
  getSaveFilterMgr (): DzSaveFilterMgr;

  /**
   * @returns The absolute path of the directory where support script files are stored.
   * @seealso getHomePath()
   */
  getScriptsPath (): string;

  /**
   * @returns The absolute path of the base directory for all shaders.
   * @seealso getHomePath()
   */
  getShadersPath (): string;

  /**
   * Get the application wide style.
   * @returns The application-wide style object. This pointer is subject to becoming invalid if the application style changes.
   */
  getStyle (): DzStyle;

  /**
   * @returns The name of the style definition currently in use.
   */
  getStyleDefinition (): string;

  /**
   * @returns A list of the available style definitions.
   */
  getStyleDefinitionList (): Array<String>;

  /**
   * Get a filename for temporary storage.
   * @returns A unique filename (with no extension) whose path will be in the current temporary working folder. (All files in this folder will be deleted when shutdown() is called)
   */
  getTempFilename (): string;

  /**
   * @returns The absolute path of the directory where temporary files are stored.
   * @seealso getAppDataPath()
   * setTempPath()
   * restoreDefaultTempPath()
   */
  getTempPath (): string;

  /**
   * Get a filename for temporary storage of rendered images.
   * @returns A filename (with no extension) whose path will be in the current temporary working folder. (All files in this folder will be deleted when shutdown() is called)
   */
  getTempRenderFilename (): string;

  /**
   * @returns The absolute path of the base directory for all binary utilities.
   * @seealso getHomePath()
   */
  getUtilitiesPath (): string;

  /**
   * @returns true if the application is in the process of shutting down, otherwise false.
   */
  isClosing (): boolean;

  /**
   * @returns true if key is currently pressed, otherwise false.
   * @param key - The Qt::Key value for the key to check.
   */
  isKeyDown (key: number): boolean;

  /**
   * @returns true if sequence is currently pressed, otherwise false.
   * @param sequence - A string consistent with {QKeySequence, fromString}, in the PortableText format.
   */
  isKeySequenceDown (sequence: string): boolean;

  /**
   * @returns true if the user has chosen to enable multi-threaded features, otherwise false.
   */
  isMultiThreadingEnabled (): boolean;

  /**
   * @returns true if a valid serial number has been provided, otherwise false.
   */
  isRegistered (): boolean;

  /**
   * @returns true if the main event loop is running and events that are posted can be expected to be delivered, otherwise false.
   */
  isRunning (): boolean;

  /**
   * @returns true if the application is running as a slave to another application, otherwise false.
   */
  isSlave (): boolean;

  /**
   * @returns true if the application is in the process of starting up, otherwise false.
   */
  isStarting (): boolean;

  /**
   * Write a message to the application log file.
   * @example
   * //The message will be written to the log file
   * App.log( "Hello World!" );
   * @seealso statusLine()
   * @param buffer - The string to write to the log file.
   */
  log (buffer: string): void;

  /**
   * SHIFT		   = 0x02000000
   * CTRL			= 0x04000000
   * ALT			 = 0x08000000
   * META			= 0x10000000
   *  
   * META + SHIFT	= 0x12000000
   * META + CTRL	 = 0x14000000
   * META + ALT	  = 0x18000000
   * SHIFT + CTRL	= 0x06000000
   * SHIFT + ALT	 = 0x0A000000
   * CTRL + ALT	  = 0x0C000000
   * @returns The current modifier key state - this value is a bitwise or of the Qt::Modifier flags for the active keys, if any.
   * @example
   * var shftKey = App.modifierKeyState() & 0x02000000;
   * var ctrlKey = App.modifierKeyState() & 0x04000000;
   * var altKey = App.modifierKeyState() & 0x08000000;
   * var metaKey = App.modifierKeyState() & 0x10000000;
   *  
   * if( shftKey ){
   * 	print( "Shift pressed." );
   * }
   *  
   * if( ctrlKey ){
   * 	print("Control pressed.");
   * }
   *  
   * if( altKey ){
   * 	print("Alt pressed.");
   * }
   *  
   * if( metaKey ){
   * 	print("Meta pressed.");
   * }
   */
  modifierKeyState (): number;

  /**
   * @returns The enumerated value associated with the OperatingSystem that the application is running under.
   */
  operatingSystem (): number;

  /**
   * @returns A user-readable string that describes the current Operating System.
   */
  operatingSystemString (): string;

  /**
   * The application is intended to be as platform independent as possible, but there are cases where something needs to be done differently on one platform or another. This function provides a simple way to check which platform the application is running under.
   * @returns The enumerated value associated with the Platform that the application is running under.
   * @example
   * var nPlatform = App.platform();
   * if( nPlatform == App.Windows ){
   * 	//doWinSomething();
   * } else if( nPlatform == App.MacOSX ){
   * 	//doMacSomething();
   * }
   */
  platform (): number;

  /**
   * Posts an event that causes execution of a script as it is encountered in the event stack.
   * @since 4.10.0.101
   * @param evaluate - If script is actual code, set this to true, otherwise set this to false.
   * @param script - This can be a file name, a relative file path, an absoulte file path or code. If passed a file name or path, getAbsoluteScriptPath() is used to resolve it. If passed actual code, evaluate must also be set to true.
   * @param [args=[]] - The list of arguments to pass to the script.
   */
  postScriptEvent (evaluate: boolean, script: string, args?: Array<String>): void;

  /**
   * @returns The enumerated value associated with the ReleaseCycle of the application.
   */
  releaseCycle (): number;

  /**
   * @returns A user-friendly string describing the release cycle of the application.
   */
  releaseCycleString (): string;

  /**
   * @returns The enumerated value associated with the ReleaseEdition of the application.
   */
  releaseEdition (): number;

  /**
   * @returns A user-friendly string describing the release edition of the application.
   */
  releaseEditionString (): string;

  /**
   * Restores the temporary files directory to the default location.
   * @seealso setTempPath()
   * getTempPath()
   */
  restoreDefaultTempPath (): void;

  /**
   * Set the default directory for loading or saving files.
   * @example
   * //Set the load/save path to our favorite folder
   * App.setLoadSavePath( "c:/MyScenes" );
   * @seealso getLoadSavePath()
   * @param dir - The default directory for loading/saving files.
   */
  setLoadSavePath (dir: string): void;

  /**
   * Sets the current style for the application.
   * @returns true if the application switched to the given style, otherwise false.
   * @param name - The name of the style definition to use.
   */
  setStyleDefinition (name: string): boolean;

  /**
   * Sets the directory path where temporary files are stored. The path provided needs to be an absolute path. A directory will be created at the new location if it does not already exist.
   * @returns true if the path provided is valid and changing the temporary path succeeded. false if any errors occurred.
   * @seealso getTempPath()
   * restoreDefaultTempPath()
   * @param tempPath - The path of the new temporary files directory.
   */
  setTempPath (tempPath: string): boolean;

  /**
   * A convenience method for opening a showing a file/directory in the OS file browser.
   * @returns true if the file exists and the OS file browser could be launched, otherwise false.
   * @param absFilePath - The absolute file path to a file or folder to show.
   */
  showInNativeBrowser (absFilePath: string): boolean;

  /**
   * @returns true if the application should prompt the user for input, otherwise false.
   */
  showPrompts (): boolean;

  /**
   * Displays the Scene Builder dialog.
   * @returns If asEvent is false, a list of the selections made by the user in the Scene Builder dialog, otherwise an empty list. (since 4.6.4.62)
   * @seealso sceneBuilderRejected(), sceneBuilderAccepted()
   * @since 4.6.2.69
   * @param [definition=undefined] - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be used. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
   * @param [asEvent=false] - If false (default), the Scene Builder configuration data is processed immediately. If false, the the Scene Builder configuration data is posted to an event and processed as it is encountered in the event stack. (since 4.6.4.62)
   */
  showSceneBuilder (definition?: Object, asEvent?: boolean): Array<unknown>;

  /**
   * A convenience method for browsing to a given URL.
   * @example
   * 
   * @param url - The url to open in the system's default browser. Be sure to specify the scheme of the url (e.g., 'http:' or 'file:').
   */
  showURL (url: string): void;

  /**
   * Display a message in the current status interface.
   * @example
   * //The message will be displayed in status bar and written to the log file
   * App.statusLine( "Hello World!" );
   * @seealso log()
   * @param msg - The string to be displayed (and logged if logging is enabled)
   * @param [writeToLog=true] - If true, the message will also be written the the log file.
   */
  statusLine (msg: string, writeToLog?: boolean): void;

  /**
   * @returns true if the application is using a user interface.
   */
  usingInterface (): boolean;

  /**
   * Write a warning message to the application log file.
   * @seealso log(), debug()
   * @param msg - The message to write to the log as a warning.
   */
  warning (msg: string): void;

  /**
   * Saves out a user configuration script to the given filename. If no filename is given, the script is saved to the same file read from in startup(). The run() function calls this at the end of each execution.
   * @returns true if the file was written successfully.
   * @param [configScriptFilename=“”] - The name of the file to save a configuration script to.
   */
  writeConfigScript (configScriptFilename?: string): boolean;

  closing: Signal<{
    /**
     * Emitted immediately after the main event loop exits.
     */
  (): void;
  }>;
  debugMsg: Signal<{
    /**
     * Emitted when a debug message is sent to the application.
     * @param msg - 
     */
  (msg: string): void;
  }>;
  eventLoopStarted: Signal<{
    /**
     * Emitted when the event loop is started on the application.
     */
  (): void;
  }>;
  mouseEvent: Signal<{
    /**
     * Emitted when a MouseButtonDblClick or MouseButtonRelease event occurs on the application.
     */
  (): void;
  }>;
  multiThreadingChanged: Signal<{
    /**
     * Emitted when multi-threading has changed on the application.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  sceneBuilderAccepted: Signal<{
    /**
     * Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
     * @since 4.6.4.62
     * @param selections - 
     */
  (selections: Array<unknown>): void;
  }>;
  sceneBuilderRejected: Signal<{
    /**
     * Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
     * @since 4.6.4.62
     */
  (): void;
  }>;
  starting: Signal<{
    /**
     * Emitted after the application has finished its startup just before the main event loop begins.
     */
  (): void;
  }>;
  styleAboutToChange: Signal<{
    /**
     * Emitted when a the style is about to change on the application.
     */
  (): void;
  }>;
  styleChanged: Signal<{
    /**
     * Emitted when the application wide style has changed.
     * @param newStyle - 
     */
  (newStyle: DzStyle): void;
  }>;
  warningMsg: Signal<{
    /**
     * Emitted when a warning message is sent to the application.
     * @param msg - 
     */
  (msg: string): void;
  }>;
}

declare namespace DzApp
{

  /**
   * The current graphical systems available in the application.
   */
  /**
   * No interface or graphical subsystem is initialized.
   */
  export const NoInterface: number;
  /**
   * The OpenGL subsystem is initialized without a user interface.
   */
  export const NoInterfaceWithOpenGL: number;
  /**
   * The user interface and all graphical subsystems are initialized.
   */
  export const FullInterface: number;

  /**
   * The operating system.
   */
  /**
   * An unknown operating system.
   */
  export const Unknown: number;
  /**
   * An unknown version of Windows.
   */
  export const WindowsUnknown: number;
  /**
   * The Windows 95 operating system.
   */
  export const Windows95: number;
  /**
   * The Windows 98 operating system.
   */
  export const Windows98: number;
  /**
   * The Windows Me operating system.
   */
  export const WindowsMe: number;
  /**
   * The Windows 2000 operating system.
   */
  export const Windows2000: number;
  /**
   * The Windows XP operating system.
   */
  export const WindowsXP: number;
  /**
   * The Windows 2003 operating system.
   */
  export const Windows2003: number;
  /**
   * The Windows Vista operating system.
   */
  export const WindowsVista: number;
  /**
   * The Windows 7 operating system.
   */
  export const Windows7: number;
  /**
   * The Windows 8 operating system.
   */
  export const Windows8: number;
  /**
   * The Windows 8.1 operating system.
   */
  export const Windows8_1: number;
  /**
   * The Windows 10 operating system.
   */
  export const Windows10: number;
  /**
   * An unknown version of the Macintosh operating system.
   */
  export const MacUnknown: number;
  /**
   * The OS X 10.0 (Cheetah) operating system.
   */
  export const Mac10_0: number;
  /**
   * The OS X 10.1 (Puma) operating system.
   */
  export const Mac10_1: number;
  /**
   * The OS X 10.2 (Jaguar) operating system.
   */
  export const Mac10_2: number;
  /**
   * The OS X 10.3 (Panther) operating system.
   */
  export const Mac10_3: number;
  /**
   * The OS X 10.4 (Tiger) operating system.
   */
  export const Mac10_4: number;
  /**
   * The OS X 10.5 (Leopard) operating system.
   */
  export const Mac10_5: number;
  /**
   * The OS X 10.6 (Snow Leopard) operating system.
   */
  export const Mac10_6: number;
  /**
   * The OS X 10.7 (Lion) operating system.
   */
  export const Mac10_7: number;
  /**
   * The OS X 10.8 (Mountain Lion) operating system.
   */
  export const Mac10_8: number;
  /**
   * The OS X 10.9 (Mavericks) operating system.
   */
  export const Mac10_9: number;
  /**
   * The OS X 10.10 (Yosemite) operating system.
   */
  export const Mac10_10: number;
  /**
   * The OSX 10.11 (El Capitan) operating system.
   */
  export const Mac10_11: number;
  /**
   * The OSX 10.12 (Sierra) operating system.
   */
  export const Mac10_12: number;

  /**
   * The platforms the application can run on.
   */
  /**
   * Supported Microsoft Windows Operating Systems.
   */
  export const Windows: number;
  /**
   * Supported Apple Macintosh OS X Operating Systems.
   */
  export const MacOSX: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const GeneralRelease: number;
  /**
   * TODO: Add description.
   */
  export const PublicBuild: number;
  /**
   * TODO: Add description.
   */
  export const PublishingBuild: number;
  /**
   * TODO: Add description.
   */
  export const PrivateBuild: number;
  /**
   * TODO: Add description.
   */
  export const DevBuild: number;

  /**
   * The available editions of the application.
   */
  /**
   * The free edition of the application.
   */
  export const Free: number;
  /**
   * The standard edition of the application.
   */
  export const Standard: number;
  /**
   * The advanced edition of the application.
   */
  export const Advanced: number;
  /**
   * The pro edition of the application.
   */
  export const Pro: number;
  /**
   * The alpha edition of the application.
   */
  export const Alpha: number;
  /**
   * The beta edition of the application.
   */
  export const Beta: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/appsettings_dz
 * Provides cross-platform support for persistent application settings.
 * @remarks Application Settings are used to store and retrieve settings that persist from one execution of the appliction to the next. On Windows, the settings are saved in the registry. On Mac, these settings are saved via Mac preference plist files.
 * You can create an instance of this class any time you need to read or write persistent settings. This class is a replacement for DzAppSettingsMgr as it is easier and safer to use. Since each instance is separate, the current path of one instance will not affect the rest of the application. It is also not necessary to call popPath() to put this class back into its previous state.
 */
interface DzAppSettings extends DzBase
{

  /**
   * @returns true if this settings contains the named value, otherwise false.
   * @param key - The name of the value to check.
   */
  containsValue (key: string): boolean;

  /**
   * Read a boolean value from the given key.
   * @returns The value of the requested key.
   * @seealso setBoolValue()
   * @param key - The name of the value to read.
   * @param [def=false] - Default value - this value is returned if the named value fails to be read.
   */
  getBoolValue (key: string, def?: boolean): boolean;

  /**
   * Read a color value from the given key.
   * @returns The value of the requested key.
   * @seealso setColorValue()
   * @param key - The name of the value to read.
   * @param [def=Color] - Default value - this value is returned if the named value fails to be read.
   */
  getColorValue (key: string, def?: Color): Color;

  /**
   * Read a float color value from the given key.
   * @returns The value of the requested key.
   * @seealso setColorValue()
   * @param key - The name of the value to read.
   * @param [def=DzFloatColor] - Default value - this value is returned if the named value fails to be read.
   */
  getFloatColorValue (key: string, def?: DzFloatColor): DzFloatColor;

  /**
   * Read a floating point value from the given key.
   * @returns The value of the requested key.
   * @seealso setFloatValue()
   * @param key - The name of the value to read.
   * @param [def=0.0] - Default value - this value is returned if the named value fails to be read.
   */
  getFloatValue (key: string, def?: number): number;

  /**
   * Read a integer value from the given key.
   * @returns The value of the requested key.
   * @seealso setIntValue()
   * @param key - The name of the value to read.
   * @param [def=0] - Default value - this value is returned if the named value fails to be read.
   */
  getIntValue (key: string, def?: number): number;

  /**
   * Read a string value from the given key.
   * @returns The value of the requested key.
   * @seealso setStringValue()
   * @param key - The name of the value to read.
   * @param [def=“”] - Default value - this value is returned if the named value fails to be read.
   */
  getStringValue (key: string, def?: string): string;

  /**
   * Pops a temporary key path off the top of the stack.
   */
  popPath (): void;

  /**
   * Sets the current key path temporarily to the given path; popPath() can be called to remove this path.
   * @param path - The sub-path to add to the current key path.
   */
  pushPath (path: string): void;

  /**
   * Removes a setting by name.
   * @returns true if the key/value existed and was successfully removed, otherwise false.
   * @param key - The name of the key to remove.
   */
  removeValue (key: string): boolean;

  /**
   * Sets a key with a boolean value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getBoolValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setBoolValue (key: string, setting: boolean): boolean;

  /**
   * Sets a key with a color value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getColorValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setColorValue (key: string, setting: Color): boolean;

  /**
   * Sets a key with a float color value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getFloatColorValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setFloatColorValue (key: string, setting: DzFloatColor): boolean;

  /**
   * Sets a key with a floating point value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getFloatValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setFloatValue (key: string, setting: number): boolean;

  /**
   * Sets a key with a integer value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getIntValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setIntValue (key: string, setting: number): boolean;

  /**
   * Sets a key with a string value.
   * @returns true if the key/value was successfully set, otherwise false.
   * @seealso getStringValue()
   * @param key - The name of the key to write.
   * @param setting - The value to set.
   */
  setStringValue (key: string, setting: string): boolean;

}

declare var DzAppSettings:
{
  prototype: DzAppSettings;

  /**
   * Default Constructor - creates a new settings object that starts out at the default application path.
   */
  new (): DzAppSettings;

  /**
   * @param startPath - creates a new settings object that pushes the given path onto the default application path. This is the same as using the default constructor and then calling pushPath() with the given path.
   */
  new (startPath: string): DzAppSettings;
}
interface Array<T>
{
    /**
        * Pushes one or more elements onto the end (right) of the array, if it doesn't already exist in the array.
        * @returns The new length of the array.
        * @example
        * var aTemp = [ "a", "b", "c", "d" ];
        * aTemp.pushIfNotExists( "e" );
        * // aTemp == [ "a", "b", "c", "d", "e" ]
        * @param element1 - The first element to append to the array.
        * @param _ - Optional additional element(s) to insert into the array.
        */
    pushIfNotExists (element1: T, ..._: T[]): number;
}

/**
 * http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/arrayhelper_dz
 * Convenience object to make working with an Array object easier.
 * @remarks TODO: Add detailed description.
 */
interface DzArrayHelper extends QObject
{

  /**
   * @returns A copy of list with object appended if object did not already exist in list
   * @param list - The Array to append object to
   * @param value - The Object to append to list
   */
  addToArray<T> (list: Array<T>, value: T): Array<unknown>;

  /**
   * @returns The index into list if object was found, otherwise -1
   * @param list - The Array to check for object
   * @param value - The Object to check list for
   */
  isInArray<T> (list: Array<T>, value: T): number;

  /**
   * @returns The index into list if object was found, otherwise -1
   * @param list - The Array to check for object
   * @param obj - The Object to check list for; using the objects .name property
   */
  isInArrayByName<T> (list: Array<T>, obj: T): number;

}

declare var DzArrayHelper:
{
  prototype: DzArrayHelper;

  /**
   * Default Constructor
   */
  new (): DzArrayHelper;
}

/**
 * http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/asset_dz
 * An abstraction between the presentation of a content file and the file on disk.
 * @remarks An “Asset” serves as an abstraction between the presentation of a content file and the actual file that resides on disk; it is a “container” for information about a content file.
 * At a minimum, an asset contains a reference to the relative path and filename of a file.
 * Metadata
 * When the Content Management System (CMS) is active, an asset provides an interface to its metadata within the content database. This metadata includes information such as what type of asset it is, what it is used for, what it is compatible with, which category(ies) it is presented to the user in, etc.
 * Conceptually, each asset belongs to exactly one “Product”. By default, and until/unless modified, all newly created assets are assigned to the “LOCAL USER” product. An asset is uniquely identified within a product by the combination of its relative path and filename. While any number of products can reference a file with the same relative path and filename combination, each product's concept of that combination is unique (even if their metadata is identical).
 * The metadata for a given asset is divided into 2 distinct types; that which is owned and/or maintained by the vendor (the originating source), and that which is owned and/or maintained by the end-user. Unless the metadata component (e.g., userKeywords, userNotes, etc), the product (e.g., “LOCAL USER”), or the store (e.g., “LOCAL USER”) indicate “user” in their name, any assumption (if there is to be one) about which type the data is should be that which is owned and/or maintained by the vendor.
 * The metadata for an asset that is “installed” and which belongs to a product associated with a “Store” (source) other than the “LOCAL USER” store is owned by the vendor. Conversely, the metadata for an asset that is created by the user and/or belongs to a product associated with the “LOCAL USER” store is owned by the user. The exceptions to this are those attributes which integrate “user” into their name; which in fact always belong to the user.
 * The significance of the distinction between the 2 types of metadata comes down to how the data is handled during an update and whether or not an effort is made to preserve it. Metadata that is owned and/or maintained by the vendor can be summarily purged during an update. This provides a vendor with the means to clean up all potential prior versions of the metadata witout being faced with complex bookkeeping tasks.
 * @seealso DzAssetMgr
 * DzProductAssetContainer
 * DzContentMgr
 */
interface DzAsset extends QObject, DzRefCountedItem
{

  /**
   * Holds the asset identifier for this asset. (Read Only)
   */
  assetID: Object

  /**
   * Holds the name for this asset. (Read Only)
   */
  assetName: string

  /**
   * Holds the vendor intended audience for this asset.
   * @since 4.8.1.97
   */
  audience: number

  /**
   * Holds a list of all categories that this asset is in. (Read Only)
   * @since 4.9.0.2
   */
  categories: Array<unknown>

  /**
   * Holds whether the companion file (if any) is a DAZ Script. (Read Only)
   */
  companionIsScript: boolean

  /**
   * Holds the full path to the folder the companion file is in. (Read Only)
   */
  companionPath: string

  /**
   * Holds a list of all compatibility bases that this asset is compatible with. (Read Only)
   * @since 4.9.0.2
   */
  compatibilities: Array<unknown>

  /**
   * Holds the [vendor] compatibility base for this asset.
   * @since 4.8.1.97
   */
  compatibilityBase: string

  /**
   * Holds the [vendor] content type for this asset.
   * @since 4.8.1.97
   */
  contentType: string

  /**
   * Holds the date this asset was created. (Read Only)
   * @since 4.9.0.2
   */
  dateCreated: Date

  /**
   * Holds the date this asset was last modified. (Read Only)
   * @since 4.9.0.2
   */
  dateLastModified: Date

  /**
   * Holds the vendor description for this asset.
   * @since 4.8.1.97
   */
  description: string

  /**
   * Holds the name displayed to the user for this asset. (Read Only)
   * @since 4.9.0.20
   */
  displayName: string

  /**
   * Holds the group identifier for the asset. 0 = default, < 0 = app defined, > 0 = user defined.
   * @since 4.9.0.11
   */
  groupId: number

  /**
   * Holds whether this asset has metadata provided by the cloud. (Read Only)
   * @since 4.9.0.2
   * @returns true if metadata for the asset came from the cloud, otherwise false.
   * @since 4.9.0.2
   */
  hasCloudMetadata: boolean

  /**
   * Holds whether this asset is a non-native file and a DAZ Script or native file with the same basename exists in the same directory. (Read Only)
   */
  hasCompanion: boolean

  /**
   * Holds whether this asset is a non-native file and a DAZ Script with the same basename exists in the same directory. (Read Only)
   */
  hasCompanionScript: boolean

  /**
   * Holds whether this asset should be hidden in asset views.
   * @since 4.9.0.2
   */
  hidden: boolean

  /**
   * Holds the icon path for this asset. (Read Only)
   */
  icon: Pixmap

  /**
   * Holds whether this asset can be installed from the cloud. (Read Only)
   * @since 4.9.0.20
   */
  isCloudInstallable: boolean

  /**
   * Holds whether this asset is installed from the cloud. (Read Only)
   * @since 4.9.0.20
   */
  isCloudInstalled: boolean

  /**
   * Holds whether this asset is managed by the cloud. (Read Only)
   * @since 4.9.0.2
   * @returns true if this asset is installed by the cloud, otherwise false.
   * @since 4.9.0.2
   */
  isCloudOwned: boolean

  /**
   * Holds whether this asset is installed in the database. (Read Only)
   * @since 4.9.0.20
   */
  isInstalled: boolean

  /**
   * Holds whether the metadata for this asset is valid. (Read Only)
   * @since 4.9.0.2
   * @returns true if the metadata is valid, otherwise false.
   * @since 4.8.1.97
   */
  isMetadataValid: boolean

  /**
   * Holds whether this asset is a native DAZ Studio file. (Read Only)
   */
  isNative: boolean

  /**
   * Holds whether this asset is a native DAZ Studio script file. (Read Only)
   */
  isScript: boolean

  /**
   * Holds whether this asset is a symbolic link. (Read Only)
   * @returns true if the asset is a symbolic link, otherwisefalse.
   */
  isSymLink: boolean

  /**
   * Holds whether this asset is owned by a vendor or by the user. (Read Only)
   * @since 4.9.0.2
   */
  isVendor: boolean

  /**
   * Holds whether this asset needs to be installed from the cloud. (Read Only)
   * @since 4.9.0.20
   */
  needsCloudInstall: boolean

  /**
   * Holds whether this asset needs to be updated from the cloud. (Read Only)
   * @since 4.9.0.2
   * @returns true if the asset has an update available from the cloud, otherwise false.
   * @since 4.9.0.2
   */
  needsCloudUpdate: boolean

  /**
   * Holds the original filename for this asset. (Read Only)
   * @since 4.8.1.97
   */
  orginalFilename: string

  /**
   * Holds the original path for this asset. (Read Only)
   * @since 4.8.1.97
   */
  orginalPath: string

  /**
   * Holds the Globally Unique Identifier (GUID) for the product this asset belongs to. (Read Only)
   * @since 4.11.0.193
   */
  productGUID: string

  /**
   * Holds the product identifier for the product that this asset belongs to. (Read Only)
   * @since 4.9.0.55
   */
  productID: string

  /**
   * Holds the name of the product this asset belongs to. (Read Only)
   * @since 4.9.0.55
   */
  productName: string

  /**
   * Holds the base of the product path in the cloud folder for cloud assets. (Read Only)
   * @since 4.9.3.83
   */
  productPath: string

  /**
   * Holds the icon path for this asset. (Read Only)
   */
  smallIcon: Pixmap

  /**
   * Holds the store identifier for the product that this asset belongs to. (Read Only)
   * @since 4.11.0.193
   */
  storeID: string

  /**
   * Holds the path that the symbolic link is referencing (if any).
   */
  symLinkPath: string

  /**
   * Holds the URL for this asset. (Read Only)
   */
  url: string

  /**
   * Holds the encoded URL for this asset. (Read Only)
   */
  urlEncoded: string

  /**
   * Holds a list of user owned categories that this asset is in. (Read Only)
   * @since 4.9.0.2
   */
  userCategories: Array<unknown>

  /**
   * Holds a list of user owned compatibility bases that this asset is compatible with. (Read Only)
   * @since 4.9.0.2
   */
  userCompatibilities: Array<unknown>

  /**
   * Holds the user keywords for this asset.
   * @since 4.9.0.2
   */
  userKeywords: Array<unknown>

  /**
   * Holds a list of vendor owned categories that this asset is in. (Read Only)
   * @since 4.9.0.2
   */
  vendorCategories: Array<unknown>

  /**
   * Holds a list of vendor owned compatibility bases that this asset is compatible with. (Read Only)
   * @since 4.9.0.2
   */
  vendorCompatibilities: Array<unknown>

  /**
   * Holds the vendor keywords for this asset.
   * @since 4.9.0.2
   */
  vendorKeywords: Array<unknown>

  /**
   * Sets the compatibility bases that this asset is compatible with.
   * @since 4.9.0.2
   * @param bases - The list of compatibility bases this asset is compatible with.
   * @param [create=false] - If true, creates compatibility bases that do not exist. If false, compatibility will only be established for compatibility bases that already exist.
   */
  addCompatibilities (bases: Array<unknown>, create?: boolean): void;

  /**
   * Sets the categories for this asset.
   * @since 4.9.0.2
   * @param categories - The list of categories to add this asset to.
   * @param [create=false] - If true, creates categories that do not exist. If false, only categories that already exist will be assigned.
   */
  addToCategories (categories: Array<unknown>, create?: boolean): void;

  /**
   * Sets the asset as belonging to the default group identifier; 0.
   * @since 4.9.0.11
   */
  clearGroup (): void;

  /**
   * Forces the icon to reload.
   */
  forceImageReload (): void;

  /**
   * @returns The url of this asset as a local file path.
   */
  getAsLocalFile (): string;

  /**
   * @returns The base file extension for the asset; without any encryption extension.
   */
  getBaseExtension (): string;

  /**
   * @returns The extension to use for DAZ Studio file link
   * @since 4.9.0.30
   */
  getDSLinkExtension (): string;

  /**
   * @returns The text that is placed inside a DAZ Studio file link.
   * @since 4.9.0.30
   */
  getDSLinkText (): string;

  /**
   * @returns The asset container that owns this asset.
   */
  getOwner (): DzAbstractAssetContainer;

  /**
   * @returns The product that this asset belongs to.
   * @since 4.9.0.2
   */
  getProduct (): DzProductAssetContainer;

  /**
   * @returns The relative file path for the asset.
   */
  getRelativeFilePath (): string;

  /**
   * @returns true if the asset is a member of group, otherwise false.
   * Attention:
   * 0 = default, < 0 = app defined, > 0 = user defined
   * @since 4.9.0.11
   * @param id - 
   */
  isGroup (id: number): boolean;

  /**
   * Loads the default icon for the asset.
   * @returns true on success, otherwise false.
   * @param delayLoad - If true, loading of the icon is delayed.
   */
  loadDefaultIcon (delayLoad: boolean): boolean;

  /**
   * @returns A map of the key value pairs in a DAZ Studio link file.
   * @since 4.9.0.30
   * @param linkPath - The path of the file to read from.
   */
  readLinkData (linkPath: string): Object;

  /**
   * Removes the compatibility bases that this asset is compatible with.
   * @since 4.9.2.53
   * @param bases - The list of compatibilities to remove from this asset.
   * @param [isVender=false] - If true, the compatibilities being looked up are owned by the vendor.
   */
  removeCompatibilities (bases: Array<unknown>, isVender?: boolean): void;

  /**
   * Removes the asset from the categories.
   * @since 4.9.2.53
   * @param categories - The list of categories to remove this asset from.
   * @param [isVender=false] - If true, the categories being looked up are owned by the vendor.
   */
  removeFromCategories (categories: Array<unknown>, isVender?: boolean): void;

  /**
   * Changes the name of this asset.
   * @returns true if the operation is successful, otherwise false.
   * @param name - The new name for the asset.
   */
  rename (name: string): boolean;

  /**
   * @returns true if a DAZ Studio file link to this asset is saved, otherwise false.
   * Attention:
   * Will overwrite and add correct extension if possible.
   * @since 4.9.0.30
   * @param linkSavePath - The path of the file to save to.
   */
  saveDSLink (linkSavePath: string): boolean;

  /**
   * Sets whether existence of the asset should be ignored.
   * @param onOff - 
   */
  setIgnoreExists (onOff: boolean): void;

  /**
   * @returns This asset expressed as a DzUri.
   * @since 4.9.0.40
   */
  toUri (): DzUri;

  /**
   * @returns true if the asset is updated, otherwise false.
   * @since 4.9.2.69
   * @param [guid=“”] - The Globally Unique Identifier (GUID) for the product to update from. Leave empty to update using the current product if an association is already made.
   */
  updateFromMetadata (guid?: string): boolean;

  assetImageChanged: Signal<{
    /**
     * Emitted when the image for the asset has changed.
     * @param asset - The asset that the image changed on.
     */
  (asset: DzAsset): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetfileoutfilter_dz
 * Base class for saving DSON-based files.
 * @remarks An asset save filter for saving a file in the DSON format.
 */
interface DzAssetFileOutFilter extends DzAssetIOFilter
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiofilter_dz
 * Base class for all classes that save DSON-based scene settings.
 * @remarks Save filter classes save out a subset of scene settings in a DSON format such as poses, light sets, camera sets, etc.
 */
interface DzAssetIOFilter extends DzFileIO
{

  /**
   * Saves to a file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - 
   * @param startingDir - The full path of the file to save to.
   */
  doSave (filename: string, startingDir: string): DzError;

  /**
   * Saves to a file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @example
   * Export a DUF based Pose Preset.
   * var oAssetIOMgr = App.getAssetIOMgr();
   * var nAssetIOFilter = oAssetIOMgr.findFilter( "DzPoseAssetFilter" );
   * var oAssetIOFilter = oAssetIOMgr.getFilter( nAssetIOFilter );
   * if( oAssetIOFilter ){
   * 	var oSettings = new DzFileIOSettings();
   * 	//oAssetIOFilter.getDefaultOptions( oSettings );
   * 	oAssetIOFilter.getOptions( oSettings, false, "c:/test" );
   * 	oAssetIOFilter.doSave( oSettings, "test", "c:/" );
   * }
   * @param options - The options for the save.
   * @param filename - 
   * @param startingDir - The path of the file to export to.
   */
  doSave (options: DzFileIOSettings, filename: string, startingDir: string): DzError;

  /**
   * @returns The URI to use when referring to the given asset from a definition.
   * @param base - 
   */
  getAssetDefinitionUri (base: DzBase): DzUri;

  /**
   * @returns The URI to use when referring to the given asset from an instance.
   * @param base - 
   */
  getAssetInstanceUri (base: DzBase): DzUri;

  /**
   * @returns The compatibility base of the saved file.
   */
  getCompatiblityBase (): string;

  /**
   * @returns The content type of the saved file.
   */
  getContentType (): string;

  /**
   * @returns The name of the filter.
   */
  getDescription (): string;

  /**
   * @returns The path of the saved file.
   */
  getDoSavePath (): string;

  /**
   * @returns The last path used to load/save files with the filter.
   */
  getLoadSavePath (): string;

  /**
   * @returns The default relative path for saving files with this filter.
   */
  getStandardSaveRelativePath (): string;

  /**
   * @returns true if this filter saves support files, otherwise false.
   */
  isSupportAssetFilter (): boolean;

  /**
   * Sets the path to use for loading/saving files with this filter.
   * @param path - The path to set.
   */
  setLoadSavePath (path: string): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiomgr_dz
 * Manager of all scene setting save filter classes.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getAssetIOMgr().
 * @seealso Sample: Save Filter Settings
 */
interface DzAssetIOMgr extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly DefaultMethod: number;

  /**
   * TODO: Add description.
   */
  readonly OpenNew: number;

  /**
   * TODO: Add description.
   */
  readonly MergeFile: number;

  /**
   * @returns The index of the save filter with the given class name.
   * @param className - The class name of the save filter to find.
   */
  findFilter (className: string): number;

  /**
   * @returns The object for the given URI to a file instance during a file load.
   * @since 4.9.4.111
   * @param uri - 
   */
  findObjectInstance (uri: DzUri): QObject;

  /**
   * @returns A new instance of the i'th save filter in the list.
   * @param i - The index of the save filter to get.
   */
  getFilter (i: number): DzAssetIOFilter;

  /**
   * @returns The name of the i'th save filter.
   * @param i - The index of the save filter to get the name of.
   */
  getFilterName (i: number): string;

  /**
   * @returns The number of save filters currently supported.
   */
  getNumFilters (): number;

  /**
   * Loads an asset file.
   * @returns DZ_NO_ERROR if the file load was successful.
   * @seealso DzUri::fromLocalFilename()
   * loadFromUri()
   * @param filePath - The full path of the file to load.
   * @param [open=DzAssetIOMgr.DzOpenMethod.DefaultMethod] - The open method to use.
   * @param [filter=null] - The filter to use.
   */
  doLoad (filePath: string, open?: number, filter?: DzFileLoadFilter): DzError;

  /**
   * Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
   * @returns DZ_NO_ERROR if the file save was successful.
   * @param filterIndex - The index of the save filter to use.
   */
  doSave (filterIndex: number): DzError;

  /**
   * Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
   * @returns DZ_NO_ERROR if the file save was successful.
   * @param filter - The filter to use.
   * @param options - The options to use.
   * @param [saveOnly=false] - Whether to only save the file, or to also create an associated icon and assign metadata.
   * @param [filePath=“”] - The full path of the file to save to.
   * @param [startingDir=“”] - The path of the directory to start the save dialog in.
   * @param [category=“”] - The category to assign the saved file to.
   */
  doSaveWithOptions (filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly?: boolean, filePath?: string, startingDir?: string, category?: string): DzError;

  /**
   * Save the scene contents to a file. Prompts the user for a file to save to.
   * @returns DZ_NO_ERROR if the file save was successful.
   */
  doSceneSaveAs (): DzError;

  /**
   * @returns The default path for the DSON assets cache.
   */
  getDefaultDSONAssetCachePath (): string;

  /**
   * @returns The path that the DSON assets cache resides in.
   */
  getDSONAssetCachePath (): string;

  /**
   * @returns The last directory that files were loaded from.
   */
  getLoadPath (): string;

  /**
   * @returns The last directory that files were saved to.
   */
  getSavePath (): string;

  /**
   * Loads an asset from URI.
   * @returns DZ_NO_ERROR if the file load was successful.
   * @seealso doLoad()
   * @param fileUri - The URI of the file to load.
   * @param [open=DzAssetIOMgr.DzOpenMethod.DefaultMethod] - The open method to use.
   * @param [filter=null] - The filter to use.
   */
  loadFromUri (fileUri: DzUri, open?: number, filter?: DzFileLoadFilter): DzError;

  /**
   * @param cacheFullPath - The path to set for the DSON assets cache.
   */
  setDSONAssetCachePath (cacheFullPath: string): void;

  assetImported: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetImportStarting: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetSaved: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  missingNodeParent: Signal<{
    /**
     * TODO: Add description.
     * @param node - 
     * @param uri - 
     */
  (node: DzNode, uri: DzUri): void;
  }>;
}

declare namespace DzAssetIOMgr
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const DefaultMethod: number;
  /**
   * TODO: Add description.
   */
  export const OpenNew: number;
  /**
   * TODO: Add description.
   */
  export const MergeFile: number;

  /**
   * @returns The index of the save filter with the given class name.
   * @param className - The class name of the save filter to find.
   */
  export function findFilter (className: string): number;

  /**
   * @returns The object for the given URI to a file instance during a file load.
   * @since 4.9.4.111
   * @param uri - 
   */
  export function findObjectInstance (uri: DzUri): QObject;

  /**
   * @returns A new instance of the i'th save filter in the list.
   * @param i - The index of the save filter to get.
   */
  export function getFilter (i: number): DzAssetIOFilter;

  /**
   * @returns The name of the i'th save filter.
   * @param i - The index of the save filter to get the name of.
   */
  export function getFilterName (i: number): string;

  /**
   * @returns The number of save filters currently supported.
   */
  export function getNumFilters (): number;
}

/**
 * http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetmgr_dz
 * Content asset (database) manager.
 * @remarks The manager that is responsible for all content assets.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp::getAssetMgr().
 */
interface DzAssetMgr extends DzBase
{

  /**
   * Search options used to search assets with the Asset Manager.
   */
  /**
   * No options
   */
  readonly None: number;

  /**
   * A whole word search. Only works with file system based searches.
   */
  readonly WholeWord: number;

  /**
   * A Regular Expression search. Only works with file system based searches.
   */
  readonly RegExp: number;

  /**
   * Include native scene files (*.duf, *.dsf, *.daz) in the search.
   */
  readonly NativeScenes: number;

  /**
   * Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
   */
  readonly NativeScripts: number;

  /**
   * Include Poser Character files (*.cr2, *.crz) in the search.
   */
  readonly PoserFigures: number;

  /**
   * Include Poser Pose files (*.pz2, *.p2z) in the search.
   */
  readonly PoserPoses: number;

  /**
   * Include Poser Prop files (*.pp2, *.ppz) in the search.
   */
  readonly PoserProps: number;

  /**
   * Include Poser Hair files (*.hr2, *.hrz) in the search.
   */
  readonly PoserHair: number;

  /**
   * Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
   */
  readonly PoserFaces: number;

  /**
   * Include Poser Light files (*.lt2, *.ltz) in the search.
   */
  readonly PoserLights: number;

  /**
   * Include Poser Camera files (*.cm2, *.cmz) in the search.
   */
  readonly PoserCameras: number;

  /**
   * Include Poser Hand files (*.hd2, *.hdz) in the search.
   */
  readonly PoserHands: number;

  /**
   * Include Poser Material Collection files (*.mc6, *.mcz) in the search.
   */
  readonly PoserMaterials: number;

  /**
   * Include Poser Scene files (*.pz3, *.pzz) in the search.
   */
  readonly PoserScenes: number;

  /**
   * Include general import files in the search.
   */
  readonly ImportFiles: number;

  /**
   * Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
   */
  readonly AllNativeFiles: number;

  /**
   * Mask for no native files in the search.
   */
  readonly NoNativeFilesMask: number;

  /**
   * Include all Poser files in the search.
   */
  readonly AllPoserFiles: number;

  /**
   * Mask for no Poser files in the search.
   */
  readonly NoPoserFilesMask: number;

  /**
   * Search through all files.
   */
  readonly AllFiles: number;

  /**
   * Same as AllFiles.
   */
  readonly DefaultOptions: number;

  /**
   * @returns An escaped version of searchTerm
   * @param searchTerm - The search term to be escaped.
   */
  escapeSearchTerm (searchTerm: string): string;

  /**
   * @returns A string representing the portion of categoryPaths that is common.
   * @since 4.9.2.68
   * @param categoryPaths - The list of category paths to find a common path in. This can be a list of strings, or a list of lists of strings.
   * @param [flatten=false] - If true, the categories are processed as if they are a single list. If false (default), the deepest path common to all lists will be chosen. In either case, non-default categorization is preferred over default categorization.
   */
  findCommonBaseCategoryPath (categoryPaths: Array<unknown>, flatten?: boolean): string;

  /**
   * @returns The asset URI for node, or an empty string if node is null.
   * @param node - The node to get the asset URI for.
   */
  getAssetUriForNode (node: DzNode): string;

  /**
   * @returns An identifier for the top level categories container.
   */
  getCategoriesID (): string;

  /**
   * @returns A slash (“/”) delimited string version of the node's compatibility base path (if any), otherwise an empty string.
   * @param node - The node to get compatibility base for.
   */
  getCompatibilityBasePathForNode (node: DzNode): string;

  /**
   * @returns An identifier for the top level import formats container.
   */
  getImportDirID (): string;

  /**
   * @returns An identifier for the top level Poser formats container.
   */
  getPoserDirID (): string;

  /**
   * @returns The identifier for the virtual folder container within the top level Poser formats container.
   * @since 4.9.2.68
   */
  getPoserVirtualDirID (): Array<unknown>;

  /**
   * @returns An identifier for the top level products container.
   */
  getProductsID (): string;

  /**
   * @returns A string path/search combination or empty string if search is not in path.
   * @param path - The path to the file/folder that real, on disk, casing is desired for.
   * @param search - A file/folder in the path to get the on disk casing for.
   */
  getRealPathCasing (path: string, search: string): string;

  /**
   * @returns The relative metadata file path.
   * @since 4.9.4.31
   * @param store - The store ID for the product.
   * @param token - The token for the product.
   * @param title - The title of the product.
   * @param [extension=“dsx”] - The extension of the meta file.
   */
  getRelativeProductMetafilePath (store: string, token: string, title: string, extension?: string): string;

  /**
   * @returns A list of the folder names that are considered special, and thus handled in specific ways, in a Poser runtime.
   */
  getSpecialPoserFolders (): Array<unknown>;

  /**
   * @returns An identifier for the top level DAZ Studio formats container.
   */
  getStudioDirID (): string;

  /**
   * @returns A list of the folder names excluded when building the native user-facing folder structure.
   */
  getStudioExcludes (): Array<unknown>;

  /**
   * @returns The identifier for the virtual folder container within the top level DAZ Studio formats container.
   * @since 4.9.2.68
   */
  getStudioVirtualDirID (): Array<unknown>;

  /**
   * @returns A normalized version of type.
   * @param type - The path/type to be normalized.
   * @param [relative=true] - Whether or not this is a relative (or absolute) path.
   */
  normalizePath (type: string, relative?: boolean): string;

  /**
   * Saves user owned metadata to an XML file (or a series of XML files).
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param dirPath - The path to save user metadata files in.
   * @param filePrefix - The prefix for the filename sequence.
   */
  saveUserDBData (dirPath: string, filePrefix: string): DzError;

  /**
   * Sets the metadata associated with a file.
   * @since 4.9.0.17
   * @param filepath - The path of the file to set the metadata on.
   * @param contentType - The content type to set.
   * @param compatibleWith - The compatibility base the asset is an add-on for.
   * @param category - The category to put the asset in.
   * @param [assetNode=undefined] - The node to get the compatibility base from.
   * @param [compatiblityBase=“”] - The compatibility base to set; for add-ons to target.
   */
  setFileMetadata (filepath: string, contentType: string, compatibleWith: string, category: string, assetNode?: DzNode, compatiblityBase?: string): void;

  /**
   * @returns true if the currently connected Content Management Service (CMS) is of the type that can be started and stopped, otherwise false.
   */
  canStartAndStopCMS (): boolean;

  /**
   * Checks for new metadata scripts within the RunOnce directories.
   */
  checkforNewMetadataScripts (): void;

  /**
   * Removes all groups from all assets.
   * @param [notify=true] - If true, causes product and category containers to update.
   */
  clearAllGroupIDs (notify?: boolean): void;

  /**
   * Clears the metadata queue.
   */
  clearDBMetaFileQueue (): void;

  /**
   * Creates a compatibility base.
   * @returns A 64-bit integer used to identify base.
   * @param base - The compatibility base to create.
   */
  createCompatibilityBase (base: string): number;

  /**
   * Creates a new product.
   * @returns The product named name, from store storeID, with the token token. If a product with the storeID and token already exists, a new product will not be created and the existing product will be returned instead.
   * @since 4.9.3.39
   * @param name - The name for the product.
   * @param [storeID=“”] - The ID of the store for the product. If the store does not exist in the database or this arguement is empty (default), the “LOCAL USER” store will be used.
   * @param [token=“”] - The token (i.e., SKU) used to identify the product in the storeID store.
   */
  createProduct (name: string, storeID?: string, token?: string): DzProductAssetContainer;

  /**
   * Creates a new product from a list of assets.
   * @since 4.9.3.41
   * @param assets - The list of assets to create the product from.
   * @param [name=“”] - The name for the product. If empty (default), the user will be prompted to provide a name.
   */
  createProductFromAssets (assets: Array<unknown>, name?: string): DzProductAssetContainer;

  /**
   * Creates a new product from container and its children.
   * @since 4.9.3.39
   * @param container - The asset container to create the product from.
   * @param [name=“”] - The name for the product. If empty (default), the user will be prompted to provide a name.
   */
  createProductFromContainer (container: DzAbstractAssetContainer, name?: string): DzProductAssetContainer;

  /**
   * Attempts to create a store in the database.
   * @returns true if the store is successfully created, otherwise false.
   * Attention:
   * The “DAZ 3D” and “LOCAL USER” storeIDs are reserved. Attempting to create a store with either ID will fail immediately and return a value of false.
   * @seealso showMoreProductInfo()
   * @param storeID - The identifier for the store.
   * @param token - The value used within url to be replaced by a product's token.
   * @param url - The URL for the store.
   */
  createStore (storeID: string, token: string, url: string): boolean;

  /**
   * Creates a content type.
   * @returns A 64-bit integer used to identify type.
   * @param type - The content type to create.
   * @param defaultLoad - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
   */
  createType (type: string, defaultLoad: boolean): number;

  /**
   * Causes the category identified by idPath to update.
   * @param idPath - The id path of the category to update.
   */
  emitCategoryChanged (idPath: Array<unknown>): void;

  /**
   * @returns If fileName can be found, the physical path of the asset on disk, otherwise an empty string.
   * @param fileName - The short name of the file to find the asset path for.
   */
  findAssetPathFromShortFilename (fileName: string): string;

  /**
   * @returns A list of assets that relativePath refers to.
   * @since 4.9.2.69
   * @param relativePath - The relative path of a file to find assets for.
   * @param userFacing - Whether or not the file is user-facing.
   * @param installed - Whether or not the file is installed.
   */
  findAssetsForFile (relativePath: string, userFacing: boolean, installed: boolean): Array<unknown>;

  /**
   * @returns The id used to identify audience.
   * @param audience - 
   */
  findAudienceID (audience: string): number;

  /**
   * Attempts to find a compatibility base, and potentially create it if it doesn't already exist.
   * @returns A 64-bit integer used to identify base.
   * @param base - The compatibility base to find (or create).
   * @param [create=true] - If true, the compatibility base is created if it cannot be found.
   */
  findCompatibilityBaseID (base: string, create?: boolean): number;

  /**
   * @returns The product with the globally unique identifier guid, otherwise NULL.
   * @since 4.9.2.69
   * @param guid - The Globally Unique Identifier (GUID) of the product to find.
   */
  findProductByGuid (guid: string): DzProductAssetContainer;

  /**
   * @returns The product from store storeID with the token token, otherwise NULL.
   * @since 4.9.3.39
   * @param storeID - The identifier of the store for the product.
   * @param token - The token (i.e., SKU) used to identify the product in the store storeID.
   */
  findProductByStoreToken (storeID: string, token: string): DzProductAssetContainer;

  /**
   * @returns A list of products (if any) that are named name.
   * @since 4.9.3.39
   * @param name - The name of the products to find.
   */
  findProductsByName (name: string): Array<unknown>;

  /**
   * @returns A list of products that contain relativePath in their respective list of assets.
   * @since 4.8.1.73
   * @param relativePath - The relative path of a file to find products that contain it.
   */
  findProductsForFile (relativePath: string): Array<unknown>;

  /**
   * Attempts to find the identifier used to identify a content type.
   * @returns A 64-bit integer used to identify type.
   * @param type - The content type to find.
   * @param [create=false] - If true, the content type is created if it cannot be found.
   * @param [defaultLoad=false] - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
   */
  findTypeID (type: string, create?: boolean, defaultLoad?: boolean): number;

  /**
   * @returns The audience identified by id.
   * @param id - The unsigned 32-bit integer used to identify the audience.
   */
  getAudience (id: number): string;

  /**
   * @returns The list of available audiences.
   */
  getAudiences (): Array<unknown>;

  /**
   * @returns A top-level container with child containers that match the hierarchy of categories in the content database.
   */
  getCategories (): DzCategoryAssetContainer;

  /**
   * @returns The full slash (“/”) delimited path of the category (if any), otherwise an empty string.
   * @since 4.9.3.11
   * @param id - The 64-bit integer used to identify the category.
   */
  getCategoryPath (id: number): string;

  /**
   * @returns A JSON object consisting of options for the currently connected Content Management Service (CMS)
   */
  getCMSOptions (): Object;

  /**
   * @returns The compatibility base identified by id.
   * @param id - The 64-bit integer used to identify the compatibility base.
   */
  getCompatibilityBase (id: number): string;

  /**
   * @returns A top-level container with all of the mapped native content directories.
   */
  getContentDirs (): DzTopLevelAssetContainer;

  /**
   * @returns The Data Source Name (DSN) -i.e. “connection string”- for the PostgreSQL server if the server version is valid, otherwise an empty string.
   * @since 4.9.0.17
   */
  getDatabaseDsn (): string;

  /**
   * @returns The path on disk where database files are located; for backup purposes.
   */
  getDatabaseFilePath (): string;

  /**
   * @returns A list of metadata files queued for processing.
   */
  getDBMetaFileQueue (): Array<unknown>;

  /**
   * @returns The full path of the first category that the file at assetPath is assigned to.
   * @param assetPath - The path of the asset to find the first category for.
   * @param preferredCategory - The path of the category preferred if it exists and the asset at assetPath is assigned to it.
   */
  getFirstCategory (assetPath: string, preferredCategory: string): string;

  /**
   * @returns true if new products should be assigned to the “New” group, otherwise false.
   * @seealso setGroupNewProductsAsNew()
   * @since 4.9.0.23
   */
  getGroupNewProductsAsNew (): boolean;

  /**
   * @returns A top-level container with all of the mapped import content directories.
   */
  getImportDirs (): DzTopLevelAssetContainer;

  /**
   * @returns The maximum number of items returned by a file search.
   * @since 4.9.0.15
   */
  getMaxFileSearchResultSize (): number;

  /**
   * @returns The maximum number of items to show per page.
   */
  getNumMaxItemsPerPage (): number;

  /**
   * @returns A top-level container with all of the mapped Poser directories.
   */
  getPoserDirs (): DzTopLevelAssetContainer;

  /**
   * @returns A top-level container with child containers for intermediate alpha-numeric organization of products by name. Each intermediate container then has its respective children for the products in the content database.
   * @seealso Sample: Metadata : List Products
   */
  getProducts (): DzTopLevelAssetContainer;

  /**
   * Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
   * @returns A list of relative paths to the file if one can be made, otherwise and empty list
   * @seealso DzContentMgr::getRelativePaths()
   * @param absolutePath - The path to make relative.
   * @param useImportFolders - If true, the mapped import folders will also be searched.
   */
  getRelativePaths (absolutePath: string, useImportFolders: boolean): Array<unknown>;

  /**
   * @returns A list of root category paths.
   */
  getRootCategoryStrings (): Array<unknown>;

  /**
   * @returns true if hidden vendor categorizations are shown, otherwise false.
   * @since 4.9.3.4
   */
  getShowHiddenVendorCategorization (): boolean;

  /**
   * @returns A list of store identifiers.
   */
  getStoresIDs (): Array<unknown>;

  /**
   * @returns The token used in the URL for the store with the given storeID, to be replaced by a product's token.
   * @param storeID - 
   */
  getStoreToken (storeID: string): string;

  /**
   * @returns The URL for the store with the given storeID.
   * @param storeID - 
   */
  getStoreUrl (storeID: string): string;

  /**
   * @returns The content type identified by id.
   * @param id - The 64-bit integer used to identify the content type.
   */
  getType (id: number): string;

  /**
   * Performs a database lookup on a user-facing content file to get its content type.
   * @returns The content type of the file if the file is in the content database and is user-facing, otherwise an empty string.
   * @param fullPath - The path of the file to get the content type for.
   */
  getTypeForContentFile (fullPath: string): string;

  /**
   * Checks the given node for content type in its presentation (if any), falls back to a source file data item and performs a content database lookup on the path it specifies (if any), and finally falls back to the content file path of the node (if any) to find its content type.
   * @returns The content type for the node (if any), otherwise an empty string.
   * @param node - The node in the scene to get the contnet type of.
   */
  getTypeForNode (node: DzNode): string;

  /**
   * @returns A list of hierarchical, slash (“/”) delimited, content types
   */
  getTypes (): Array<unknown>;

  /**
   * @returns true if the PostgreSQL server version is valid and the DSN is non-empty, otherwise false.
   * @since 4.9.0.17
   * @seealso getDatabaseDsn()
   */
  haveDatabase (): boolean;

  /**
   * Causes metadata files at absoluteProductPaths to be imported.
   * @param productRelativePaths - 
   * @param [runSilent=false] - If true, the progress dialog will not be shown.
   * @param [markAsVendor=false] - The list of absolute paths to import product metadata from.
   */
  importMetadataFiles (productRelativePaths: Array<unknown>, runSilent?: boolean, markAsVendor?: boolean): Array<unknown>;

  /**
   * @returns true if type is of the base type of Clothing, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isClothingType (type: string): boolean;

  /**
   * @returns true if the Content Management Service (CMS) is currently connected, otherwise false.
   */
  isConnectedToCMS (): boolean;

  /**
   * @returns true if type is of the base type of Figure, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isFigureType (type: string): boolean;

  /**
   * @returns true if type is of a following type, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isFollowingType (type: string): boolean;

  /**
   * @returns true if type is of the base type of Hair, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isHairType (type: string): boolean;

  /**
   * @returns true if type is of a type that needs a base figure, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isNeedsBaseFigureType (type: string): boolean;

  /**
   * @returns true if type is a Preset for a Figure, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isPresetForFigureType (type: string): boolean;

  /**
   * @returns true if type is of the base type of Preset, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isPresetType (type: string): boolean;

  /**
   * @returns true if type is of the base type of Prop, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isPropType (type: string): boolean;

  /**
   * @returns true if type is of a replaceable type, otherwise false.
   * @seealso DzContentReplaceMgr
   * @param type - The content type to test.
   */
  isReplaceableType (type: string): boolean;

  /**
   * @returns true if the connected PostgreSQL database is currently being reset, otherwise false.
   * @since 4.9.0.17
   */
  isResettingDatabase (): boolean;

  /**
   * @returns true if the database is currently synchronizing, otherwise false.
   * 4.9.3.71
   */
  isSynchronizing (): boolean;

  /**
   * Signals that categories need to be updated.
   */
  markCategoriesChanged (): void;

  /**
   * Signals that products need to be updated.
   */
  markProductsChanged (): void;

  /**
   * Causes the metadata file at productRelativePath to be processed and category containers to update.
   * @param productRelativePath - The relative product path to import metadata from.
   * @param [runSilent=false] - If true, the progress dialog will not be shown.
   * @param [markAsVendor=false] - If true, the data is considered vendor owned.
   * @param [groupAsNew=true] - If true, the product/assets are grouped as “New”.
   */
  processDBMetaFile (productRelativePath: string, runSilent?: boolean, markAsVendor?: boolean, groupAsNew?: boolean): Array<unknown>;

  /**
   * Causes the metadata file at productRelativePath to be processed, without causing category containers to update.
   * @param productRelativePath - The relative product path to import metadata from.
   * @param [runSilent=false] - If true, the progress dialog will not be shown.
   * @param [markAsVendor=false] - If true, the data is considered vendor owned.
   * @param [groupAsNew=true] - If true, the assets are grouped as “New”.
   */
  processDBMetaFileNoEmit (productRelativePath: string, runSilent?: boolean, markAsVendor?: boolean, groupAsNew?: boolean): Array<unknown>;

  /**
   * If metadata files are queued, causes the metadata import dialog to be displayed and allows the user to select which products to process metadata for, then starts the import process on the selected products.
   */
  processDBMetaFileQueue (): void;

  /**
   * Adds the file at productRelativePath to the metadata queue.
   * @param productRelativePath - 
   */
  queueDBMetaFile (productRelativePath: string): void;

  /**
   * Causes the internal list of root categories to be rebuilt.
   */
  refreshCategoryRoots (): void;

  /**
   * Causes the internal list of stores to be rebuilt.
   */
  refreshStores (): void;

  /**
   * Causes the internal list of content types to be rebuilt
   */
  refreshTypes (): void;

  /**
   * Causes all *.dsx metadata files in the “./Runtime/Support” folder of each mapped native and Poser content directory to be queued, and then imported.
   */
  reimportDBMetaFiles (): void;

  /**
   * Removes assets in list that have been orphaned (no longer exist) from the database.
   * @since 4.9.0.17
   * @param list - The list of DzAsset to check whether the files still exist.
   */
  removeOrphanedAssetReferences (list: Array<unknown>): void;

  /**
   * Attempts to remove a store from the database.
   * @returns true if the store is successfully removed, otherwise false.
   * Attention:
   * The “DAZ 3D” and “LOCAL USER” storeIDs are reserved. Attempting to remove a store with either ID will fail immediately and return a value of false.
   * @since 4.9.1.24
   * @param storeID - The identifier for the store to remove.
   */
  removeStore (storeID: string): boolean;

  /**
   * Triggers the connected PostgreSQL server to reset (delete) the current database and re-establish the default content types, compatibility bases, and categories.
   * Attention:
   * Stops all running searches and logs the current user out, if needed.
   * @since 4.9.0.17
   */
  resetDatabase (): void;

  /**
   * Performs a user-facing file scan, ultimately mapping any directories found to contain compatible content.
   * @param options - A bitwise OR of the options to use for filtering the file scan.
   * @param assignToGroup - If true, groups any found files as “New”.
   * @param addToCategory - If true, found files are assigned to the “Scan Results” category.
   * @param onlyNewToCategory - If true, only “new” files are assigned to the “Scan Results” category.
   */
  scanFiles (options: number, assignToGroup: boolean, addToCategory: boolean, onlyNewToCategory: boolean): void;

  /**
   * Performs a user-facing file search on the mapped content directories.
   * @returns A container consisting of DzAsset instances for any files found during the search.
   * @param filename - The name of the file to search for.
   * @param options - A bitwise OR of the options to use for filtering the results.
   */
  searchFiles (filename: string, options: number): DzSearchContainer;

  /**
   * Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are compatible with the compatibility base of the specified asset.
   * @returns A container consisting of any DzAsset instances found during the search.
   * @since 4.9.0.32
   * @param asset - The context asset; the asset to find addons for.
   * @param filterText - The text to use for filtering the results.
   * @param categories - A list of category paths to use for filtering the results.
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForAssetAddOns (asset: DzAsset, filterText: string, categories: Array<unknown>, sorting: number): DzSearchContainer;

  /**
   * Performs a user-facing asset search on the content database.
   * @returns A container consisting of any DzAsset instances found during the search.
   * @since 4.9.0.32
   * @param filterText - The text to use for filtering the results.
   * @param categories - A list of category paths to use for filtering the results.
   * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
   * @param contentTypes - A list of content types to use for filtering the results.
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForAssets (filterText: string, categories: Array<unknown>, compatibilityBases: Array<unknown>, contentTypes: Array<unknown>, sorting: number): DzSearchContainer;

  /**
   * Performs a user-facing asset search on the content database.
   * @returns A container consisting of any DzAsset instances found during the search.
   * @since 4.9.0.32
   * @param keywords - The keywords to use for filtering the results.
   * @param options - A bitwise OR of the options to use for filtering the results.
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForAssetsByKeywords (keywords: string, options: number, sorting: number): DzSearchContainer;

  /**
   * @returns A search container containing the assets matching the criteria specified.
   * @since 4.9.1.17
   * @param categoryPath - The full path of the category to search for assets.
   * @param [userFacing=true] - Whether or not to limit the search to user-facing assets. (since 4.9.3.56)
   * @param [installed=true] - Whether or not to limit the search to installed assets. (since 4.9.3.56)
   */
  searchForAssetsInCategory (categoryPath: string, userFacing?: boolean, installed?: boolean): DzSearchContainer;

  /**
   * Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are the compatibility base of the specified asset.
   * @returns A container consisting of any DzAsset instances found during the search.
   * @since 4.9.0.32
   * @param asset - The context asset; the asset to find targets for.
   * @param filterText - The text to use for filtering the results.
   * @param categories - A list of category paths to use for filtering the results.
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForAssetTargets (asset: DzAsset, filterText: string, categories: Array<unknown>, sorting: number): DzSearchContainer;

  /**
   * Performs a user-facing asset search on the content database, where the results are confined to a specified product.
   * @returns A container consisting of any DzAsset instances found during the search.
   * @since 4.9.0.32
   * @param product - The context product; the product to filter results by.
   * @param filterText - The text to use for filtering the results.
   * @param categories - A list of category paths to use for filtering the results.
   * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
   * @param contentTypes - A list of content types to use for filtering the results.
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForProductAssets (product: DzProductAssetContainer, filterText: string, categories: Array<unknown>, compatibilityBases: Array<unknown>, contentTypes: Array<unknown>, sorting: number): DzSearchContainer;

  /**
   * @returns A container consisting of any DzProductAssetContainer instances found during the search.
   * @since 4.9.0.32
   * @param filterText - The text to use for filtering the results.
   * @param categories - A list of category paths to use for filtering the results.
   * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
   * @param contentTypes - A list of content types to use for filtering the results.
   * @param installStateFlags - The install state flags to use for filtering the results.   *         - None = 0x0,   *         - Installed = 0x1,   *         - NotInstalled = 0x2,   *         - Damaged = 0x4,   *         - NeedsUpdate = 0x8,   *         - Pending = 0x10,   *         - Any = Installed | NotInstalled | Damaged | NeedsUpdate | Pending
   * @param sorting - The sorting filter index to use for ordering the results.   *         - 0 = None,   *         - 1 = Name,   *         - 2 = Date Purchased,   *         - 3 = Date Installed,   *         - 4 = Date Created,   *         - 5 = Release Date,   *         - 6 = Last Update,   *         - 7 = Group ID,   *         - 8 = Product ID (SKU),   *         For Descending add 0x80000000 to the value
   */
  searchForProducts (filterText: string, categories: Array<unknown>, compatibilityBases: Array<unknown>, contentTypes: Array<unknown>, installStateFlags: number, sorting: number): DzProductHolderContainer;

  /**
   * Sets the options for the Content Management Service (CMS), if it is of the type that can accept options.
   * @param clusterDirectory - The path of the directory that contains the database files.
   * @param port - The port number to use for connecting to the database server.
   */
  setCMSOptions (clusterDirectory: string, port: number): void;

  /**
   * @seealso getGroupNewProductsAsNew()
   * @since 4.9.0.23
   * @param onOff - If true, new products will be assigned to the “New” group.
   */
  setGroupNewProductsAsNew (onOff: boolean): void;

  /**
   * @seealso getMaxFileSearchResultsSize()
   * @since 4.9.0.15
   * @param maxNum - The maximum number of items to return from a standard file search.
   */
  setMaxFileSearchResultSize (maxNum: number): void;

  /**
   * @seealso getNumMaxItemsPerPage()
   * @param maxNum - The maximum number of items to show on a page in the content view
   */
  setMaxItemsPerPage (maxNum: number): void;

  /**
   * Sets the group identifier on products and/or files, for a list of products.
   * @since 4.9.0.25
   * @param guids - A list of guids for the products to set the group identifier on.
   * @param groupId - The group identifier to set.
   * @param [groupProduct=true] - If true, sets the group identifier on the product.
   * @param [groupFiles=true] - If true, sets the group identifier on the user-facing files in the product.
   */
  setProductGroupIDs (guids: Array<unknown>, groupId: number, groupProduct?: boolean, groupFiles?: boolean): void;

  /**
   * @seealso showAssetToolTip()
   * @param onOff - Whether or not to show tool tips on assets.
   */
  setShowAssetToolTip (onOff: boolean): void;

  /**
   * @seealso showExtensions()
   * @param onOff - Whether or not to show extensions on assets.
   */
  setShowExtensions (onOff: boolean): void;

  /**
   * Sets whether or not hidden vendor categorizations are shown.
   * @since 4.9.3.4
   * @param shown - If true, hidden vendor categorizations are shown.
   */
  setShowHiddenVendorCategorization (shown: boolean): void;

  /**
   * @seealso showLargeIcons()
   * @param onOff - Whether or not to show large icons.
   */
  setShowLargeIcons (onOff: boolean): void;

  /**
   * @returns true if showing asset tool tips, otherwise false.
   * @seealso setShowAssetToolTip()
   */
  showAssetToolTip (): boolean;

  /**
   * Causes the Content DB Editor to be displayed, allowing the user to view/edit metadata for products and/or assets all within a centralized dialog.
   * @returns true if the dialog is accepted, otherwise false.
   * @param assetContainer - The asset container to load into the editor. If the asset container is a DzProductAssetContainer, the dialog will display two pages: one for the product specific data, and one for the asset specific data. If the asset container is any other type, only the page for the asset specific data is displayed.
   */
  showDatabaseEditor (assetContainer: DzAbstractAssetContainer): boolean;

  /**
   * @returns true if showing asset file extensions, otherwise false.
   * @seealso setShowExtensions()
   */
  showExtensions (): boolean;

  /**
   * @returns true if showing large asset icons, otherwise false.
   * @seealso setShowLargeIcons()
   */
  showLargeIcons (): boolean;

  /**
   * Executes a script named after the store associated with product, in the ./resources/stores directory. A single anonymous JSON object is passed to the script, which can be retrieved using the global “getArguments()” function. The properties on the Object consist of values stored in the content database.
   * - store_id - A String containing the identifier for the store product is associated with.
   * - store_token - A String containing the token in store_url to be replaced by product_token.
   * - store_url - A String containing the URL with more information about product.
   * - product_token - A String containing the token (SKU) from product.
   * - product_name - A String containing the name of product.
   * - product_artists - An Array of String values containing the names of artists that contributed to product.
   * - product_description - A String containing the description of product.
   * - product_guid - A String containing the Globally Unique Identifier for product.
   * - product_is_vendor - A Boolean indicating whether product is provided by a vendor or the user.
   * - product_has_cloud_meta - A Boolean indicating whether product has metadata provided via the cloud (or manual/local).
   * - product_is_cloud_owned - A Boolean indicating whether product is managed via the cloud (or manual/local).
   * @seealso createStore()
   * DzApp::getResourcesPath()
   * DzScriptContext::getArguments()
   * ./resources/stores/default.dsa
   * @since 4.8.1.70
   * @param product - The product to show more information for.
   */
  showMoreProductInfo (product: DzProductAssetContainer): void;

  /**
   * Starts the Content Management Service (CMS), if it is not already running.
   */
  startCMS (): void;

  /**
   * Stops all searches that were started by any of the search* methods on DzAssetMgr.
   */
  stopAllSearches (): void;

  /**
   * Stops the Content Management Service (CMS), if it is running and is of the type that can be stopped.
   * @param mode - The mode to use to stop the service;   *         - 0 = Smart   *         - 1 = Fast   *         - 2 = Immediate
   * @param wait - Whether or not to wait for the CMS to stop before continuing.
   * @param [timeout=0] - The number of seconds to wait for the service to stop before continuing.
   */
  stopCMS (mode: number, wait: boolean, timeout?: number): void;

  /**
   * Stops any searches that were started by DzAssetMgr.scanFiles().
   */
  stopFileScan (): void;

  /**
   * Stops any searches that were started by DzAssetMgr.searchFiles().
   */
  stopFileSearch (): void;

  /**
   * Stops any searches that were started by DzAssetMgr.searchForAssetAddOns().
   */
  stopSearchForAssetAddOns (): void;

  /**
   * Stops any searches that were started by DzAssetMgr.searchForAssets(), DzAssetMgr.searchForAssetsByKeywords() or DzAssetMgr.searchForProductAssets().
   */
  stopSearchForAssets (): void;

  /**
   * Stops any searches that were started by DzAssetMgr.searchForAssetTargets().
   */
  stopSearchForAssetTargets (): void;

  /**
   * Stops any searches that were started by DzAssetMgr.searchForProducts().
   */
  stopSearchForProducts (): void;

  /**
   * Triggers an update to asset containers within the Categories top-level container.
   * @seealso getCategories()
   * @since 4.8.1.65
   */
  updateCategoryContainers (): void;

  /**
   * Triggers an update to asset containers within the native formats top-level container.
   * @seealso getContentDirs()
   * @since 4.8.1.65
   */
  updateContentContainers (): void;

  /**
   * Triggers an update to asset containers within the folder based top-level containers.
   * @seealso getContentDirs()
   * getPoserDirs()
   * getImportDirs()
   * @since 4.8.1.65
   */
  updateFolderBasedContainers (): void;

  /**
   * Triggers an update to asset containers within the other import formats top-level container.
   * @seealso getImportDirs()
   * @since 4.8.1.65
   */
  updateImportContainers (): void;

  /**
   * Triggers an update to asset containers within the Poser formats top-level container.
   * @seealso getPoserDirs()
   * @since 4.8.1.65
   */
  updatePoserContainers (): void;

  /**
   * Triggers an update to asset containers within the Products top-level container.
   * @seealso getProducts()
   */
  updateProductContainers (): void;

  /**
   * Reclaims space in the database previously occupied by deleted or updated data.
   * @returns true if the operation was successful, otherwise false.
   */
  vacuumDatabase (): boolean;

  basePathsChanged: Signal<{
    /**
     * Emitted when the base paths list has changed.
     */
  (): void;
  }>;
  categoryUpdate: Signal<{
    /**
     * Emitted when a category has been changed.
     * @param idPath - The list of ids leading to the changed category.
     */
  (idPath: Array<unknown>): void;
  }>;
  cmsDSNChanged: Signal<{
    /**
     * Emitted when the Data Source Name (DSN) for the Content Management Service (CMS) has changed.
     */
  (): void;
  }>;
  cmsStarted: Signal<{
    /**
     * Emitted when the Content Management Service (CMS) has started.
     */
  (): void;
  }>;
  cmsStopped: Signal<{
    /**
     * Emitted when the Content Management Service (CMS) has stopped.
     */
  (): void;
  }>;
  compatibilityBaseListChanged: Signal<{
    /**
     * Emitted when the compatibility base list has changed.
     */
  (): void;
  }>;
  containerUpdate: Signal<{
    /**
     * Emitted when a container has been changed.
     * @param idPath - The list of ids leading to the changed container.
     */
  (idPath: Array<unknown>): void;
  }>;
  itemsPerPageChanged: Signal<{
    /**
     * Emitted when itemsPerPage() will return a new value.
     * @param newPerPage - The number of items to show per page.
     */
  (newPerPage: number): void;
  }>;
  maxFileSearchResultSizeChanged: Signal<{
    /**
     * Emitted when the maximum file search result size has changed.
     * @param maxFileSearchResultSize - The new maximum.
     */
  (maxFileSearchResultSize: number): void;
  }>;
  productCreated: Signal<{
    /**
     * Emitted when a product has been created.
     * @param guid - The Globally Unique Identifier (GUID) for the created product.
     */
  (guid: string): void;
  }>;
  showAssetToolTipChanged: Signal<{
    /**
     * Emitted when showAssetToolTipChanged() will return a new value.
     */
  (): void;
  }>;
  showExtensionsChanged: Signal<{
    /**
     * Emitted when showExtensions() will return a new value.
     */
  (): void;
  }>;
  showLargeIconsChanged: Signal<{
    /**
     * Emitted when showLargeIcons() will return a new value.
     */
  (): void;
  }>;
  storeListChanged: Signal<{
    /**
     * Emitted when the store list has changed.
     */
  (): void;
  }>;
  typeListChanged: Signal<{
    /**
     * Emitted when the type list has changed.
     */
  (): void;
  }>;
  uiAboutToSearch: Signal<{
    /**
     * Emitted when the user interface is about to perform a database query.
     * @param sender - The UI component that invoked the query.
     * @param text - The search text entered by the user.
     * @param categories - The categories to limit the query to.
     * @param compatibilityBases - The compatibility bases to limit the query to.
     * @param contentTypes - The content types to limit the query to.
     */
  (sender: QObject, text: string, categories: Array<unknown>, compatibilityBases: Array<unknown>, contentTypes: Array<unknown>): void;
  }>;
}

declare namespace DzAssetMgr
{

  /**
   * Search options used to search assets with the Asset Manager.
   */
  /**
   * No options
   */
  export const None: number;
  /**
   * A whole word search. Only works with file system based searches.
   */
  export const WholeWord: number;
  /**
   * A Regular Expression search. Only works with file system based searches.
   */
  export const RegExp: number;
  /**
   * Include native scene files (*.duf, *.dsf, *.daz) in the search.
   */
  export const NativeScenes: number;
  /**
   * Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
   */
  export const NativeScripts: number;
  /**
   * Include Poser Character files (*.cr2, *.crz) in the search.
   */
  export const PoserFigures: number;
  /**
   * Include Poser Pose files (*.pz2, *.p2z) in the search.
   */
  export const PoserPoses: number;
  /**
   * Include Poser Prop files (*.pp2, *.ppz) in the search.
   */
  export const PoserProps: number;
  /**
   * Include Poser Hair files (*.hr2, *.hrz) in the search.
   */
  export const PoserHair: number;
  /**
   * Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
   */
  export const PoserFaces: number;
  /**
   * Include Poser Light files (*.lt2, *.ltz) in the search.
   */
  export const PoserLights: number;
  /**
   * Include Poser Camera files (*.cm2, *.cmz) in the search.
   */
  export const PoserCameras: number;
  /**
   * Include Poser Hand files (*.hd2, *.hdz) in the search.
   */
  export const PoserHands: number;
  /**
   * Include Poser Material Collection files (*.mc6, *.mcz) in the search.
   */
  export const PoserMaterials: number;
  /**
   * Include Poser Scene files (*.pz3, *.pzz) in the search.
   */
  export const PoserScenes: number;
  /**
   * Include general import files in the search.
   */
  export const ImportFiles: number;
  /**
   * Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
   */
  export const AllNativeFiles: number;
  /**
   * Mask for no native files in the search.
   */
  export const NoNativeFilesMask: number;
  /**
   * Include all Poser files in the search.
   */
  export const AllPoserFiles: number;
  /**
   * Mask for no Poser files in the search.
   */
  export const NoPoserFilesMask: number;
  /**
   * Search through all files.
   */
  export const AllFiles: number;
  /**
   * Same as AllFiles.
   */
  export const DefaultOptions: number;

  /**
   * @returns An escaped version of searchTerm
   * @param searchTerm - The search term to be escaped.
   */
  export function escapeSearchTerm (searchTerm: string): string;

  /**
   * @returns A string representing the portion of categoryPaths that is common.
   * @since 4.9.2.68
   * @param categoryPaths - The list of category paths to find a common path in. This can be a list of strings, or a list of lists of strings.
   * @param [flatten=false] - If true, the categories are processed as if they are a single list. If false (default), the deepest path common to all lists will be chosen. In either case, non-default categorization is preferred over default categorization.
   */
  export function findCommonBaseCategoryPath (categoryPaths: Array<unknown>, flatten?: boolean): string;

  /**
   * @returns The asset URI for node, or an empty string if node is null.
   * @param node - The node to get the asset URI for.
   */
  export function getAssetUriForNode (node: DzNode): string;

  /**
   * @returns An identifier for the top level categories container.
   */
  export function getCategoriesID (): string;

  /**
   * @returns A slash (“/”) delimited string version of the node's compatibility base path (if any), otherwise an empty string.
   * @param node - The node to get compatibility base for.
   */
  export function getCompatibilityBasePathForNode (node: DzNode): string;

  /**
   * @returns An identifier for the top level import formats container.
   */
  export function getImportDirID (): string;

  /**
   * @returns An identifier for the top level Poser formats container.
   */
  export function getPoserDirID (): string;

  /**
   * @returns The identifier for the virtual folder container within the top level Poser formats container.
   * @since 4.9.2.68
   */
  export function getPoserVirtualDirID (): Array<unknown>;

  /**
   * @returns An identifier for the top level products container.
   */
  export function getProductsID (): string;

  /**
   * @returns A string path/search combination or empty string if search is not in path.
   * @param path - The path to the file/folder that real, on disk, casing is desired for.
   * @param search - A file/folder in the path to get the on disk casing for.
   */
  export function getRealPathCasing (path: string, search: string): string;

  /**
   * @returns The relative metadata file path.
   * @since 4.9.4.31
   * @param store - The store ID for the product.
   * @param token - The token for the product.
   * @param title - The title of the product.
   * @param [extension=“dsx”] - The extension of the meta file.
   */
  export function getRelativeProductMetafilePath (store: string, token: string, title: string, extension?: string): string;

  /**
   * @returns A list of the folder names that are considered special, and thus handled in specific ways, in a Poser runtime.
   */
  export function getSpecialPoserFolders (): Array<unknown>;

  /**
   * @returns An identifier for the top level DAZ Studio formats container.
   */
  export function getStudioDirID (): string;

  /**
   * @returns A list of the folder names excluded when building the native user-facing folder structure.
   */
  export function getStudioExcludes (): Array<unknown>;

  /**
   * @returns The identifier for the virtual folder container within the top level DAZ Studio formats container.
   * @since 4.9.2.68
   */
  export function getStudioVirtualDirID (): Array<unknown>;

  /**
   * @returns A normalized version of type.
   * @param type - The path/type to be normalized.
   * @param [relative=true] - Whether or not this is a relative (or absolute) path.
   */
  export function normalizePath (type: string, relative?: boolean): string;

  /**
   * Saves user owned metadata to an XML file (or a series of XML files).
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param dirPath - The path to save user metadata files in.
   * @param filePrefix - The prefix for the filename sequence.
   */
  export function saveUserDBData (dirPath: string, filePrefix: string): DzError;

  /**
   * Sets the metadata associated with a file.
   * @since 4.9.0.17
   * @param filepath - The path of the file to set the metadata on.
   * @param contentType - The content type to set.
   * @param compatibleWith - The compatibility base the asset is an add-on for.
   * @param category - The category to put the asset in.
   * @param [assetNode=undefined] - The node to get the compatibility base from.
   * @param [compatiblityBase=“”] - The compatibility base to set; for add-ons to target.
   */
  export function setFileMetadata (filepath: string, contentType: string, compatibleWith: string, category: string, assetNode?: DzNode, compatiblityBase?: string): void;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioclip_dz
 * Class that encapsulates audio playback.
 * @remarks This class is implemented by platform specific audioclip classes, winaudioclip_dz and macaudioclip_dz.
 * @seealso DzScene::getAudio(), DzScene::setAudio(), DzAudioImporter, DzMultiMediaMgr::importAudioClip()
 */
interface DzAudioClip extends DzBase, DzRefCountedItem
{

  /**
   * The current position of the audio clip from the start.
   */
  currentPosition: DzTime

  /**
   * The name of the file the audio clip was loaded from (Read Only)
   */
  filename: string

  /**
   * The length of the audio clip (Read Only)
   */
  length: DzTime

  /**
   * The current rate multiplier for the audio clip
   */
  rate: number

  /**
   * Opens the file specified by filename and sets up the audio clip.
   * @returns true if the file was successfully opened, false otherwise;
   * @param filename - The name of the audio file to load.
   */
  openFile (filename: string): DzError;

  /**
   * Pauses the audio clip without resetting current position.
   */
  pause (): void;

  /**
   * Plays the audio clip from current position.
   */
  play (): void;

  /**
   * Resets the current position of the audio clip to the beginning.
   */
  reset (): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioimporter_dz
 * Base class for all audio clip importers.
 * @seealso DzMultiMediaMgr
 */
interface DzAudioImporter extends DzFileIO
{

  /**
   * @returns A description of the importer that can be placed in a file type selection combo box (e.g. “WAV Format”).
   */
  getDescription (): string;

  /**
   * @returns The file extension (excluding the preceding dot) supported by this importer.
   */
  getExtension (): string;

  /**
   * TODO: Add description.
   * @param filename - 
   * @param clip - 
   * @param options - 
   */
  loadAudio (filename: string, clip: DzAudioClip, options: DzFileIOSettings): DzError;

  /**
   * Reads the file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - Name of the file to be read.
   * @param clip - Audio clip to read data into.
   */
  loadAudio (filename: string, clip: DzAudioClip): DzError;

  /**
   * Test the given filename and file contents to see if this importer can read it.
   * @returns true if the importer can import the file, otherwise false.
   * @param filename - The name of the file to test.
   */
  recognize (filename: string): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/authenticationmgr_dz
 * A class that manages authentication of a Daz 3D user account.
 * @remarks This class does not provide access to any Daz 3D user account information which could be considered an invasion of the user's the privacy. This class does provide plugins and scripts with an ability to check if a user has authenticated (logged in to) a Daz 3D account, to prompt a user to authenticate (login to) their Daz 3D account, to obtain a token that uniquely and anonymously identifies the current/last account authenticated, and to logout of an account that is currently logged in.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp::getAuthenticationMgr().
 * @seealso Sample: Retrieve User Token
 */
interface DzAuthenticationMgr extends QObject
{

  /**
   * This function will attempt to authenticate a Daz 3D user account. If no account information has been entered by the user, a dialog will be displayed to securely acquire the username and password to be authenticated.
   * @returns true if the user was authenticated, otherwise false.
   */
  authenticateUser (): boolean;

  /**
   * @returns If the user has (not necessarily is) logged in to a Daz 3D user account and the application has a valid connection to the database, a token that represents the account that the user last logged into is returned. If the user has not logged into a Daz 3D user account or the application does not have a valid connection to the database, an empty string is returned.
   * @attention This function existed prior to 4.9.3.66 but it was deprecated as part of a much older implementation and it would only return an empty string. As of 4.9.3.66 the function has been revived and the function operates as described above.
   * @seealso DzAssetMgr::haveDatabase()
   * Sample: Retrieve User Token
   */
  getUserToken (): string;

  /**
   * @returns true if the user is authenticated (currently logged in), otherwise false.
   */
  isAuthenticated (): boolean;

  /**
   * @returns true if in process of logging in, otherwise false. The event queue must execute to finish login.
   * @since 4.9.3.71
   */
  isLoggingIn (): boolean;

  /**
   * Invalidates any existing authentication.
   */
  logout (): void;

  beginLogin: Signal<{
    /**
     * Emitted when the user begins to login to a Daz 3D account.
     */
  (): void;
  }>;
  beginLogout: Signal<{
    /**
     * Emitted when the user begins to log out of a Daz 3D account.
     */
  (): void;
  }>;
  currentAccountChanged: Signal<{
    /**
     * Emitted when the current Daz 3D account in use changes.
     */
  (): void;
  }>;
  loggedIn: Signal<{
    /**
     * Emitted after the user has successfully logged in to a Daz 3D account.
     */
  (): void;
  }>;
  loggedOut: Signal<{
    /**
     * Emitted after the user has successfully logged out of a Daz 3D account.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/author_dz
 * Encapsulates authorship information.
 * @remarks DzAuthor is used to access authorship data for native files, and the current instance of the application.
 * @seealso DzApp::getCurrentAuthor(), DzScript::getAuthor(), DzScriptContext::getScriptAuthor(), Global::getScriptAuthor()
 */
interface DzAuthor extends Object
{

  /**
   * Deprecated
   * Exists only to keep old code working.
   */
  email: string

  /**
   * The author's name. (Read Only)
   */
  name: string

  /**
   * The author's url. (Read Only)
   */
  url: string

  /**
   * true if name contains valid information, otherwise false. (Read Only)
   */
  valid: string

}

declare var DzAuthor:
{
  prototype: DzAuthor;

  /**
   * Default constructor. Creates an empty author.
   */
  new (): DzAuthor;

  /**
   * Copy Constructor.
   * @param author - The author information to copy.
   */
  new (author: DzAuthor): DzAuthor;

  /**
   * Create a DzAuthor with the given name, email, and url.
   * @param name - The name of the author
   * @param email - The author's email address
   * @param [url=“”] - The author's home page URL
   */
  new (name: string, email: string, url?: string): DzAuthor;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/backdrop_dz
 * Backdrop that gets drawn behind viewport scenes.
 * @remarks This class encapsulates a 2D image and the parameters for drawing the image as a backdrop for the scene. An instance of this class only contributes to the scene if it is set as the current backdrop for the scene.
 * @seealso DzScene::setBackdrop(), DzScene::getBackdrop()
 */
interface DzBackdrop extends DzElement
{

  /**
   * Enumerated image rotation types
   */
  /**
   * No rotation
   */
  readonly NO_ROTATION: number;

  /**
   * 90 degree rotation Counter-Clockwise
   */
  readonly ROTATE_LEFT_90: number;

  /**
   * 90 degree rotation Clockwise
   */
  readonly ROTATE_RIGHT_90: number;

  /**
   * 180 degree rotation
   */
  readonly ROTATE_180: number;

  /**
   * This property holds the background color of the backdrop
   * @since 4.6.4.30
   */
  backgroundColor: Color

  /**
   * This property holds whether or not the backdrop is flipped horizontally
   */
  flipHorizontal: boolean

  /**
   * This property holds whether or not the backdrop is flipped vertically
   */
  flipVertical: boolean

  /**
   * This property holds the rotation applied to the backdrop
   */
  rotation: number

  /**
   * This property holds whether or not the backdrop is visible in the viewport
   * @since 4.6.4.30
   */
  visible: boolean

  /**
   * This property holds whether or not the backdrop is visible in a render
   * @since 4.6.4.32
   */
  visibleInRender: boolean

  /**
   * Changes the render aspect ratio to match the backdrop image, and the image dimensions
   * @since 4.6.4.33
   */
  adjustRenderAspectRatioToMatchTexture (): void;

  /**
   * Changes the render image dimensions and aspect ratio to match the backdrop image
   * @since 4.6.4.33
   */
  adjustRenderDimensionsToMatchTexture (): void;

  /**
   * Clears the current back drop image, and resets all parameters.
   * @example
   * // Get the backdrop for the scene
   * var oBackdrop = Scene.getBackdrop();
   *  
   * // Clear the backdrop
   * oBackdrop.clear();
   */
  clear (): void;

  /**
   * @returns The property that controls the backdrop color or tinting
   * @since 4.6.4.35
   */
  getBackgroundColorControl (): DzColorProperty;

  /**
   * @returns The property that controls whether the backdrop is flipped horizontally
   */
  getHorizontalFlipControl (): DzBoolProperty;

  /**
   * @returns An editable instance of the material used to shade the backdrop.
   * @example
   * // Get the backdrop for the scene
   * var oBackdrop = Scene.getBackdrop();
   * // Get the material for the backdrop
   * var oMaterial = oBackdrop.getMaterial();
   *  
   * // Set the color of the backdrop to red
   * oMaterial.setDiffuseColor( new Color( 255, 0, 0 ) );
   */
  getMaterial (): DzMaterial;

  /**
   * @returns The property that controls rotation of the backdrop
   */
  getRotationControl (): DzEnumProperty;

  /**
   * @returns The current backdrop image.
   * @example
   * // Get the backdrop for the scene
   * var oBackdrop = Scene.getBackdrop();
   * // Get the texture for the backdrop
   * var oTexture = oBackdrop.getTexture();
   *  
   * // Log the file name of the current backdrop image
   * if( oTexture ){
   * 	print( String("Current Backdrop: %1").arg( oTexture.getFilename() ) );
   * } else {
   * 	print( "No Current Backdrop Image" );
   * }
   * @seealso setTexture()
   */
  getTexture (): DzTexture;

  /**
   * @returns The property that controls whether the backdrop is flipped vertically
   */
  getVerticalFlipControl (): DzBoolProperty;

  /**
   * @returns The property that controls whether the backdrop is visible
   * @since 4.6.4.32
   */
  getVisibleControl (): DzBoolProperty;

  /**
   * @returns The property that controls whether the backdrop is visible in a render
   * @since 4.6.4.32
   */
  getVisibleInRenderControl (): DzBoolProperty;

  /**
   * Sets the backdrop image.
   * @example
   * // Get the backdrop for the scene
   * var oBackdrop = Scene.getBackdrop();
   * // Get the image manager
   * var oImageMgr = App.getImageMgr();
   *  
   * // Get an image
   * var sImage = String("%1/../Pictures/Sample Pictures/Desert.jpg").arg( App.getCommonUserDocumentPath() );
   * var oImage = oImageMgr.getImage( sImage );
   *  
   * // Set the backdrop image
   * oBackdrop.setTexture( oImage );
   * // Make the backdrop visible
   * oBackdrop.visible = true;
   * @seealso getTexture()
   * @param img - The backdrop image.
   */
  setTexture (img: DzTexture): void;

  /**
   * Deprecated
   * Shows the options dialog for this backdrop.
   * @example
   * // Get the backdrop for the scene
   * var oBackdrop = Scene.getBackdrop();
   *  
   * // Display options for the backdrop to the user
   * oBackdrop.showOptions( MainWindow );
   * @param [parent=undefined] - 
   */
  showOptions (parent?: QWidget): void;

  backgroundColorChanged: Signal<{
    /**
     * Emitted when the background color of this backdrop changes.
     * @since 4.6.4.30
     */
  (): void;
  }>;
  drawnDataChanged: Signal<{
    /**
     * Emitted when the information in this backdrop changes.
     */
  (): void;
  }>;
  visiblityChanged: Signal<{
    /**
     * Emitted when the visibility of this backdrop changes.
     * @since 4.6.4.32
     */
  (): void;
  }>;
}

declare var DzBackdrop:
{
  prototype: DzBackdrop;

  /**
   * Default Constructor.
   */
  new (): DzBackdrop;

  /**
   * Enumerated image rotation types
   */
  /**
   * No rotation
   */
  readonly NO_ROTATION: number;
  /**
   * 90 degree rotation Counter-Clockwise
   */
  readonly ROTATE_LEFT_90: number;
  /**
   * 90 degree rotation Clockwise
   */
  readonly ROTATE_RIGHT_90: number;
  /**
   * 180 degree rotation
   */
  readonly ROTATE_180: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/base_dz
 * Base class for a considerable portion of the Daz Studio API.
 * @remarks Derived from QObject, this base class allows for the use of the signals-slots architecture provided by the Qt framework, within the Daz Studio API. A considerable portion of classes in the Daz Studio API derive from this class.
 */
interface DzBase extends QObject
{

  /**
   * Provides scripts a way to make objects persistent; i.e., so that Qt will not delete them when they are no longer referenced by the script. This allows object instances to be created in script, then passed into the core and remain after the script has finished execution.
   */
  makePersistent (): void;

  nameChanged: Signal<{
    /**
     * @null 
     * Emitted when the internal name of the object has changed.
     * @param name - The new name of the object.
     */
  (name: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basiccamera_dz
 * A basic camera.
 * @remarks This is the basic camera implementation for DAZ Studio. It supplies commonly-used features like focal length adjustment and depth of field alteration.
 */
interface DzBasicCamera extends DzCamera
{

  /**
   * Holds the current height of the view. (Read Only)
   */
  currentViewHeight: number

  /**
   * Holds the current width of the view. (Read Only)
   */
  currentViewWidth: number

  /**
   * Holds whether or not the camera performs depth of field calculations.
   */
  depthOfField: boolean

  /**
   * Holds the f/stop of the camera.
   */
  fStop: number

  /**
   * Holds whether or the camera is a perspective or orthographic view.
   */
  isPerspective: boolean

  /**
   * Holds whether or not the local dimensions will use the active viewport when enabled. (since 4.9.3.108)
   */
  useActiveViewport: boolean

  /**
   * Applies the settings in a dimensions preset.
   * @returns if preset was found, otherwise false.
   * @since 4.9.3.108
   * @param preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean “Custom.”
   */
  applyDimensionsPreset (preset: string): boolean;

  /**
   * A ray through the scene for a perspective view.
   * @returns A directional vector that defines a ray that intersects the camera's center point.
   * @param x - The x position of the cursor in the viewport.
   * @param y - The y position of the cursor in the viewport.
   */
  cursorToRay (x: number, y: number): DzVec3;

  /**
   * Calculates a location in the scene based on an x, y position in the viewport and distance from the camera.
   * @returns A positional vector that represents the resulting location in the scene.
   * @param x - The x coordinate of the cursor in the viewport.
   * @param y - The y coordinate of the cursor in the viewport.
   * @param z - The distance from the camera in world space at which to calculate the target point.
   */
  cursorToScene (x: number, y: number, z: number): DzVec3;

  /**
   * @returns The angle of the aperture blades for the camera.
   * @since 4.9.3.121
   */
  getApertureBladeRotationAngleControl (): DzFloatProperty;

  /**
   * @returns The number of aperture blades for the camera.
   * @since 4.9.3.121
   */
  getApertureNumBladesControl (): DzIntProperty;

  /**
   * @returns The depth of field property for the camera.
   */
  getDepthOfFieldChannel (): DzBoolProperty;

  /**
   * Retrieves the settings of a dimensions preset.
   * @returns if preset was found, otherwise false.
   * @since 4.9.3.108
   * @param preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean “Custom.”
   * @param settings - The settings object that the settings will be assigned to.
   */
  getDimensionsPreset (preset: string, settings: DzSettings): boolean;

  /**
   * @returns The Display Persistence property for the camera.
   */
  getDisplayPersistenceChannel (): DzBoolProperty;

  /**
   * @returns The DOF Color property for the camera.
   */
  getDofColorChannel (): DzColorProperty;

  /**
   * @returns The DOF Overlay Color property for the camera.
   */
  getDofOverlayColorChannel (): DzColorProperty;

  /**
   * @returns The DOF Overlay Opacity property for the camera.
   */
  getDofOverlayOpacityChannel (): DzFloatProperty;

  /**
   * @returns The DOF Visibility property for the camera.
   */
  getDofVisibilityChannel (): DzBoolProperty;

  /**
   * @returns The Far DOF Visibility property for the camera.
   */
  getFarDofVisibilityChannel (): DzBoolProperty;

  /**
   * @returns The depth of field property for this camera.
   */
  getFocalDistChannel (): DzFloatProperty;

  /**
   * @returns The focal length property for this camera.
   */
  getFocalLengthChannel (): DzFloatProperty;

  /**
   * @returns The Focal Point Scale property for the camera.
   */
  getFocalPointScaleChannel (): DzFloatProperty;

  /**
   * @returns The FOV Color property for the camera.
   */
  getFovColorChannel (): DzColorProperty;

  /**
   * @returns The FOV Length property for the camera.
   */
  getFovLengthChannel (): DzFloatProperty;

  /**
   * @returns The FOV Opacity property for the camera.
   */
  getFovOpacityChannel (): DzFloatProperty;

  /**
   * @returns The frame size property for this camera.
   * @since 4.6.4.67
   */
  getFrameWidthChannel (): DzFloatProperty;

  /**
   * @returns The f/stop property for this camera.
   */
  getFStopChannel (): DzFloatProperty;

  /**
   * @returns The Headlamp Intensity property for the camera.
   * @since 4.7.1.94
   */
  getHeadlampIntensityControl (): DzFloatProperty;

  /**
   * @returns The camera lens k1 for the camera.
   * @seealso getLensDistortionTypeControl()
   * @since 4.9.3.121
   */
  getLensDistortionK1Control (): DzFloatProperty;

  /**
   * @returns The camera lens k2 for the camera.
   * @seealso getLensDistortionTypeControl()
   * @since 4.9.3.121
   */
  getLensDistortionK2Control (): DzFloatProperty;

  /**
   * @returns The camera lens k3 for the camera.
   * @seealso getLensDistortionTypeControl()
   * @since 4.9.3.121
   */
  getLensDistortionK3Control (): DzFloatProperty;

  /**
   * @returns The camera distortion scale for the camera.
   * @since 4.9.3.121
   */
  getLensDistortionScaleControl (): DzFloatProperty;

  /**
   * @returns The camera lens distortion type for the camera.
   * 	"none" ? no distortion.
   *  
   * 	"spherical" ? Conventional spherical camera mapping.
   *  
   * 	"cylindrical" ? Conventional cylindrical camera mapping.
   *  
   * 	"poly3" ? Third order radial distortion model: rd = ru * (1 - k1 + k1 * ru2)
   *  
   * 	"inv_poly3" ? Third order inverse radial distortion model: ru = rd * (1 - k1 + k1 * rd2)
   *  
   * 	"poly5" ? Fifth order radial distortion model: rd = ru * (1 + k1 * ru2 + k2 * ru4)
   *  
   * 	"inv_poly5" ? Fifth order inverse radial distortion model: ru = rd * (1 + k1 * rd2 + k2 * rd4)
   *  
   * 	"ptlens" ? Fourth order radial distortion model: rd = ru * (1 - k1 - k2 - k3 + k1 * ru + k2 * ru2 + k3 * ru3)
   *  
   * 	"inv_ptlens" ? Fourth order inverse radial distortion model: ru = rd * (1 - k1 - k2 - k3 + k1 * rd + k2 * rd2 + k3 * rd3)
   * @seealso getLensDistortionK1Control()
   * getLensDistortionK2Control()
   * getLensDistortionK3Control()
   * @since 4.9.3.121
   */
  getLensDistortionTypeControl (): DzEnumProperty;

  /**
   * @returns The camera lens radial bias property for the camera.
   * @since 4.9.3.121
   */
  getLensRadialBiasControl (): DzFloatProperty;

  /**
   * @returns The camera lens shift x property for the camera in mm.
   * @since 4.9.3.121
   */
  getLensShiftXControl (): DzFloatProperty;

  /**
   * TODO: Add description.
   */
  getLensShiftYControl (): DzFloatProperty;

  /**
   * TODO: Add description.
   */
  getLensStereoOffsetControl (): DzFloatProperty;

  /**
   * @returns The camera lens thickness property for the camera. Thickness is in mm.
   * @since 4.8.0.16
   */
  getLensThicknessControl (): DzFloatProperty;

  /**
   * @returns The Near DOF Visibility property for the camera.
   */
  getNearDofVisibilityChannel (): DzBoolProperty;

  /**
   * @returns The Sight Line Opacity property for the camera.
   */
  getSightLineOpacityChannel (): DzFloatProperty;

  /**
   * @returns true if this camera is at default scene camera values, otherwise false.
   */
  isAtDefaultSceneCameraValues (): boolean;

  /**
   * @returns true if this camera is the default scene camera, otherwise false.
   */
  isDefaultSceneCamera (): boolean;

  /**
   * @attention Assigning more than one camera as the default scene camera will not be preserved across save/load sequences.
   * @param yesNo - If true, sets this camera as the default scene camera.
   */
  setIsDefaultSceneCamera (yesNo: boolean): void;

  /**
   * Changes the type of the camera.
   * @param type - The new type for the camera.
   */
  setType (type: number): void;

  depthOfFieldChanged: Signal<{
    /**
     * Emitted when the camera's depth of field setting has changed.
     */
  (): void;
  }>;
  fStopChanged: Signal<{
    /**
     * Emitted when the camera's f-Stop setting has changed.
     * @param range - 
     */
  (range: DzTimeRange): void;
  }>;
}

declare var DzBasicCamera:
{
  prototype: DzBasicCamera;

  /**
   * Create a camera of the given type.
   * @example
   * // Create a new orthographic camera that looks forward on the Z axis.
   * DzCamera	*cam = new DzBasicCamera( DzCamera::FRONT_CAMERA );
   *  
   * // Name the camera and add it to the scene
   * cam->setName( "My Camera" );
   * dzScene->addNode( cam );
   * @param [type=DzCamera.PERSPECTIVE_CAMERA] - The type of the camera.
   * @param [isViewCamera=false] - If true, the camera is a view camera - that is, it only exists as a camera for the purpose of viewing the scene, but is not a member of the scene and is non-animatable. If false, the camera is a normal camera that is a member of the scene.
   */
  new (type?: number, isViewCamera?: boolean): DzBasicCamera;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basicdialog_dz
 * A basic dialog that provides typical buttons found on most DAZ Studio dialogs.
 * @remarks The buttons provided by the dialog are: 'What's This', 'Apply', 'Accept', and 'Cancel'. Custom buttons can also be added to the set of default buttons by calling addButton(). All buttons but the 'Accept' button can be hidden or shown. By default, the 'Apply' button is the only hidden button. The text on the default buttons can be customized.
 * The dialog has a vertical box layout above the horizontal set of buttons. Widgets and sub-layouts can be added to this layout using addWidget() and addLayout().
 * @seealso Sample: Simple Input Dialog
 * Sample: Simple Image Dialog
 * Sample: Action Accelerators
 * Sample: Version Conversion
 */
interface DzBasicDialog extends DzDialog
{

  /**
   * Adds a button into the horizontal layout of the dialog's button bar.
   * @param btn - The button to add to the dialog's button layout.
   * @param [index=1] - The position in the button bar to insert the button.
   */
  addButton (btn: DzButton, index?: number): void;

  /**
   * Adds a layout into the main vertical layout of the dialog.
   * @param layout - 
   * @param [stretch=0] - The layout to add as a child of the dialog's main layout.
   */
  addLayout (layout: DzLayout, stretch?: number): void;

  /**
   * Adds spacing into the main vertical layout of the dialog.
   * @param spacing - The amount of spacing to add.
   */
  addSpacing (spacing: number): void;

  /**
   * Adds stretch into the main vertical layout of the dialog.
   * @param [stretch=0] - The stretch factor for the added stretchable space.
   */
  addStretch (stretch?: number): void;

  /**
   * Adds a widget into the main vertical layout of the dialog.
   * @param child - The widget to add to the dialog's main layout.
   * @param [stretch=0] - The stretch factor for the child widget.
   * @param [alignment=0] - The alignment for the child widget.(since 4.9.3.93)
   */
  addWidget (child: DzWidget, stretch?: number, alignment?: number): void;

  /**
   * Inserts a widget into the main vertical layout of the dialog.
   * @since 4.9.3.93
   * @param index - The index to insert the widget at.
   * @param child - The widget to add to the dialog's main layout.
   * @param [stretch=0] - The stretch factor for the child widget.
   * @param [alignment=0] - The alignment for the child widget.
   */
  insertWidget (index: number, child: DzWidget, stretch?: number, alignment?: number): void;

  /**
   * Enables or disables the Accept button. By default, the button is enabled.
   * @param onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
   */
  setAcceptButtonEnabled (onOff: boolean): void;

  /**
   * Sets the text for the dialog's accept button. By default, the button is labelled 'Accept'.
   * @param text - The new label for the accept button.
   */
  setAcceptButtonText (text: string): void;

  /**
   * Enables or disables the Apply button. By default, the button is disabled.
   * @param onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
   */
  setApplyButtonEnabled (onOff: boolean): void;

  /**
   * Sets the text for the dialog's apply button. By default, the button is labelled 'Apply'.
   * @param text - The new label for the apply button.
   */
  setApplyButtonText (text: string): void;

  /**
   * Enables or disables the Cancel button. By default, the button is enabled.
   * @param onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
   */
  setCancelButtonEnabled (onOff: boolean): void;

  /**
   * Sets the text for the dialog's cancel button. By default, the button is labelled 'Cancel'.
   * @param text - The new label for the cancel button.
   */
  setCancelButtonText (text: string): void;

  /**
   * Enables or disables the Help button. By default, the button is enabled.
   * @param onOff - If true, the 'Help' button will be available to the user. If false, the button will not be shown.
   */
  setHelpButtonEnabled (onOff: boolean): void;

  /**
   * Shows or hides the 'Accept' button. By default, the button is shown.
   * @param onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
   */
  showAcceptButton (onOff: boolean): void;

  /**
   * Shows or hides the 'Apply' button. By default, the button is hidden.
   * @param onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
   */
  showApplyButton (onOff: boolean): void;

  /**
   * Shows or hides the 'Cancel' button. By default, the button is shown.
   * @param onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
   */
  showCancelButton (onOff: boolean): void;

  /**
   * Shows or hides the 'What's This' button. By default, the button is shown.
   * @param onOff - If true, the 'What's This' button will be available to the user. If false, the button will not be shown.
   */
  showHelpButton (onOff: boolean): void;

  applyClicked: Signal<{
    /**
     * Emitted when the 'Apply' button is clicked by the user.
     */
  (): void;
  }>;
}

declare var DzBasicDialog:
{
  prototype: DzBasicDialog;

  /**
   * Default Constructor. Creates a typical DAZ Studio dialog with 'What's This', 'Apply', 'Accept', and 'Cancel' buttons. By default, the 'Apply' button is hidden, call showApplyButton() to make it visible.
   */
  new (): DzBasicDialog;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bone_dz
 * Base class for all skeleton bone types.
 * @remarks This specialized DzNode subclass adds follow bone, and mesh-binding functionality to a node. All bones are assumed to be in the hierarchy of a DzSkeleton, and will not function properly if their parent is not a skeleton or another bone.
 * The concept of a follow bone allows the bones of one skeleton (figure) to follow another skeleton (figure). This following does not reproduce transforms from one bone to another, but tries to align center (origin) and end points so that the following bone points in the same direction as the bone it is following. Typically, this is controlled at the skeleton level.
 */
interface DzBone extends DzNode
{

  /**
   * @returns The local scale of the bone at the given time.
   * @param tm - The time to get the local scale for.
   */
  getBoneLocalScale (tm: DzTime): DzMatrix3;

  /**
   * Get the node that this node is following.
   * @returns The bone this bone is following, or NULL if this bone is not following another bone.
   * @seealso DzSkeleton::getFollowTarget()
   */
  getFollowBone (): DzBone;

  /**
   * @returns The mode that this node is following by.
   * @seealso DzSkeleton::getFollowMode()
   * @since 4.8.0.23
   */
  getFollowMode (): number;

  followBoneChanged: Signal<{
    /**
     * @null 
     * Emitted when the follow bone has changed.
     * @param newFollowBone - 
     */
  (newFollowBone: DzBone): void;
  }>;
}

declare var DzBone:
{
  prototype: DzBone;

  /**
   * Default Constructor. Creates a new Bone node.
   */
  new (): DzBone;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boolproperty_dz
 * An animatable boolean property.
 * @remarks This class provides an animatable boolean property that is stored and can be accessed as an integer property. The integer value 0 is false, any other integer value is true.
 */
interface DzBoolProperty extends DzIntProperty
{

  /**
   * @returns The boolean value of the property at the current time.
   */
  getBoolValue (): boolean;

  /**
   * @returns The default boolean value of the property.
   */
  getDefaultBoolValue (): boolean;

  /**
   * Sets the boolean value for this property at the current time - or the default value if this property is not animatable.
   * @param value - The new value for the property.
   */
  setBoolValue (value: boolean): void;

  /**
   * Sets the default boolean value for this property.
   * @param val - The new default value for the property.
   */
  setDefaultBoolValue (val: boolean): void;

}

declare var DzBoolProperty:
{
  prototype: DzBoolProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzBoolProperty;

  /**
   * Overloaded constructor.
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param [initVal=true] - Sets the default value of the property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal?: boolean): DzBoolProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/box3_dz
 * Describes a parametrically defined box in three dimensional space.
 * @remarks Represents a three dimensional box by storing two three dimensional floating point vectors; an upper and lower corner for the box.
 */
interface DzBox3 extends Object
{

  /**
   * Holds the maximum corner of the box.
   */
  max: DzVec3

  /**
   * Holds the maximum value of the box on the x axis.
   */
  maxX: number

  /**
   * Holds the maximum value of the box on the y axis.
   */
  maxY: number

  /**
   * Holds the maximum value of the box on the z axis.
   */
  maxZ: number

  /**
   * Holds the minimum corner of the box.
   */
  min: DzVec3

  /**
   * Holds the minimum value of the box on the x axis.
   */
  minX: number

  /**
   * Holds the minimum value of the box on the y axis.
   */
  minY: number

  /**
   * Holds the minimum value of the box on the z axis.
   */
  minZ: number

  /**
   * @returns The closest point in the box to point. Returns point if point is already in the box.
   * @since 4.9.3.33
   * @param point - The point to find the closest point in the box to.
   */
  closestPoint (point: DzVec3): DzVec3;

  /**
   * @returns true if point is inside the box, otherwise false.
   * @since 4.9.3.48
   * @param point - The point to check whether or not the box contains it.
   */
  containsPoint (point: DzVec3): boolean;

  /**
   * @returns The center point of the box.
   */
  getCenter (): DzVec3;

  /**
   * Tests the box for intersection with the ray, and determines the two points on the box intersected by the line.
   * @returns true if the given ray intersects the box. Sets firstIntersection and secondIntersection to the points where the ray intersects the box.
   * @since 4.9.3.33
   * @param ray - The line to test for intersection with the box.
   * @param firstIntersection - The variable that will be set to the first intersection of the ray with the box.
   * @param lastIntersection - The variable that will be set to the second intersection of the ray with the box.
   */
  getIntersection (ray: DzLine3, firstIntersection: DzVec3, lastIntersection: DzVec3): boolean;

  /**
   * @returns The corner to corner distance of this box.
   */
  getSize (): number;

  /**
   * Creates a new box by transforming the corners of this box through the given matrix and then including them.
   * @returns A copy of this box that has been transformed by the matrix.
   * @param matrix - 
   */
  getTransformedBox (matrix: DzMatrix3): DzBox3;

  /**
   * @param vec - The point to include in the box.
   */
  include (vec: DzVec3): void;

  /**
   * Grows the box, if necessary, to include the given box.
   * @param box - The box to include in the box.
   */
  include (box: DzBox3): void;

  /**
   * @returns true if the box is valid, false if it is uninitialized.
   * @since 4.9.3.33
   */
  isValid (): boolean;

  /**
   * Provides a fast intersection test without returning the intersection locations. This function is much faster than getIntersection().
   * @returns true if the ray intersects the box, otherwise false.
   * @since 4.9.3.33
   * @param ray - The line to test for intersection with the box.
   * @param tolerance - 
   */
  testIntersection (ray: DzLine3, tolerance: number): boolean;

  /**
   * Translates the corners of the box by adding the given vector.
   * @param vec - 
   */
  translate (vec: DzVec3): void;

}

declare var DzBox3:
{
  prototype: DzBox3;

  /**
   * Creates an uninitialized box - the first point included in an uninitialized box will become the min and max for the box.
   */
  new (): DzBox3;

  /**
   * Creates an initialized box with the given min and max values.
   * @param xMin - 
   * @param yMin - 
   * @param zMin - 
   * @param xMax - 
   * @param yMax - 
   * @param zMax - The minimum value for the box on the x axis.
   */
  new (xMin: number, yMin: number, zMin: number, xMax: number, yMax: number, zMax: number): DzBox3;

  /**
   * Creates an initialized box with the given min and max values.
   * @param min - The minimum corner of the box.
   * @param max - The maximum corner of the box.
   */
  new (min: DzVec3, max: DzVec3): DzBox3;

  /**
   * Copy Constructor.
   * @param box - The box to copy.
   */
  new (box: DzBox3): DzBox3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boxlayout_dz
 * DAZScript wrapper for QBoxLayout.
 * @remarks TODO: Add detailed description.
 */
interface DzBoxLayout extends DzLayout
{

  /**
   * Used to determine the direction of a box layout.
   */
  /**
   * Horizontal from left to right.
   */
  readonly LeftToRight: number;

  /**
   * Horizontal from right to left.
   */
  readonly RightToLeft: number;

  /**
   * Vertical from top to bottom.
   */
  readonly TopToBottom: number;

  /**
   * Vertical from bottom to top.
   */
  readonly BottomToTop: number;

  /**
   * The direction of the layout
   */
  direction: number

  /**
   * Adds the given layout to the items managed by this layout
   * @param layout - 
   * @param [stretch=0] - The layout to add
   */
  addLayout (layout: DzLayout, stretch?: number): void;

  /**
   * Adds a non-stretchable space with size size to the end of this layout
   * @param size - 
   */
  addSpacing (size: number): void;

  /**
   * Adds a stretchable space with stretch factor stretch to the end of this layout
   * @param [stretch=0] - 
   */
  addStretch (stretch?: number): void;

  /**
   * Limits the minimum dimension perpendicular to the direction the box, to size
   * @param size - 
   */
  addStrut (size: number): void;

  /**
   * Adds the given widget to the items managed by this layout
   * @param widget - 
   * @param [stretch=0] - The widget to add
   */
  addWidget (widget: DzWidget, stretch?: number): void;

}

declare var DzBoxLayout:
{
  prototype: DzBoxLayout;

  /**
   * Creates a box layout that manages the children widgets of the given parent widget
   * @param parent - 
   * @param [direction=DzBoxLayout.Direction.LeftToRight] - 
   */
  new (parent: DzWidget, direction?: number): DzBoxLayout;

  /**
   * Creates a vertical box layout as a sub-layout of the given layout
   * @param parent - 
   * @param [direction=DzBoxLayout.Direction.LeftToRight] - 
   */
  new (parent: DzLayout, direction?: number): DzBoxLayout;

  /**
   * Used to determine the direction of a box layout.
   */
  /**
   * Horizontal from left to right.
   */
  readonly LeftToRight: number;
  /**
   * Horizontal from right to left.
   */
  readonly RightToLeft: number;
  /**
   * Vertical from top to bottom.
   */
  readonly TopToBottom: number;
  /**
   * Vertical from bottom to top.
   */
  readonly BottomToTop: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/brickmaterial_dz
 * Material that uses Shader Bricks to generate its shader.
 * @remarks TODO: Add detailed description.
 */
interface DzBrickMaterial extends DzMaterial, DzRefCountedItem, defaultbrickuser_dz
{

  /**
   * Converts the given default material to a brick material.
   * @param mat - The material to be converted.
   */
  convertDefaultMaterial (mat: DzDefaultMaterial): DzBrickMaterial;

  /**
   * Converts the given Uber Iray material to a brick material.
   * @param mat - The material to be converted.
   */
  convertUberIrayMaterial (mat: DzMaterial): DzBrickMaterial;

  /**
   * Adds the given brick to this brick material.
   * @returns The id of the added brick.
   * @param brick - The brick to add.
   */
  addBrick (brick: shaderbrick_dz): number;

  /**
   * @returns true if this brick material allows auto-baking, otherwise false.
   */
  allowsAutoBake (): boolean;

  /**
   * Apply a copy of this material to all selected materials in the scene.
   */
  applyToScene (): void;

  /**
   * Deletes all bricks in this material.
   */
  deleteAllBricks (): void;

  /**
   * Deletes the brick with the given id from the material.
   * @param id - The id of the brick to delete.
   */
  deleteBrick (id: number): void;

  /**
   * Deletes the given brick from the material.
   * @param brick - The brick to delete.
   */
  deleteBrick (brick: shaderbrick_dz): void;

  /**
   * Takes this brick material out of edit mode.
   */
  endEditMode (): void;

  /**
   * @returns The brick at the given id.
   * @param id - The id of the desired brick.
   */
  getBrick (id: number): shaderbrick_dz;

  /**
   * @returns A list of the ids for the bricks associated with this brick material.
   */
  getBrickIDs (): Array<unknown>;

  /**
   * @returns The brick set at the specified location.
   * @param i - The index of the desired brick set.
   */
  getBrickSet (i: number): brickset_dz;

  /**
   * @returns The user name of this brick material.
   */
  getBrickUserName (): string;

  /**
   * @returns The extension for this brick material.
   */
  getExtension (): string;

  /**
   * @returns The number of brick sets in this brick material.
   */
  getNumBrickSets (): number;

  /**
   * Invalidates the brick sets, causing them to be rebuilt.
   */
  invalidateSets (): void;

  /**
   * @returns true if this brick material is currently in edit mode, otherwise false.
   */
  isInEditMode (): boolean;

  /**
   * Sets the user name of this brick material.
   * @param name - The new name for this brick material.
   */
  setBrickUserName (name: string): void;

  /**
   * Sets the name for this brick material.
   * @param name - The new name to be used.
   */
  setMaterialName (name: string): void;

  /**
   * Sets whether or not this brick material needs Ptex parameters.
   * @param onoff - If true, this brick material needs Ptex parameters.
   */
  setNeedsPtexParams (onoff: boolean): void;

  /**
   * Sets whether this brick material needs tangent space parameters.
   * @param onoff - If true, this brick material will need tangent space parameters.
   */
  setNeedsTangentSpaceParams (onoff: boolean): void;

  /**
   * Puts this brick material in edit mode.
   */
  startEditMode (): void;

  /**
   * Sets whether the identifier is updated when this brick material is invalidated.
   * @param onOff - If true, the identifier will be updated when this brick material is invalidated.
   */
  updateIdentifierOnSetInvalidate (onOff: boolean): void;

  /**
   * @returns true if this brick material uses local shader space.
   */
  usesLocalShaderSpace (): boolean;

  brickAdded: Signal<{
    /**
     * Emitted when a brick is added to this brick material.
     * @param brick - The brick that was added.
     */
  (brick: shaderbrick_dz): void;
  }>;
  brickRemoved: Signal<{
    /**
     * Emitted when a brick is removed from this brick material.
     * @param brick - The brick that was removed.
     */
  (brick: shaderbrick_dz): void;
  }>;
  generateFilesFinished: Signal<{
    /**
     * Emitted when file generation is finished.
     */
  (): void;
  }>;
  generateFilesStarted: Signal<{
    /**
     * Emitted when file generation is started.
     */
  (): void;
  }>;
}

declare var DzBrickMaterial:
{
  prototype: DzBrickMaterial;

  /**
   * Creates a new brick material.
   */
  new (): DzBrickMaterial;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/button_dz
 * DAZScript abstract base class for button widgets.
 * @remarks DzButton implements an abstract button base. Subclasses specify how to respond to user interaction, and how to present the button to the user. If you want to create a button, create a DzPushButton.
 * DzPushButton provides both push and toggle buttons. The DzRadioButton and DzCheckBox classes provide only toggle buttons.
 * The difference between down and on is, when a user clicks a [toggle] button to toggle it on, the button is first pressed and then released into the On state (on is true, down is false). When the user clicks it again (to toggle it off), the button is first pressed and then released to the Off state (on and down are false).
 */
interface DzButton extends DzWidget
{

  /**
   * Whether autoRepeat is enabled. false by default. If enabled, the clicked() signal is emitted at regular intervals if down is true. This property has no effect on toggle buttons.
   */
  autoRepeat: boolean

  /**
   * The initial delay, in milliseconds, before auto-repetition begins
   */
  autoRepeatDelay: number

  /**
   * The length of the auto-repetition interval, in milliseconds
   */
  autoRepeatInterval: number

  /**
   * Whether or not the button is checkable. false by default.
   */
  checkable: boolean

  /**
   * Whether or not the button is checked. Only applies to checkable buttons.
   */
  checked: boolean

  /**
   * Whether the button is pressed. true if the button is pressed down. false by default. The signals pressed() and clicked() are not emitted when this property set to true.
   */
  down: boolean

  /**
   * The Pixmap shown on the button. If the Pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the Pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. 0 if no pixmap is set.
   */
  pixmap: Pixmap

  /**
   * The text displayed on the button. undefined by default. An ampersand (&) in the String automatically creates an accelerator for it using the character that follows the ampersand, as the accelerator key. Any previous accelerator will be overwritten, or cleared if no accelerator is defined by the text.
   */
  text: string

  /**
   * Whether the button is a toggle (Read Only). false by default.
   */
  toggleButton: boolean

  /**
   * Toggles the state of a toggle button.
   */
  toggle (): void;

  clicked: Signal<{
    /**
     * Emitted when the button is pressed and then released.
     * @example
     * function handleButtonClicked(){
     * 	print( "Button clicked." );
     * }
     *  
     * //... build a DzDialog
     *  
     * var wButton = new DzPushButton( wDlg );
     * wButton.clicked.connect( handleButtonClicked );
     */
  (): void;
  }>;
  pressed: Signal<{
    /**
     * Emitted when the button is pressed.
     * @example
     * function handleButtonPressed(){
     * 	print( "Button pressed." );
     * }
     *  
     * //... build a DzDialog
     *  
     * var wButton = new DzPushButton( myDialog );
     * wButton.pressed.connect( handleButtonPressed );
     */
  (): void;
  }>;
  released: Signal<{
    /**
     * Emitted when the button is released.
     * @example
     * function handleButtonReleased(){
     * 	print( "Button released." );
     * }
     *  
     * //... build a DzDialog
     *  
     * var wButton = new DzPushButton( wDlg );
     * wButton.released.connect( handleButtonReleased );
     */
  (): void;
  }>;
  stateChanged: Signal<{
    /**
     * Emitted when toggleState on this button has changed.
     * @param state - 
     */
  (state: number): void;
  }>;
  toggled: Signal<{
    /**
     * Emitted when the button is toggled.
     * @example
     * function handleButtonToggled( bArg ){
     * 	print( String( "Button toggled: %1" ).arg( bArg ) );
     * }
     *  
     * //... build a DzDialog
     *  
     * var wButton = new DzPushButton( wDlg );
     * wButton.toggled.connect( handleButtonToggled );
     * @param onOff - true if the button is on, false if the button is off.
     */
  (onOff: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/buttongroup_dz
 * DAZScript wrapper for QButtonGroup.
 * @remarks TODO: Add detailed description.
 */
interface DzButtonGroup extends DzGroupBox
{

  /**
   * The number of buttons in the group (Read Only)
   */
  count: number

  /**
   * Whether the group is exclusive for all toggle buttons (the default is false)
   */
  exclusive: boolean

  /**
   * Whether the group is exclusive for radio buttons (the default is true)
   */
  radioButtonExclusive: boolean

  /**
   * The checked button in an exclusive group
   */
  selected: number

  /**
   * Add the button to the group. This is only necessary if the button was not created as a child of the group.
   * @param button - 
   */
  addButton (button: DzButton): void;

  /**
   * Add the button to the group. This is only necessary if the button was not created as a child of the group.
   * @param button - 
   * @param id - 
   */
  addButton (button: DzButton, id: number): void;

  /**
   * TODO: Add description.
   * @param id - 
   */
  button (id: number): DzButton;

  /**
   * TODO: Add description.
   */
  buttons (): Array<unknown>;

  /**
   * TODO: Add description.
   */
  checkedButton (): DzButton;

  /**
   * @returns The index of button in the group. -1 if button is not a member of the group.
   * @param button - 
   */
  id (button: DzButton): number;

  /**
   * Add the button to the group. This is only necessary if the button was not created as a child of the group.
   * @returns The index of button in the group.
   * @param button - 
   * @param [id=-1] - 
   */
  insert (button: DzButton, id?: number): number;

  /**
   * Remove button from the group
   * @param button - 
   */
  removeButton (button: DzButton): void;

  clicked: Signal<{
    /**
     * Emitted when a button in the group is pressed and released
     * @param id - 
     */
  (id: number): void;
  }>;
  pressed: Signal<{
    /**
     * Emitted when a button in the group is pressed
     * @param id - 
     */
  (id: number): void;
  }>;
  released: Signal<{
    /**
     * Emitted when a button in the group is released
     * @param id - 
     */
  (id: number): void;
  }>;
}

declare var DzButtonGroup:
{
  prototype: DzButtonGroup;

  /**
   * Creates a button group as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzButtonGroup;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bytearray
 * DAZScript wrapper for QByteArray.
 * @remarks This is the DAZScript counterpart to the QByteArray type used in the DAZ Studio SDK.
 * Attention:
 * Inheritance will change to Object in a pending update.
 */
interface ByteArray extends QObject
{

  /**
   * The number of bytes in the array
   */
  length: number

  /**
   * The number of bytes in the array
   */
  size: number

  /**
   * @returns The byte at the given index in the array of bytes.
   * @param index - The index of the byte to return.
   */
  byteAt (index: number): number;

  /**
   * @returns The character at the given index in the array of bytes.
   * @param index - The index of the byte to return.
   */
  charAt (index: number): string;

  /**
   * @returns The array of bytes as a string.
   */
  convertToString (): string;

  /**
   * @returns The array of bytes as a string.
   */
  convertToStringFromUtf16 (): string;

  /**
   * @returns The array of bytes as a string.
   */
  convertToStringFromUtf8 (): string;

  /**
   * @returns A decoded copy of the Base64 encoded array base64.
   * Attention:
   * Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
   * @since 4.10.0.88
   * @param base64 - 
   */
  fromBase64 (base64: ByteArray): ByteArray;

  /**
   * @returns A decoded copy of the hexidecimal encoded array hexEncoded.
   * Attention:
   * Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
   * @since 4.10.0.88
   * @param hexEncoded - 
   */
  fromHex (hexEncoded: ByteArray): ByteArray;

  /**
   * @returns A decoded copy of the URI/URL-style percent-encoded pctEncoded.
   * @since 4.10.0.88
   * @param pctEncoded - 
   */
  fromPercentEncoding (pctEncoded: ByteArray): ByteArray;

  /**
   * @returns A copy of the byte array, encoded as Base64.
   * Attention:
   * The algorithm used to encode Base64-encoded data is defined in RFC 2045.
   * @since 4.10.0.88
   */
  toBase64 (): ByteArray;

  /**
   * @returns A hexidecimal encoded copy of the byte array.
   * Attention:
   * Hexidecimal encoding uses the numbers 0-9 and the letters a-f.
   * @since 4.10.0.88
   */
  toHex (): ByteArray;

  /**
   * @returns A URI/URL-style percent-encoded copy of this byte arra.
   * Attention:
   * By default, this function will encode all characters that are not one of the following: ALPHA (“a” to “z” and “A” to “Z”) / DIGIT (0 to 9) / “-” / “.” / “_” / “~”
   * @since 4.10.0.88
   * @param [exclude=ByteArray] - To characters to prevent from being encoded.
   * @param [include=ByteArray] - 
   */
  toPercentEncoding (exclude?: ByteArray, include?: ByteArray): ByteArray;

}

declare var ByteArray:
{
  prototype: ByteArray;

  /**
   * Default Constructor.
   */
  new (): ByteArray;

  /**
   * Copy Constructor.
   * @param byteArray - The ByteArray to copy.
   */
  new (byteArray: ByteArray): ByteArray;

  /**
   * Creates a byte array containing the ascii representation of the string.
   * @param str - The string to copy into the byte array.
   */
  new (str: string): ByteArray;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callback_dz
 * DAZ Script callback object.
 * @remarks Encapsulates an object that is used to execute a script when a signal that it is connected to is triggered.
 * @seealso DzCallBackMgr::createCallBack(), DzCallBackMgr::getCallBack()
 */
interface DzCallBack extends QObject
{

  /**
   * Adds the callback to the given callback group.
   * @param group - The name of the group to add the callback to.
   */
  addToGroup (group: string): void;

  /**
   * Disconnects from the signal that triggers this callback.
   */
  clearConnection (): void;

  /**
   * @returns The i'th argument from the current execution of the callback.
   * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
   * @seealso setProcessAsEvent()
   * setBlockedDuringSceneLoad()
   * @param i - 
   */
  getArg (i: number): Object;

  /**
   * @returns The number of arguments for the current execution of the callback.
   * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
   * @seealso setProcessAsEvent()
   * setBlockedDuringSceneLoad()
   */
  getArgCount (): number;

  /**
   * @returns true if this callback is not processed during a scene load but is instead processed at the end of a scene load, otherwise false.
   */
  getBlockedDuringSceneLoad (): boolean;

  /**
   * @returns true if this callback is set to be deleted after it has been executed, otherwise false.
   * @since 4.6.4.67
   */
  getDeleteAfterExecution (): boolean;

  /**
   * @returns QVariant for QObject property
   * @since 4.9.4.90
   * @param name - 
   */
  getDynamicProperty (name: string): QVariant;

  /**
   * @returns A list of the groups that this callback belongs to.
   */
  getGroups (): Array<unknown>;

  /**
   * @returns true if this callback is processed as an event, otherwise false.
   */
  getProcessAsEvent (): boolean;

  /**
   * @returns The script that is executed when the signal is emitted.
   */
  getScript (): string;

  /**
   * @returns The object that sent the signal, or NULL.
   */
  getSender (): QObject;

  /**
   * @returns true if getScript() for this callback is the actual code that gets executed, false if getScript() contains the filename of the script to execute.
   */
  isEvaluated (): boolean;

  /**
   * Removes this callback from the group callback group.
   * @param group - The name of the group to remove the callback from.
   */
  removeFromGroup (group: string): void;

  /**
   * @attention Callbacks that are blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
   * @param onOff - If true, this callback will not be processed while the scene is loading, it will be processed when the scene is finished loading.
   */
  setBlockedDuringSceneLoad (onOff: boolean): void;

  /**
   * Makes the connection that triggers this callback.
   * @param sender - The object that the signal belongs to.
   * @param signal - The signature of the signal to connect to.
   * @param garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
   */
  setConnection (sender: QObject, signal: string, garbageCollect: boolean): boolean;

  /**
   * Makes the connection that triggers this callback.
   * @param sender - The object that the signal belongs to.
   * @param signal - The signature of the signal to connect to.
   */
  setConnection (sender: QObject, signal: string): boolean;

  /**
   * Makes the connection that triggers this callback.
   * @returns The number of connections in signalList that are established, or -1 if sender is null.
   * @param sender - The object that the signal belongs to.
   * @param signalList - List of signal signatures to connect to.
   * @param garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
   */
  setConnections (sender: QObject, signalList: Array<unknown>, garbageCollect: boolean): number;

  /**
   * @since 4.6.4.67
   * @param onOff - If true, sets this callback to be deleted after it has been executed.
   */
  setDeleteAfterExecution (onOff: boolean): void;

  /**
   * Set QObject dynamic property on this callback
   * @since 4.9.4.90
   * @param name - 
   * @param value - 
   */
  setDynamicProperty (name: string, value: QVariant): void;

  /**
   * @attention Callbacks that are processed as events are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
   * @param onOff - If true, sets this callback to trigger as it is encountered in the event stack.
   */
  setProcessAsEvent (onOff: boolean): void;

  /**
   * Sets the script that will be executed by this callback.
   * @param script - The filename or code of the script to execute.
   * @param evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
   */
  setScript (script: string, evaluate: boolean): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callbackmgr_dz
 * Manager that handles DzCallBack objects.
 * @remarks This class manages objects that are used to execute a scripts when a signal that the object is connected to is emitted. There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getCallBackMgr().
 * @example
 * Dynamically load a script.
 * var sScript = "support/CallBackExample/HelloWorld.dsa";
 * var oCallBackMgr = App.getCallBackMgr();
 * var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, false );
 *  
 * oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
 * @example
 * Embed a script.
 * var sPath = String( "%1/support/CallBackExample/HelloWorld.dsa" ).arg( App.getScriptsPath() );
 * var oScript = new DzScript;
 * oScript.loadFromFile( sPath );
 * var sScript = oScript.getCode();
 *  
 * var oCallBackMgr = App.getCallBackMgr();
 * var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, true );
 *  
 * oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
 * @example
 * CallBack script (./support/CallBackExample/HelloWorld.dsa).
 * “CallBack” is a global transient variable referring to the DzCallBack that executes the script.
 * var oSender = CallBack.getSender();
 * var sMessage = String( "Sender Class: %1\n" +
 * 		"Sender Name: %2\n\n" +
 * 		"CallBack Args: %3" )
 * 		.arg( oSender.className() )
 * 		.arg( oSender.name )
 * 		.arg( CallBack.getArgCount() );
 *  
 * var nArgs = CallBack.getArgCount();
 * if( nArgs > 0 ){
 * 	for( var i = 0; i < nArgs; i += 1 ){
 * 		sMessage += String( "\nArg %1 : %2" ).arg( i ).arg( CallBack.getArg( i ) );
 * 	}
 * }
 *  
 * MessageBox.information( sMessage, CallBack.className(), "&OK" );
 * @seealso DzApp::getCallBackMgr()
 */
interface DzCallBackMgr extends QObject
{

  /**
   * Deletes all callbacks.
   */
  clearAllCallBacks (): void;

  /**
   * Creates a DzCallBack object.
   * @param name - The name for the callback.
   * @param script - The filename or code of the script to execute.
   * @param evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
   */
  createCallBack (name: string, script: string, evaluate: boolean): DzCallBack;

  /**
   * Creates a DzCallBack object.
   * @param name - The name for the callback.
   */
  createCallBack (name: string): DzCallBack;

  /**
   * Deletes the callback at the given index.
   * @param index - The index of the callback to delete.
   */
  deleteCallBack (index: number): void;

  /**
   * Deletes all callbacks with the given name.
   * @param name - The name of the callback to delete.
   */
  deleteCallBack (name: string): void;

  /**
   * Deletes the specified callback.
   * @param callBack - The callback to delete.
   */
  deleteCallBack (callBack: DzCallBack): void;

  /**
   * Deletes all callbacks in a given group.
   * @param name - The name of the group with callbacks to delete.
   */
  deleteCallBackGroup (name: string): void;

  /**
   * @returns The callback at index if at least one callback exists and index is within the range [0, getNumCallBacks() - 1], otherwise null.
   * @param index - 
   */
  getCallBack (index: number): DzCallBack;

  /**
   * @returns The first DzCallBack object with the given name.
   * @param name - 
   */
  getCallBack (name: string): DzCallBack;

  /**
   * @returns The index of the first callback named name.
   * @param name - 
   */
  getCallBackIndex (name: string): number;

  /**
   * @returns The list of all callbacks.
   */
  getCallBackList (): Array<unknown>;

  /**
   * @returns The list of callbacks in the group named name.
   * @param name - 
   */
  getGroup (name: string): Array<unknown>;

  /**
   * @returns The number of callbacks.
   */
  getNumCallBacks (): number;

  /**
   * @returns A list of strings that represent the signature(s) of the signal with the specified name.
   * @param obj - 
   * @param [signalName=“”] - 
   */
  getSignalSignature (obj: QObject, signalName?: string): Array<unknown>;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/camera_dz
 * Base class for all camera objects.
 * @remarks TODO: Add detailed description.
 */
interface DzCamera extends DzNode
{

  /**
   * The dimensions of a camera.
   * @since 4.6.4.70
   */
  /**
   * The width in pixels. Since: 4.6.4.70
   */
  readonly LOCAL_PIXEL_WIDTH: number;

  /**
   * The height in pixels. Since: 4.6.4.70
   */
  readonly LOCAL_PIXEL_HEIGHT: number;

  /**
   * The relative width of the aspect frame. Since: 4.6.4.70
   */
  readonly LOCAL_ASPECT_WIDTH: number;

  /**
   * The relative height of the aspect frame. Since: 4.6.4.70
   */
  readonly LOCAL_ASPECT_HEIGHT: number;

  /**
   * The different types of camera. Each has its own default parameters which it resets to and are either orthogonal or perspective by definition.
   */
  /**
   * Orthogonal camera positioned to view the front of a figure
   */
  readonly FRONT_CAMERA: number;

  /**
   * Orthogonal camera positioned to view the back of a figure
   */
  readonly BACK_CAMERA: number;

  /**
   * Orthogonal camera positioned to view the left side of a figure.
   */
  readonly LEFT_CAMERA: number;

  /**
   * Orthogonal camera positioned to view the right side of a figure.
   */
  readonly RIGHT_CAMERA: number;

  /**
   * Orthogonal camera positioned to view a figure from the top.
   */
  readonly TOP_CAMERA: number;

  /**
   * Orthogonal camera positioned to view a figure from the bottom.
   */
  readonly BOTTOM_CAMERA: number;

  /**
   * Default perspective camera - defaults to a front view of a figure.
   */
  readonly PERSPECTIVE_CAMERA: number;

  /**
   * General Orthogonal camera.
   */
  readonly ORTHO_CAMERA: number;

  /**
   * General Perspective camera.
   */
  readonly GENERAL_CAMERA: number;

  /**
   * The modes of the headlight for the camera.
   * @since 4.7.1.94
   */
  /**
   * The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
   */
  readonly hmAuto: number;

  /**
   * The headlight is on. Since: 4.7.1.94
   */
  readonly hmOn: number;

  /**
   * The headlight is off. Since: 4.7.1.94
   */
  readonly hmOff: number;

  /**
   * The aspect height of the camera.
   * @since 4.6.4.67
   */
  aspectHeight: number

  /**
   * The aspect ratio of the camera (w / h).
   * @since 4.6.4.67
   * @seealso DzRenderOptions::aspect
   */
  aspectRatio: number

  /**
   * The aspect width of the camera.
   * @since 4.6.4.67
   */
  aspectWidth: number

  /**
   * The distance of the far clipping plane from the camera. (Read Only)
   */
  farClippingPlane: number

  /**
   * The focal distance of the camera.
   */
  focalDistance: number

  /**
   * The focal length of the camera.
   */
  focalLength: number

  /**
   * The width of the frame (film/sensor) of the camera (in mm). (Read Only)
   * @since 4.6.4.67
   */
  frameWidth: number

  /**
   * The mode of the headlight.
   * @since 4.7.1.94
   */
  headlightMode: number

  /**
   * The relative offset of the headlight from the camera.
   * @since 4.7.1.94
   */
  headlightOffset: DzVec3

  /**
   * The distance of the near clipping plane from the camera. (Read Only)
   */
  nearClippingPlane: number

  /**
   * The pixels height of the camera.
   * @since 4.6.4.67
   */
  pixelsHeight: number

  /**
   * The pixels width of the camera.
   * @since 4.6.4.67
   */
  pixelsWidth: number

  /**
   * Whether or not the proportions of the camera is constrained.
   * @since 4.6.4.70
   */
  proportionsConstrained: boolean

  /**
   * The type of the camera. (Read Only)
   */
  type: number

  /**
   * Whether or not to use the local dimensions of the camera.
   * @since 4.6.4.67
   */
  useLocalDimensions: boolean

  /**
   * Rotates the camera and adjusts its focal distance so that its focal point is at the given point.
   * @param pos - The point to aim the camera at.
   */
  aimAt (pos: DzVec3): void;

  /**
   * Translates the camera so that its view frames the given box, and sets the camera's focal point to the center of the box, given the aspect ratio of the current view (w / h)
   * @param box - The bounding box to frame in the camera's view
   * @param aspect - The aspect ratio of the current view.
   */
  frame (box: DzBox3, aspect: number): void;

  /**
   * @returns The angle, in radians, of the horizontal field of view (FOV) for the camera (rectilinear lens).
   * @attention The following formula is used to calculate the horizontal FOV:
   * angle = 2 * (arctan(frameWidth)/(2 * focalLength)))
   * The aspect of the frame can be manipulated by the user. Therefore, calculating the vertical and/or diagonal FOV is accomplished using the aspect ratio.
   * @seealso aspectRatio
   */
  getFieldOfView (): number;

  /**
   * @returns The focal point of the camera.
   */
  getFocalPoint (): DzVec3;

  /**
   * @returns A light that lights the scene in front of the camera. Used for rendering by OpenGL and offline renderers when no lights exist in the scene. This headlight is created on demand - i.e. no headlight for this camera exists until this function is called the first time.
   */
  getHeadlight (): DzLight;

  /**
   * @returns true if this is a non-animatable view camera, otherwise false.
   */
  isViewCamera (): boolean;

  /**
   * Resets the camera viewing parameters to defaults.
   */
  reset (): void;

  /**
   * TODO: Add description.
   * @param hasLights - 
   * @param isRender - 
   */
  shouldDoHeadLight (hasLights: boolean, isRender: boolean): boolean;

  /**
   * @returns true if this element should have its property groups and properties sorted after being created on load, otherwise false.
   */
  shouldSortOnLoad (): boolean;

  /**
   * TODO: Add description.
   * @param anchor - 
   */
  updateDimensions (anchor: number): void;

  aspectHeightChanged: Signal<{
    /**
     * Emitted when the aspect height dimension of the camera changes.
     * @param height - 
     */
  (height: number): void;
  }>;
  aspectRatioChanged: Signal<{
    /**
     * Emitted when the camera's aspect ratio changes.
     */
  (): void;
  }>;
  aspectWidthChanged: Signal<{
    /**
     * Emitted when the aspect width dimension of the camera changes.
     * @param width - 
     */
  (width: number): void;
  }>;
  dimensionsChanged: Signal<{
    /**
     * Emitted when any of the local dimensions of the camera change.
     */
  (): void;
  }>;
  focalDistanceChanged: Signal<{
    /**
     * Emitted when the focal distance channel changes.
     * @param range - The time range over which the channel changed.
     */
  (range: DzTimeRange): void;
  }>;
  focalLengthChanged: Signal<{
    /**
     * Emitted when the focal length channel changes.
     * @param range - The time range over which the channel changed.
     */
  (range: DzTimeRange): void;
  }>;
  frameWidthChanged: Signal<{
    /**
     * Emitted when the frame width of the camera changes.
     * @param size - 
     */
  (size: number): void;
  }>;
  headlightModeChanged: Signal<{
    /**
     * Emitted when headlight mode of the camera changes.
     */
  (): void;
  }>;
  headlightOffsetChanged: Signal<{
    /**
     * Emitted when headlight offset of the camera changes.
     */
  (): void;
  }>;
  pixelDimensionsChanged: Signal<{
    /**
     * Emitted when the local pixel dimensions of the camera change.
     */
  (): void;
  }>;
  pixelsHeightChanged: Signal<{
    /**
     * Emitted when the pixel height dimension of the camera changes.
     * @param height - 
     */
  (height: number): void;
  }>;
  pixelsWidthChanged: Signal<{
    /**
     * Emitted when the pixel width dimension of the camera changes.
     * @param width - 
     */
  (width: number): void;
  }>;
  projectionChanged: Signal<{
    /**
     * Emitted when projection of the camera changes and its view must be redrawn.
     */
  (): void;
  }>;
  proportionsConstrainedChanged: Signal<{
    /**
     * Emitted when the option for whether or not to constrain proportions of the local dimensions of the camera changes.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
  useLocalDimensionsChanged: Signal<{
    /**
     * Emitted when the option for whether or not to use the local dimensions of the camera changes.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
}

declare namespace DzCamera
{

  /**
   * The dimensions of a camera.
   * @since 4.6.4.70
   */
  /**
   * The width in pixels. Since: 4.6.4.70
   */
  export const LOCAL_PIXEL_WIDTH: number;
  /**
   * The height in pixels. Since: 4.6.4.70
   */
  export const LOCAL_PIXEL_HEIGHT: number;
  /**
   * The relative width of the aspect frame. Since: 4.6.4.70
   */
  export const LOCAL_ASPECT_WIDTH: number;
  /**
   * The relative height of the aspect frame. Since: 4.6.4.70
   */
  export const LOCAL_ASPECT_HEIGHT: number;

  /**
   * The different types of camera. Each has its own default parameters which it resets to and are either orthogonal or perspective by definition.
   */
  /**
   * Orthogonal camera positioned to view the front of a figure
   */
  export const FRONT_CAMERA: number;
  /**
   * Orthogonal camera positioned to view the back of a figure
   */
  export const BACK_CAMERA: number;
  /**
   * Orthogonal camera positioned to view the left side of a figure.
   */
  export const LEFT_CAMERA: number;
  /**
   * Orthogonal camera positioned to view the right side of a figure.
   */
  export const RIGHT_CAMERA: number;
  /**
   * Orthogonal camera positioned to view a figure from the top.
   */
  export const TOP_CAMERA: number;
  /**
   * Orthogonal camera positioned to view a figure from the bottom.
   */
  export const BOTTOM_CAMERA: number;
  /**
   * Default perspective camera - defaults to a front view of a figure.
   */
  export const PERSPECTIVE_CAMERA: number;
  /**
   * General Orthogonal camera.
   */
  export const ORTHO_CAMERA: number;
  /**
   * General Perspective camera.
   */
  export const GENERAL_CAMERA: number;

  /**
   * The modes of the headlight for the camera.
   * @since 4.7.1.94
   */
  /**
   * The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
   */
  export const hmAuto: number;
  /**
   * The headlight is on. Since: 4.7.1.94
   */
  export const hmOn: number;
  /**
   * The headlight is off. Since: 4.7.1.94
   */
  export const hmOff: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cameraassetfilter_dz
 * Class for saving DSON-based Camera(s) Presets.
 * @remarks An asset save filter for saving a Camera(s) Preset in the DSON format.
 * @seealso Sample: Save a Camera(s) Preset
 */
interface DzCameraAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzCameraAssetFilter:
{
  prototype: DzCameraAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzCameraAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/categoryassetcontainer_dz
 * A container type for assets that are assigned a particular classification.
 * @remarks The “Category” container type serves to provide a means of working with assets that share qualities or characteristics without moving the actual files on disk; moving or renaming files on disk breaks the correlation between the file and the asset that represents it.
 * @seealso DzAssetMgr::getCategories()
 * DzAsset
 */
interface DzCategoryAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * Holds whether this category is owned by a vendor or by the user. (Read Only)
   * @since 4.9.3.110
   */
  isVendor: boolean

  /**
   * @returns A list of assets associated with the path of this container, matching the criteria specified.
   * @seealso getPath()
   * DzAssetMgr::searchForAssetsInCategory()
   * @since 4.9.3.56
   * @param [userFacing=true] - Whether or not to limit the list to user-facing assets.
   * @param [installed=true] - Whether or not to limit the list to installed assets.
   */
  getAssetsInCategory (userFacing?: boolean, installed?: boolean): Array<unknown>;

  /**
   * @returns The full path of the category that this container represents.
   * @since 4.9.2.48
   */
  getPath (): string;

  /**
   * Updates the container using the data that is currently stored in the database.
   */
  updateRow (): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/characterassetfilter_dz
 * Class for saving DSON-based Character Presets.
 * @remarks An asset save filter for saving a Character Preset in DSON format.
 * @seealso Save a Character Preset
 */
interface DzCharacterAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzCharacterAssetFilter:
{
  prototype: DzCharacterAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzCharacterAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checkbox_dz
 * DAZScript wrapper for QCheckBox.
 * @remarks DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. “many of many”). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. “one of many”).
 * @example
 * // Create a new dialog
 * var wDlg = new DzDialog;
 * wDlg.caption = "DzCheckBox Example";
 *  
 * // Create a layout for the dialog
 * var wLyt = new DzVBoxLayout( wDlg );
 * wLyt.autoAdd = true;
 *  
 * // Create a group box for the options
 * var wOptGB = new DzVGroupBox( wDlg );
 * wOptGB.columns = 1;
 *  
 * // Create the options
 * var wOpt1Btn = new DzCheckBox( wOptGB );
 * wOpt1Btn.text = "Option 1";
 * wOpt1Btn.checked = true;
 * var wOpt2Btn = new DzCheckBox( wOptGB );
 * wOpt2Btn.text = "Option 2";
 * var wOpt3Btn = new DzCheckBox( wOptGB );
 * wOpt3Btn.text = "Option 3";
 * wOpt3Btn.checked = true;
 *  
 * // Launch the dialog
 * wDlg.exec();
 */
interface DzCheckBox extends DzButton
{

  /**
   * Whether the button is checked. true if the button is checked. false by default.
   */
  checked: boolean

  /**
   * Whether the the checkbox is a tri-state checkbox. The default is two-state (e.g. tri-state is false).
   */
  tristate: boolean

}

declare var DzCheckBox:
{
  prototype: DzCheckBox;

  /**
   * Creates a check box as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzCheckBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checklistitem_dz
 * DAZScript wrapper for Q3CheckListItem.
 * @remarks This class is not a widget, but a helper class for working with DzListView. Each DzCheckListItem represents a single item in a list view - add items to a list view by creating a new DzCheckListItem that is a child of the list view, or a child of another list view item in the list view.
 */
interface DzCheckListItem extends DzListViewItem
{

  /**
   * Specifies the checklist item's toggle state
   */
  /**
   * The item is off
   */
  readonly Off: number;

  /**
   * The item has not changed - i.e. it is in the third state and the user has not clicked it.
   */
  readonly NoChange: number;

  /**
   * The item is on
   */
  readonly On: number;

  /**
   * Specifies the checklist item's type
   */
  /**
   * Radio Button item. Must be the child of a RadioButtonController
   */
  readonly RadioButton: number;

  /**
   * Check Box item.
   */
  readonly CheckBox: number;

  /**
   * Radio Button parent item.
   */
  readonly RadioButtonController: number;

  /**
   * Check Box parent item.
   */
  readonly CheckBoxController: number;

  /**
   * Holds the height of the item.
   */
  height: number

  /**
   * Holds whether the item toggled on.
   */
  on: boolean

  /**
   * Holds the state of the item.
   */
  state: number

  /**
   * Holds whether the item is tristate.
   */
  triState: boolean

  /**
   * Holds the type of the item. (Read Only)
   */
  type: number

}

declare var DzCheckListItem:
{
  prototype: DzCheckListItem;

  /**
   * Creates a checklist item at the root level of the given list view
   * @param parent - The listview to create this item as a child of
   * @param [type=DzCheckListItem.Type.RadioButtonController] - The Type of item to create
   * @param [id=-1] - The identifier for this item
   */
  new (parent: DzListView, type?: number, id?: number): DzCheckListItem;

  /**
   * Creates a checklist item as a child of the given list item
   * @param parent - The item to create this item as a child of
   * @param [type=DzCheckListItem.Type.RadioButtonController] - The Type of item to create
   * @param [id=-1] - The identifier for this item
   */
  new (parent: DzCheckListItem, type?: number, id?: number): DzCheckListItem;

  /**
   * Creates a checklist item as a child of the given list item
   * @param parent - The item to create this item as a child of
   * @param [type=DzCheckListItem.Type.RadioButtonController] - The Type of item to create
   * @param [id=-1] - The identifier for this item
   */
  new (parent: DzListViewItem, type?: number, id?: number): DzCheckListItem;

  /**
   * Specifies the checklist item's toggle state
   */
  /**
   * The item is off
   */
  readonly Off: number;
  /**
   * The item has not changed - i.e. it is in the third state and the user has not clicked it.
   */
  readonly NoChange: number;
  /**
   * The item is on
   */
  readonly On: number;

  /**
   * Specifies the checklist item's type
   */
  /**
   * Radio Button item. Must be the child of a RadioButtonController
   */
  readonly RadioButton: number;
  /**
   * Check Box item.
   */
  readonly CheckBox: number;
  /**
   * Radio Button parent item.
   */
  readonly RadioButtonController: number;
  /**
   * Check Box parent item.
   */
  readonly CheckBoxController: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/circle3_dz
 * Describes a parametrically defined circle in three dimensional space.
 * @remarks TODO: Add detailed description.
 */
interface DzCircle3 extends Object
{

  /**
   * Holds the center of the circle in three dimensional space.
   */
  center: DzVec3

  /**
   * Holds the normal of the plane that the circle lies on.
   */
  normal: DzVec3

  /**
   * Holds the radius of the circle.
   */
  radius: number

}

declare var DzCircle3:
{
  prototype: DzCircle3;

  /**
   * Default Constructor.
   */
  new (): DzCircle3;

  /**
   * Copy Constructor.
   * @param circle - The circle to copy.
   */
  new (circle: DzCircle3): DzCircle3;

  /**
   * @param center - The center point of the circle.
   * @param normal - The normal of the circle (i.e. a vector perpendicular to the plane of the circle).
   * @param radius - The radius of the circle.
   */
  new (center: DzVec3, normal: DzVec3, radius: number): DzCircle3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/color
 * DAZScript wrapper for QColor.
 * @remarks This is the DAZScript counterpart to the QColor type used in the DAZ Studio SDK.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Color extends QObject
{

  /**
   * The alpha component of the color. In the range 0 to 255.
   */
  alpha: number

  /**
   * The blue component of the color. In the range 0 to 255.
   */
  blue: number

  /**
   * The green component of the color. In the range 0 to 255.
   */
  green: number

  /**
   * The hue of the color as defined in the HSV color model.
   */
  hue: number

  /**
   * The name of the color if it matches a named color, otherwise an empty string.
   */
  name: string

  /**
   * The red component of the color. In the range 0 to 255.
   */
  red: number

  /**
   * The color code of the color.
   */
  rgb: number

  /**
   * The saturation of the color as defined in the HSV color model.
   */
  saturation: number

  /**
   * The value of the color as defined in the HSV color model.
   */
  value: number

  /**
   * @returns A darker version of this color.
   */
  dark (): Color;

  /**
   * @returns true if the color is valid, otherwise false.
   * @since 4.8.1.93
   */
  isValid (): boolean;

  /**
   * @returns A lighter version of this color.
   */
  light (): Color;

  /**
   * Sets the red, green, blue and alpha values of this color to r, g, b and a, respectively.
   * @param r - The new red value for the color.
   * @param g - The new green value for the color.
   * @param b - The new blue value for the color.
   * @param a - 
   */
  setRgb (r: number, g: number, b: number, a: number): void;

  /**
   * Sets the red, green and blue values of this color to r, g and b, respectively.
   * @param r - The new red value for the color.
   * @param g - The new green value for the color.
   * @param b - The new blue value for the color.
   */
  setRgb (r: number, g: number, b: number): void;

  /**
   * Sets the color code of the color. The value is a bitmask on the form 0xRRGGBB, where RR=red, GG=green, and BB=blue, all as hexadecimal digits.
   * @param colorCode - The encoded value for the color.
   */
  setRgb (colorCode: number): void;

}

declare var Color:
{
  prototype: Color;

  /**
   * Default Constructor.
   */
  new (): Color;

  /**
   * Sets the RGB value from colorName, which may be in one of these formats (each of R, G and B is a single hex digit):
   * #RGB
   * #RRGGBB
   * #RRRGGGBBB
   * #RRRRGGGGBBBB
   * A name from the color database
   * The color is invalid if name cannot be parsed.
   * @param colorName - The named color to set the value of this color to.
   */
  new (colorName: string): Color;

  /**
   * Component-wise constructor. Each value (i.e., r, g, b, a ) should be in the [0, 255] range.
   * @param r - The red value for the color.
   * @param g - The green value for the color.
   * @param b - The blue value for the color.
   * @param [a=255] - The alpha value for the color (since 4.9.4.4).
   */
  new (r: number, g: number, b: number, a?: number): Color;

  /**
   * Copy Constructor.
   * @param color - The Color to copy.
   */
  new (color: Color): Color;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colordialog_dz
 * DAZScript wrapper for QColorDialog.
 * @remarks The DzColorDialog class is available in DAZScript via Global::ColorDialog.
 * It provides a function to display an OS native color picker to the user - simply call the function as shown in the following example:
 * @example
 * // Have the user select a color :
 * var color = ColorDialog.getColor();
 * Other functions are provided for getting and setting the pre-set colors listed in the picker - see the rest of the documentation for details.
 */
interface DzColorDialog extends QObject
{

  /**
   * @returns The i'th custom color in the color picker.
   * @param i - 
   */
  customColor (i: number): Color;

  /**
   * @returns The number of custom colors in the color picker.
   */
  customCount (): number;

  /**
   * Shows a color picker dialog to the user.
   * @returns The color selected by the user.
   * @param [initial=Color] - The color that the dialog will start with.
   */
  getColor (initial?: Color): Color;

  /**
   * Set the i'th custom color in the color picker.
   * @param i - 
   * @param c - 
   */
  setCustomColor (i: number, c: Color): void;

  /**
   * Set the i'th standard color in the color picker.
   * @param i - 
   * @param c - 
   */
  setStandardColor (i: number, c: Color): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorproperty_dz
 * An animatable color property.
 * @remarks This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 */
interface DzColorProperty extends DzIntProperty
{

  /**
   * The color model that will used for blending values between keyframes in an animation.
   */
  /**
   * Hue, Saturation, and Value.
   */
  readonly HSV: number;

  /**
   * Hue, Saturation, and Lightness (or Luminosity).
   */
  readonly HSL: number;

  /**
   * Red, Green, Blue.
   */
  readonly RGB: number;

  /**
   * Converts a string to an enumerated animation blend mode value.
   * @returns The AnimationBlendMode corresponding to str.
   * @since 4.6.4.84
   * @param str - The string to convert.
   */
  animationBlendModeFromStr (str: string): number;

  /**
   * Converts an enumerated animation blend mode value to a string.
   * @returns A string representation of the enumerated AnimationBlendMode value.
   * @since 4.6.4.84
   * @param type - The AnimationBlendMode to convert.
   */
  animationBlendModeToStr (type: number): string;

  /**
   * @returns The animation blend mode for the property.
   * @since 4.6.4.84
   */
  getAnimationBlendMode (): number;

  /**
   * @returns The color value of the property at the current time.
   */
  getColorValue (): Color;

  /**
   * @returns The color value of the property at the given time.
   * @param tm - The scene time to get the color value at.
   */
  getColorValue (tm: DzTime): Color;

  /**
   * @returns The default color value of the property.
   */
  getDefaultColorValue (): Color;

  /**
   * @returns The raw color value of the property at the given key.
   * @param i - The index of the key to get the color value of.
   */
  getKeyColorValue (i: number): Color;

  /**
   * @returns The raw color value of the property at the given time.
   * @param tm - The scene time at which to get the raw color value.
   */
  getRawColorValue (tm: DzTime): Color;

  /**
   * @returns The raw color value of the property.
   */
  getRawColorValue (): Color;

  /**
   * Sets the animation blend mode for the property.
   * @since 4.6.4.84
   * @param mode - The animation blend mode to set.
   */
  setAnimationBlendMode (mode: number): void;

  /**
   * Sets the color value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time at which to set the value.
   * @param val - The new value for the property.
   */
  setColorValue (tm: DzTime, val: Color): void;

  /**
   * Sets the color value for this property at the current time; or the default value if this property is not animatable.
   * @param val - The new value for the property.
   */
  setColorValue (val: Color): void;

  /**
   * Sets the default color value for this property.
   * @param val - The new default value for the property.
   */
  setDefaultColorValue (val: Color): void;

  /**
   * Sets the color value of this property for the given key.
   * @param i - The index of the key to set the value of.
   * @param val - The new default value for the property.
   */
  setKeyColorValue (i: number, val: Color): void;

  animationBlendModeChanged: Signal<{
    /**
     * Emitted when the animation blend mode for this property has changed.
     */
  (): void;
  }>;
}

declare var DzColorProperty:
{
  prototype: DzColorProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzColorProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param initVal - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal: Color): DzColorProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzColorProperty;

  /**
   * The color model that will used for blending values between keyframes in an animation.
   */
  /**
   * Hue, Saturation, and Value.
   */
  readonly HSV: number;
  /**
   * Hue, Saturation, and Lightness (or Luminosity).
   */
  readonly HSL: number;
  /**
   * Red, Green, Blue.
   */
  readonly RGB: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorwgt_dz
 * DAZScript color widget.
 * @remarks A DzColorWgt provides a control for displaying/selecting a color.
 */
interface DzColorWgt extends DzWidget
{

  /**
   * If true, the widget is considered to have an 'indeterminate' or 'Multiple' value. False by default.
   */
  indeterminate: boolean

  /**
   * Holds the current value of the widget.
   */
  value: Color

  colorChanged: Signal<{
    /**
     * Emitted when the color is changed.
     * @param color - The new color value of the control.
     */
  (color: Color): void;
  }>;
  editEnd: Signal<{
    /**
     * Emitted when an editing operation on the slider ends - e.g. the user finishes spinning a color field.
     */
  (): void;
  }>;
  editStart: Signal<{
    /**
     * Emitted when an editing operation on the widget begins - e.g. the user starts spinning a color field.
     */
  (): void;
  }>;
}

declare var DzColorWgt:
{
  prototype: DzColorWgt;

  /**
   * Creates a color widget as a child of the given parent widget.
   * @param parent - The widget parent for the color widget.
   */
  new (parent: DzWidget): DzColorWgt;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/combobox_dz
 * DAZScript wrapper for QComboBox.
 * @remarks DzComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.
 */
interface DzComboBox extends DzWidget
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoInsert: number;

  /**
   * TODO: Add description.
   */
  readonly InsertAtTop: number;

  /**
   * TODO: Add description.
   */
  readonly InsertAtCurrent: number;

  /**
   * TODO: Add description.
   */
  readonly InsertAtBottom: number;

  /**
   * TODO: Add description.
   */
  readonly InsertAfterCurrent: number;

  /**
   * TODO: Add description.
   */
  readonly InsertBeforeCurrent: number;

  /**
   * TODO: Add description.
   */
  readonly InsertAlphabetically: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly AdjustToContents: number;

  /**
   * TODO: Add description.
   */
  readonly AdjustToContentsOnFirstShow: number;

  /**
   * TODO: Add description.
   */
  readonly AdjustToMinimumContentsLength: number;

  /**
   * TODO: Add description.
   */
  readonly AdjustToMinimumContentsLengthWithIcon: number;

  /**
   * Holds the number of items in the combobox. (Read Only)
   */
  count: number

  /**
   * Holds the index of the currently selected item in the combobox.
   */
  currentItem: number

  /**
   * Holds the text of the currently selected item in the combobox.
   */
  currentText: string

  /**
   * Holds the policy used to determine where user-inserted items should appear in the combobox.
   */
  insertPolicy: number

  /**
   * Holds the maximum number of items allowed on screen; 10 by default.
   */
  maxVisibleItems: number

  /**
   * Holds the minimum number of characters that should fit in the combobox.
   */
  minimumContentsLength: number

  /**
   * Holds the policy describing how the size of the combobox changes when the content changes.
   */
  sizeAdjustPolicy: number

  /**
   * Adds text to the list of items in the combobox.
   * @param text - 
   * @param [userData=“”] - 
   */
  addItem (text: string, userData?: string): void;

  /**
   * Adds each of the strings in texts to the combobox
   * @param texts - 
   */
  addItems (texts: Array<unknown>): void;

  /**
   * Removes all items from the combobox.
   */
  clear (): void;

  /**
   * @returns The index of the item containing data; otherwise returns -1.
   * @param data - 
   */
  findData (data: string): number;

  /**
   * @returns The index of the item containing text; otherwise returns -1.
   * @param text - 
   */
  findText (text: string): number;

  /**
   * Inserts the text and userData into the combobox at index. If index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If index is zero or negative, the new item is prepended to the list of existing items.
   * @param index - 
   * @param text - 
   * @param [userData=“”] - 
   */
  insertItem (index: number, text: string, userData?: string): void;

  /**
   * Inserts the strings in list into the combobox as separate items, starting at index.
   * @param index - 
   * @param list - 
   */
  insertItems (index: number, list: Array<unknown>): void;

  /**
   * Inserts a separator into the combobox at index.
   * @param index - 
   */
  insertSeparator (index: number): void;

  /**
   * @returns The data of the item at index.
   * @param index - 
   */
  itemData (index: number): string;

  /**
   * @returns The text of the item at index.
   * @param index - 
   */
  itemText (index: number): string;

  /**
   * Removes the item at index from the list of items.
   * @param index - 
   */
  removeItem (index: number): void;

  /**
   * Sets the data for the item at index.
   * @param index - 
   * @param value - 
   */
  setItemData (index: number, value: string): void;

  /**
   * Sets the text for the item at index.
   * @param index - 
   * @param text - 
   */
  setItemText (index: number, text: string): void;

  activated: Signal<{
    /**
     * Emitted when an item is selected, passes the index of the item that was activated.
     * @param index - 
     */
  (index: number): void;
    /**
     * Emitted when an item is selected, passes the text of the item that was activated.
     * @param text - 
     */
  (text: string): void;
  }>;
  currentIndexChanged: Signal<{
    /**
     * Emitted when the current index changes, passes the text of the item that changed.
     * @param text - 
     */
  (text: string): void;
    /**
     * Emitted when the current index changes, passes the index of the item that changed.
     * @param index - 
     */
  (index: number): void;
  }>;
  highlighted: Signal<{
    /**
     * Emitted when the highlighted item changes, passes the text of the item that is highlighted.
     * @param text - 
     */
  (text: string): void;
    /**
     * Emitted when the highlighted item changes, passes the index of the item that is highlighted.
     * @param index - 
     */
  (index: number): void;
  }>;
  textChanged: Signal<{
    /**
     * Emitted when the text of the box changes, passes the new text of the box.
     * @param text - 
     */
  (text: string): void;
  }>;
}

declare var DzComboBox:
{
  prototype: DzComboBox;

  /**
   * Creates a combobox as a child of the given parent widget.
   * @param parent - The widget parent for the combobox.
   */
  new (parent: DzWidget): DzComboBox;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoInsert: number;
  /**
   * TODO: Add description.
   */
  readonly InsertAtTop: number;
  /**
   * TODO: Add description.
   */
  readonly InsertAtCurrent: number;
  /**
   * TODO: Add description.
   */
  readonly InsertAtBottom: number;
  /**
   * TODO: Add description.
   */
  readonly InsertAfterCurrent: number;
  /**
   * TODO: Add description.
   */
  readonly InsertBeforeCurrent: number;
  /**
   * TODO: Add description.
   */
  readonly InsertAlphabetically: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly AdjustToContents: number;
  /**
   * TODO: Add description.
   */
  readonly AdjustToContentsOnFirstShow: number;
  /**
   * TODO: Add description.
   */
  readonly AdjustToMinimumContentsLength: number;
  /**
   * TODO: Add description.
   */
  readonly AdjustToMinimumContentsLengthWithIcon: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/comboedit_dz
 * DAZScript wrapper for a compound QLineEdit, QPushButton and QMenu widget.
 * @remarks A DzComboEdit provides a compound widget comprised of a line edit and a button that, when clicked, causes a menu to be displayed. Selecting one of the items in the popup menu causes the value of the editor to update with the text of the selected item by default. A separator can be created in a menu by using a single hyphen (“-”) character. Sub-menus can be created by using two consecutive greater than (“»”) characters as a delimiter between the entries of a given hierarchy.
 * @example
 * var oNode = Scene.getPrimarySelection();
 * if( oNode ){
 * 	if( oNode.inherits( "DzBone" ) ){
 * 		oNode = oNode.getSkeleton();
 * 	}
 *  
 * 	var aNodes = oNode.getAllBones();
 * 	aNodes.unshift( oNode );
 *  
 * 	var oDlg = new DzBasicDialog();
 * 	var sHelpTitle = qsTr("Select a Node");
 * 	var sHelpBody = qsTr("This is a basic dialog for requesting user input.");
 * 	oDlg.caption = sHelpTitle;
 * 	oDlg.toolTip = sHelpBody;
 * 	oDlg.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
 *  
 * 	var sEmpty = qsTr("None");
 *  
 * 	var oNodeCmbEdt = new DzComboEdit( oDlg );
 * 	oNodeCmbEdt.text = sEmpty;
 * 	oNodeCmbEdt.readOnly = true;
 * 	oNodeCmbEdt.addItems( [sEmpty, "-"] );
 * 	for( var i = 0; i < aNodes.length; i += 1 ){
 * 			oNodeCmbEdt.addItem( aNodes[i].getLabel() );
 * 	}
 * 	sHelpTitle = qsTr("Node Selector");
 * 	sHelpBody = qsTr("Click the arrow for options. Right click the field for additional options.");
 * 	oNodeCmbEdt.toolTip = sHelpBody;
 * 	oNodeCmbEdt.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
 * 	oDlg.addWidget( oNodeCmbEdt );
 *  
 * 	var oWidget = oDlg.getWidget();
 * 	oWidget.objectName = "DzComboEditExampleDlg";
 *  
 * 	var sizeHint = oWidget.minimumSizeHint;
 * 	var nHeight = sizeHint.height;
 *  
 * 	oDlg.setFixedHeight( nHeight );
 *  
 * 	if( oDlg.exec() ){
 * 		print( qsTr("Dialog accted.") );
 * 		if( oNodeCmbEdt.text == sEmpty ){
 * 			print( qsTr("None selected.") );
 * 		} else {
 * 			print( qsTr("Node selected:"), oNodeCmbEdt.text );
 * 		}
 * 	} else {
 * 		print( qsTr("Dialog rejected.") );
 * 	}
 * }
 */
interface DzComboEdit extends DzWidget
{

  /**
   * TODO: Add description.
   */
  placeholderText: string

  /**
   * TODO: Add description.
   */
  readOnly: boolean

  /**
   * TODO: Add description.
   */
  text: string

  /**
   * TODO: Add description.
   */
  usePathPopUp: boolean

  /**
   * TODO: Add description.
   * @param item - 
   */
  addItem (item: string): void;

  /**
   * TODO: Add description.
   * @param items - 
   */
  addItems (items: Array<unknown>): void;

  /**
   * TODO: Add description.
   */
  clear (): void;

  /**
   * TODO: Add description.
   * @param text - 
   */
  findItem (text: string): number;

  /**
   * TODO: Add description.
   * @param index - 
   * @param item - 
   */
  insertItem (index: number, item: string): void;

  /**
   * TODO: Add description.
   * @param index - 
   * @param items - 
   */
  insertItems (index: number, items: Array<unknown>): void;

  /**
   * TODO: Add description.
   */
  items (): Array<unknown>;

  /**
   * TODO: Add description.
   * @param item - 
   */
  removeItem (item: string): void;

  itemChanged: Signal<{
    /**
     * TODO: Add description.
     * @param item - 
     */
  (item: string): void;
  }>;
  textChanged: Signal<{
    /**
     * TODO: Add description.
     * @param text - 
     */
  (text: string): void;
  }>;
}

declare var DzComboEdit:
{
  prototype: DzComboEdit;

  /**
   * Creates a combo edit as a child of the given parent widget.
   * @param parent - The widget parent for the combo edit.
   * @param [updateOnSelect=true] - Whether the editor should automatically update when an item is selected.
   */
  new (parent: DzWidget, updateOnSelect?: boolean): DzComboEdit;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/compatibilitybaseassetcontainer_dz
 * A container type for assets that are compatible with a particular compatibility base.
 * @remarks The “Compatibility Base” container type serves to provide a means of working with assets that are defined to be compatible with a particular Compatibility Base.
 * @seealso DzAssetMgr::getCompatibilityBases()
 */
interface DzCompatibilityBaseAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * Holds whether or not this compatibility base is a filter. (Read Only)
   * @since 4.11.0.93
   */
  isFilter: boolean

  /**
   * Holds whether this compatibility base is owned by a vendor or by the user. (Read Only)
   * @since 4.11.0.93
   */
  isVendor: boolean

  /**
   * @returns The full path of the compatibility base that this container represents.
   * @since 4.11.0.93
   */
  getPath (): string;

  /**
   * Attempts to update the child containers of this container.
   * @returns true if the update was successful, otherwise false.
   */
  updateChildren (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfile_dz
 * Represents a file in the content library.
 * @remarks Represents a file in the content library that can be loaded/imported. Also provides functionality for moving the file to a new location, renaming the file, and deleting the file from the library.
 * @seealso DzContentFolder
 */
interface DzContentFile extends QObject, DzRefCountedItem
{

  /**
   * Holds whether or not the file can be deleted. (Read Only)
   */
  canDelete: boolean

  /**
   * Holds whether or not the file can be renamed. (Read Only)
   */
  canRename: boolean

  /**
   * Holds whether or not a companion file is a script file. (Read Only)
   */
  companionIsScript: boolean

  /**
   * Holds the path of the companion script for non-native files. (Read Only)
   */
  companionPath: string

  /**
   * Holds the full path of the file. (Read Only)
   */
  fullPath: string

  /**
   * Holds whether or not a non-native file has a native companion file. (Read Only)
   */
  hasCompanion: boolean

  /**
   * Holds whether or not a non-native file has a companion script file. (Read Only)
   */
  hasCompanionScript: boolean

  /**
   * Holds the icon for the file. (Read Only)
   */
  icon: Pixmap

  /**
   * Holds whether or not the file is a native content file . (Read Only)
   */
  isNative: boolean

  /**
   * Holds whether or not the file is a script file . (Read Only)
   */
  isScript: boolean

  /**
   * Holds the label of the file, as displayed to the user. (Read Only)
   */
  label: string

  /**
   * Holds the name of the file. (Read Only)
   */
  name: string

  /**
   * Holds the small icon for the file. (Read Only)
   */
  smallIcon: Pixmap

  /**
   * Removes this file from its content folder. The default implementation of this function deletes the content file and any associated thumbnail image from the disk, so use with care!
   * @returns true if the file was removed successfully, otherwise false.
   */
  deleteFile (): boolean;

  /**
   * @returns The current parent folder of this file.
   */
  getFolder (): DzContentFolder;

  /**
   * @returns The next sibling of this file.
   */
  getNext (): DzContentFile;

  /**
   * Force the file to reload its icon.
   */
  reloadIcon (): void;

  /**
   * Rename the file to the given name.
   * @returns true if the file was successfully renamed, otherwise false.
   * @param newName - The new name for the file.
   */
  rename (newName: string): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfolder_dz
 * @remarks Represents a folder in the content library that holds DzContentFile objects as well as other DzContentFolder objects.
 * @seealso DzContentMgr::getContentDirectory(), DzContentMgr::getImportDirectory(), DzContentMgr::getPoserDirectory(), DzContentMgr::findBaseDirectory()
 */
interface DzContentFolder extends DzBase, DzRefCountedItem
{

  /**
   * The possible types of content folders.
   */
  /**
   * Folder containing native content.
   */
  readonly NATIVE_TYPE: number;

  /**
   * Folder containing Poser content.
   */
  readonly POSER_TYPE: number;

  /**
   * Folder containing other importable content.
   */
  readonly IMPORT_TYPE: number;

  /**
   * Holds whether or not a sub folder can be added in this folder. (Read Only)
   */
  canAddSubFolder: boolean

  /**
   * Holds whether or not this folder can be deleted. (Read Only)
   */
  canDelete: boolean

  /**
   * Holds whether or not this folder can be renamed. (Read Only)
   */
  canRename: boolean

  /**
   * Holds whether or not the files of this folder are loaded. (Read Only)
   */
  filesAreLoaded: boolean

  /**
   * Holds the name of the folder on disk. (Read Only)
   */
  folderName: string

  /**
   * Holds whether or not the subfolders of this folder are loaded. (Read Only)
   * @returns true if the child folders of this folder are already loaded, otherwise false.
   */
  foldersAreLoaded: boolean

  /**
   * Holds the type of this folder. (Read Only)
   */
  folderType: number

  /**
   * Holds the full path of the folder on disk. (Read Only)
   */
  fullPath: string

  /**
   * Holds the icon of the folder. (Read Only)
   */
  icon: Pixmap

  /**
   * Holds whether or not this folder is a built-in content folder. (Read Only)
   */
  isBuiltInContentFolder: boolean

  /**
   * Holds the label of the folder as it is displayed to the user. (Read Only)
   */
  label: string

  /**
   * Adds a new subfolder with the given name to this folder.
   * @returns true if the new subfolder was created successfully, otherwise false.
   * @param folderName - The name of the new sub folder.
   */
  addSubFolder (folderName: string): boolean;

  /**
   * @returns true if the file is a type that can be moved or copied to this folder, otherwise false.
   * @param file - The file to test for moving.
   */
  canMoveFile (file: DzContentFile): boolean;

  /**
   * Copies the given content file to this folder.
   * @returns true if the file was copied successfully, otherwise false.
   * @param file - The file to copy to this folder.
   */
  copyFile (file: DzContentFile): boolean;

  /**
   * Removes this content folder. The default implementation of this function deletes all files and subfolders in this directory from the disk, so use with care!
   * @returns true if the file was removed successfully, otherwise false.
   */
  deleteFolder (): boolean;

  /**
   * @returns The first file in this folder (if any), otherwise null.
   */
  getFirstFile (): DzContentFile;

  /**
   * @returns The first child folder (if any), otherwise null.
   */
  getFirstFolder (): DzContentFolder;

  /**
   * @returns The first hidden file in this folder (if any), otherwise null.
   */
  getFirstHiddenFile (): DzContentFile;

  /**
   * @returns The first hidden folder (if any), otherwise null.
   */
  getFirstHiddenFolder (): DzContentFolder;

  /**
   * @returns The next sibling folder (if any), otherwise null.
   */
  getNext (): DzContentFolder;

  /**
   * @returns The parent folder of this folder (if any), otherwise null.
   */
  getParent (): DzContentFolder;

  /**
   * @returns true if this folder has subfolders, otherwise false.
   */
  hasSubFolders (): boolean;

  /**
   * @returns true if the folder can be modified, otherwise false.
   */
  isModifiable (): boolean;

  /**
   * Moves the given content file to this folder.
   * @returns true if the file was moved successfully, otherwise false.
   * @param file - The file to move to this folder.
   */
  moveFile (file: DzContentFile): boolean;

  /**
   * Checks for changes in sub folders and files (if loaded).
   * @returns true if a change in subfolders was found and the tree needs to be reloaded, otherwise false.
   * @param [reloadIcons=false] - If true, the icons will be reloaded from disk.
   */
  refresh (reloadIcons?: boolean): boolean;

  /**
   * Rename the folder to the given name.
   * @returns true if the folder was successfully renamed, otherwise false.
   * @param newName - The new name for the folder.
   */
  rename (newName: string): boolean;

  addedFolder: Signal<{
    /**
     * Emitted when a new folder is added.
     * @param newFolder - The folder that was added.
     */
  (newFolder: DzContentFolder): void;
  }>;
  fileListChanged: Signal<{
    /**
     * Emitted when the file list has changed.
     */
  (): void;
  }>;
  folderListChanged: Signal<{
    /**
     * Emitted when a folder is added or removed.
     */
  (): void;
  }>;
  removedFolder: Signal<{
    /**
     * Emitted when a folder is removed.
     * @param folder - The folder that was removed.
     */
  (folder: DzContentFolder): void;
  }>;
}

declare namespace DzContentFolder
{

  /**
   * The possible types of content folders.
   */
  /**
   * Folder containing native content.
   */
  export const NATIVE_TYPE: number;
  /**
   * Folder containing Poser content.
   */
  export const POSER_TYPE: number;
  /**
   * Folder containing other importable content.
   */
  export const IMPORT_TYPE: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentmgr_dz
 * Content library (folder & file) manager.
 * @remarks The manager that is responsible for all the content folder & file trees that are accessible from the content library.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp::getContentMgr().
 */
interface DzContentMgr extends DzBase
{

  /**
   * The types of directories that can be specified when working with this manager.
   */
  /**
   * Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
   */
  readonly NativeDirs: number;

  /**
   * Represents the directories that are mapped and expected to contain files in the Poser file formats.
   */
  readonly PoserDirs: number;

  /**
   * Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
   */
  readonly ImportDirs: number;

  /**
   * Represents the built-in directories that are expected to contain files in compatible formats.
   */
  readonly BuiltInDirs: number;

  /**
   * Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
   */
  readonly MDLDirs: number;

  /**
   * Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
   */
  readonly CloudDB: number;

  /**
   * Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
   */
  readonly CloudDir: number;

  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
   */
  readonly NativeAndBuiltInDirs: number;

  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
   */
  readonly CloudNativeAndBuiltInDirs: number;

  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
   */
  readonly AllLocalNonCloudDirs: number;

  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
   */
  readonly AllLocalDirs: number;

  /**
   * Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The “all” prior to 4.8.
   */
  readonly AllDirs: number;

  /**
   * Represents all directory types. Since: 4.9.0.51
   */
  readonly AllDirsAndCloud: number;

  /**
   * Holds whether or not the content manager automatically refreshes itself.
   */
  autoRefresh: boolean

  /**
   * Holds the maximum length of the File > Open Recent submenu, in the main menu bar.
   */
  maxRecentFiles: number

  /**
   * Holds the path of the scene that will load when the scene is cleared (if any).
   * @since 4.9.3.68
   */
  newScene: string

  /**
   * Holds whether or not the built-in content is shown in the content panes.
   */
  showBuiltInContent: boolean

  /**
   * Holds the path of the scene that will load on startup (if any).
   */
  startupScene: string

  /**
   * @returns Prefix where cloud places installed products.
   * @since 4.9.0.46
   */
  getCloudPathPrefix (): string;

  /**
   * Checks the given node for a source file data item, and returns the path of the source file if one is found.
   * @returns The path of the source file for the node if the node contains a source file data item, otherwise an empty string.
   * @param node - The scene node to get the source file of.
   */
  getContentPath (node: DzNode): string;

  /**
   * Adds a native content directory to the list.
   * @param directory - The path of the native content directory to add.
   * @param [saveSetting=true] - If true, causes the native content directory mappings to be saved immediately instead of when the application is closed.
   */
  addContentDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Adds an import directory to the list.
   * @param directory - The name of the directory to add.
   * @param [saveSetting=true] - If true, causes the Import directory mappings to be saved immediately instead of when the application is closed.
   */
  addImportDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Adds a directory where MDL files can reside to the list.
   * @since 4.8.0.23
   * @param directory - The name of the directory to add.
   * @param [saveSetting=true] - If true, causes the MDL directory mappings to be saved immediately instead of when the application is closed.
   */
  addMDLDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Adds a Poser import content directory to the list.
   * @attention Poser import paths are folders one level above any Poser Runtime folder.
   * @param directory - The Poser content directory to add.
   * @param [saveSetting=true] - If true, causes the Poser directory mappings to be saved immediately instead of when the application is closed.
   */
  addPoserDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Adds a file to the list of recent files.
   * @param filename - The path of the file to add.
   */
  addRecentFile (filename: string): void;

  /**
   * Clears the list of recent files.
   */
  clearRecentFileList (): void;

  /**
   * Attempts to locate dirPath among the mapped native content directories.
   * @returns true if the directory is mapped as a native content directory, otherwise false.
   * @since 4.5.0.124
   * @param dirPath - The directory path to locate.
   */
  contentDirectoryIsMapped (dirPath: string): boolean;

  /**
   * Displays a dialog to the user to perform a Poser content search on the local machine.
   * @returns true if the user accepted and a search was performed, otherwise false.
   */
  doContentSearch (): boolean;

  /**
   * Causes the content manager to check the number of mapped content directories, and display a warning to the user if it is excessive.
   */
  doDirNumCheck (): void;

  /**
   * Notifies the content manager that a new content file has been saved.
   * @param filename - 
   */
  fileCreated (filename: string): void;

  /**
   * Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
   * @returns The given content folder if successful, otherwise NULL.
   * @since 4.8.1.51
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param path - The absolute path.
   */
  findBaseDirectory (dirTypes: number, path: string): DzContentFolder;

  /**
   * Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
   * @returns The given content folder if successful, otherwise NULL.
   * @param path - The absolute path.
   * @param useImportFolders - If true, the import folders will also be searched.
   */
  findBaseDirectory (path: string, useImportFolders: boolean): DzContentFolder;

  /**
   * Given a partial path (a file path that is relative to a content directory) this function traverses all folders of the specified mapped directory types in the following order (NativeDirs, PoserDirs, ImportDirs, BuiltInDirs)
   * @returns The full path to the file if successful, otherwise an empty string.
   * @seealso DirectoryTypes
   * @param partialPath - The relative path to the file to find.
   * @param [dirTypes=DzContentMgr.DirectoryTypes.CloudNativeAndBuiltInDirs] - Bitwise OR of flags for which directory types to search.
   */
  findFile (partialPath: string, dirTypes?: number): string;

  /**
   * Finds the source path for a node in the scene.
   * @returns The source path of the node.
   * @param sceneNode - The node to find the source path for.
   */
  findSourcePathForNode (sceneNode: DzNode): string;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
   * @returns The absolute path for the file if it can be found, otherwise an empty string.
   * @since 4.8.1.51
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativePath - The relative path to find.
   * @param [preferredPath=“”] - (Optional) If provided, first directory to check for.
   */
  getAbsolutePath (dirTypes: number, relativePath: string, preferredPath?: string): string;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
   * @returns The absolute path for the file if it can be found, otherwise an empty string.
   * @param relativePath - The relative path to find.
   * @param useImportFolders - If true, the mapped import folders will also be searched.
   * @param [preferredPath=“”] - (Optional) If provided, first directory to check for.
   */
  getAbsolutePath (relativePath: string, useImportFolders: boolean, preferredPath?: string): string;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
   * @returns A list of absolute paths for the file if it can be found, otherwise an empty list.
   * @since 4.8.1.51
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativePath - The relative path to find.
   */
  getAbsolutePaths (dirTypes: number, relativePath: string): Array<unknown>;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped directory.
   * @returns A list of absolute paths for the file if it can be found, otherwise an empty list.
   * @param relativePath - The relative path to find.
   * @param useImportFolders - If true, the mapped import folders will also be searched.
   */
  getAbsolutePaths (relativePath: string, useImportFolders: boolean): Array<unknown>;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
   * @returns The URI for the file if it can be found, otherwise an empty URI.
   * @since 4.9.0.38
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativePath - The relative path to find.
   * @param [preferredPath=“”] - (Optional) If provided, first directory to check for.
   */
  getAbsoluteUri (dirTypes: number, relativePath: string, preferredPath?: string): DzUri;

  /**
   * @returns The built-in content directory used for content and utilities that are shipped with the application.
   */
  getBuiltInContentDirectory (): DzContentFolder;

  /**
   * @returns The path of the built-in content directory used for content and utilities that are shipped with the application.
   */
  getBuiltInContentDirectoryPath (): string;

  /**
   * @returns The given built in MDL directory.
   * @since 4.8.0.23
   * @param which - The index of the built in MDL directory to return.
   */
  getBuiltInMDLDirectory (which: number): DzContentFolder;

  /**
   * @returns The path of the given MDL directory.
   * @since 4.8.0.23
   * @param which - The index of the built in MDL directory to return the path of.
   */
  getBuiltInMDLDirectoryPath (which: number): string;

  /**
   * Attempts to locate relativePath by pre-pending the path information for the mapped cloud directory.
   * @returns The absolute path for the file, or an empty string if the file cannot be found.
   * @since 4.9.0.33
   * @param relativePath - The relative path to find.
   */
  getCloudAbsolutePath (relativePath: string): string;

  /**
   * @returns The directory used for content that is downloaded and installed through the application.
   * @since 4.9.0.33
   */
  getCloudContentDirectory (): DzContentFolder;

  /**
   * @returns The path of the content directory used for content and utilities that are downloaded and installed through the application.
   * @since 4.9.0.33
   */
  getCloudContentDirectoryPath (): string;

  /**
   * Attempts to shorten absolutePath to a path that is relative to the cloud directory. If the path cannot be shortened, the original string is returned.
   * @returns A relative path to the file if one can be made, otherwise the original path.
   * @since 4.9.0.33
   * @param absolutePath - The path to make relative.
   */
  getCloudRelativePath (absolutePath: string): string;

  /**
   * @returns The given content directory.
   * @param which - The index of the content directory to be returned.
   */
  getContentDirectory (which: number): DzContentFolder;

  /**
   * @returns The path of the given content directory.
   * @param which - The index of the content directory to return the path of.
   */
  getContentDirectoryPath (which: number): string;

  /**
   * @returns The content replace manager that belongs to the DzContentMgr.
   */
  getContentReplaceMgr (): DzContentReplaceMgr;

  /**
   * @returns The path of the default content directory.
   */
  getDefaultContentDir (): string;

  /**
   * @returns A list of the URIs for the files in the specified relative paths.
   * @since 4.9.0.38
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativeDirPaths - The relative directory paths to list from.
   * @param fileSuffixes - The list of filename suffixes to filter by.
   */
  getDirectoryContentsUrisList (dirTypes: number, relativeDirPaths: Array<unknown>, fileSuffixes: Array<unknown>): Array<unknown>;

  /**
   * Attempts to locate a file with the given relative path by pre-pending the path information for each mapped import directory, finally falling back to the Built-In content directory.
   * @returns The absolute path for the file, or an empty string if the file cannot be found.
   * @param relativePath - The relative path to find.
   */
  getImportAbsolutePath (relativePath: string): string;

  /**
   * @returns The given inport directory.
   * @param which - The index of the import directory to return.
   */
  getImportDirectory (which: number): DzContentFolder;

  /**
   * @returns The path of the given import directory.
   * @param which - The index of the import directory to return the path of.
   */
  getImportDirectoryPath (which: number): string;

  /**
   * @returns A list of the extensions for files that can be imported.
   * @attention Specifically excludes Poser file extensions even though they are technically imported.
   * @seealso getPoserFileExtensions()
   * @since 4.9.4.64
   */
  getImportFileExtensions (): Array<unknown>;

  /**
   * Attempts to extract the mapped directory portion of path.
   * @returns The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
   * @param path - An absolute or relative path to find a corresponding content path for.
   * @param useImportFolders - If true, the import folders will also be searched.
   * @param isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
   */
  getMappedPath (path: string, useImportFolders: boolean, isRelative: boolean): string;

  /**
   * Attempts to extract the mapped directory portion of path.
   * @returns The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
   * @param dirTypes - Bitwise OR of flags for which directory types to search
   * @param path - An absolute or relative path to find a corresponding content path for.
   * @param isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
   */
  getMappedPath (dirTypes: number, path: string, isRelative: boolean): string;

  /**
   * Attempts to locate a file with the given relative path by pre-pending the path information for each mapped MDL directory, as well as the built-in MDL directories, finally falling back to the built-in content directory.
   * @returns The absolute path for the file, or an empty string if the file cannot be found.
   * @param relativePath - The relative path to find.
   */
  getMDLAbsolutePath (relativePath: string): string;

  /**
   * @returns The given MDL directory.
   * @since 4.8.0.23
   * @param which - The index of the MDL directory to return.
   */
  getMDLDirectory (which: number): DzContentFolder;

  /**
   * @returns The path of the given MDL directory.
   * @since 4.8.0.23
   * @param which - The index of the MDL directory to return the path of.
   */
  getMDLDirectoryPath (which: number): string;

  /**
   * Attempts to shorten absolutePath to a path that is relative to one of the mapped MDL directories. If the path cannot be shortened, the original string is returned.
   * @returns A relative path to the file if one can be made, otherwise the original path.
   * @since 4.8.0.35
   * @param absolutePath - The path to make relative.
   */
  getMDLRelativePath (absolutePath: string): string;

  /**
   * Attempts to locate relativePath by pre-pending the path information for each mapped native directory, finally falling back to the Built-In content directory.
   * @returns The absolute path for the file, or an empty string if the file cannot be found.
   * @param relativePath - The relative path to find.
   */
  getNativeAbsolutePath (relativePath: string): string;

  /**
   * @returns A list of the folder names that are excluded when building the native user-facing folder structure.
   * @since 4.9.4.64
   */
  getNativeBaseUserFacingExcludedDirs (): Array<unknown>;

  /**
   * @returns A list of the native file extensions.
   * @since 4.9.4.64
   */
  getNativeFileExtensions (): Array<unknown>;

  /**
   * @returns The number of content directories for imported content.
   * @since 4.8.0.23
   */
  getNumBuiltInMDLDirectories (): number;

  /**
   * @returns The number of content directories.
   */
  getNumContentDirectories (): number;

  /**
   * @returns The number of content directories for imported content.
   */
  getNumImportDirectories (): number;

  /**
   * @returns The number of content directories for imported content.
   * @since 4.8.0.23
   */
  getNumMDLDirectories (): number;

  /**
   * @returns The number of stored paths to Poser content directories.
   */
  getNumPoserDirectories (): number;

  /**
   * Attempts to locate a file with the given relative path by pre-pending the path information for each mapped Poser directory, finally falling back to the Built-In content directory.
   * @returns The absolute path for the file, or an empty string if the file cannot be found.
   * @param relativePath - The relative path to find.
   */
  getPoserAbsolutePath (relativePath: string): string;

  /**
   * @returns A list of the folder names within a Poser runtime folder that are considered user-facing.
   * @since 4.9.4.64
   */
  getPoserBaseUserFacingDirs (): Array<unknown>;

  /**
   * @returns The given Poser content directory, otherwise null.
   * @param which - The index of the Poser directory to return.
   */
  getPoserDirectory (which: number): DzContentFolder;

  /**
   * @returns The path of the given Poser content directory, otherwise an empty string.
   * @param which - The index of the Poser directory to return the path of.
   */
  getPoserDirectoryPath (which: number): string;

  /**
   * @returns A list of the Poser file extensions.
   * @since 4.9.4.64
   */
  getPoserFileExtensions (): Array<unknown>;

  /**
   * @returns A list of recent files
   */
  getRecentFileList (): Array<unknown>;

  /**
   * Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original path is returned.
   * @returns A relative path to the file if one can be made, otherwise absolutePath.
   * @since 4.8.1.51
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param absolutePath - The path to make relative.
   */
  getRelativePath (dirTypes: number, absolutePath: string): string;

  /**
   * Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original string is returned.
   * @returns A relative path to the file if one can be made, otherwise absolutePath.
   * @param absolutePath - The path to make relative.
   * @param useImportFolders - If true, the mapped import folders will also be searched.
   */
  getRelativePath (absolutePath: string, useImportFolders: boolean): string;

  /**
   * Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
   * @returns A list of relative paths to the file if one can be made, otherwise absolutePath.
   * @since 4.8.1.51
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param absolutePath - The path to make relative.
   */
  getRelativePaths (dirTypes: number, absolutePath: string): Array<unknown>;

  /**
   * Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
   * @returns A list of relative paths to the file if one can be made, otherwise an empty list.
   * @param absolutePath - The path to make relative.
   * @param useImportFolders - If true, the mapped import folders will also be searched.
   */
  getRelativePaths (absolutePath: string, useImportFolders: boolean): Array<unknown>;

  /**
   * Attempts to locate dirPath among the mapped import directories.
   * @returns true if the directory is mapped as an import directory, otherwise false.
   * @since 4.5.0.124
   * @param dirPath - The directory path to locate.
   */
  importDirectoryIsMapped (dirPath: string): boolean;

  /**
   * Imports the file at the given path. A companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists. This function should only be used in special circumstances. Use openFile() instead.
   * @returns true if the file was imported successfully, otherwise false.
   * @seealso openFile()
   * @param path - The path to the file to import.
   */
  importFile (path: string): boolean;

  /**
   * @returns true if directory is mapped, otherwise false.
   * @param directory - The path of the directory to check.
   */
  isDirectoryMapped (directory: string): boolean;

  /**
   * @returns true if relativePath is considered “user facing” for the given directory type.
   * @since 4.9.4.64
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativePath - The relative path to find.
   */
  isUserFacingDirectoryPath (dirTypes: number, relativePath: string): boolean;

  /**
   * @returns true if relativePath is considered “user facing” for the given directory type.
   * @since 4.9.4.64
   * @param dirTypes - Bitwise OR of flags for which directory types to search.
   * @param relativePath - The relative path to find.
   */
  isUserFacingFilePath (dirTypes: number, relativePath: string): boolean;

  /**
   * Loads an asset as a new scene.
   * @returns true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
   * @since 4.9.3.41
   * @param asset - The asset to load.
   */
  loadAsset (asset: DzAsset): boolean;

  /**
   * Loads an asset into the scene.
   * @returns true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
   * @since 4.9.3.41
   * @param asset - The asset to load.
   * @param merge - If true, combine the new asset with the existing scene. Othererwise, replace the existing scene with the new asset.
   */
  loadAsset (asset: DzAsset, merge: boolean): boolean;

  /**
   * Attempts to locate dirPath among the mapped MDL directories.
   * @returns true if the directory is mapped as a MDL directory, otherwise false.
   * @since 4.8.0.23
   * @param dirPath - The directory path to locate.
   */
  mdlDirectoryIsMapped (dirPath: string): boolean;

  /**
   * Merges a list of files, either as native files or imported files, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
   * @returns true if the file was loaded successfully, otherwise false.
   * @param filenames - A list of names of the files to merge into the current scene.
   */
  mergeFiles (filenames: Array<unknown>): boolean;

  /**
   * Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
   * @returns true if the file was loaded successfully, otherwise false.
   * @param filename - The name of the file to load.
   * @param [merge=true] - True to merge file, false to open it (applies only for native files).
   */
  openFile (filename: string, merge?: boolean): boolean;

  /**
   * Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
   * @returns true if the file was loaded successfully, otherwise false.
   * @seealso openFile()
   * @param filename - The path to the native file to open.
   * @param [isMerge=true] - If true, the file is merged into the scene. If false, the file is loaded as the scene.
   */
  openNativeFile (filename: string, isMerge?: boolean): boolean;

  /**
   * Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
   * @returns true if the file was loaded successfully, otherwise false.
   * @seealso openFile()
   * @param uri - The URI of the native file to open. This can be empty if a filename is supplied.
   * @param [filename=“”] - The path to the native file to open. This can be empty if a valid URI is supplied.
   * @param [isMerge=true] - If true, the file is merged into the scene. If false, the file is loaded as the scene.
   */
  openNativeUri (uri: DzUri, filename?: string, isMerge?: boolean): boolean;

  /**
   * Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
   * @returns true if the file was loaded successfully, otherwise false.
   * @param uri - The URI of the file to load. This can be empty if a valid filename is supplied.
   * @param [filename=“”] - The name of the file to load. This can be empty if a valid URI is supplied.
   * @param [merge=true] - true to merge the file, false to open it (applies only to native files).
   */
  openUri (uri: DzUri, filename?: string, merge?: boolean): boolean;

  /**
   * Attempts to locate dirPath path among the mapped Poser content directories.
   * @returns true if the directory is mapped as a Poser directory, otherwise false.
   * @param dirPath - The directory path to locate.
   */
  poserDirectoryIsMapped (dirPath: string): boolean;

  /**
   * Refreshes any currently loaded content directories. Call this after any operation that makes changes to the file system, e.g. saving or deleting files, etc.
   * @param [reloadIcons=false] - If true, all file icons will be reloaded - good for updating the current content directory when a file has been saved over, etc.
   */
  refresh (reloadIcons?: boolean): void;

  /**
   * Causes assets for a given node in the scene to be reloaded, using the given settings, from source files at the given path.
   * @returns 
   * @param sceneNode - TODO
   * @param settings - TODO
   * @param [srcFilePath=“”] - TODO
   */
  reloadAssetsFromSource (sceneNode: DzNode, settings: DzSettings, srcFilePath?: string): DzError;

  /**
   * Causes the assets for all nodes in the scene to be reloaded from their respective source files.
   * @returns 
   * @param settings - TODO
   */
  reloadSceneAssetsFromSource (settings: DzSettings): boolean;

  /**
   * Removes all native content mapped directories.
   */
  removeAllContentDirectories (): void;

  /**
   * Removes all import content directory mappings from the list.
   */
  removeAllImportDirectories (): void;

  /**
   * Removes all MDL directory mappings from the list.
   * @since 4.8.0.23
   */
  removeAllMDLDirectories (): void;

  /**
   * Removes all Poser import content directory mappings from the list.
   */
  removeAllPoserDirectories (): void;

  /**
   * Removes a navtive content directory mapping from the list.
   * @returns true if the directory was removed, false if the given directory is not in the list.
   * @param directory - The path of the native content directory to remove.
   */
  removeContentDirectory (directory: string): boolean;

  /**
   * Removes an import content directory mapping from the list.
   * @returns true if the directory was removed, false if the given directory is not in the list.
   * @param directory - The path of the import content directory to remove.
   */
  removeImportDirectory (directory: string): boolean;

  /**
   * Removes a MDL directory mapping from the list.
   * @returns true if the directory was removed, false if the given directory is not in the list.
   * @since 4.8.0.23
   * @param directory - The path of the MDL directory to remove.
   */
  removeMDLDirectory (directory: string): boolean;

  /**
   * Removes a Poser import content directory mapping from the list.
   * @returns true if the directory was removed, false if the given directory is not in the list.
   * @param directory - The path of the Poser import content directory to remove.
   */
  removePoserDirectory (directory: string): boolean;

  /**
   * Saves all currently mapped directories to the registry.
   */
  saveAllMappedDirectories (): void;

  /**
   * Deprecated
   * This function is provided to keep old source working. This function does nothing.
   * @param useCheckCompatibility - 
   */
  setCheckCompatibilityOn (useCheckCompatibility: boolean): void;

  /**
   * Sets the directory for content and utilities downloaded and installed through the application.
   * @since 4.9.0.33
   * @param directory - The path of the directory to add.
   * @param [saveSetting=true] - Whether or not to save the setting immediately or wait until the application exits.
   */
  setCloudContentDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Sets the list of directories for native format files.
   * @since 4.9.0.35
   * @param directories - The list of directory paths to set.
   * @param [saveSettings=true] - Whether or not to save the settings immediately or wait until the application exits.
   */
  setContentDirectories (directories: Array<unknown>, saveSettings?: boolean): void;

  /**
   * Sets the list of directories for other import format files.
   * @since 4.9.0.35
   * @param directories - The list of directory paths to set.
   * @param [saveSettings=true] - Whether or not to save the settings immediately or wait until the application exits.
   */
  setImportDirectories (directories: Array<unknown>, saveSettings?: boolean): void;

  /**
   * Sets the list of directories for Poser format files.
   * @since 4.9.0.35
   * @param directories - The list of directory paths to set.
   * @param [saveSettings=true] - Whether or not to save the settings immediately or wait until the application exits.
   */
  setPoserDirectories (directories: Array<unknown>, saveSettings?: boolean): void;

  /**
   * Sets whether or not to use the database.
   * @param useDatabase - If true, turns database use on, if false, turns database use off.
   */
  setUseDatabaseSearch (useDatabase: boolean): void;

  /**
   * Given the filename, determines if the file should be treated as a merge or an open when loaded. This is determined first by content type. If that does not exist and the file is a .duf it will attempt to retrieve the type from inside the file.
   * @returns true if the file should be merged, otherwise false.
   * @param filename - The name of the file to check.
   */
  shouldMerge (filename: string): boolean;

  /**
   * Deprecated
   * This function is provided to keep old source working. This function does nothing and always returns false.
   */
  usingCheckCompatibility (): boolean;

  /**
   * @returns true if database use is turned on, otherwise false.
   */
  usingDatabaseSearch (): boolean;

  autoRefreshChanged: Signal<{
    /**
     * Emitted when the enabled state of the auto refresh has changed
     * @param onOff - The new state of auto refresh.
     */
  (onOff: boolean): void;
  }>;
  cloudContentDirectoryChanged: Signal<{
    /**
     * Emitted when the cloud content directory has changed.
     */
  (): void;
  }>;
  contentDirectoryListChanged: Signal<{
    /**
     * Emitted when a content directory is added or removed.
     */
  (): void;
  }>;
  folderTreeChanged: Signal<{
    /**
     * Emitted when the currently loaded tree of folders has changed and needs to be rebuilt. Usually a result of a call to refresh(), or when one of the content directory lists has changed.
     */
  (): void;
  }>;
  importDirectoryListChanged: Signal<{
    /**
     * Emitted when an import directory is added or removed.
     */
  (): void;
  }>;
  loadScriptFinished: Signal<{
    /**
     * Emitted when the loading of a script has failed, or when the execution of a script has finished or failed.
     * @since 4.6.4.62
     */
  (): void;
  }>;
  loadScriptStarting: Signal<{
    /**
     * Emitted when the loading of a script is starting.
     * @since 4.6.2.103
     */
  (): void;
  }>;
  mdlDirectoryListChanged: Signal<{
    /**
     * Emitted when a MDL directory is added or removed.
     */
  (): void;
  }>;
  newFileCreated: Signal<{
    /**
     * Emitted when a new content file has been created.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  onNewSceneChanged: Signal<{
    /**
     * Emitted when the file that is loaded on 'new' has been changed.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  poserDirectoryListChanged: Signal<{
    /**
     * Emitted when a poser import directory is added or removed.
     */
  (): void;
  }>;
  recentFileListChanged: Signal<{
    /**
     * Emitted when a recent file is added or removed.
     */
  (): void;
  }>;
  scriptFailed: Signal<{
    /**
     * Emitted when the execution of a script fails.
     * @since 4.6.4.62
     * @param filename - 
     */
  (filename: string): void;
  }>;
  scriptFinished: Signal<{
    /**
     * Emitted when the execution of a script has finished.
     * @since 4.6.4.62
     * @param filename - 
     */
  (filename: string): void;
  }>;
  scriptLoadFailed: Signal<{
    /**
     * Emitted when the loading of a script fails.
     * @since 4.6.4.62
     * @param filename - 
     */
  (filename: string): void;
  }>;
  scriptLoadStarting: Signal<{
    /**
     * Emitted when the loading of a script is starting.
     * @since 4.6.4.62
     * @param filename - 
     */
  (filename: string): void;
  }>;
  scriptStarting: Signal<{
    /**
     * Emitted when the execution of a script is starting.
     * @since 4.6.4.62
     * @param filename - 
     */
  (filename: string): void;
  }>;
  startupSceneChanged: Signal<{
    /**
     * Emitted when the startup scene file has changed
     * @param filename - The new startup scene file.
     */
  (filename: string): void;
  }>;
}

declare namespace DzContentMgr
{

  /**
   * The types of directories that can be specified when working with this manager.
   */
  /**
   * Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
   */
  export const NativeDirs: number;
  /**
   * Represents the directories that are mapped and expected to contain files in the Poser file formats.
   */
  export const PoserDirs: number;
  /**
   * Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
   */
  export const ImportDirs: number;
  /**
   * Represents the built-in directories that are expected to contain files in compatible formats.
   */
  export const BuiltInDirs: number;
  /**
   * Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
   */
  export const MDLDirs: number;
  /**
   * Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
   */
  export const CloudDB: number;
  /**
   * Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
   */
  export const CloudDir: number;
  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
   */
  export const NativeAndBuiltInDirs: number;
  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
   */
  export const CloudNativeAndBuiltInDirs: number;
  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
   */
  export const AllLocalNonCloudDirs: number;
  /**
   * Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
   */
  export const AllLocalDirs: number;
  /**
   * Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The “all” prior to 4.8.
   */
  export const AllDirs: number;
  /**
   * Represents all directory types. Since: 4.9.0.51
   */
  export const AllDirsAndCloud: number;

  /**
   * @returns Prefix where cloud places installed products.
   * @since 4.9.0.46
   */
  export function getCloudPathPrefix (): string;

  /**
   * Checks the given node for a source file data item, and returns the path of the source file if one is found.
   * @returns The path of the source file for the node if the node contains a source file data item, otherwise an empty string.
   * @param node - The scene node to get the source file of.
   */
  export function getContentPath (node: DzNode): string;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentreplacemgr_dz
 * Content replacement manager.
 * @seealso DzContentMgr.getContentReplaceMgr()
 */
interface DzContentReplaceMgr extends QObject
{

  /**
   * Replacing methods when loading content
   */
  /**
   * When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed, so the new item replaces the old one.
   */
  readonly ALWAYS_REPLACE: number;

  /**
   * When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
   */
  readonly ASK_TO_REPLACE: number;

  /**
   * Items already in the scene are never removed when loading a piece of content.
   */
  readonly NEVER_REPLACE: number;

  /**
   * When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
   */
  readonly ASK_WHEN_MATCHING: number;

  /**
   * Resets all replace data to default values, excluding replace mode.
   */
  clearReplaceData (): void;

  /**
   * Performs all the necessary steps to remove content marked for replacement.
   */
  doReplace (): void;

  /**
   * @returns The path of the new content.
   */
  getNewContentPath (): string;

  /**
   * @returns The type of the new content.
   */
  getNewContentType (): string;

  /**
   * @returns The content replace mode.
   */
  getReplaceMode (): number;

  /**
   * Performs all the necessary initialization for doing content replacement when the given file will be loaded, using items attached to baseNode as potential items to replace.
   * @param path - 
   * @param baseNode - 
   */
  initReplaceForContentLoad (path: string, baseNode: DzNode): void;

  /**
   * Removes all nodes in the replace list from the scene.
   */
  removeReplaceNodes (): void;

  /**
   * @param contentPath - The path of the new content.
   */
  setNewContentPath (contentPath: string): void;

  /**
   * @param contentType - The type of the new content.
   */
  setNewContentType (contentType: string): void;

  /**
   * Sets the content replace mode.
   * @param mode - 
   */
  setReplaceMode (mode: number): void;

  /**
   * Updates the replace list to contain all items that should be removed during content load. If the replace mode is ALWAYS_REPLACE, the list will contain all nodes attached (following, parented, etc.) to baseNode whose type matches the current “New Content Type” (as set through setNewContentType()). If the replace mode is ASK_TO_REPLACE, a dialog will allow the user to select what nodes should be replaced.
   * @param baseNode - 
   */
  updateReplaceNodes (baseNode: DzNode): void;

  contentReplaceModeChanged: Signal<{
    /**
     * Emitted when the content replace mode has changed.
     * TODO: Add description.
     * @param mode - 
     */
  (mode: number): void;
  }>;
}

declare namespace DzContentReplaceMgr
{

  /**
   * Replacing methods when loading content
   */
  /**
   * When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed, so the new item replaces the old one.
   */
  export const ALWAYS_REPLACE: number;
  /**
   * When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
   */
  export const ASK_TO_REPLACE: number;
  /**
   * Items already in the scene are never removed when loading a piece of content.
   */
  export const NEVER_REPLACE: number;
  /**
   * When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
   */
  export const ASK_WHEN_MATCHING: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/controller_dz
 * Base class for all property controller types.
 * @remarks The controller class is like a modifier for DzProperty types. Controllers allow implementation of custom modulation of properties without changing the properties actual value. Common implementations of controllers include: controllers that adjust one property based on the value of another property, controllers that replace the value of one property with the value of another property, controllers that use a script expression to drive a property, etc.
 */
interface DzController extends DzBase
{

  /**
   * The type of modifications that a controller performs on the value of a property
   */
  /**
   * Has no effect on the property
   */
  readonly None: number;

  /**
   * Uses the current value of the property to calculate the result
   */
  readonly Additive: number;

  /**
   * Ignores the current value of the property, and calculates the result from unrelated factors.
   */
  readonly Replace: number;

  /**
   * The description of the controller (Read Only)
   */
  description: string

  /**
   * The effect of the controller (Read Only)
   */
  effect: number

  /**
   * The description of the controller when slave (Read Only)
   * @since 4.9.0.53
   */
  slaveDescription: string

  /**
   * TODO: Add description.
   */
  getOwner (): DzProperty;

  attributeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  currentValueChanged: Signal<{
    /**
     * Emitted when the value of this controller has changed.
     */
  (): void;
  }>;
}

declare namespace DzController
{

  /**
   * The type of modifications that a controller performs on the value of a property
   */
  /**
   * Has no effect on the property
   */
  export const None: number;
  /**
   * Uses the current value of the property to calculate the result
   */
  export const Additive: number;
  /**
   * Ignores the current value of the property, and calculates the result from unrelated factors.
   */
  export const Replace: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cr2exporter_dz
 * Class for exporting to the Poser CR2 File (*.cr2) format.
 * @seealso DzExportMgr::findExporterByClassName()
 * DzExportMgr::findExporter()
 * Export TriAx to Poser
 */
interface DzCr2Exporter extends DzExporter
{

}

declare var DzCr2Exporter:
{
  prototype: DzCr2Exporter;

  /**
   * Default Constructor.
   */
  new (): DzCr2Exporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/customdata_dz
 * Represents a data class that can be plug-in defined, associated with scene objects, and saved to the native file.
 * @remarks TODO: Add detailed description.
 */
interface DzCustomData extends DzBase
{

  /**
   * @returns true if the data item should be saved to the native file format, otherwise false.
   */
  isPersistent (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dateedit_dz
 * DAZScript wrapper for QDateEdit.
 * @remarks A DzDateEdit provides a date editor.
 */
interface DzDateEdit extends DzDateTimeEdit
{

  /**
   * Holds the maximum value for the widget.
   */
  max: Date

  /**
   * Holds the minimum value for the widget.
   */
  min: Date

  /**
   * Holds the separator used by the widget.
   */
  separator: string

  valueChanged: Signal<{
    /**
     * Emitted when the date in the widget has changed, passes the new date.
     * @param date - 
     */
  (date: Date): void;
  }>;
}

declare var DzDateEdit:
{
  prototype: DzDateEdit;

  /**
   * Creates a date edit widget as a child of the given parent widget.
   * @param parent - The widget parent for the date edit.
   */
  new (parent: DzWidget): DzDateEdit;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/datetimeedit_dz
 * DAZScript wrapper for QDateTimeEdit.
 * @remarks A DzDateTimeEdit provides a combination date and time editor.
 */
interface DzDateTimeEdit extends DzWidget
{

  /**
   * Holds the date represented by the widget.
   */
  date: Date

  /**
   * Holds the maximum date value for the widget.
   */
  dateMax: Date

  /**
   * Holds the minimum date value for the widget.
   */
  dateMin: Date

  /**
   * Holds the date separator used by the widget.
   */
  dateSeparator: string

  /**
   * Holds the date and time represented by the widget.
   */
  dateTime: DateTime

  /**
   * TODO: Add description.
   */
  displayFormat: string

  /**
   * Holds the time represented by the widget.
   */
  time: Date

  /**
   * Holds the maximum time value for the widget.
   */
  timeMax: Date

  /**
   * Holds the minimum time value for the widget.
   */
  timeMin: Date

  /**
   * Holds the time separator used by the widget.
   */
  timeSeparator: string

  valueChanged: Signal<{
    /**
     * Emitted when the date/time in the widget has changed, passes the new date/time.
     * @param dateTime - 
     */
  (dateTime: DateTime): void;
  }>;
}

declare var DzDateTimeEdit:
{
  prototype: DzDateTimeEdit;

  /**
   * Creates a date time edit widget as a child of the given parent widget.
   * @param parent - The widget parent for the date time edit.
   */
  new (parent: DzWidget): DzDateTimeEdit;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/defaultmaterial_dz
 * The default RenderMan Shader Language (RSL) based implementation of a material.
 * @remarks TODO: Add detailed description.
 */
interface DzDefaultMaterial extends DzMaterial, DzRefCountedItem
{

  /**
   * @returns The ambient color for this material.
   * @seealso setAmbientColor()
   */
  getAmbientColor (): Color;

  /**
   * @returns The property that controls ambient color.
   */
  getAmbientColorControl (): DzColorProperty;

  /**
   * @returns The ambient color map for this material.
   * @seealso setAmbientColorMap()
   */
  getAmbientColorMap (): DzTexture;

  /**
   * @returns The ambient strength for this material.
   * @seealso setAmbientStrength()
   */
  getAmbientStrength (): number;

  /**
   * @returns The property that controls ambient strength.
   */
  getAmbientStrengthControl (): DzFloatProperty;

  /**
   * @returns The ambient strength map for this material.
   * @seealso setAmbientValueMap()
   */
  getAmbientValueMap (): DzTexture;

  /**
   * @returns The property that controls bump mapping.
   */
  getBumpControl (): DzFloatProperty;

  /**
   * @returns The bump map for this material.
   * @seealso setBumpMap()
   */
  getBumpMap (): DzTexture;

  /**
   * @returns The maximum bump for this material.
   * @seealso setBumpMax()
   */
  getBumpMax (): number;

  /**
   * @returns The property that controls the bump mapping maximum.
   */
  getBumpMaxControl (): DzFloatProperty;

  /**
   * @returns The minimum bump for this material.
   * @seealso setBumpMin()
   */
  getBumpMin (): number;

  /**
   * @returns The property that controls the bump mapping minimum.
   */
  getBumpMinControl (): DzFloatProperty;

  /**
   * @returns The bump strength for this material.
   * @seealso setBumpStrength()
   */
  getBumpStrength (): number;

  /**
   * @returns The property that controls diffuse color.
   */
  getDiffuseColorControl (): DzColorProperty;

  /**
   * @returns The diffuse strength for this material.
   * @seealso setDiffuseStrength()
   */
  getDiffuseStrength (): number;

  /**
   * @returns The property that controls diffuse strength.
   */
  getDiffuseStrengthControl (): DzFloatProperty;

  /**
   * @returns The diffuse strength map for this material.
   * @seealso setDiffuseValueMap()
   */
  getDiffuseValueMap (): DzTexture;

  /**
   * @returns The property that controls displacement mapping.
   */
  getDisplacementControl (): DzFloatProperty;

  /**
   * @returns The displacement map for this material.
   * @seealso setDisplacementMap()
   */
  getDisplacementMap (): DzTexture;

  /**
   * @returns The maximum displacement (displacement that white maps to) for this material.
   * @seealso setDisplacementMax()
   */
  getDisplacementMax (): number;

  /**
   * @returns The property that controls the displacement mapping maximum.
   */
  getDisplacementMaxControl (): DzFloatProperty;

  /**
   * @returns The minimum displacement for this material.
   * @seealso setDisplacementMin()
   */
  getDisplacementMin (): number;

  /**
   * @returns The property that controls the displacement mapping minimum.
   */
  getDisplacementMinControl (): DzFloatProperty;

  /**
   * @returns The displacement strength for this material.
   * @seealso setDisplacementStrength()
   */
  getDisplacementStrength (): number;

  /**
   * @returns The property that controls glossiness.
   */
  getGlossinessControl (): DzFloatProperty;

  /**
   * @returns The glossines strength for this material.
   * @seealso setGlossinessStrength()
   */
  getGlossinessStrength (): number;

  /**
   * @returns The glossines strength map for this material.
   * @seealso setGlossinessValueMap()
   */
  getGlossinessValueMap (): DzTexture;

  /**
   * @returns The horizontal offset value.
   * @seealso setHorizontalOffset()
   */
  getHorizontalOffset (): number;

  /**
   * @returns The property that controls the horizontal offset of an image.
   */
  getHorizontalOffsetControl (): DzFloatProperty;

  /**
   * @returns The number of horizontal tiles.
   * @seealso setHorizontalTiles()
   */
  getHorizontalTiles (): number;

  /**
   * @returns The property that controls the horizontal tiling of an image.
   */
  getHorizontalTilesControl (): DzFloatProperty;

  /**
   * @returns The index of refraction for this material.
   * @seealso setIndexOfRefraction()
   */
  getIndexOfRefraction (): number;

  /**
   * @returns The property that controls the index of refraction.
   */
  getIndexOfRefractionControl (): DzFloatProperty;

  /**
   * @returns The property that controls whether multiplication through opacity is enabled.
   */
  getMultThroughOpacityControl (): DzBoolProperty;

  /**
   * @returns Image for the nomal map.
   */
  getNormalValueMap (): DzTexture;

  /**
   * @returns The property that controls the normal value map.
   */
  getNormalValueMapControl (): DzImageProperty;

  /**
   * @returns The property that controls opacity.
   */
  getOpacityControl (): DzFloatProperty;

  /**
   * @returns The reflection color for this material.
   * @seealso setReflectionColor()
   */
  getReflectionColor (): Color;

  /**
   * @returns The property that controls reflection color.
   */
  getReflectionColorControl (): DzColorProperty;

  /**
   * @returns The reflection map for this material.
   * @seealso setReflectionMap()
   */
  getReflectionMap (): DzTexture;

  /**
   * @returns The reflection strength for this material.
   * @seealso setReflectionStrength()
   */
  getReflectionStrength (): number;

  /**
   * @returns The property that controls reflection strength.
   */
  getReflectionStrengthControl (): DzFloatProperty;

  /**
   * @returns The reflection strength map for this material.
   * @seealso setReflectionValueMap()
   */
  getReflectionValueMap (): DzTexture;

  /**
   * @returns The refraction color for this material.
   * @seealso setRefractionColor()
   */
  getRefractionColor (): Color;

  /**
   * @returns The property that controls refraction color.
   */
  getRefractionColorControl (): DzColorProperty;

  /**
   * @returns The refraction map for this material.
   * @seealso setRefractionColorMap()
   */
  getRefractionColorMap (): DzTexture;

  /**
   * @returns The refraction strength for this material.
   * @seealso setRefractionStrength()
   */
  getRefractionStrength (): number;

  /**
   * @returns The property that controls refraction strength.
   */
  getRefractionStrengthControl (): DzFloatProperty;

  /**
   * @returns The refraction strength map for this material.
   * @seealso setRefractionValueMap()
   */
  getRefractionValueMap (): DzTexture;

  /**
   * @returns The scatter color for this material.
   * @seealso setScatterColor()
   */
  getScatterColor (): Color;

  /**
   * @returns The property that controls scatter color.
   */
  getScatterColorControl (): DzColorProperty;

  /**
   * @returns The scatter map for this material.
   * @seealso setScatterColorMap()
   */
  getScatterColorMap (): DzTexture;

  /**
   * @returns The sheen color for this material.
   * @seealso setSheenColor()
   */
  getSheenColor (): Color;

  /**
   * @returns The property that controls sheen color.
   */
  getSheenColorControl (): DzColorProperty;

  /**
   * @returns The sheen map for this material.
   * @seealso setSheenColorMap()
   */
  getSheenColorMap (): DzTexture;

  /**
   * @returns The specular color for this material.
   * @seealso setSpecularColor()
   */
  getSpecularColor (): Color;

  /**
   * @returns The property that controls specular color.
   */
  getSpecularColorControl (): DzColorProperty;

  /**
   * @returns The specular color map for this material.
   * @seealso setSpecularColorMap()
   */
  getSpecularColorMap (): DzTexture;

  /**
   * @returns The specular strength for this material.
   * @seealso setSpecularStrength()
   */
  getSpecularStrength (): number;

  /**
   * @returns The property that controls specular strength.
   */
  getSpecularStrengthControl (): DzFloatProperty;

  /**
   * @returns The specular strength map for this material.
   * @seealso setSpecularValueMap()
   */
  getSpecularValueMap (): DzTexture;

  /**
   * @returns The surface type for this material.
   * @seealso setSurfaceType()
   */
  getSurfaceType (): number;

  /**
   * @returns The property that controls surface type.
   */
  getSurfaceTypeControl (): DzEnumProperty;

  /**
   * @returns The thickness for this material.
   * @seealso setThickness()
   */
  getThickness (): number;

  /**
   * @returns The property that controls thickness.
   */
  getThicknessControl (): DzFloatProperty;

  /**
   * @returns The thickness map for this material.
   * @seealso setThicknessValueMap()
   */
  getThicknessValueMap (): DzTexture;

  /**
   * @returns The vertical offset value.
   * @seealso setVerticalOffset()
   */
  getVerticalOffset (): number;

  /**
   * @returns The property that controls the vertical offset of an image.
   */
  getVerticalOffsetControl (): DzFloatProperty;

  /**
   * @returns The number of vertical tiles.
   * @seealso setVerticalTiles()
   */
  getVerticalTiles (): number;

  /**
   * @returns The property that controls the vertical tiling of an image.
   */
  getVerticalTilesControl (): DzFloatProperty;

  /**
   * @returns The value of the multiply through opacity parameter.
   * @seealso setMultThroughOpacity()
   */
  isMultThroughOpacity (): boolean;

  /**
   * @returns Whether the renderman geometry needs the additional dPds adm dPdsM parameters,used for some shaders. This is true if the material has a normal map and it is in tangent space
   */
  needsTangentSpaceParams (): boolean;

  /**
   * Set the ambient color for this material.
   * @seealso getAmbientColor()
   * @param color - The new ambient color for the material.
   */
  setAmbientColor (color: Color): void;

  /**
   * Set the ambient color map for this material.
   * @seealso getAmbientColorMap()
   * @param img - The new ambient color map for the material.
   */
  setAmbientColorMap (img: DzTexture): void;

  /**
   * Set the ambient strength for this material.
   * @seealso getAmbientStrength()
   * @param val - The new ambient strength for the material.
   */
  setAmbientStrength (val: number): void;

  /**
   * Set the ambient strength map for this material.
   * @seealso getAmbientValueMap()
   * @param img - The new ambient strength map for this material.
   */
  setAmbientValueMap (img: DzTexture): void;

  /**
   * Set the map for the bump strength channel.
   * @seealso getBumpMap()
   * @param img - The new bump map for this material.
   */
  setBumpMap (img: DzTexture): void;

  /**
   * Set the maximum bump for this material.
   * @seealso getBumpMax()
   * @param val - The new bump maximum
   */
  setBumpMax (val: number): void;

  /**
   * Set the minimum bump for this material.
   * @seealso getBumpMin()
   * @param val - The new bump minimum.
   */
  setBumpMin (val: number): void;

  /**
   * Set the bump strength for this material.
   * @seealso getBumpStrength()
   * @param val - The new bump strength for this material.
   */
  setBumpStrength (val: number): void;

  /**
   * Set the diffuse strength for this material.
   * @seealso getDiffuseStrength()
   * @param val - The new diffuse strength for the material.
   */
  setDiffuseStrength (val: number): void;

  /**
   * Set the diffuse strength map for this material.
   * @seealso getDiffuseValueMap()
   * @param img - The new diffuse strength map for the material.
   */
  setDiffuseValueMap (img: DzTexture): void;

  /**
   * Set the displacement map for this material.
   * @seealso getDisplacementMap()
   * @param img - The new displacement map for the material.
   */
  setDisplacementMap (img: DzTexture): void;

  /**
   * Set the maximum displacement for this material.
   * @seealso getDisplacementMax()
   * @param val - The new maximum displacement for this material.
   */
  setDisplacementMax (val: number): void;

  /**
   * Set the minimum displacement for this material.
   * @seealso getDisplacementMin()
   * @param val - The new minimum displacement for this material.
   */
  setDisplacementMin (val: number): void;

  /**
   * Set the displacement strength for this material.
   * @seealso getDisplacementStrength()
   * @param val - The new displacement strength for this material
   */
  setDisplacementStrength (val: number): void;

  /**
   * Set glossiness for this material.
   * @seealso getGlossinessStrength()
   * @param size - The new highlight size (glossiness) for the material.
   */
  setGlossinessStrength (size: number): void;

  /**
   * Set glossiness value map for this material.
   * @seealso getGlossinessValueMap()
   * @param img - A pointer to the new glossiness value map for the material. NULL to clear the map.
   */
  setGlossinessValueMap (img: DzTexture): void;

  /**
   * Set the horizontal offset for the material
   * @seealso getHorizontalOffset()
   * @param offset - The value of the horizontal offset in each tile for the material
   */
  setHorizontalOffset (offset: number): void;

  /**
   * Set the horizontal tiling for the material
   * @seealso getHorizontalTiles()
   * @param tiles - The number of horizontal tiles for the material
   */
  setHorizontalTiles (tiles: number): void;

  /**
   * Set the index of refraction for this material.
   * @seealso getIndexOfRefraction()
   * @param val - The new index of refraction for the material.
   */
  setIndexOfRefraction (val: number): void;

  /**
   * Set the multiply through opacity parameter. If true, Specular highlights are multiplied through the opacity of the material (i.e. a transparent material will not show specular highlights). If false, specular highlights can contribute to the local opacity of the material (i.e. transparent objects show highlights)
   * @seealso isMultThroughOpacity()
   * @param onOff - Whether or not specularity is multiplied through opacity.
   */
  setMultThroughOpacity (onOff: boolean): void;

  /**
   * Set the normal map for this material.
   * @seealso getNormalValueMap()
   * @param img - A pointer to the new map map for the material. NULL to clear the map.
   */
  setNormalValueMap (img: DzTexture): void;

  /**
   * Set the reflection color for this material.
   * @seealso getReflectionColor()
   * @param color - The new reflection color for the material.
   */
  setReflectionColor (color: Color): void;

  /**
   * Set the reflection map for this material.
   * @seealso getReflectionMap()
   * @param img - The new reflection map for the material.
   */
  setReflectionMap (img: DzTexture): void;

  /**
   * Set the reflection strength for this material.
   * @seealso getReflectionStrength()
   * @param val - The new reflection strength for the material.
   */
  setReflectionStrength (val: number): void;

  /**
   * Set reflection strength map for this material.
   * @seealso getReflectionValueMap()
   * @param img - The new reflection strength map for the material.
   */
  setReflectionValueMap (img: DzTexture): void;

  /**
   * Set the refraction color for this material.
   * @seealso getRefractionColor()
   * @param color - The new refraction color for the material.
   */
  setRefractionColor (color: Color): void;

  /**
   * Set the refraction color map for this material.
   * @seealso getRefractionColorMap()
   * @param img - The new refraction color map for the material.
   */
  setRefractionColorMap (img: DzTexture): void;

  /**
   * Set the refraction strength for this material.
   * @seealso getRefractionStrength()
   * @param val - The new refraction strength for the material.
   */
  setRefractionStrength (val: number): void;

  /**
   * Set the refraction strength map for this material.
   * @seealso getRefractionValueMap()
   * @param img - A pointer to the new refraction strength map for the material. NULL to clear the map.
   */
  setRefractionValueMap (img: DzTexture): void;

  /**
   * Set the scatter color for this material.
   * @seealso getScatterColor()
   * @param color - The new scatter color for the material.
   */
  setScatterColor (color: Color): void;

  /**
   * Set the scatter color map for this material.
   * @seealso getScatterColorMap()
   * @param img - The new scatter color map for the material.
   */
  setScatterColorMap (img: DzTexture): void;

  /**
   * Set the sheen color for this material.
   * @seealso getSheenColor()
   * @param color - The new sheen color for the material.
   */
  setSheenColor (color: Color): void;

  /**
   * Set the sheen color map for this material.
   * @seealso getSheenColorMap()
   * @param img - The new sheen color map for the material.
   */
  setSheenColorMap (img: DzTexture): void;

  /**
   * Set base specular color for this material.
   * @seealso getSpecularColor()
   * @param color - The new specular color for the material
   */
  setSpecularColor (color: Color): void;

  /**
   * Set the specular color map for this material.
   * @seealso getSpecularColorMap()
   * @param img - A pointer to the new specular color map for the material. NULL to clear the map.
   */
  setSpecularColorMap (img: DzTexture): void;

  /**
   * Set base specular strength for this material.
   * @seealso getSpecularStrength()
   * @param size - The new specular strength for the material.
   */
  setSpecularStrength (size: number): void;

  /**
   * Set specular strength map for this material.
   * @seealso getSpecularValueMap()
   * @param img - A pointer to the new specular strength map for the material. NULL to clear the map.
   */
  setSpecularValueMap (img: DzTexture): void;

  /**
   * Set the surface type for this material.
   * @seealso getSurfaceType()
   * @param val - The index of the surface type for the material.
   */
  setSurfaceType (val: number): void;

  /**
   * Set the refraction strength for this material.
   * @seealso getRefractionStrength()
   * @param val - The new refraction strength for the material.
   */
  setThickness (val: number): void;

  /**
   * Set the thickness map for this material.
   * @seealso getThicknessValueMap()
   * @param img - A pointer to the new thickness map for the material. NULL to clear the map.
   */
  setThicknessValueMap (img: DzTexture): void;

  /**
   * Set the vertical offset for the material
   * @seealso setVerticalOffset()
   * @param offset - The value of the vertical offset in each tile for the material
   */
  setVerticalOffset (offset: number): void;

  /**
   * Set the vertical tiling for the material
   * @seealso getVerticalTiles()
   * @param tiles - The number of vertical tiles for the material.
   */
  setVerticalTiles (tiles: number): void;

}

declare var DzDefaultMaterial:
{
  prototype: DzDefaultMaterial;

  /**
   * Default Constructor.
   */
  new (): DzDefaultMaterial;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/delightrenderer_dz
 * The 3Delight renderer.
 * @remarks Implements a RenderMan interface for the scene to render itself through the 3Delight renderer.
 */
interface DzDelightRenderer extends DzRenderer
{

  /**
   * TODO: Add description.
   */
  resetIPRHandler (): void;

}

declare var DzDelightRenderer:
{
  prototype: DzDelightRenderer;

  /**
   * Default Constructor.
   */
  new (): DzDelightRenderer;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/desktopwidget_q
 * DAZScript accessible portions of the Qt native QDesktopWidget class.
 * @remarks This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QDesktopWidget class.
 */
interface QDesktopWidget extends QWidget
{

  /**
   * Holds the index of the screen that is configured to be the primary screen on the system.
   */
  primaryScreen: number

  /**
   * Holds the number of screens currently available on the system.
   */
  screenCount: number

  /**
   * Holds if the system manages the available screens in a virtual desktop.
   */
  virtualDesktop: boolean

  resized: Signal<{
    /**
     * Emitted when the size of screen changes.
     * @param screen - 
     */
  (screen: number): void;
  }>;
  screenCountChanged: Signal<{
    /**
     * Emitted when the number of screens changes to newCount.
     * @param newCount - 
     */
  (newCount: number): void;
  }>;
  workAreaResized: Signal<{
    /**
     * Emitted when the work area available on screen changes.
     * @param screen - 
     */
  (screen: number): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/device_dz
 * Base Class for Device objects.
 * @remarks TODO: Add detailed description.
 */
interface DzDevice extends QObject
{

  /**
   * @param settings - This will be set to the default settings for the device.
   */
  getDefaultSettings (settings: DzSettings): void;

  /**
   * @returns A user-readable description of the device.
   */
  getDescription (): string;

  /**
   * @returns The name of the device.
   */
  getDeviceName (): string;

  /**
   * @param settings - This will be set to the current settings for the device.
   */
  getSettings (settings: DzSettings): void;

  /**
   * Changes the current settings for the device.
   * @param settings - The new settings for the device.
   */
  setSettings (settings: DzSettings): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/devicemgr_dz
 * Class that manages DzDevice objects.
 * @remarks TODO: Add detailed description.
 */
interface DzDeviceMgr extends QObject
{

  /**
   * @returns The device at the given index.
   * @attention The Device Manager owns this object - do NOT delete it.
   * @param which - The index of the device to get.
   */
  getDevice (which: number): DzDevice;

  /**
   * @returns The number of available devices.
   */
  getNumDevices (): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dform_dz
 * Base class for dforms.
 * @remarks The DForm is the primary component of a DForm deformer. The others are the DzDFormBase, DzDFormZone and dformmodifier_dz.
 */
interface DzDForm extends DzNode
{

  /**
   * Adds the effect of this DForm to the given node
   * @param node - A pointer to the node to apply this D-Form's affect to.
   */
  applyToNode (node: DzNode): void;

  /**
   * @returns The avatar scale factor for the representation of the DFormer
   */
  getAvatarScale (): number;

  /**
   * @returns The DForm Base.
   */
  getBase (): DzDFormBase;

  /**
   * @returns The color used in the gradient for weights at the maximum end of the scale.
   */
  getGradientMax (): Color;

  /**
   * @returns The color used in the gradient for weights at the minimum end of the scale.
   */
  getGradientMin (): Color;

  /**
   * Gets the ith Modifier of the DForm. The index is zero based. Can be used with getNumTargets to iterate over all the DForm Modifiers.
   * @returns The target Modifier at the requested index
   * @param index - The index of the modifier to return.
   */
  getModifier (index: number): dformmodifier_dz;

  /**
   * @returns The number of DForm modifiers that are driven by this DForm.
   */
  getNumModifiers (): number;

  /**
   * @returns The opacity for the representation of the DFormer
   */
  getOpacity (): number;

  /**
   * @returns The DForm Zone.
   */
  getZone (): DzDFormZone;

  /**
   * Sets the avatar scale factor of the DForm representation
   * @param val - The new avatar scale factor for the DForm - 1.0 maintains 100% scale.
   */
  setAvatarScale (val: number): void;

  /**
   * Sets the Base for this DForm.
   * @param base - The DForm Base.
   */
  setBase (base: DzDFormBase): void;

  /**
   * Sets the Color used in the gradient for weights at the maximum end of the scale
   * @param color - The color to use for representing maximum weights
   */
  setGradientMax (color: Color): void;

  /**
   * Sets the Color used in the gradient for weights at the minimum end of the scale
   * @param color - The color to use for representing minimum weights
   */
  setGradientMin (color: Color): void;

  /**
   * Sets the opacity of the DForm representation
   * @param val - The new opacity for the DForm - 0.0 is completely transparent, 1.0 is completely opaque.
   */
  setOpacity (val: number): void;

  /**
   * Sets the Zone for this DForm.
   * @param zone - The DForm Zone.
   */
  setZone (zone: DzDFormZone): void;

}

declare var DzDForm:
{
  prototype: DzDForm;

  /**
   * Default Constructor.
   */
  new (): DzDForm;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformassetfilter_dz
 * Class for saving DSON-based D-Former(s) Presets.
 * @remarks An asset save filter for saving a D-Former(s) Preset in the DSON format.
 * @seealso Sample: Save a D-Former(s) Preset
 */
interface DzDFormAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzDFormAssetFilter:
{
  prototype: DzDFormAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzDFormAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformbase_dz
 * Base class for DForms.
 * @remarks The Base is one component of a DForm deformer. The others are the DzDForm, DzDFormZone and dformmodifier_dz.
 * The DForm Base functions as the origin for the DForm deformation effect, as detailed in the DForm class.
 * The DForm Base and Zone can be created separately from the DForm and then joined together with the addDForm(), addZone(), etc functions.
 * The DForm Base is a skeleton and the DForm itself is a bone of the Base. This prevents the two components from being reparented away from each other and retains the parent-child relationship for the relative transform calculations.
 * The DForm Base draws itself in the scene using the DForm_base_ColorMax and DForm_base_ColorMin embedded geometry. The DForm_base_ColorMax is drawn with the maximum color of the vertex weight color gradient and the DForm_base_ColorMin is drawn with the minimum color.
 */
interface DzDFormBase extends DzNode
{

  /**
   * Returns the Bases's DForm
   * @returns The DForm for this Base.
   */
  getDForm (): DzDForm;

}

declare var DzDFormBase:
{
  prototype: DzDFormBase;

  /**
   * Default Constructor.
   */
  new (): DzDFormBase;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformzone_dz
 * Zone class for DForm deformer.
 * @remarks The Zone is one component of a DForm deformer. The others are the DzDForm, DzDFormBase and dformmodifier_dz.
 * The Zone is an independent DzNode derived object that is used to set the area of influence of the DForm's effect.
 * It is spherical in shape but can be scaled into any form of ellipsoid.
 * The Zone has an effect falloff zone based on a naturalspline_dz object. The falloff is the same along the x,y and z axis.
 * The Zone has draws itself as a wireframe sphere. The base size of this sphere is controlled by the DzFloatProperty “Radius”. This sphere can be made transparent and is controlled by the DzFloatProperty “Opacity”. The Zone is drawn with the maximum gradient color of the DForm.
 */
interface DzDFormZone extends DzNode
{

  /**
   * Returns the DForm for the Zone.
   * @returns A pointer to the DForm for this Zone.
   */
  getDForm (): DzDForm;

  /**
   * Returns the spline used to compute the falloff for the Zone.
   * @returns A pointer to the spline for this Zone.
   */
  getSpline (): naturalspline_dz;

}

declare var DzDFormZone:
{
  prototype: DzDFormZone;

  /**
   * Default Constructor.
   */
  new (): DzDFormZone;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dial_dz
 * DAZScript wrapper for QDial.
 * @remarks A DzDial provides a rounded range control like a speedometer.
 */
interface DzDial extends DzWidget
{

  /**
   * The current line step
   */
  lineStep: number

  /**
   * Holds the maximum value for the widget.
   */
  max: number

  /**
   * Holds the minimum value for the widget.
   */
  min: number

  /**
   * Holds whether or not to show notches.
   */
  notchesVisible: boolean

  /**
   * Holds the current notch size. (Read Only)
   */
  notchSize: number

  /**
   * Holds the target number of pixels between notches.
   */
  notchTarget: number

  /**
   * The current page step
   */
  pageStep: number

  /**
   * Holds whether or not to track the cursor, true by default.
   */
  tracking: boolean

  /**
   * Holds the value represented by the widget.
   */
  value: number

  /**
   * Holds whether or not the arrow can be rotated 360?, or if some space is left at the bottom.
   */
  wrapping: boolean

  dialMoved: Signal<{
    /**
     * Emitted when dial moves, passes the new value of the dial.
     * @param value - 
     */
  (value: number): void;
  }>;
  dialPressed: Signal<{
    /**
     * Emitted when the dial is pressed by the user.
     */
  (): void;
  }>;
  dialReleased: Signal<{
    /**
     * Emitted when the dial is released by the user.
     */
  (): void;
  }>;
  valueChanged: Signal<{
    /**
     * Emitted when the value of the dial changes, passes the new value.
     * @param value - 
     */
  (value: number): void;
  }>;
}

declare var DzDial:
{
  prototype: DzDial;

  /**
   * Creates a dial widget as a child of the given parent widget.
   * @param parent - The widget parent for the dial.
   */
  new (parent: DzWidget): DzDial;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dialog_dz
 * DAZScript DzDialog box.
 * @remarks This is the basic building block for DAZScript interfaces. DzDialog provides an independent window widget that in turn can act as the parent for other DAZScript widgets. Most custom DAZScript interfaces will be built starting with a DzDialog customized with Layout and DzWidget components.
 */
interface DzDialog extends DzWidget
{

  /**
   * Holds the title of the dialog.
   * DzWidget::Orientation : orientation
   * Holds the orientation of the dialog extension.
   */
  caption: string

  /**
   * Holds whether or not the size grip is enabled.
   */
  sizeGripEnabled: boolean

  /**
   * Closes the dialog.
   * @returns true if the dialog was closed, otherwise false.
   */
  close (): boolean;

  /**
   * Displays the dialog to the user.
   * @returns true if the box was accepted, otherwise false.
   */
  exec (): boolean;

  /**
   * @returns The current extension widget (if any) for the dialog.
   */
  extension (): DzWidget;

  /**
   * Causes the extension widget for the dialog to be hidden.
   */
  hideExtension (): void;

  /**
   * Sets the button that will cause the dialog to close and return true.
   * @param btn - 
   */
  setAcceptButton (btn: DzButton): void;

  /**
   * Sets the extension widget for the dialog.
   * @param extension - 
   */
  setExtension (extension: DzWidget): void;

  /**
   * Sets the button that will cause the dialog to close and return false.
   * @param btn - 
   */
  setRejectButton (btn: DzButton): void;

  /**
   * Sets the extension widget visibility to onOff.
   * @param onOff - 
   */
  showExtension (onOff: boolean): void;

  /**
   * Causes the extension widget for the dialog to be shown.
   */
  showExtension (): void;

}

declare var DzDialog:
{
  prototype: DzDialog;

  /**
   * Default Constructor.
   * @param [parent=undefined] - 
   */
  new (parent?: QWidget): DzDialog;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dir_dz
 * DAZ Script directory access class.
 * @remarks Provides access to the file system directory structure. It provides functions for creating, removing, traversing, and searching directories.
 */
interface DzDir extends QObject
{

  /**
   * Filtering options used by entryList().
   */
  /**
   * List directories that match the filters.
   */
  readonly Dirs: number;

  /**
   * List files that match the filters.
   */
  readonly Files: number;

  /**
   * List drives that match the filters.
   */
  readonly Drives: number;

  /**
   * Do not list symbolic links.
   */
  readonly NoSymLinks: number;

  /**
   * List directories, files, drives and symbolic links.
   */
  readonly AllEntries: number;

  /**
   * List directories, files, drives and symbolic links.
   */
  readonly All: number;

  /**
   * Type Mask
   */
  readonly TypeMask: number;

  /**
   * List entries for which the application has read access. Needs to be combined with Dirs or Files.
   */
  readonly Readable: number;

  /**
   * List entries for which the application has write access. Needs to be combined with Dirs or Files.
   */
  readonly Writable: number;

  /**
   * List entries for which the application has execute access. Needs to be combined with Dirs or Files.
   */
  readonly Executable: number;

  /**
   * Include Readable, Writable, and Executable entries
   */
  readonly PermissionMask: number;

  /**
   * Include Readable, Writable, and Executable entries
   */
  readonly RWEMask: number;

  /**
   * Only list entries that have been modified.
   */
  readonly Modified: number;

  /**
   * List hidden entries.
   */
  readonly Hidden: number;

  /**
   * List system entries.
   */
  readonly System: number;

  /**
   * Access mask
   */
  readonly AccessMask: number;

  /**
   * List all directories; don't apply filters to directory names.
   */
  readonly AllDirs: number;

  /**
   * The filter should be treated as case sensitive.
   */
  readonly CaseSensitive: number;

  /**
   * Do not list the special entries '.' and '..'.
   */
  readonly NoDotAndDotDot: number;

  /**
   * Do not list the special entry '.'.
   */
  readonly NoDot: number;

  /**
   * Do not list the special entry '..'.
   */
  readonly NoDotDot: number;

  /**
   * Do not filter.
   */
  readonly NoFilter: number;

  /**
   * Sorting options used by entryList().
   */
  /**
   * Sort by name.
   */
  readonly Name: number;

  /**
   * Sort by time (modification time).
   */
  readonly Time: number;

  /**
   * Sort by size.
   */
  readonly Size: number;

  /**
   * Do not sort.
   */
  readonly Unsorted: number;

  /**
   * Mask for Sort by
   */
  readonly SortByMask: number;

  /**
   * Put the directories first, then the files.
   */
  readonly DirsFirst: number;

  /**
   * Reverse the sort order.
   */
  readonly Reversed: number;

  /**
   * Sort case-insensitively.
   */
  readonly IgnoreCase: number;

  /**
   * Put the files first, then the directories.
   */
  readonly DirsLast: number;

  /**
   * Sort items appropriately using the current locale settings.
   */
  readonly LocaleAware: number;

  /**
   * Sort by file type (extension).
   */
  readonly Type: number;

  /**
   * Not sorted by default.
   */
  readonly NoSort: number;

  /**
   * @returns The simplest version of the input, but not the canonical path; removes multiple adjacent directory separators (e.g. “//”) and resolves any dot and/or dotdot (e.g. “.” or “..”) found in the path. Symbolic links are kept.
   * @since 4.9.3.35
   * @param path - 
   */
  cleanPath (path: string): string;

  /**
   * @returns The application's current directory. The directory is constructed using the absolute path of the current directory, ensuring that its path() will be the same as its absolutePath().
   * @seealso currentPath(), setCurrent( String )
   * @since 4.9.3.35
   */
  current (): DzDir;

  /**
   * @returns The absolute path of the application's current directory.
   * @seealso current(), setCurrent( String )
   * @since 4.9.3.35
   */
  currentPath (): string;

  /**
   * @returns pathName using '/' as the path separator instead of the native path separator.
   * @seealso separator(), toNativeSeparators( String )
   * @since 4.9.3.35
   * @param pathName - 
   */
  fromNativeSeparators (pathName: string): string;

  /**
   * @returns The user's home directory. The directory is constructed using the absolute path of the home directory, ensuring that its path() will be the same as its absolutePath().
   * @seealso homePath()
   * @since 4.9.3.35
   */
  home (): DzDir;

  /**
   * @returns The absolute path of the user's home directory. Under Windows this function will return the directory of the current user's profile. Under non-Windows operating systems the HOME environment variable is used if it exists, otherwise the path returned by the rootPath().
   * @attention Under Windows, if the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found: * The path specified by the USERPROFILE environment variable.
   * The path formed by concatenating the HOMEDRIVE and HOMEPATH environment variables.
   * The path specified by the HOME environment variable.
   * The path returned by the rootPath() function (which uses the SystemDrive environment variable).
   * The C:/ directory.
   * @since 4.9.3.35
   */
  homePath (): string;

  /**
   * @returns true if path is absolute, otherwise false.
   * @since 4.9.3.35
   * @param path - 
   */
  isAbsolutePath (path: string): boolean;

  /**
   * @returns true if path is relative, otherwise false.
   * @since 4.9.3.35
   * @param path - 
   */
  isRelativePath (path: string): boolean;

  /**
   * @returns true if fileName matches the wildcard (glob) pattern filter, otherwise false. The filter may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.
   * @since 4.9.3.35
   * @param filter - 
   * @param fileName - 
   */
  match (filter: string, fileName: string): boolean;

  /**
   * @returns true if fileName matches any of the wildcard (glob) patterns in the list of filters, otherwise false. The matching is case insensitive.
   * @since 4.9.3.35
   * @param filters - 
   * @param fileName - 
   */
  match (filters: Array<unknown>, fileName: string): boolean;

  /**
   * @returns The root directory. The directory is constructed using the absolute path of the root directory, ensuring that its path() will be the same as its absolutePath().
   * @seealso rootPath()
   * @since 4.9.3.35
   */
  root (): DzDir;

  /**
   * @returns The absolute path of the root directory. For Windows this normally returns “c:/”; i.e. the root of the system drive. For Mac OS X this returns “/”.
   * @seealso root()
   * @since 4.9.3.35
   */
  rootPath (): string;

  /**
   * @returns The native directory separator; “\” under Windows, “/” under Mac OS X.
   * @attention You do not need to use this function to build file paths. If you always use “/”, your paths will be translated to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use toNativeSeparators().
   * @since 4.9.3.35
   */
  separator (): string;

  /**
   * Sets the application's current working directory to path.
   * @returns true if the directory was successfully changed, otherwise false.
   * @seealso current(), currentPath()
   * @since 4.9.3.35
   * @param path - 
   */
  setCurrent (path: string): boolean;

  /**
   * @returns The system's temporary directory. The directory is constructed using the absolute path of the temp directory, ensuring that its path() will be the same as its absolutePath().
   * @seealso tempPath()
   * @since 4.9.3.35
   */
  temp (): DzDir;

  /**
   * @returns The absolute path of the system's temporary directory. On Windows this is usually the path in the TEMP or TMP environment variable. On Mac OS X this is the path in the TMPDIR environment variable or /tmp if TMPDIR is not defined. Whether a directory separator is added to the end or not, depends on the operating system.
   * @seealso temp()
   * @since 4.9.3.35
   */
  tempPath (): string;

  /**
   * @returns pathName with the '/' separators converted to separators that are appropriate for the underlying operating system. On Windows, '/' will be converted to '\'. On Mac OS X the returned string may be the same as pathName.
   * @seealso separator(), fromNativeSeparators( String )
   * @since 4.9.3.35
   * @param pathName - 
   */
  toNativeSeparators (pathName: string): string;

  /**
   * Deprecated
   * Use absoluteFilePath() instead.
   * @param file - 
   */
  absFilePath (file: string): string;

  /**
   * @returns The absolute path (a path that starts with “/” or with a drive specification) to file, which may contain symbolic links, but never contains redundant “.”, “..” or multiple separators. Does not check if the file actually exists in the directory.
   * @since 4.9.3.35
   * @param fileName - The name of the file get the absolute path for.
   */
  absoluteFilePath (fileName: string): string;

  /**
   * @returns The absolute path (a path that starts with “/” or with a drive specification), which may contain symbolic links, but never contains redundant “.”, “..” or multiple separators.
   * @since 4.9.3.35
   */
  absolutePath (): string;

  /**
   * Deprecated
   * Use absolutePath() instead.
   */
  absPath (): string;

  /**
   * @returns The canonical path, i.e. a path without symbolic links or redundant “.” or “..” elements.
   */
  canonicalPath (): string;

  /**
   * Changes the current directory to dirName.
   * @returns true if dirName exists and is readable, otherwise false.
   * @param dirName - The path to change to; can be relative or absolute.
   */
  cd (dirName: string): boolean;

  /**
   * Changes the directory by moving one directory up from the current directory.
   * @returns true if the new directory exists and is readable, otherwise false.
   */
  cdUp (): boolean;

  /**
   * Makes a copy of a file.
   * @returns true if srcFile and destFile are the same or if the operation is successful, otherwise false.
   * @param srcFile - The path of the source file to copy.
   * @param destFile - The path of the file that source will be copied to.
   */
  copy (srcFile: string, destFile: string): boolean;

  /**
   * @returns The total number of directories and files in the directory.
   * @since 4.9.3.35
   */
  count (): number;

  /**
   * @returns The the name of the directory (not the whole path, just the folder name). If the directory has no name (e.g. it is the root directory) an empty string is returned.
   */
  dirName (): string;

  /**
   * TODO: Add description.
   * @param nameFilters - 
   * @param [filters=DzDir.Filter.NoFilter] - 
   * @param [sort=DzDir.SortFlag.NoSort] - 
   */
  entryList (nameFilters: Array<unknown>, filters?: number, sort?: number): Array<unknown>;

  /**
   * TODO: Add description.
   * @param [filters=DzDir.Filter.NoFilter] - 
   * @param [sort=DzDir.SortFlag.NoSort] - 
   */
  entryList (filters?: number, sort?: number): Array<unknown>;

  /**
   * TODO: Add description.
   * @param nameFilter - 
   * @param [filters=DzDir.Filter.NoFilter] - 
   * @param [sort=DzDir.SortFlag.NoSort] - 
   */
  entryList (nameFilter: string, filters?: number, sort?: number): Array<unknown>;

  /**
   * @returns true if the file exists, otherwise false.
   * @attention Unless name contains an absolute file path, the file name is assumed to be relative to the directory itself, so this function is typically used to check for the presence of files within a directory.
   * @since 4.9.3.35
   * @param name - The name of the file to check for.
   */
  exists (name: string): boolean;

  /**
   * @returns true if the directory exists, otherwise false.
   * @attention If a file with the same name is found this function will return false.
   */
  exists (): boolean;

  /**
   * Deprecated
   * Use exists( String ) instead.
   * @param fileName - 
   */
  fileExists (fileName: string): boolean;

  /**
   * @returns The path of a file named file in the directory; does not check if the file actually exists.
   * @attention If the directory is relative the returned path name will also be relative. Redundant multiple separators or “.” and “..” directories in fileName are not removed.
   * @param fileName - 
   */
  filePath (fileName: string): string;

  /**
   * @returns The value set by setFilter().
   * @since 4.9.3.35
   */
  filter (): DzDirFilter;

  /**
   * @returns An array containing the absolute paths of files under the directory.
   * @param extentions - Aa array containing extentions of files to find; format of strings should be “*.ext”.
   * @param [recursive=true] - If true, the retrieval of file paths should recurse sub-directories.
   */
  getFilesFromDir (extentions: Array<unknown>, recursive?: boolean): Array<unknown>;

  /**
   * @returns true if the directory's path is absolute, otherwise false.
   */
  isAbsolute (): boolean;

  /**
   * @returns true if the directory is readable and we can open files by name, otherwise false.
   */
  isReadable (): boolean;

  /**
   * @returns true if the directory path is relative, otherwise false.
   */
  isRelative (): boolean;

  /**
   * @returns true if the directory is the root directory, otherwise false.
   * @attention If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use canonicalPath().
   */
  isRoot (): boolean;

  /**
   * Converts the directory path to an absolute path. If it is already absolute nothing happens.
   * @returns true if the conversion succeeded, otherwise false.
   * @since 4.9.3.35
   */
  makeAbsolute (): boolean;

  /**
   * Creates a new directory.
   * @returns true if dirName does not already exist when this function is called and the sub-directory is successfully created, otherwise false.
   * @param [dirName=“”] - The relative path of a sub-directory to create. If empty (default), this directory's absolute path will be used.
   */
  mkdir (dirName?: string): boolean;

  /**
   * Deprecated
   * Use mkpath() instead.
   * @param [dirName=“”] - 
   */
  mkdirs (dirName?: string): boolean;

  /**
   * Creates all directories that do not already exist in dirpath.
   * @returns true if successful (the path already exists when this function is called), otherwise false.
   * @param [dirpath=“”] - The path of the directories to create.
   */
  mkpath (dirpath?: string): boolean;

  /**
   * Moves a file to a new location.
   * @returns true if srcFile and destFile are the same or if the operation is successful, otherwise false.
   * @param srcFile - The path of the source file to move.
   * @param destFile - The path that the file will be moved to.
   */
  move (srcFile: string, destFile: string): boolean;

  /**
   * @returns The string list set by setNameFilters().
   * @since 4.9.3.35
   */
  nameFilters (): Array<unknown>;

  /**
   * @returns The path of this directory. This may contain symbolic links, but never contains redundant “.”, “..” or multiple separators.
   */
  path (): string;

  /**
   * Refreshes the directory information.
   */
  refresh (): void;

  /**
   * @returns The path to file, relative to the current directory; does not check if the file actually exists.
   * @param fileName - 
   */
  relativeFilePath (fileName: string): string;

  /**
   * Removes fileName from this directory.
   * @returns true if the file is removed successfully, otherwise false.
   * @param fileName - The relative path of the file to remove.
   */
  remove (fileName: string): boolean;

  /**
   * Renames a file or directory from oldName to newName.
   * @returns true if successful, otherwise false.
   * @param oldName - The relative path of the file/folder to rename.
   * @param newName - The relative path to rename the file/folder to.
   */
  rename (oldName: string, newName: string): boolean;

  /**
   * Removes a directory.
   * @returns true if dirName exists when this function is called, the directory is empty and the sub-directory is successfully removed, otherwise false.
   * @param [dirName=“”] - The relative path of a sub-directory to remove. If empty (default), this directory's absolute path will be used.
   */
  rmdir (dirName?: string): boolean;

  /**
   * Deprecated
   * Use rmpath() instead.
   * @param [dirName=“”] - 
   */
  rmdirs (dirName?: string): boolean;

  /**
   * Removes all directories that exist in dirpath, provided that they are empty. This is the opposite of mkpath().
   * @returns true if successful, otherwise false.
   * @param [dirPath=“”] - The path to remove.
   */
  rmpath (dirPath?: string): boolean;

  /**
   * Sets the current working directory of the application to be this directory.
   * @returns true if the current working directory was changed, otherwise false.
   */
  setCurrent (): boolean;

  /**
   * TODO: Add description.
   * @param filters - 
   */
  setFilter (filters: number): void;

  /**
   * Sets the name filters used by entryList() to the list of filters specified by nameFilters. Each name filter is a wildcard (globbing) filter that understands * and ? wildcards.
   * @since 4.9.3.35
   * @param nameFilters - 
   */
  setNameFilters (nameFilters: Array<unknown>): void;

  /**
   * Sets the path of this directory to newPath.
   * @param path - 
   */
  setPath (path: string): void;

  /**
   * Sets the sort order used by entryList(). The sort is specified by OR-ing values from the enum SortFlag.
   * @since 4.9.3.35
   * @param sort - 
   */
  setSorting (sort: number): void;

  /**
   * @returns The value set by setSorting().
   * @since 4.9.3.35
   */
  sorting (): number;

}

declare var DzDir:
{
  prototype: DzDir;

  /**
   * Creates a directory object with the given path.
   * @param path - The path of the directory.
   */
  new (path: string): DzDir;

  /**
   * Filtering options used by entryList().
   */
  /**
   * List directories that match the filters.
   */
  readonly Dirs: number;
  /**
   * List files that match the filters.
   */
  readonly Files: number;
  /**
   * List drives that match the filters.
   */
  readonly Drives: number;
  /**
   * Do not list symbolic links.
   */
  readonly NoSymLinks: number;
  /**
   * List directories, files, drives and symbolic links.
   */
  readonly AllEntries: number;
  /**
   * List directories, files, drives and symbolic links.
   */
  readonly All: number;
  /**
   * Type Mask
   */
  readonly TypeMask: number;
  /**
   * List entries for which the application has read access. Needs to be combined with Dirs or Files.
   */
  readonly Readable: number;
  /**
   * List entries for which the application has write access. Needs to be combined with Dirs or Files.
   */
  readonly Writable: number;
  /**
   * List entries for which the application has execute access. Needs to be combined with Dirs or Files.
   */
  readonly Executable: number;
  /**
   * Include Readable, Writable, and Executable entries
   */
  readonly PermissionMask: number;
  /**
   * Include Readable, Writable, and Executable entries
   */
  readonly RWEMask: number;
  /**
   * Only list entries that have been modified.
   */
  readonly Modified: number;
  /**
   * List hidden entries.
   */
  readonly Hidden: number;
  /**
   * List system entries.
   */
  readonly System: number;
  /**
   * Access mask
   */
  readonly AccessMask: number;
  /**
   * List all directories; don't apply filters to directory names.
   */
  readonly AllDirs: number;
  /**
   * The filter should be treated as case sensitive.
   */
  readonly CaseSensitive: number;
  /**
   * Do not list the special entries '.' and '..'.
   */
  readonly NoDotAndDotDot: number;
  /**
   * Do not list the special entry '.'.
   */
  readonly NoDot: number;
  /**
   * Do not list the special entry '..'.
   */
  readonly NoDotDot: number;
  /**
   * Do not filter.
   */
  readonly NoFilter: number;

  /**
   * Sorting options used by entryList().
   */
  /**
   * Sort by name.
   */
  readonly Name: number;
  /**
   * Sort by time (modification time).
   */
  readonly Time: number;
  /**
   * Sort by size.
   */
  readonly Size: number;
  /**
   * Do not sort.
   */
  readonly Unsorted: number;
  /**
   * Mask for Sort by
   */
  readonly SortByMask: number;
  /**
   * Put the directories first, then the files.
   */
  readonly DirsFirst: number;
  /**
   * Reverse the sort order.
   */
  readonly Reversed: number;
  /**
   * Sort case-insensitively.
   */
  readonly IgnoreCase: number;
  /**
   * Put the files first, then the directories.
   */
  readonly DirsLast: number;
  /**
   * Sort items appropriately using the current locale settings.
   */
  readonly LocaleAware: number;
  /**
   * Sort by file type (extension).
   */
  readonly Type: number;
  /**
   * Not sorted by default.
   */
  readonly NoSort: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/distantlight_dz
 * Base class for all lights. A light that emits in one direction.
 * @remarks TODO: Add detailed description.
 */
interface DzDistantLight extends DzLight
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Point: number;

  /**
   * TODO: Add description.
   */
  readonly Rectangle: number;

  /**
   * TODO: Add description.
   */
  readonly Disc: number;

  /**
   * TODO: Add description.
   */
  readonly Sphere: number;

  /**
   * TODO: Add description.
   */
  readonly Cylinder: number;

  /**
   * @returns The diffuse color of the light
   */
  getDiffuseColor (): Color;

  /**
   * @returns A pointer to the property that controls the color this light
   */
  getDiffuseColorControl (): DzColorProperty;

  /**
   * @returns The far clipping plane when viewing from the light in OpenGL
   */
  getFarClippingPlane (): number;

  /**
   * @returns The luminous flux of the light.
   * @since 4.8.0.18
   */
  getFlux (): number;

  /**
   * @returns A pointer to the property that controls Illumination for this light
   */
  getIlluminationControl (): DzEnumProperty;

  /**
   * @returns The current light intensity.
   */
  getIntensity (): number;

  /**
   * @returns A pointer to the property that controls the intensity of this light
   */
  getIntensityControl (): DzFloatProperty;

  /**
   * @returns The current light intensity scale.
   * @since 4.8.0.18
   */
  getIntensityScale (): number;

  /**
   * @returns The property that controls the intensity scale.
   * @since 4.8.0.18
   */
  getIntensityScaleControl (): DzFloatProperty;

  /**
   * @returns The property that controls the luminous flux of the light.
   * @since 4.8.0.18
   */
  getLightFluxControl (): DzFloatProperty;

  /**
   * @returns The type of geometry for the light; 0 = Point, 1 = Rectangle, 2 = Disc, 3 = Sphere, 4 = Cylinder.
   * @since 4.8.0.18
   */
  getLightGeometry (): number;

  /**
   * @returns The property that controls the geometry of the light.
   * @since 4.8.0.18
   */
  getLightGeometryControl (): DzEnumProperty;

  /**
   * @returns The height of the light (emitter) geometry, as measured in centimeters, in local space.
   * @since 4.8.0.18
   */
  getLightHeight (): number;

  /**
   * @returns The property that controls the height of the light.
   * @since 4.8.0.18
   */
  getLightHeightControl (): DzFloatProperty;

  /**
   * @returns The property that controls whether or not the light represents a light portal.
   * @since 4.9.2.61
   */
  getLightPortalControl (): DzBoolProperty;

  /**
   * @returns The color temperature of the light, as measured in Kelvin (K).
   * @since 4.8.0.18
   */
  getLightTempature (): number;

  /**
   * @returns The property that controls the temperature of the light.
   * @since 4.8.0.18
   */
  getLightTemperatureControl (): DzFloatProperty;

  /**
   * @returns true if the light is two-sided (emits light in both directions), otherwise false.
   * @since 4.8.0.18
   */
  getLightTwoSided (): boolean;

  /**
   * @returns The property that controls whether the light is two sided.
   * @since 4.8.0.18
   */
  getLightTwoSidedControl (): DzBoolProperty;

  /**
   * @returns The width of the light (emitter) geometry, as measured in centimeters, in local space.
   * @since 4.8.0.18
   */
  getLightWidth (): number;

  /**
   * @returns The property that controls the width (diameter) of the light.
   * @since 4.8.0.18
   */
  getLightWidthControl (): DzFloatProperty;

  /**
   * @returns The near clipping plane when viewing from the light in OpenGL
   */
  getNearClippingPlane (): number;

  /**
   * @returns The property that controls whether the light is in physically-based mode.
   * @since 4.8.0.18
   */
  getPhotometricModeControl (): DzBoolProperty;

  /**
   * @returns The property that controls whether the emitter is rendered.
   * @since 4.8.0.18
   */
  getRenderEmitterControl (): DzBoolProperty;

  /**
   * @returns A pointer to the property that controls the bias for the shadow of this light
   */
  getShadowBiasControl (): DzFloatProperty;

  /**
   * @returns A pointer to the property that controls the color this light
   */
  getShadowColorControl (): DzColorProperty;

  /**
   * @returns A pointer to the property that controls the shadow intensity of this light
   */
  getShadowIntensityControl (): DzFloatProperty;

  /**
   * @returns A pointer to the property that controls the softness for the shadow of this light
   */
  getShadowSoftnessControl (): DzFloatProperty;

  /**
   * @returns The direction the light is pointing in world-space
   */
  getWSDirection (): DzVec3;

  /**
   * @returns true if this light represents a light portal, otherwise false.
   * @since 4.9.2.61
   */
  isLightPortal (): boolean;

  /**
   * @returns true if the light is lighting the scene, false if the light has no effect on the scene.
   */
  isOn (): boolean;

  /**
   * @returns true if the light is in photometric mode (physically based), otherwise false.
   * @since 4.8.0.18
   */
  photometricMode (): boolean;

  /**
   * @returns true if the geometry of the light (emitter) should be rendered, otherwise false.
   * @since 4.8.0.18
   */
  renderEmitter (): boolean;

}

declare var DzDistantLight:
{
  prototype: DzDistantLight;

  /**
   * Default Constructor. Creates a new distant light.
   */
  new (): DzDistantLight;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Point: number;
  /**
   * TODO: Add description.
   */
  readonly Rectangle: number;
  /**
   * TODO: Add description.
   */
  readonly Disc: number;
  /**
   * TODO: Add description.
   */
  readonly Sphere: number;
  /**
   * TODO: Add description.
   */
  readonly Cylinder: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockarea_dz
 * Widget that holds docked DzDockWindow widgets.
 * @remarks TODO: Add detailed description.
 */
interface DzDockArea extends QWidget
{

  /**
   * @returns The column at the given index
   * @param which - The index of the column to return.
   */
  getColumn (which: number): DzDockAreaColumn;

  /**
   * @returns The number of columns of docked windows currently being displayed in this dock area.
   */
  getNumColumns (): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockareacolumn_dz
 * Widget that makes up a column in a DzDockArea.
 * @remarks TODO: Add detailed description.
 */
interface DzDockAreaColumn extends QWidget
{

  /**
   * @returns The current depth of the column. This is the same as width() for Right and Left dock areas, or height() for Top and Bottom dock areas.
   */
  depth (): number;

  /**
   * @returns The number of windows docked in this column
   */
  getNumWindows (): number;

  /**
   * @returns The preferred depth of the column.
   */
  getPreferredDepth (): number;

  /**
   * @returns The docked window at the given index
   * @param which - The index of the window to return.
   */
  getWindow (which: number): DzDockWindow;

  /**
   * @returns true if this column is currently minimized
   */
  isMinimized (): boolean;

  /**
   * Minimizes the column, if it is not already. The column shrinks so that only its resizing handle is visible.
   */
  minimize (): void;

  /**
   * @returns The minimum depth of the column.
   */
  minimumDepth (): number;

  /**
   * Restores the column to its previous depth if the column is currently minimized.
   */
  restore (): void;

  /**
   * Sets the 'depth' of the column.
   * @param depth - The new depth for the column. If depth is less than the minimum depth, the column becomes the minimum depth.   *         Note:   *         'Depth' refers to the distance between the handle/divider used to resize the column and the opposite edge. If the column is in the Left, Center or Right DzDockArea, 'depth' refers to the width of the column. If the column is in the Top or Bottom DzDockArea, 'depth' refers to the height of the column (or row).
   */
  setPreferredDepth (depth: number): void;

  /**
   * Toggles whether this column is minimized - if minimized, the column restores itself, if full size the column becomes minimized.
   */
  toggleMinimized (): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockbar_dz
 * Class that encapsulates a custom QToolBar that can be docked with a DzToolBar.
 * @remarks This class provides access to a custom bar in the interface that can be docked with a DzToolBar. This class is not intended to be constructed directly, rather it serves as a base class for other custom dockable bars.
 * @seealso DzPaneMgr::findDockBar(), DzPaneMgr::findDockBarByName() and DzPaneMgr::getDockBar()
 */
interface DzDockBar
{

  /**
   * The areas of a DzActivityLayout where the bar can be docked.
   */
  /**
   * The dock area at the top of a DzActivityLayout.
   */
  readonly ToolBarTop: number;

  /**
   * The dock area at the bottom of a DzActivityLayout.
   */
  readonly ToolBarBottom: number;

  /**
   * The dock area on the left side of a DzActivityLayout.
   */
  readonly ToolBarLeft: number;

  /**
   * The dock area on the right side of a DzActivityLayout.
   */
  readonly ToolBarRight: number;

  /**
   * No dock area. The bar cannot be docked.
   */
  readonly NoToolBarArea: number;

  /**
   * Docks the bar in the specified area on the DzActivityLayout, and shows the bar if it is hidden.
   * @param area - The DockArea to dock the bar to.
   * @param [beforeBar=“”] - The name of the bar in the area to dock before
   */
  dock (area: number, beforeBar?: string): void;

  /**
   * @returns The dock area that the bar is docked in.
   */
  dockedArea (): number;

  /**
   * @returns true if the bar is closed (not displayed), false if the bar is open (displayed).
   */
  isClosed (): boolean;

  /**
   * Sets whether the bar is closed (not displayed), or open (displayed).
   * @param onOff - 
   */
  setClosed (onOff: boolean): void;

  /**
   * Undocks the bar, moves it to the given global coordinates, and shows the bar if it is hidden.
   * @param pos - 
   */
  undock (pos: Point): void;

}

declare namespace DzDockBar
{

  /**
   * The areas of a DzActivityLayout where the bar can be docked.
   */
  /**
   * The dock area at the top of a DzActivityLayout.
   */
  export const ToolBarTop: number;
  /**
   * The dock area at the bottom of a DzActivityLayout.
   */
  export const ToolBarBottom: number;
  /**
   * The dock area on the left side of a DzActivityLayout.
   */
  export const ToolBarLeft: number;
  /**
   * The dock area on the right side of a DzActivityLayout.
   */
  export const ToolBarRight: number;
  /**
   * No dock area. The bar cannot be docked.
   */
  export const NoToolBarArea: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockwindow_dz
 * Base class of windows that can be docked in a DzDockArea.
 * @remarks TODO: Add detailed description.
 */
interface DzDockWindow
{

  /**
   * Re-Docks this window in the last area it was docked in.
   */
  dock (): void;

  /**
   * Docks this window in the given area.
   * @param area - 
   * @param [newColumn=false] - 
   */
  dock (area: DzDockArea, newColumn?: boolean): void;

  /**
   * Docks this window in the given area in the given column number.
   * @param area - 
   * @param columnNum - 
   */
  dock (area: DzDockArea, columnNum: number): void;

  /**
   * @returns The area that the window is currently docked in, or the last area it was docked in if it is undocked.
   */
  getArea (): DzDockArea;

  /**
   * @returns The last width (or height) of the column (or row) that the window is docked in.
   */
  getColumnDimension (): number;

  /**
   * @returns The column of the dock area that this window was last docked in.
   */
  getColumnNum (): number;

  /**
   * @returns The last undocked size of this window (if any).
   */
  getLastSize (): Size;

  /**
   * @returns The actual length for this window while docked.
   */
  getLength (): number;

  /**
   * @returns The minimum length for this window (if it is not minimized) while docked.
   */
  getMinimumLength (): number;

  /**
   * @returns The preferred length for this window while docked.
   */
  getPreferredLength (): number;

  /**
   * @returns true if the this window is currently docked, otherwise false.
   */
  isDocked (): boolean;

  /**
   * @returns true if the value returned by length() is the only valid length for this window currently, otherwise false.
   */
  isLengthFixed (): boolean;

  /**
   * @returns true if the this window is currently minimized, otherwise false.
   */
  isMinimized (): boolean;

  /**
   * Sets this window to a minimized state.
   */
  minimize (): void;

  /**
   * Returns this window to its former length if it is minimized.
   */
  restore (): void;

  /**
   * Store the width (or height) of the column (or row) that the window is docked in.
   * @param dimension - The width (or height) to set.
   */
  setColumnDimension (dimension: number): void;

  /**
   * Sets the column of the dock area that this window was last docked in.
   * @param columnNum - The column number to set.
   */
  setColumnNum (columnNum: number): void;

  /**
   * Sets the length for this window while docked.
   * @param length - The new length for the window.
   */
  setLength (length: number): void;

  /**
   * Sets the preferred length for this window while docked.
   * @param length - The new preferred length for the window.
   */
  setPreferredLength (length: number): void;

  /**
   * Sets the visibility of the resizing handles.
   * @param yesNo - 
   */
  setResizeHandlesVisible (yesNo: boolean): void;

  /**
   * Sets the visibility of the title bar.
   * @param yesNo - 
   */
  setTitleBarVisible (yesNo: boolean): void;

  /**
   * Toggles this window between its docked and undocked state. Calls dock() if this window is undocked, or undock() if it is docked.
   */
  toggleDock (): void;

  /**
   * Toggles this window between the minimized and restored state.
   */
  toggleMinimized (): void;

  /**
   * Undocks this window.
   */
  undock (): void;

  docked: Signal<{
    /**
     * Emitted when this window is docked.
     */
  (): void;
  }>;
  lengthChanged: Signal<{
    /**
     * Emitted when the value returned by length() has changed.
     */
  (): void;
  }>;
  minimized: Signal<{
    /**
     * Emitted when this window becomes minimized.
     * @param window - This window.
     */
  (window: DzDockWindow): void;
  }>;
  outlineDrawFinished: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  outlineDrawStarting: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  restored: Signal<{
    /**
     * Emitted when this window is restored.
     * @param window - This window.
     */
  (window: DzDockWindow): void;
  }>;
  undocked: Signal<{
    /**
     * Emitted when this window is undocked.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domattr_dz
 * DAZ Script DOM attribute node.
 * @remarks Represents an attribute node in a DOM document.
 */
interface DzDomAttr extends DzDomNode
{

  /**
   * [Read Only] The name of the attribute.
   */
  name: string

  /**
   * The value of the attribute.
   */
  value: string

  /**
   * @returns The element that this attribute belongs to.
   */
  ownerElement (): DzDomNode;

  /**
   * @returns true if the attribute has a value, false if no value was sepcified for the attribute.
   */
  specified (): boolean;

}

declare var DzDomAttr:
{
  prototype: DzDomAttr;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomElement::setAttribute() or DzDomDocument::createAttribute() to create a new attribute node as a member of an existing element or document.
   */
  new (): DzDomAttr;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dombasicnode_dz
 * DAZ Script DOM basic node.
 * @remarks Represents a basic (empty) node.
 */
interface DzDomBasicNode extends DzDomNode
{

}

declare var DzDomBasicNode:
{
  prototype: DzDomBasicNode;

  /**
   * Default constructor
   */
  new (): DzDomBasicNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcdatasection_dz
 * DAZ Script DOM CDATA Section node.
 * @remarks Represents a CDATA Section node in a DOM document. CDATA Sections can contain special characters that would otherwise be interpreted as part of the markup language. This provides a way for embedding text that contains special characters without the need for escaping all those characters.
 */
interface DzDomCDATASection extends DzDomText
{

}

declare var DzDomCDATASection:
{
  prototype: DzDomCDATASection;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createCDATASection() to create a new CDATA node as a member of a document.
   */
  new (): DzDomCDATASection;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcharacterdata_dz
 * DAZ Script DOM character data node.
 * @remarks Represents a character data node in a DOM document.
 */
interface DzDomCharacterData extends DzDomNode
{

  /**
   * The text data for the node
   */
  data: string

  /**
   * [Read Only] The length of the data
   */
  length: number

  /**
   * Appends arg to the end of the current text for this node.
   * @param arg - 
   */
  appendData (arg: string): void;

  /**
   * Removes count characters from this node's data beginning at offset.
   * @param offset - 
   * @param count - 
   */
  deleteData (offset: number, count: number): void;

  /**
   * Inserts arg into the current text for this node at position offset.
   * @param offset - 
   * @param arg - 
   */
  insertData (offset: number, arg: string): void;

  /**
   * Replaces count characters in this node's data beginning at offset with the string arg
   * @param offset - 
   * @param count - 
   * @param arg - 
   */
  replaceData (offset: number, count: number, arg: string): void;

  /**
   * @returns A substring from the this node's data beginning with offset, and count characters long
   * @param offset - 
   * @param count - 
   */
  substringData (offset: number, count: number): string;

}

declare var DzDomCharacterData:
{
  prototype: DzDomCharacterData;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createText() or DzDomDocument::createCDATASection() to create a new character data node as a member of a document.
   */
  new (): DzDomCharacterData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcomment_dz
 * DAZ Script DOM comment node.
 * @remarks Represents a comment node in a DOM document.
 */
interface DzDomComment extends DzDomCharacterData
{

}

declare var DzDomComment:
{
  prototype: DzDomComment;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createComment() to create a new comment node as a member of a document.
   */
  new (): DzDomComment;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocument_dz
 * DAZ Script DOM document node.
 * @remarks Represents a DOM document. This is typically the only DOM node that you will construct directly, all other nodes should be created as a member of a document by calling one of the following functions: * createElement( String tagName )
 * createDocumentFragment()
 * createTextNode( String value )
 * createComment( String value )
 * createCDATASection( String value )
 * createProcessingInstruction( String target, String data )
 * createAttribute( String name )
 * createEntityReference( String name )
 * createElementNS( String nsURI, String qName )
 * createAttributeNS( String nsURI, String qName )
 */
interface DzDomDocument extends DzDomNode
{

  /**
   * @returns A new attribute node that is a member of this document. You must still add it to an element in the document by calling DzDomElement::setAttributeNode(). An easier way to add attributes to an element is to call DzDomElement::setAttribute().
   * @param name - 
   */
  createAttribute (name: string): DzDomNode;

  /**
   * @returns A new attribute node using the given namespace that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param nsURI - 
   * @param qName - 
   */
  createAttributeNS (nsURI: string, qName: string): DzDomNode;

  /**
   * @returns A new CDATA node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param value - 
   */
  createCDATASection (value: string): DzDomNode;

  /**
   * @returns A new comment node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param value - 
   */
  createComment (value: string): DzDomNode;

  /**
   * @returns A new document fragment node that is a member of this document. You must still add it as a child of the document or one of its nodes
   */
  createDocumentFragment (): DzDomNode;

  /**
   * @returns A new element node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param tagName - 
   */
  createElement (tagName: string): DzDomNode;

  /**
   * @returns A new element node using the given namespace that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param nsURI - 
   * @param qName - 
   */
  createElementNS (nsURI: string, qName: string): DzDomNode;

  /**
   * @returns A new entity reference node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param name - 
   */
  createEntityReference (name: string): DzDomNode;

  /**
   * @returns A new processing instruction node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param target - 
   * @param data - 
   */
  createProcessingInstruction (target: string, data: string): DzDomNode;

  /**
   * @returns A new text node that is a member of this document. You must still add it as a child of the document or one of its nodes
   * @param value - 
   */
  createTextNode (value: string): DzDomNode;

  /**
   * @returns The document type node for this document.
   * @seealso DzDomDocumentType
   */
  doctype (): DzDomNode;

  /**
   * @returns The element with the given id. If no matching element was found, an invlaid (Null) node is returned.
   * @param id - 
   */
  elementById (id: string): DzDomNode;

  /**
   * @returns A new node that is a member of this document that is a (deep) copy of the given node. You must still add it as a child of the document or one of its nodes. If deep is true, the node and all its children are imported recursively.
   * @param node - 
   * @param deep - 
   */
  importNode (node: DzDomNode, deep: boolean): DzDomNode;

  /**
   * Sets the content of the document by reading the file with the given string.
   * @returns true if the file was successfully loaded and parsed, false if an error was encountered.
   * @param filename - 
   */
  loadContent (filename: string): boolean;

  /**
   * Saves the contents of the document to the file with the given name.
   * @returns true if the file was successfully saved, false if an error occurred
   * @param filename - 
   */
  saveContent (filename: string): boolean;

  /**
   * Sets the content of the document from the given string.
   * @returns true if the string was successfully parsed, false if an error was encountered.
   * @param text - 
   */
  setContent (text: string): boolean;

  /**
   * @returns The contents of the document as a single string.
   */
  toString (): string;

}

declare var DzDomDocument:
{
  prototype: DzDomDocument;

  /**
   * Default constructor
   */
  new (): DzDomDocument;

  /**
   * Overloaded constructor. Loads the given file name as the content for this document.
   * @param filename - 
   */
  new (filename: string): DzDomDocument;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumentfragment_dz
 * DAZ Script DOM document fragment node.
 * @remarks Represents a document fragment node in a DOM document.
 */
interface DzDomDocumentFragment extends DzDomNode
{

}

declare var DzDomDocumentFragment:
{
  prototype: DzDomDocumentFragment;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createDocumentFragment() to create a new fragment as a member of a document.
   */
  new (): DzDomDocumentFragment;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumenttype_dz
 * DAZ Script DOM document type node.
 * @remarks Represents a document type node in a DOM document. You usually will not construct these, but will get them from an existing document by calling DzDomDocument::doctype().
 */
interface DzDomDocumentType extends DzDomNode
{

  /**
   * [Read Only] The internal subset of the document type
   */
  internalSubset: string

  /**
   * [Read Only] The name of the node
   */
  name: string

  /**
   * [Read Only] The public identifier of the external DTD subset
   */
  publicId: string

  /**
   * [Read Only] The system identifier of the external DTD subset
   */
  systemId: string

}

declare var DzDomDocumentType:
{
  prototype: DzDomDocumentType;

  /**
   * Default constructor
   */
  new (): DzDomDocumentType;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domelement_dz
 * DAZ Script DOM element node.
 * @remarks Represents an element node in a DOM document.
 */
interface DzDomElement extends DzDomNode
{

  /**
   * The tag name of the element.
   */
  tagName: string

  /**
   * @returns The value of the attribute with the given name, or an empty string if the attribute does not exist.
   * @param name - 
   */
  attribute (name: string): string;

  /**
   * @returns The value of the attribute with the given name, or defValue if the attribute does not exist.
   * @param name - 
   * @param defValue - 
   */
  attribute (name: string, defValue: string): string;

  /**
   * @returns The node that represents the attribute called name. If the attribute does not exist, an invalid (Null) node is returned
   * @param name - 
   */
  attributeNode (name: string): DzDomNode;

  /**
   * @returns The node that represents the attribute called name in the nsURI namespace. If the attribute does not exist, an invalid (Null) node is returned.
   * @param nsURI - 
   * @param localName - 
   */
  attributeNodeNS (nsURI: string, localName: string): DzDomNode;

  /**
   * @returns The attribute called localName with the namespace nsURI. If the attribute does not exist, defValue is returned.
   * @param nsURI - 
   * @param localName - 
   * @param defValue - 
   */
  attributeNS (nsURI: string, localName: string, defValue: string): string;

  /**
   * @returns true if the element has an attribute with the given name, otherwise, returns false
   * @param name - 
   */
  hasAttribute (name: string): boolean;

  /**
   * @returns true if the element has an attribute with the given name and namespace, otherwise, returns false
   * @param nsURI - 
   * @param localName - 
   */
  hasAttributeNS (nsURI: string, localName: string): boolean;

  /**
   * Removes the attribute called name.
   * @param name - 
   */
  removeAttribute (name: string): void;

  /**
   * Removes oldAttr from the element.
   * @returns The attribute that was removed.
   * @param oldAttr - 
   */
  removeAttributeNode (oldAttr: DzDomNode): DzDomNode;

  /**
   * Removes the attribute called name in the namespace.
   * @param nsURI - 
   * @param localName - 
   */
  removeAttributeNS (nsURI: string, localName: string): void;

  /**
   * Adds an attribute called name with value. If an attribute with the given name already exists, it value is set to value.
   * @param name - 
   * @param value - 
   */
  setAttribute (name: string, value: string): void;

  /**
   * Adds newAttr to this element. If an attribute with the same name already exists, it is replaced with the new one.
   * @returns The attribute that was replaced by newAttr. If no attribute was replaced, an invalid (Null) node is returned.
   * @param newAttr - 
   */
  setAttributeNode (newAttr: DzDomNode): DzDomNode;

  /**
   * Adds newAttr to this element. If an attribute with the same name already exists, it is replaced with the new one.
   * @returns The attribute that was replaced by newAttr. If no attribute was replaced, an invalid (Null) node is returned.
   * @param newAttr - 
   */
  setAttributeNodeNS (newAttr: DzDomNode): DzDomNode;

  /**
   * Adds an attribute called qName in the nsURI namespace with value. If an attribute with the given name already exists, it value is set to value.
   * @param nsURI - 
   * @param qName - 
   * @param value - 
   */
  setAttributeNS (nsURI: string, qName: string, value: string): void;

}

declare var DzDomElement:
{
  prototype: DzDomElement;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createElement() to create a new element node as a member of a document.
   */
  new (): DzDomElement;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentity_dz
 * DAZ Script DOM entity node.
 * @remarks Represents an entity node in a DOM document.
 */
interface DzDomEntity extends DzDomNode
{

  /**
   * [Read Only] The name of the notation for the entity.
   */
  notationName: string

  /**
   * [Read Only] The public identifier of the entity.
   */
  publicId: string

  /**
   * [Read Only] The system identifier of the entity.
   */
  systemId: string

}

declare var DzDomEntity:
{
  prototype: DzDomEntity;

  /**
   * Default constructor
   */
  new (): DzDomEntity;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentityreference_dz
 * DAZ Script DOM entity node.
 * @remarks Represents an entity node in a DOM document.
 */
interface DzDomEntityReference extends DzDomNode
{

}

declare var DzDomEntityReference:
{
  prototype: DzDomEntityReference;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createEntityReference() to create a new entity reference node as a member of a document.
   */
  new (): DzDomEntityReference;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnode_dz
 * DAZ Script DOM base class.
 * @remarks This is an abstract base class that provides general functionality for DAZ Script DOM components.
 */
interface DzDomNode extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * A DOM Element. See Also: DzDomElement
   */
  readonly ElementNode: number;

  /**
   * A DOM Attribute. See Also: DzDomAttr
   */
  readonly AttributeNode: number;

  /**
   * Plain Text in the DOM. See Also: DzDomText
   */
  readonly TextNode: number;

  /**
   * Character DATA node in the DOM. See Also: DzDomCDATASection
   */
  readonly CDATASectionNode: number;

  /**
   * A Reference to a DOM Entity. See Also: DzDomEntityReference
   */
  readonly EntityReferenceNode: number;

  /**
   * A DOM Entity. See Also: DzDomEntity
   */
  readonly EntityNode: number;

  /**
   * A DOM Processing Instruction. See Also: DzDomProcessingInstruction
   */
  readonly ProcessingInstructionNode: number;

  /**
   * A DOM Comment. See Also: DzDomComment
   */
  readonly CommentNode: number;

  /**
   * A DOM Document. See Also: DzDomDocument
   */
  readonly DocumentNode: number;

  /**
   * A DOM Document Type. See Also: DzDomDocumentType
   */
  readonly DocumentTypeNode: number;

  /**
   * A DOM Document Fragment. See Also: DzDomDocumentFragment
   */
  readonly DocumentFragmentNode: number;

  /**
   * A DOM Notation. See Also: DzDomNotation
   */
  readonly NotationNode: number;

  /**
   * A basic node. See Also: DzDomBasicNode
   */
  readonly BaseNode: number;

  /**
   * A Character Data node. See Also: DzDomCharacterData
   */
  readonly CharacterDataNode: number;

  /**
   * The local name of the node. (Read Only)
   */
  localName: string

  /**
   * The namespace of the node. (Read Only)
   */
  namespaceURI: string

  /**
   * The name of the node. (Read Only)
   */
  nodeName: string

  /**
   * The type of the node. (Read Only)
   */
  nodeType: number

  /**
   * The node value.
   */
  nodeValue: string

  /**
   * The node prefix.
   */
  prefix: string

  /**
   * Appends child to the end of this node's child list.
   * @param child - 
   */
  appendChild (child: DzDomNode): void;

  /**
   * Converts the node into an invalid (Null) node. Its type and contents are cleared.
   */
  clear (): boolean;

  /**
   * @returns A new node that is a (deep) copy of this node. If deep is true, it will recursively copy the node's children as well.
   * @param [deep=true] - 
   */
  cloneNode (deep?: boolean): DzDomNode;

  /**
   * @returns This node's first child node. If this node has no children, it will return and invalid (Null) node.
   */
  firstChild (): DzDomNode;

  /**
   * @returns true if the node has attributes, otherwise false.
   */
  hasAttributes (): boolean;

  /**
   * @returns true if this node has children, otherwise false.
   */
  hasChildNodes (): boolean;

  /**
   * Inserts newChild into this node's child list following refChild.
   * @param newChild - 
   * @param refChild - 
   */
  insertAfter (newChild: DzDomNode, refChild: DzDomNode): void;

  /**
   * Inserts newChild into this node's child list in front of refChild.
   * @param newChild - 
   * @param refChild - 
   */
  insertBefore (newChild: DzDomNode, refChild: DzDomNode): void;

  /**
   * @returns true if the node is an attribute.
   * @seealso DzDomAttr
   */
  isAttr (): boolean;

  /**
   * @returns true if the node is an CDATA section.
   * @seealso DzDomCDATASection
   */
  isCDATASection (): boolean;

  /**
   * @returns true if the node is a character data.
   * @seealso DzDomCharacterData
   */
  isCharacterData (): boolean;

  /**
   * @returns true if the node is a comment.
   * @seealso DzDomComment
   */
  isComment (): boolean;

  /**
   * @returns true if the node is a document.
   * @seealso DzDomDocument
   */
  isDocument (): boolean;

  /**
   * @returns true if the node is a document fragment.
   * @seealso DzDomDocumentFragment
   */
  isDocumentFragment (): boolean;

  /**
   * @returns true if the node is a document type.
   * @seealso DzDomDocumentType
   */
  isDocumentType (): boolean;

  /**
   * @returns true if the node is an element.
   * @seealso DzDomElement
   */
  isElement (): boolean;

  /**
   * @returns true if the node is an entity.
   * @seealso DzDomEntity
   */
  isEntity (): boolean;

  /**
   * @returns true if the node is an entity reference.
   * @seealso DzDomEntityReference
   */
  isEntityReference (): boolean;

  /**
   * @returns true if the node is a notation.
   * @seealso DzDomNotation
   */
  isNotation (): boolean;

  /**
   * @returns true if this node is invalid (Null).
   */
  isNull (): boolean;

  /**
   * @returns true if the node is a processing instruction.
   * @seealso DzDomProcessingInstruction
   */
  isProcessingInstruction (): boolean;

  /**
   * @returns true if the DOM implementation supports the given feature, otherwise false.
   * @param feature - 
   * @param version - 
   */
  isSupported (feature: string, version: string): boolean;

  /**
   * @returns true if the node is text.
   * @seealso DzDomText
   */
  isText (): boolean;

  /**
   * @returns This node's last child node. If this node has no children, it will return an invalid (Null) node.
   */
  lastChild (): DzDomNode;

  /**
   * @returns The first direct child node with a matching name. If none is found, returns an invalid (Null) node.
   * @param name - 
   */
  namedItem (name: string): DzDomNode;

  /**
   * @returns This node's next sibling. If this node does not have a next sibling, it returns an invalid (Null) node.
   */
  nextSibling (): DzDomNode;

  /**
   * Converts all the node's children into standard form (e.g. adjacent text nodes will be merged )
   */
  normalize (): void;

  /**
   * @returns The document that this node belongs to, or an invalid (Null) node if this node is not part of a document.
   */
  ownerDocument (): DzDomNode;

  /**
   * @returns This node's parent node. If this node is top level it will return an invalid (Null) node.
   */
  parentNode (): DzDomNode;

  /**
   * @returns This node's previous sibling. If this node does not have a previous sibling, it returns an invalid (Null) node.
   */
  previousSibling (): DzDomNode;

  /**
   * Removes oldChild from this node's child list.
   * @param oldChild - 
   */
  removeChild (oldChild: DzDomNode): void;

  /**
   * Inserts newChild into this node's child list in place of refChild.
   * @param newChild - 
   * @param oldChild - 
   */
  replaceChild (newChild: DzDomNode, oldChild: DzDomNode): void;

}

declare namespace DzDomNode
{

  /**
   * TODO: Add description.
   */
  /**
   * A DOM Element. See Also: DzDomElement
   */
  export const ElementNode: number;
  /**
   * A DOM Attribute. See Also: DzDomAttr
   */
  export const AttributeNode: number;
  /**
   * Plain Text in the DOM. See Also: DzDomText
   */
  export const TextNode: number;
  /**
   * Character DATA node in the DOM. See Also: DzDomCDATASection
   */
  export const CDATASectionNode: number;
  /**
   * A Reference to a DOM Entity. See Also: DzDomEntityReference
   */
  export const EntityReferenceNode: number;
  /**
   * A DOM Entity. See Also: DzDomEntity
   */
  export const EntityNode: number;
  /**
   * A DOM Processing Instruction. See Also: DzDomProcessingInstruction
   */
  export const ProcessingInstructionNode: number;
  /**
   * A DOM Comment. See Also: DzDomComment
   */
  export const CommentNode: number;
  /**
   * A DOM Document. See Also: DzDomDocument
   */
  export const DocumentNode: number;
  /**
   * A DOM Document Type. See Also: DzDomDocumentType
   */
  export const DocumentTypeNode: number;
  /**
   * A DOM Document Fragment. See Also: DzDomDocumentFragment
   */
  export const DocumentFragmentNode: number;
  /**
   * A DOM Notation. See Also: DzDomNotation
   */
  export const NotationNode: number;
  /**
   * A basic node. See Also: DzDomBasicNode
   */
  export const BaseNode: number;
  /**
   * A Character Data node. See Also: DzDomCharacterData
   */
  export const CharacterDataNode: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnotation_dz
 * DAZ Script DOM notation node.
 * @remarks Represents a notation node in a DOM document.
 */
interface DzDomNotation extends DzDomNode
{

  /**
   * [Read Only] The public identifier of the notation.
   */
  publicId: string

  /**
   * [Read Only] The system identifier of the notation.
   */
  systemId: string

}

declare var DzDomNotation:
{
  prototype: DzDomNotation;

  /**
   * Default constructor.
   */
  new (): DzDomNotation;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domprocessinginstruction_dz
 * DAZ Script DOM entity node.
 * @remarks Represents an entity node in a DOM document.
 */
interface DzDomProcessingInstruction extends DzDomNode
{

  /**
   * The data of the processing instruction.
   */
  data: string

  /**
   * [Read Only] The target of the processing instruction.
   */
  target: string

}

declare var DzDomProcessingInstruction:
{
  prototype: DzDomProcessingInstruction;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createProcessingInstruction() to create a new processing instruction node as a member of a document.
   */
  new (): DzDomProcessingInstruction;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domtext_dz
 * DAZ Script DOM text node.
 * @remarks Represents a text node in a DOM document.
 */
interface DzDomText extends DzDomCharacterData
{

  /**
   * Splits the text node into two text nodes with offset characters in the first node.
   * @param offset - 
   */
  splitText (offset: number): DzDomNode;

}

declare var DzDomText:
{
  prototype: DzDomText;

  /**
   * Default constructor. Typically, you will not construct these directly, but will call DzDomDocument::createText() to create a new text node as a member of a document.
   */
  new (): DzDomText;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/drawstyle_dz
 * Encapsulates the drawing parameters for a 3D view.
 * @remarks TODO: Add detailed description.
 */
interface DzDrawStyle extends DzBase
{

  /**
   * A list of shading styles for rendering scene objects in OpenGL
   */
  /**
   * Draws unlit wire-frame bounding boxes
   */
  readonly WireBox: number;

  /**
   * Draws smooth-shaded bounding boxes
   */
  readonly SolidBox: number;

  /**
   * Draws unlit wire-frames
   */
  readonly Wireframe: number;

  /**
   * Draws lit wire-frames
   */
  readonly LitWireframe: number;

  /**
   * Draws unlit wire-frames, front geometry facing only
   */
  readonly HiddenLine: number;

  /**
   * Draws lit smooth shaded objects with wireframes imposed
   */
  readonly WireShaded: number;

  /**
   * Draws lit smooth shaded objects
   */
  readonly SmoothShaded: number;

  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed
   */
  readonly WireTextured: number;

  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied
   */
  readonly Textured: number;

  /**
   * Draws lit smooth shaded objects with a GLSL shader applied
   */
  readonly GLSLShader: number;

  /**
   * Draws unlit smooth shaded objects
   */
  readonly Unshaded: number;

  /**
   * Special mode for using OpenGL to determine a selected object when the user clicks in the view
   */
  readonly Picking: number;

  /**
   * Whether or not visual cues (such as bounding boxes for selected nodes) should be drawn when appropriate.
   */
  drawCuesDefault: boolean

  /**
   * Whether or not only objects should be drawn
   */
  drawObjectsOnly: boolean

  /**
   * Whether or not only shadow casters should be drawn
   */
  drawShadowCastersOnly: boolean

  /**
   * Read-Only - Whether or not the style is a user style
   */
  isUserStyle: boolean

  /**
   * Whether or not the draw is render quality.
   */
  renderQuality: boolean

  /**
   * @returns true if visual cues (such as bounding boxes for selected nodes) should be drawn for the current drawing operation, false if visual cues should not be drawn.
   * @seealso setDrawCuesDefault(), getDrawCuesDefault()
   */
  drawCues (): boolean;

  /**
   * If the current shade style is not using lighting, this method will set the shade style to the nearest match that uses single-pass drawing and lighting.
   */
  forceUseLighting (): void;

  /**
   * @returns The current pass number (second passes are draw for the hidden line and wire shaded styles)
   * @seealso setPass()
   */
  pass (): number;

  /**
   * @returns true if selection maps are enabled, false if selection maps are disabled. This is only valid for node picking draw operations.
   * @seealso setRenderQuality()
   */
  selectionMapsEnabled (): boolean;

  /**
   * @returns The scene shader for this draw operation, if any.
   */
  shader (): sceneshader_dz;

  /**
   * @returns The shading style for the current drawing operation
   */
  shadeStyle (): number;

}

declare namespace DzDrawStyle
{

  /**
   * A list of shading styles for rendering scene objects in OpenGL
   */
  /**
   * Draws unlit wire-frame bounding boxes
   */
  export const WireBox: number;
  /**
   * Draws smooth-shaded bounding boxes
   */
  export const SolidBox: number;
  /**
   * Draws unlit wire-frames
   */
  export const Wireframe: number;
  /**
   * Draws lit wire-frames
   */
  export const LitWireframe: number;
  /**
   * Draws unlit wire-frames, front geometry facing only
   */
  export const HiddenLine: number;
  /**
   * Draws lit smooth shaded objects with wireframes imposed
   */
  export const WireShaded: number;
  /**
   * Draws lit smooth shaded objects
   */
  export const SmoothShaded: number;
  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed
   */
  export const WireTextured: number;
  /**
   * Draws lit smooth shaded objects with any texture/transparency maps applied
   */
  export const Textured: number;
  /**
   * Draws lit smooth shaded objects with a GLSL shader applied
   */
  export const GLSLShader: number;
  /**
   * Draws unlit smooth shaded objects
   */
  export const Unshaded: number;
  /**
   * Special mode for using OpenGL to determine a selected object when the user clicks in the view
   */
  export const Picking: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dynamicdividerwgt_dz
 * A divider bar that handles resize events and toggling automatically.
 * @remarks A Dynamic Divider takes two DzWidget objects and places a divider bar between them. It handles resize events, as well as toggling of the divider bar if toggling is enabled.
 * For complex arrangements you can nest instances of this class by specifying them as one of the widgets via setFirstWidget( DzWidget ) or setSecondWidget( DzWidget )
 */
interface DzDynamicDividerWgt extends DzWidget
{

  /**
   * TODO: Add description.
   */
  /**
   * Use the thick divider bar.
   */
  readonly BSFull: number;

  /**
   * Use the medium sized divider bar.
   */
  readonly BSSemi: number;

  /**
   * Use the thin divider bar.
   */
  readonly BSThin: number;

  /**
   * TODO: Add description.
   */
  /**
   * Represents a horizontal divider bar (widgets are top and bottom).
   */
  readonly DOHorizontal: number;

  /**
   * Represents a vertical divider bar (widgets are left and right).
   */
  readonly DOVertical: number;

  /**
   * TODO: Add description.
   */
  /**
   * Stretch the left (or top) widget when resizing.
   */
  readonly RTStretchFirst: number;

  /**
   * Stretch the right (or bottom) widget when resizing.
   */
  readonly RTStretchSecond: number;

  /**
   * Stretch both widgets equally when resizing.
   */
  readonly RTStretchBoth: number;

  /**
   * TODO: Add description.
   */
  /**
   * References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
   */
  readonly WTLeftOrTop: number;

  /**
   * References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
   */
  readonly WTRightOrBottom: number;

  /**
   * References both widgets of the divider bar.
   */
  readonly WTBoth: number;

  /**
   * References neither widget of the divider bar.
   */
  readonly WTNone: number;

  /**
   * Holds the actual position of the divider bar as a percentage in decimal format (0.5 = 50%).
   */
  actualDividerPercent: number

  /**
   * Holds the orientation of the divider bar.
   */
  dividerOrientation: number

  /**
   * Holds the type of divider bar used.
   */
  dividerType: number

  /**
   * Holds the margin surrounding this object.
   */
  margin: number

  /**
   * Holds whether the divider bar is currently minimized.
   */
  minimized: boolean

  /**
   * Holds whether the divider bar can be moved by dragging.
   */
  moveDisabled: boolean

  /**
   * Holds the preferred position of the divider bar as a percentage in decimal format (0.5 = 50%).
   */
  preferredDividerPercent: number

  /**
   * Holds the preferred widget type.
   */
  preferredWidget: number

  /**
   * Holds the preferred extent of the widget. This value is only used if the value of DzDynamicDividerWgt::preferredWidget is not DzDividerBar::WTNone.
   */
  preferredWidgetExtent: number

  /**
   * Holds the spacing between the widgets and the divider bar.
   */
  spacing: number

  /**
   * Holds the direction the toggle bar will be minimized when clicked.
   */
  toggleDirection: number

  /**
   * Holds whether the divider bar can be minimized when clicked.
   */
  toggleEnabled: boolean

  /**
   * Moves the divider distance pixels from the current location. If the new location will cause the divider to be displayed in an invalid location (based on minimum size requirements of the widgets), it will be moved and displayed as close as possible to the desired location.
   * @param distance - The distance in pixels from the current location.
   */
  moveDivider (distance: number): void;

  /**
   * Sets the divider bar to be used for this object
   * @param orientation - The orientation of the divider bar.
   * @param barStyle - The type of divider bar to be used.
   */
  setDividerBar (orientation: number, barStyle: number): void;

  /**
   * Sets the left (or top) widget, depending on the orientation.
   * @param first - The widget to be used in the left (or top) position. (should not be undefined)
   */
  setFirstWidget (first: DzWidget): void;

  /**
   * Sets the preferred extent (width or height depending on orientation) for the specified widget. If this extent cannot be used (usually due to minimum size constraints) then the divider will be positioned as close as possible to the preferred extent.
   * @since 4.9.0.33
   * @param widget - The widget that should be sized. Values other than WTLeftOrTop or WTRightOrBottom will cause this method to have no effect.
   * @param extent - The extent to be set for the widget.
   */
  setPreferredWidgetExtent (widget: number, extent: number): void;

  /**
   * Sets the right (or bottom) widget, depending on the orientation.
   * @param second - The widget to be used in the right (or bottom) position. (should not be undefined)
   */
  setSecondWidget (second: DzWidget): void;

  /**
   * Toggles the widget to the specified minimized state, if needed.
   * @since 4.9.0.33
   * @param minimized - Whether the divider should be minimized or not.
   */
  setToggleState (minimized: boolean): void;

  /**
   * Swaps the left (or top) and right (or bottom) widget.
   * @since 4.9.0.33
   */
  swapFirstAndSecondWidgets (): void;

  /**
   * Toggles the widget in the direction specified by toggleDirection. If toggling is disabled, this method has no effect. If either the first or second widget is undefined, this method will also have no effect.
   */
  toggleWidget (): void;

}

declare var DzDynamicDividerWgt:
{
  prototype: DzDynamicDividerWgt;

  /**
   * Instantiates DzDynamicDividerWgt.
   * @attention This constructor creates an instance of this object in an undefined state until both setFirstWidget( DzWidget ) and setSecondWidget( DzWidget ) are called.
   * @param parent - The parent of this object (should not be undefined).
   */
  new (parent: DzWidget): DzDynamicDividerWgt;

  /**
   * Instantiates DzDynamicDividerWgt.
   * @param parent - The parent of this object (should not be undefined).
   * @param firstChild - The left (or top) widget (should not be undefined).
   * @param secondChild - The right (or bottom) widget (should not be undefined).
   */
  new (parent: DzWidget, firstChild: DzWidget, secondChild: DzWidget): DzDynamicDividerWgt;

  /**
   * TODO: Add description.
   */
  /**
   * Use the thick divider bar.
   */
  readonly BSFull: number;
  /**
   * Use the medium sized divider bar.
   */
  readonly BSSemi: number;
  /**
   * Use the thin divider bar.
   */
  readonly BSThin: number;

  /**
   * TODO: Add description.
   */
  /**
   * Represents a horizontal divider bar (widgets are top and bottom).
   */
  readonly DOHorizontal: number;
  /**
   * Represents a vertical divider bar (widgets are left and right).
   */
  readonly DOVertical: number;

  /**
   * TODO: Add description.
   */
  /**
   * Stretch the left (or top) widget when resizing.
   */
  readonly RTStretchFirst: number;
  /**
   * Stretch the right (or bottom) widget when resizing.
   */
  readonly RTStretchSecond: number;
  /**
   * Stretch both widgets equally when resizing.
   */
  readonly RTStretchBoth: number;

  /**
   * TODO: Add description.
   */
  /**
   * References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
   */
  readonly WTLeftOrTop: number;
  /**
   * References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
   */
  readonly WTRightOrBottom: number;
  /**
   * References both widgets of the divider bar.
   */
  readonly WTBoth: number;
  /**
   * References neither widget of the divider bar.
   */
  readonly WTNone: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/edge_dz
 * Represents a segment on a face between two vertices.
 * @remarks Represents an edge between two vertices.
 */
interface DzEdge extends Object
{

  /**
   * The offset from the cage
   */
  cageOffsetA: number

  /**
   * The index of a DzFacet this edge belongs to
   */
  facetA: number

  /**
   * The index of the other DzFacet this edge belongs to (if any), otherwise this is an open edge
   */
  facetB: number

  /**
   * The index of this edge
   */
  index: number

  /**
   * The offset …
   */
  offsetA: number

  /**
   * The offset …
   */
  offsetB: number

  /**
   * The index of the vertex this edge originates at
   */
  vertIdx1: number

  /**
   * The index of the vertex this edge ends at
   */
  vertIdx2: number

  /**
   * @returns true if this is an open edge, otherwise false
   */
  isOpenEdge (): boolean;

}

declare var DzEdge:
{
  prototype: DzEdge;

  /**
   * Default Constructor.
   */
  new (): DzEdge;

  /**
   * TODO: Add description.
   * @param vertex1 - 
   * @param vertex2 - 
   */
  new (vertex1: number, vertex2: number): DzEdge;

  /**
   * TODO: Add description.
   * @param edge - 
   */
  new (edge: DzEdge): DzEdge;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/element_dz
 * Base class for objects that have animatable/storable properties.
 * @remarks Classes derived from DzElement may have any number of properties (objects derived from DzProperty). Those properties may be added and removed at runtime and may be specified as animatable or not. There are several types of properties that have been supplied with the Studio SDK. Property names must be unique within an element. A variety of methods are provided to allow easy traversal and/or searching of the properties list for an object.
 * Methods are provided to clear animation data on all properties of an object either over a range or over all time.
 * DzElement takes ownership of all properties added via addProperty(). Subclasses should not attempt to delete properties that have been added to the element.
 * DzElement also handles saving and loading of all properties. When DzElement loads a property from a file, it will delete any existing property of the same name and replace it with the new property read in - subclasses are responsible for updating any local references to properties whenever a file is loaded. The easiest and most reliable way to do this is for the subclass to write out and read back in any local pointers it maintains to properties. Another approach would be for the subclass to reimplement the postLoadFile() function and update its references by calling findProperty() to lookup the properties by name.
 */
interface DzElement extends DzBase
{

  /**
   * Holds the number used to uniquely identify this element in the scene. (Read Only)
   * @since 4.6.4.13
   */
  elementID: number

  /**
   * Hang a new custom data item off of this element. Data items will be deleted when this element is deleted, so ownership of the data item is transferred to the element after this call. Do not attempt to delete the data item yourself unless you call removeDataItem() first.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso removeDataItem()
   * @param item - The data item to attach to this element.
   */
  addDataItem (item: DzElementData): DzError;

  /**
   * Add a new private property that will be available for connections or direct editing.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso removeProperty()
   * @param prop - The property to add to the element.
   */
  addPrivateProperty (prop: DzProperty): DzError;

  /**
   * Add a new property. Adds a new property that will be available for connections or direct editing.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso removeProperty()
   * @param prop - The property to add to the element.
   */
  addProperty (prop: DzProperty): DzError;

  /**
   * Begins an editing operation for this element - DzProperty::beginEdit() will be called for all properties belonging to this element.
   */
  beginEdit (): void;

  /**
   * Cancels an editing operation for this element - DzProperty::cancelEdit() will be called for all properties belonging to this element.
   */
  cancelEdit (): void;

  /**
   * Removes all animation keys on this object.
   */
  clearAllAnimData (): void;

  /**
   * Clear animation keys in the currently active animation layer. Removes animation data on all animatible properties owned by this element over the given range.
   * @param range - The range of time over which keys will be removed.
   */
  clearAnimData (range: DzTimeRange): void;

  /**
   * Matches the properties on this element to properties on the given element by name, and then copies the values of matching properties on source to the properties on this element.
   * @param source - The element that this element should copy property values from.
   */
  copyFrom (source: DzElement): void;

  /**
   * Copies the property values of the element to a 'clipboard' so that they may be saved and applied (copied) to another element - or to the same element.
   * @returns The 'clipboard' which holds a copy of the current element's property values. These values are a snapshot of the current state of the element, and will remain unchanged even if the element is changed or deleted. The caller is responsible for deleting this object.
   * @param [contentTypes=[]] - A list of the contentTypes that should be included in the copy. An empty list will copy all property values.
   */
  copyToClipboard (contentTypes?: Array<unknown>): elementclipboard_dz;

  /**
   * Remove the the data item from this element and deletes it. Pointer is invalid after this call if DZ_NO_ERROR is returned.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addDataItem()
   * @param item - The data item to remove.
   */
  deleteDataItem (item: DzElementData): DzError;

  /**
   * Retrieve the user data item with the given ID, if one with that ID is attached to this element.
   * @returns The corresponding item if found, NULL if no match.
   * @param dataName - Unique ID to use in looking up the user data item.
   */
  findDataItem (dataName: string): DzElementData;

  /**
   * Searches for the first data item index.
   * @returns The index of the data item.
   * @param item - The data item to find.
   */
  findDataItemIndex (item: DzElementData): number;

  /**
   * Locate a matching property.
   * @returns The property, or NULL if not found.
   * @param srcProp - The property to search for a match.
   */
  findMatchingProperty (srcProp: DzProperty): DzProperty;

  /**
   * Locate a property by name.
   * @returns The property, or NULL if not found.
   * @param name - The name of the property to search for.
   */
  findPrivateProperty (name: string): DzProperty;

  /**
   * Locate a property by name.
   * @returns The property, or NULL if not found.
   * @param name - The name of the property to search for.
   * @param caseSensitive - Whether or not the search should be case sensitive.
   */
  findPrivateProperty (name: string, caseSensitive: boolean): DzProperty;

  /**
   * Locate a property by label.
   * @returns The property, or NULL if not found.
   * @param label - The label of the property to search for.
   */
  findPrivatePropertyByLabel (label: string): DzProperty;

  /**
   * Locate a property by label.
   * @returns The property, or NULL if not found.
   * @param label - The label of the property to search for.
   * @param caseSensitive - Whether or not the search should be case sensitive.
   */
  findPrivatePropertyByLabel (label: string, caseSensitive: boolean): DzProperty;

  /**
   * Locate a property by name.
   * @returns The property, or NULL if not found.
   * @param name - The name of the property to search for.
   */
  findProperty (name: string): DzProperty;

  /**
   * Locate a property by name.
   * @returns The property, or NULL if not found.
   * @param name - The name of the property to search for.
   * @param caseSensitive - Whether or not the search should be case sensitive.
   */
  findProperty (name: string, caseSensitive: boolean): DzProperty;

  /**
   * Locate a property by label.
   * @returns The property, or NULL if not found.
   * @param label - The label of the property to search for.
   */
  findPropertyByLabel (label: string): DzProperty;

  /**
   * Locate a property by label.
   * @returns The property, or NULL if not found.
   * @param label - The label of the property to search for.
   * @param caseSensitive - Whether or not the search should be case sensitive.
   */
  findPropertyByLabel (label: string, caseSensitive: boolean): DzProperty;

  /**
   * finishes an editing operation for this element - DzProperty::finishEdit() will be called for all properties belonging to this element.
   */
  finishEdit (): void;

  /**
   * Populates the given settings object with the attributes of this element. If this settings object is not empty the save filters will save out this settings information in the preset.
   * @seealso setAttributes()
   * @param settings - The settings object to put the information in.
   */
  getAttributes (settings: DzSettings): void;

  /**
   * @returns The data item for this element at the given index.
   * @param index - The index of the data item to return.
   */
  getDataItem (index: number): DzElementData;

  /**
   * @returns A list of the data items attached to this element.
   */
  getDataItemList (): Array<unknown>;

  /**
   * @returns The child of this element at the given index.
   * @param which - The index of the child element to return.
   */
  getElementChild (which: number): DzElement;

  /**
   * @returns The element that is the parent of this element. Null if the element has no parent.
   */
  getElementParent (): DzElement;

  /**
   * @returns The user-defined interface label for this element.
   */
  getLabel (): string;

  /**
   * @returns The script that is executed when this element is loaded from a file.
   */
  getLoadScript (): DzScript;

  /**
   * @returns The number of user data items attached to this element.
   */
  getNumDataItems (): number;

  /**
   * @returns The number of children this element has.
   */
  getNumElementChildren (): number;

  /**
   * @returns The number of private properties currently owned by this element.
   */
  getNumPrivateProperties (): number;

  /**
   * @returns The number of properties currently owned by this element.
   */
  getNumProperties (): number;

  /**
   * Get a property from this element's property list.
   * @returns The property at the given index.
   * @param index - The index of the property to get.
   */
  getPrivateProperty (index: number): DzProperty;

  /**
   * @returns The property group tree for private properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
   */
  getPrivatePropertyGroups (): DzPropertyGroupTree;

  /**
   * @returns A list of all the private properties on this element.
   */
  getPrivatePropertyList (): Array<unknown>;

  /**
   * Get a property from this element's property list.
   * @returns The property at the given index.
   * @param index - The index of the property to get.
   */
  getProperty (index: number): DzProperty;

  /**
   * @returns The property group tree for properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
   */
  getPropertyGroups (): DzPropertyGroupTree;

  /**
   * @returns A list of all the properties on this element.
   */
  getPropertyList (): Array<unknown>;

  /**
   * @returns The original value if dataName is already unique, otherwise a unique name.
   * @since 4.9.3.117
   * @param dataName - The name of the data item to make unique.
   */
  getUniqueDataItemName (dataName: string): string;

  /**
   * @returns The original value if name is already unique, otherwise a unique private property name.
   * @since 4.9.3.117
   * @param name - The private property name to make unique.
   */
  getUniquePrivatePropertyName (name: string): string;

  /**
   * @returns The original value if name is already unique, otherwise a unique property name.
   * @since 4.9.3.117
   * @param name - The property name to make unique.
   */
  getUniquePropertyName (name: string): string;

  /**
   * @returns true if the element is in an editing operation, otherwise false.
   * @seealso beginEdit(), finishEdit(), cancelEdit()
   */
  inEdit (): boolean;

  /**
   * Adds a new property that will be available for connections or direct editing.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso removeProperty()
   * @param index - The location in the list to insert the new property.
   * @param prop - The property to add to the element.
   */
  insertPrivateProperty (index: number, prop: DzProperty): DzError;

  /**
   * Add a new property. Adds a new property that will be available for connections or direct editing.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty(), removeProperty()
   * @param index - The index in the properties list to insert the property.
   * @param prop - The property to insert in the element.
   */
  insertProperty (index: number, prop: DzProperty): DzError;

  /**
   * Moves a data item to a new index.
   * @returns An error code.
   * @param item - The data item to move.
   * @param index - The new index of the item.
   */
  moveDataItemToIndex (item: DzElementData, index: number): DzError;

  /**
   * Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
   * @param element - The element that prop should be moved to.
   */
  movePrivateProperty (prop: DzProperty, element: DzElement): DzError;

  /**
   * Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
   * @param element - The element that prop should be moved to.
   */
  moveProperty (prop: DzProperty, element: DzElement): DzError;

  /**
   * Remove the data item from this element.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addDataItem()
   * @param item - The data item to remove.
   */
  removeDataItem (item: DzElementData): DzError;

  /**
   * Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the object.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param prop - The property to remove from the element.
   */
  removePrivateProperty (prop: DzProperty): DzError;

  /**
   * Attempts to remove the named property. Fails if the property could not be found or could not be removed.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param name - The name of the property to search for and remove if it is found.
   */
  removePrivateProperty (name: string): DzError;

  /**
   * Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the object.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param prop - The property to remove from the element.
   */
  removeProperty (prop: DzProperty): DzError;

  /**
   * Attempts to remove the named property. Fails if the property could not be found or could not be removed.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @seealso addProperty()
   * @param name - The name of the property to search for and remove if it is found.
   */
  removeProperty (name: string): DzError;

  /**
   * Sets attributes in the handed in settings and returns a pointer to an element set by these settings. The element returned may not be a new element or null if the settings are not correct. Default implementation returns this with no changes.
   * @returns A new element, or this element if no changes were made. The caller is responsible for cleaning up the memory of the return element if it is not this.
   * @param settings - The settings object containing the information.
   */
  setAttributes (settings: DzSettings): DzElement;

  /**
   * Set the user-defined label that is displayed in the interface for this object.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param name - The new label for the element.
   */
  setLabel (name: string): DzError;

  /**
   * Sets the script that will be executed when this element is loaded from a file.
   * @param script - The script that will be saved with this element and executed when it is loaded from file. The element takes ownership.
   */
  setLoadScript (script: DzScript): void;

  /**
   * Set the internal name of this object.
   * @param name - The name to assign to this element.
   */
  setName (name: string): void;

  /**
   * @returns true if this element should have its property groups and properties sorted after being created on load, otherwise false.
   */
  shouldSortOnLoad (): boolean;

  /**
   * Called to update any cached or display data for this object.
   */
  update (): void;

  labelChanged: Signal<{
    /**
     * Emitted when this object's label is changed.
     * @param newLabel - The new label of the element.
     */
  (newLabel: string): void;
  }>;
  parentChanged: Signal<{
    /**
     * Emitted when this element's parent is changed.
     */
  (): void;
  }>;
  privatePropertyAdded: Signal<{
    /**
     * Emitted when a private property is added to this element.
     * @param prop - The property just added.
     */
  (prop: DzProperty): void;
  }>;
  privatePropertyListChanged: Signal<{
    /**
     * Emitted when a private property is added to or removed from this element.
     */
  (): void;
  }>;
  privatePropertyListInTreeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  privatePropertyRemoved: Signal<{
    /**
     * Emitted when a private property is removed from this element.
     * @param prop - The property just removed.
     */
  (prop: DzProperty): void;
  }>;
  privatePropertyTreeChanged: Signal<{
    /**
     * Emitted when the private property tree has changed.
     */
  (): void;
  }>;
  propertyAdded: Signal<{
    /**
     * Emitted when a property is added to this element.
     * @param prop - The property just added.
     */
  (prop: DzProperty): void;
  }>;
  propertyListChanged: Signal<{
    /**
     * Emitted when a property is added to or removed from this element.
     */
  (): void;
  }>;
  propertyListInTreeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  propertyRemoved: Signal<{
    /**
     * Emitted when a property is removed from this element.
     * @param prop - The property just removed.
     */
  (prop: DzProperty): void;
  }>;
  propertyTreeChanged: Signal<{
    /**
     * Emitted when the property tree has changed.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementdata_dz
 * DzCustomData implementation that can be associated with an individual DzElement instance.
 * @seealso DzElement::addDataItem()
 * DzElement::removeDataItem()
 * DzElement::deleteDataItem()
 * DzElement::getNumDataItems()
 * DzElement::getDataItem()
 * DzElement::getDataItemList()
 * DzElement::isDataItemNameUnique()
 * DzElement::getUniqueDataItemName()
 * DzElement::findDataItem()
 * DzElement::moveDataItemToIndex()
 * DzElement::findDataItemIndex()
 */
interface DzElementData extends DzCustomData
{

  /**
   * @returns A uplicate of the data item that can be added to the given owner (if any), otherwise NULL.
   * @param owner - The element to duplicate this data item on.
   */
  duplicate (owner: DzElement): DzElementData;

  /**
   * @returns The element that this data item is associated with (if any), otherwise NULL.
   */
  getOwner (): DzElement;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementpostloadfiledata_dz
 * DzCustomData implementation that can be associated with an individual DzElement instance.
 * @remarks If the file to post-load is a script:
 * A global transient variable named DataItem, which refers to the DzElementPostLoadFileData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * @attention The differences between this implementation and DzSimpleElementScriptData are that this implementation can reference the file path of a file that is not a script and it does not have an associated DzSettings that can be used to configure said script.
 * If the file to post-load is not a script, the path is stored but the file is not loaded.
 */
interface DzElementPostLoadFileData extends DzElementData
{

  /**
   * @returns The file path of the file for this data item (if any), otherwise an empty string.
   */
  getPostLoadFilePath (): string;

  /**
   * Sets the file path of the file for this data item.
   * @param script - The file path of the file.
   */
  setPostLoadFilePath (script: string): void;

}

declare var DzElementPostLoadFileData:
{
  prototype: DzElementPostLoadFileData;

  /**
   * Default constructor.
   * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
   * @param [persistent=true] - If true, the data item will be saved with the element to the native file format.
   */
  new (name: string, persistent?: boolean): DzElementPostLoadFileData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumproperty_dz
 * An animatable enum property.
 * @remarks This class provides an animatable enumerated property that is stored and can be accessed as an integer property. It maintains a list of strings that correspond to the integer value of the property.
 */
interface DzEnumProperty extends DzIntProperty
{

  /**
   * Adds a string to the available choices for this property. Duplicates are not allowed.
   * @returns The index of the newly added item is returned, or -1 on error.
   * @param item - The string to add to the list of items.
   * @param [index=-1] - The index to insert the item at. If invalid, the item is appended to the list.
   */
  addItem (item: string, index?: number): number;

  /**
   * Searches the property for an item that matches the given string.
   * @returns The index of the item that matches the given string (if any), otherwise -1.
   * @param str - The string to find.
   */
  findItemString (str: string): number;

  /**
   * @returns The string representation of the default value.
   */
  getDefaultStringValue (): string;

  /**
   * @returns The string representation of the i'th item (if valid), otherwise an empty string.
   * @param i - The index of the item to return.
   */
  getItem (i: number): string;

  /**
   * @returns The string representation of the i'th key value (if valid), otherwise an empty string.
   * @param i - The index of the key to return the value of.
   */
  getKeyStringValue (i: number): string;

  /**
   * @returns The number of enumerated items.
   */
  getNumItems (): number;

  /**
   * @returns The string representation of the raw value (if valid), otherwise the default string.
   */
  getRawStringValue (): string;

  /**
   * @returns The string representation of the raw value at the given time (if valid), otherwise the default string.
   * @param tm - The scene time at which to get the raw value of the property.
   */
  getRawStringValue (tm: DzTime): string;

  /**
   * @returns The string representation of the value at the given time.
   * @param tm - The scene time at which to get the value.
   */
  getStringValue (tm: DzTime): string;

  /**
   * @returns The string representation of the current value.
   */
  getStringValue (): string;

  /**
   * @returns An item string that is guaranteed to be unique. If item is not already in the list, it is returned. Otherwise, a number will be appended to item to make it unique.
   * @param item - 
   */
  getUniqueItemString (item: string): string;

  /**
   * Removes all items and makes this property essentially invalid.
   */
  removeAllItems (): void;

  /**
   * Removes the item at the given index.
   * @returns true if the item was successfully removed, otherwise false.
   * @param index - The index of the item to remove.
   */
  removeItem (index: number): boolean;

  /**
   * Replaces the item at the given index with the given string.
   * @returns false if the index is out of range or the string is invalid (empty), otherwise true.
   * @param index - The index of the item to replace.
   * @param item - The new item to place into the list.
   */
  replaceItem (index: number, item: string): boolean;

  /**
   * Sets the items for this property.
   * @since 4.5.2.20
   * @param items - The list of items to set.
   */
  setItems (items: Array<unknown>): void;

  /**
   * Sets the current value of the property to the index of the item that matches the given string.
   * @returns true on success, false if the given string does not match an item in this property.
   * @param str - The string to match.
   */
  setValueFromString (str: string): boolean;

  /**
   * Sets the value of the property at the given time to the index of the item that matches the given string.
   * @returns true on success, false if the given string does not match an item in this property.
   * @param tm - The scene time to set the value of the property at.
   * @param str - The string to match.
   */
  setValueFromString (tm: DzTime, str: string): boolean;

  itemListChanged: Signal<{
    /**
     * Emitted when the item list (list of legal values for this property) changes.
     */
  (): void;
  }>;
}

declare var DzEnumProperty:
{
  prototype: DzEnumProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzEnumProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzEnumProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumslider_dz
 * DAZScript integer slider that displays a set of string values in place of numeric values.
 * @remarks A DzEnumSlider provides a control that allows a user to adjust a bounded, enumerated, integer value. The slider is clamped by default, and automatically sets its min and max range according to the number of string values it contains.
 */
interface DzEnumSlider extends DzWidget
{

  /**
   * Holds the number of items on the slider. (Read Only)
   */
  count: number

  /**
   * Holds the text of the slider. (Read Only)
   */
  text: string

  /**
   * Holds the current value of the slider.
   */
  value: number

  /**
   * Adds a string to the list of items, and adjusts the maximum value for the slider.
   * @returns The index of the item - this is the numeric value of the slider that corresponds to the string value.
   * @param label - The string value to add to the list of items in the slider.
   */
  addItem (label: string): number;

  /**
   * Clears the list of string values for this slider.
   */
  clear (): void;

  /**
   * @returns The String representing the which item.
   * @param which - 
   */
  getItem (which: number): string;

  /**
   * Moves the item at index which to idx.
   * @param which - The index of the item to move. If out of range, this method has no effect.
   * @param idx - The index to move which to. If out of range, which becomes the last item.
   */
  moveItem (which: number, idx: number): void;

  /**
   * Removes the item at which from the list.
   * @param which - The index of the item. If out of range, this method has no effect.
   */
  removeItem (which: number): void;

  /**
   * Renames the item at index which.
   * @param which - The index of the item to rename. If out of range, this method has no effect.
   * @param label - The new value of the item at index which.
   */
  renameItem (which: number, label: string): void;

  editEnd: Signal<{
    /**
     * Emitted when the user releases the slider.
     */
  (): void;
  }>;
  editStart: Signal<{
    /**
     * Emitted when the user starts dragging the slider.
     */
  (): void;
  }>;
  valueChanged: Signal<{
    /**
     * Emitted when the value of the slider changes, passes the new value.
     * @param value - 
     */
  (value: number): void;
  }>;
}

declare var DzEnumSlider:
{
  prototype: DzEnumSlider;

  /**
   * Creates a new enumerated slider widget.
   * @param parent - The widget parent for the slider.
   */
  new (parent: DzWidget): DzEnumSlider;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercbake_dz
 * Implements the logic of 'baking' a numeric property to the numeric properties it controls.
 * @remarks This utility class implements the logic of 'baking' (unlinking) the current state of a controller property on a node to the numeric properties it controls, such that the controlled properties remain at the respective values they were at in that moment of time. The DzERCLink between the 'baked' properties and the controller is removed.
 * The controller property (the DzNumericProperty that does the controlling) must be set before calling doBake(); see setControllerProperty().
 * @seealso Sample: ERC Bake
 * @attention This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.
 * @since 4.9.3.101
 */
interface DzERCBake extends QObject
{

  /**
   * Performs the ERC bake based on the current settings.
   * @returns true if the bake operation was successful, otherwise false.
   */
  doBake (): boolean;

  /**
   * Performs the ERC bake based on the current settings.
   * @returns true if the bake operation was successful, otherwise false.
   * @param warn - 
   */
  doBakeKeyed (warn: boolean): boolean;

  /**
   * @returns The property (if any) that controls the properties that will be baked when doBake() is called.
   */
  getControllerProperty (): DzNumericProperty;

  /**
   * Sets the property that controls the properties that will be baked when doBake() is called.
   * @param prop - The property to set as the controller to bake.
   */
  setControllerProperty (prop: DzNumericProperty): void;

  ERCChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzERCBake:
{
  prototype: DzERCBake;

  /**
   * Default constructor.
   */
  new (): DzERCBake;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercfreeze_dz
 * Implements the logic of 'freezing' the numeric properties to a controller property.
 * @remarks This utility class implements the logic of 'freezing' (linking) the current state of numeric properties on a node (or multiple nodes) to a controller property, such that adjusting the controller property adjusts the linked properties in kind. The DzERCLink between the 'frozen' properties and the controller are created such that when the controller is set to the value it is at when the 'freeze' operation is performed, the 'frozen' properties will be at the respective values they were at in that moment of time.
 * The controller node (the DzNode that the controlling property is located on) and the controller property (the DzNumericProperty that ultimately does the controlling) must be set before calling doFreeze(); see setControllerNode() and setControllerProperty().
 * An additional property can be set and used to attentuate the effect of the controller property on the 'frozen' properties, or have its value attenuated as the controller property is applied, depending on the AttenuateMode set.
 * The addPropertiesToFreeze() method is used to inspect the current state of the numeric properties on a a given node that are not currently set to their respective raw values and add them to the list of those properties to be linked to the controller property. This list of properties can be inspected and/or modified using the getPropertiesToFreeze() and setPropertiesToFreeze() methods.
 * @seealso Sample: ERC Freeze
 * @attention This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.
 * @since 4.9.3.95
 */
interface DzERCFreeze extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly SubComponents: number;

  /**
   * TODO: Add description.
   */
  readonly Controller: number;

  /**
   * Adds all numeric properties on node whose values differ from their raw values to the list of properties to 'freeze' (link) to the controller property.
   * @returns true if node, getControllerNode(), and getControllerProperty() are defined and it succeeds, otherwise false.
   * @seealso setPropertiesToFreeze()
   * getPropertiesToFreeze()
   * @param node - The node to add the numeric properties from.
   */
  addPropertiesToFreeze (node: DzNode): boolean;

  /**
   * Performs the ERC freeze based on the current settings.
   * @returns true if the freeze operation was successful, otherwise false.
   */
  doFreeze (): boolean;

  /**
   * @returns true if the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete, otherwise false.
   */
  getApplyController (): boolean;

  /**
   * @returns The mode that determines how the attenuate property will be used.
   */
  getAttenuateMode (): number;

  /**
   * @returns If set, the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
   */
  getAttenuateProperty (): DzNumericProperty;

  /**
   * @returns The node that the controller property is on.
   * @attention This is used to determine the root node that the “Restore Fgure” and the “Restore Rigging” options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
   */
  getControllerNode (): DzNode;

  /**
   * @returns The property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
   */
  getControllerProperty (): DzNumericProperty;

  /**
   * @returns true if the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink::ERCKeyed, otherwise false.
   */
  getKeyed (): boolean;

  /**
   * @returns The list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
   */
  getPropertiesToFreeze (): Array<unknown>;

  /**
   * @returns true if the Restore Figure action will be executed once the 'freeze' operation is complete, otherwise false.
   */
  getRestoreFigure (): boolean;

  /**
   * @returns true if the Restore Figure Rigging action will be executed once the 'freeze' operation is complete, otherwise false.
   */
  getRestoreRigging (): boolean;

  /**
   * Sets whether or not the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete.
   * @param yesNo - If true, the controller property will be applied.
   */
  setApplyController (yesNo: boolean): void;

  /**
   * Sets the mode that determines how the attenuate property will be used.
   * @param mode - The attenuate mode to set.
   */
  setAttenuateMode (mode: number): void;

  /**
   * Sets the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
   * @param prop - The property to set.
   */
  setAttenuateProperty (prop: DzNumericProperty): void;

  /**
   * Sets the node that the controller property is on.
   * @attention This is used to determine the root node that the “Restore Fgure” and the “Restore Rigging” options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
   * @param node - The node to set.
   */
  setControllerNode (node: DzNode): void;

  /**
   * Sets the property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
   * @seealso addPropertiesToFreeze()
   * setPropertiesToFreeze()
   * getPropertiesToFreeze()
   * @param prop - The property to set as the controller.
   */
  setControllerProperty (prop: DzNumericProperty): void;

  /**
   * Sets whether or not the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink::ERCKeyed (using the keys in timeline) or a DzERCLink::ERCDeltaAdd.
   * @param yesNo - If true, the DzERCLink will be a DzERCLink::ERCKeyed.
   */
  setKeyed (yesNo: boolean): void;

  /**
   * Sets the list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
   * @seealso addPropertiesToFreeze()
   * @param propList - The property to set as the controller.
   */
  setPropertiesToFreeze (propList: Array<unknown>): void;

  /**
   * Sets whether or not the Restore Figure action will be executed once the 'freeze' operation is complete.
   * @param yesNo - If true, the Restore Figure action will be executed.
   */
  setRestoreFigure (yesNo: boolean): void;

  /**
   * Sets whether or not the Restore Figure Rigging action will be executed once the 'freeze' operation is complete.
   * @param yesNo - If true, the Restore Figure Rigging action will be executed.
   */
  setRestoreRigging (yesNo: boolean): void;

  ERCChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzERCFreeze:
{
  prototype: DzERCFreeze;

  /**
   * Default constructor.
   */
  new (): DzERCFreeze;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly SubComponents: number;
  /**
   * TODO: Add description.
   */
  readonly Controller: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/erclink_dz
 * DAZ Studio implementation of property links (aka ERC).
 * @remarks This numeric controller implements an algorithm that is based on the value of another property. There are six formulas which correspond to the ERCType of the object - the default ERCType is ERCDeltaAdd. The formulas are:
 * ERCDeltaAdd: f(v) = v + (c * m) + a
 * ERCDivideInto: f(v) = (c / v) + a
 * ERCDivideBy: f(v) = (v / c) + a
 * ERCMultiply: f(v) = (c * v) + a
 * ERCSubtract: f(v) = v - c + a
 * ERCAdd: f(v) = v + c + a
 * ERCKeyed: f(v) = v + P©
 * Where:
 * v is the current (keyed) value of the property with the link
 * c is the current (final) value of the property that the link is driven by
 * m is an optional scalar multiplier
 * a is an optional offset (additive) value.
 * As an example of ERC in action, lets say that there are 3 properties A, B, and C. B is linked to A with a 'ERCDeltaAdd' DzERCLink with a multiplier of 1.0 and an additive value of 0.0. C is linked to B with a 'ERCDeltaAdd' DzERCLink with a multiplier of 2.0 and an additive value of 1.0. So, if the keyed value of A is 10.0, B is 0.0, and C is 0.0, the final values of the properties would be calculated as:
 * A = 10.0 B = 0.0 + (10.0 * 1.0) + 0.0 = 10.0 C = 0.0 + (10.0 * 2.0) + 1.0 = 21.0
 * If B and C have keyed values - for example B is 5.0 and C is 2.0 - the final property values would be calculated as:
 * A = 10.0 B = 5.0 + (10.0 * 1.0) + 0.0 = 15.0 C = 2.0 + (15.0 * 2.0) + 1.0 = 33.0
 */
interface DzERCLink extends DzNumericController
{

  /**
   * The types of key interpolation that can be represented by a DzERCLink of the 'ERCKeyed' type.
   */
  /**
   * Linear interpolation between key values.
   */
  readonly LINEAR_INTERP: number;

  /**
   * Constant interpolation between key values.
   */
  readonly CONSTANT_INTERP: number;

  /**
   * TCB (Kochanek-Bartels) Spline interpolation between key values.
   */
  readonly TCB_INTERP: number;

  /**
   * The types of ERC that can be represented by this class.
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * m is the scalar of this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * P is a parametric curve defined by the KeyValues array.
   */
  /**
   * This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
   */
  readonly ERCDeltaAdd: number;

  /**
   * This type of ERC implements the formula f(v) = (c / v) + a where:
   */
  readonly ERCDivideInto: number;

  /**
   * This type of ERC implements the formula f(v) = (v / c) + a where:
   */
  readonly ERCDivideBy: number;

  /**
   * This type of implements the formula f(v) = (c * v) + a where:
   */
  readonly ERCMultiply: number;

  /**
   * This type of ERC implements the formula f(v) = v - c + a where:
   */
  readonly ERCSubtract: number;

  /**
   * This type of ERC implements the formula f(v) = v + c + a where:
   */
  readonly ERCAdd: number;

  /**
   * This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
   */
  readonly ERCKeyed: number;

  /**
   * Holds whether or not the controller is evaluated and applied.
   */
  active: boolean

  /**
   * Holds the addend value for the link.
   */
  addend: number

  /**
   * Holds whether or not the link will be automatically redirected when its owner is 'Fit To' another figure.
   */
  autoOverride: boolean

  /**
   * Holds whether or not the link is a user-link.
   */
  isUserLink: boolean

  /**
   * Holds the interpolation mode for links of the ERCKeyed type.
   */
  keyInterpolation: number

  /**
   * Holds whether the controller will be saved with the output property (the property that owns the link), or the input property (the linked property).
   */
  saveWithOutput: boolean

  /**
   * Holds the scalar (multiplier) value for links of the ERCDeltaAdd type.
   */
  scalar: number

  /**
   * Holds the type of operation the link will perform when evaluated and applied.
   */
  type: number

  /**
   * Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is LINEAR_INTERP or CONSTANT_INTERP.
   * @returns If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
   * @param key - The value of the property that drives this link to add a keyed value for.
   * @param value - The value of the property this link resides on to add a keyed value for.
   */
  addKeyValue (key: number, value: number): number;

  /**
   * Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is TCB_INTERP.
   * @returns If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
   * @param key - The value of the property that drives this link to add a keyed value for.
   * @param value - The value of the property this link resides on to add a keyed value for.
   * @param t - The tenstion value to set for the keyed value.
   * @param c - The continuity value to set for the keyed value.
   * @param b - The bias value to set for the keyed value.
   */
  addKeyValue (key: number, value: number, t: number, c: number, b: number): number;

  /**
   * Clears all keyed values for links of the ERCKeyed type.
   */
  clearKeys (): void;

  /**
   * Makes a deep copy of this link.
   * @returns A deep copy of this link, driven by the specified property.
   * @param [newProperty=undefined] - The property to drive the duplicated link with.
   */
  duplicate (newProperty?: DzNumericProperty): DzERCLink;

  /**
   * @returns If the type of the link is ERCKeyed, the index of key, otherwise -1.
   * @param key - The value of the property that drives this link to find the index of.
   */
  findKeyIndex (key: number): number;

  /**
   * @returns The property that is currently driving this link. Typically, this will return the same value as getProperty(), however, if autoOverride is enabled, and the property's owner is 'Fit To' another node, this will return the property on the node that this link has been redirected to.
   */
  getCurrentProperty (): DzNumericProperty;

  /**
   * @returns If the type of link is ERCKeyed and which is within the range of keyed values, the key at which, otherwise 0.
   * @param which - The index of the keyed value to get the key for.
   */
  getKey (which: number): number;

  /**
   * @returns If the link is the ERCKeyed type, the interpolated value of the operation at tm, otherwise 0.
   * @param val - The time of the interpolated value to get.
   */
  getKeyOpValue (val: number): number;

  /**
   * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the bias value at which, otherwise 0.
   * @param which - The index of the keyed value to get the bias value for.
   */
  getKeyParamB (which: number): number;

  /**
   * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the continuity value at which, otherwise 0.
   * @param which - The index of the keyed value to get the continuity value for.
   */
  getKeyParamC (which: number): number;

  /**
   * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the tension value at which, otherwise 0.
   * @param which - The index of the keyed value to get the tension value for.
   */
  getKeyParamT (which: number): number;

  /**
   * @returns If the type of link is ERCKeyed and which is within the range of keyed values, the value at which, otherwise 0.
   * @param which - The index of the keyed value to get the value for.
   */
  getKeyValue (which: number): number;

  /**
   * @returns The number of keyed values for a link of the ERCKeyed type.
   */
  getNumKeyValues (): number;

  /**
   * @returns The property that drives this link.
   */
  getProperty (): DzNumericProperty;

  /**
   * Presizes the array of keyed values in order to improve the performance of adding keyed values.
   * @param count - The number of keyed values to be added.
   */
  presizeKeys (count: number): void;

  /**
   * Removes a keyed value from the link if the link type is ERCKeyed.
   * @returns true if which is within the range of keyed values, otherwise false.
   * @param which - The keyed value (of the property that drives this link) to remove.
   */
  removeKeyValue (which: number): boolean;

  /**
   * Sets the property that drives this link.
   * @param prop - The property to drive this link with.
   */
  setProperty (prop: DzNumericProperty): void;

  ercSourcePropertyRemoved: Signal<{
    /**
     * TODO: Add description.
     * @param prop - 
     */
  (prop: DzProperty): void;
  }>;
  keyChanged: Signal<{
    /**
     * TODO: Add description.
     * @param which - 
     */
  (which: number): void;
  }>;
  keyInterpolationChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  keysListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  propertyDeleted: Signal<{
    /**
     * Emitted when the source property or current property is deleted.
     * @param prop - The property that was deleted.
     */
  (prop: DzProperty): void;
  }>;
  saveWithOutputChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  scalarChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  stageChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  typeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzERCLink:
{
  prototype: DzERCLink;

  /**
   * Default constructor.
   */
  new (): DzERCLink;

  /**
   * TODO: Add description.
   * @param copyFrom - 
   * @param [property=undefined] - 
   */
  new (copyFrom: DzERCLink, property?: DzNumericProperty): DzERCLink;

  /**
   * Creates a controller that is driven by property.
   * @param type - The type of this link.
   * @param property - 
   * @param [scalar=1.0] - The multiplier of the value.
   * @param [addend=0.0] - The property that drives this link.
   */
  new (type: number, property: DzNumericProperty, scalar?: number, addend?: number): DzERCLink;

  /**
   * Creates a controller that is driven by property.
   * @param property - 
   * @param [scalar=1.0] - The multiplier of the value.
   * @param [addend=0.0] - The property that drives this link.
   */
  new (property: DzNumericProperty, scalar?: number, addend?: number): DzERCLink;

  /**
   * The types of key interpolation that can be represented by a DzERCLink of the 'ERCKeyed' type.
   */
  /**
   * Linear interpolation between key values.
   */
  readonly LINEAR_INTERP: number;
  /**
   * Constant interpolation between key values.
   */
  readonly CONSTANT_INTERP: number;
  /**
   * TCB (Kochanek-Bartels) Spline interpolation between key values.
   */
  readonly TCB_INTERP: number;

  /**
   * The types of ERC that can be represented by this class.
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * m is the scalar of this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * a is the addend of this link
   * v is the current value of the property this link resides on.
   * c is the current value of the control property that drives this link
   * P is a parametric curve defined by the KeyValues array.
   */
  /**
   * This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
   */
  readonly ERCDeltaAdd: number;
  /**
   * This type of ERC implements the formula f(v) = (c / v) + a where:
   */
  readonly ERCDivideInto: number;
  /**
   * This type of ERC implements the formula f(v) = (v / c) + a where:
   */
  readonly ERCDivideBy: number;
  /**
   * This type of implements the formula f(v) = (c * v) + a where:
   */
  readonly ERCMultiply: number;
  /**
   * This type of ERC implements the formula f(v) = v - c + a where:
   */
  readonly ERCSubtract: number;
  /**
   * This type of ERC implements the formula f(v) = v + c + a where:
   */
  readonly ERCAdd: number;
  /**
   * This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
   */
  readonly ERCKeyed: number;
}
interface Error
{
    /**
     * The name of the script file the error occurred in, if available.
     */
    fileName: string
    /**
     * The line number that the error occurred on.
     */
    lineNumber: string
    /**
     * An array of stack trace objects. Each object in the array has the following properties:
     * - functionName - The name of the function, if available.
     * - filename - The name of the file, if available.
     * - lineNumber - The line number, if available.
     */
    stack: Array<{
        functionName: string,
        filename: string,
        lineNumber: number
    }>
    /**
     * @returns An array of strings that contain a human-readable backtrace for the error.
     */
    backtrace (): Array<string>;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/error_dz
 * DAZScript error code type.
 * @remarks - 0x00000000 = DZ_NO_ERROR
 * - 0x00000050 = DZ_ALREADY_EXISTS_ERROR
 * - 0x00000051 = DZ_DOES_NOT_EXIST_ERROR
 * - 0x00000052 = DZ_NON_UNIQUE_NAME_ERROR
 * - 0x00000053 = DZ_ILLEGAL_HIERARCHY_ERROR
 * - 0x00000060 = DZ_ILLEGAL_ARGUMENT_ERROR
 * - 0x00000061 = DZ_ILLEGAL_OPERATION_ERROR
 * - 0x00000062 = DZ_OPERATION_FAILED_ERROR
 * - 0x00000063 = DZ_NO_MATCH_ERROR
 * - 0x00000064 = DZ_USER_CANCELLED_OPERATION
 * - 0x00000065 = DZ_UNHANDLED_EXCEPTION_ERROR
 * - 0x00000070 = DZ_TYPE_MISMATCH_ERROR
 * - 0x00000080 = DZ_SCRIPT_PARSE_ERROR
 * - 0x00000090 = DZ_MEMORY_ALLOCATION_ERROR
 * - 0x00000100 = DZ_PROFILE_NOT_SUPPORTED_ERROR
 * - 0x00000101 = DZ_ALREADY_BOUND_ERROR
 * - 0x00000102 = DZ_NOT_BOUND_ERROR
 * - 0x00000200 = DZ_UNABLE_TO_OPEN_FILE_ERROR
 * - 0x00000201 = DZ_SECTION_NOT_OPEN_ERROR
 * - 0x00000202 = DZ_SECTION_LENGTH_EXCEEDED_ERROR
 * - 0x00000203 = DZ_FORMAT_NOT_SUPPORTED_ERROR
 * - 0x00000204 = DZ_FILE_FORMAT_ERROR
 * Note:
 * You can use Global.getErrorMessage() to convert an error code into a user-readable string.
 */
interface DzError
{

  /**
   * @returns The value of the DzError as a Number.
   */
  valueOf (): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exporter_dz
 * Base class for all scene file exporters.
 * @remarks TODO: Add detailed description.
 */
interface DzExporter extends DzFileIO
{

  /**
   * @returns A description of the exporter that can be placed in a file type selection combobox (e.g. “Acclaim Skeleton”)
   */
  getDescription (): string;

  /**
   * @returns The extension that this exporter will force filenames to (excluding the preceeding '.').
   */
  getExtension (): string;

  /**
   * @returns true if this exporter writes to a 'real' file, otherwise false.
   */
  isFileExporter (): boolean;

  /**
   * Exports to a file.
   * @returns DZ_NO_ERROR on success, or an error code if the export failed.
   * @param filename - Name of the file to export to.
   */
  writeFile (filename: string): DzError;

  /**
   * Exports to a file.
   * @returns DZ_NO_ERROR on success, or an error code if the export failed.
   * @param filename - The full path of the file to export to.
   * @param options - The options to use while exporting the file.
   */
  writeFile (filename: string, options: DzFileIOSettings): DzError;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exportmgr_dz
 * Manager of all scene file exporter classes.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getExportMgr().
 * @seealso Exporter Settings
 */
interface DzExportMgr extends QObject
{

  /**
   * Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
   * @returns true if an exporter was found that can write the given file.
   * @param filename - The name of the file to try to find an exporter for.
   */
  canExport (filename: string): boolean;

  /**
   * Export the scene contents to a file.
   * @returns DZ_NO_ERROR if the file export was successful.
   * @param fileName - 
   * @param exporterIndex - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
   * @param options - The name of the file to export to.
   */
  exportFile (fileName: string, exporterIndex: number, options: DzFileIOSettings): DzError;

  /**
   * Export the scene contents to a file.
   * @returns DZ_NO_ERROR if the file export was successful.
   * @param fileName - 
   * @param exporterIndex - The name of the file to export to.
   */
  exportFile (fileName: string, exporterIndex: number): DzError;

  /**
   * Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
   * @returns A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
   * @param filename - The name of the file to try to find an exporter for.
   */
  findExporter (filename: string): DzExporter;

  /**
   * Uses the class name of each of the exporters and attempts to find an exporter with the given class name.
   * @returns A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
   * @param className - The name of the exporter class to find.
   */
  findExporterByClassName (className: string): DzExporter;

  /**
   * Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
   * @returns The index of a matching exporter, or -1 if none was found.
   * @param filename - The name of the file to try to find an exporter for.
   */
  findExporterIndex (filename: string): number;

  /**
   * @returns A new instance of the i'th exporter in the list. The caller takes ownership of this pointer and is responsible for deleting it when finished.
   * @param i - The index of the exporter to get an instance of.
   */
  getExporter (i: number): DzExporter;

  /**
   * @returns The current default directory that files are exported to.
   */
  getExportPath (): string;

  /**
   * @returns The number of exporters currently supported.
   */
  getNumExporters (): number;

  /**
   * Populates the given filter with all the types recognized by the export manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   */
  makeExportFileFilter (filter: DzFileFilter, defaultFilter?: string): void;

  /**
   * Sets the default directory that files are exported to.
   * @param path - The new default path for exporting files.
   */
  setExportPath (path: string): void;

  fileExported: Signal<{
    /**
     * Emitted when a file export operation is finished
     * TODO: Add description.
     */
  (): void;
  }>;
  fileExportStarting: Signal<{
    /**
     * Emitted when a file export operation is started
     * TODO: Add description.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/facet_dz
 * Represents a polygonal face within a polygon mesh.
 * @remarks A 3 or 4 sided polygonal face within a polygon mesh.
 * @seealso facetmesh_dz
 */
interface DzFacet extends Object
{

  /**
   * The index of this face in the cage mesh
   */
  cageIndex: number

  /**
   * The index of the first edge, otherwise -1
   */
  edgeIdx1: number

  /**
   * The index of the second edge, otherwise -1
   */
  edgeIdx2: number

  /**
   * The index of the third edge, otherwise -1
   */
  edgeIdx3: number

  /**
   * The index of the fourth edge normal (if any), otherwise -1
   */
  edgeIdx4: number

  /**
   * The index of the face group this face belongs to
   */
  faceGroupIndex: number

  /**
   * The index of the material group this face belongs to
   */
  materialIndex: number

  /**
   * The index of the first vertex normal
   */
  normIdx1: number

  /**
   * The index of the second vertex normal
   */
  normIdx2: number

  /**
   * The index of the third vertex normal
   */
  normIdx3: number

  /**
   * The index of the fourth vertex normal (if any), otherwise -1
   */
  normIdx4: number

  /**
   * The index of the first texture vertex
   */
  uvwIdx1: number

  /**
   * The index of the second texture vertex
   */
  uvwIdx2: number

  /**
   * The index of the third texture vertex
   */
  uvwIdx3: number

  /**
   * The index of the fourth texture vertex (if any), otherwise -1
   */
  uvwIdx4: number

  /**
   * The index of the first vertex
   */
  vertIdx1: number

  /**
   * The index of the second vertex
   */
  vertIdx2: number

  /**
   * The index of the third vertex
   */
  vertIdx3: number

  /**
   * The index of the fourth vertex (if any), otherwise -1
   */
  vertIdx4: number

  /**
   * Set the facet to a default state.
   */
  clear (): void;

  /**
   * TODO: Add description.
   */
  clearTriFanCount (): void;

  /**
   * TODO: Add description.
   */
  clearTriFanRoot (): void;

  /**
   * TODO: Add description.
   */
  getTriFanCount (): number;

  /**
   * TODO: Add description.
   */
  getTriFanEdgeCount (): number;

  /**
   * TODO: Add description.
   */
  getTriFanMaxEdgeIdx (): number;

  /**
   * TODO: Add description.
   */
  getTriFanOffset (): number;

  /**
   * TODO: Add description.
   */
  getTriFanRoot (): number;

  /**
   * return true if this is a 4 sided polygon, otherwise false
   */
  isQuad (): boolean;

  /**
   * return true if this is a 3 sided polygon, otherwise false
   */
  isTri (): boolean;

  /**
   * TODO: Add description.
   */
  isTriFan (): boolean;

  /**
   * TODO: Add description.
   */
  isTriFanChild (): boolean;

  /**
   * TODO: Add description.
   */
  isTriFanRoot (): boolean;

  /**
   * TODO: Add description.
   * @param count - 
   */
  setTriFanCount (count: number): void;

  /**
   * TODO: Add description.
   * @param rootIdx - 
   */
  setTriFanRoot (rootIdx: number): void;

}

declare var DzFacet:
{
  prototype: DzFacet;

  /**
   * Default Constructor.
   */
  new (): DzFacet;

  /**
   * TODO: Add description.
   * @param facet - 
   */
  new (facet: DzFacet): DzFacet;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbxexporter_dz
 * Class for exporting to the Autodesk FBX (*.fbx) format.
 * @seealso DzExportMgr::findExporterByClassName()
 * DzExportMgr::findExporter()
 * Silent FBX Export
 */
interface DzFbxExporter extends DzExporter
{

}

declare var DzFbxExporter:
{
  prototype: DzFbxExporter;

  /**
   * Default Constructor.
   */
  new (): DzFbxExporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbximporter_dz
 * Class for importing files in the Autodesk FBX (*.fbx) format.
 * @seealso DzImportMgr::findImporterByClassName()
 * DzImportMgr::findImporter()
 * Silent FBX Import
 */
interface DzFbxImporter extends DzImporter
{

}

declare var DzFbxImporter:
{
  prototype: DzFbxImporter;

  /**
   * Default Constructor.
   */
  new (): DzFbxImporter;
}

/**
 * @see file://../sdk/dzfigure.h
 */
interface figure_dz extends DzSkeleton
{

  /**
   */
  getSkinBinding (): DzSkinBinding;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/file_dz
 * DAZ Script file I/O class.
 * @remarks Provides access for reading and writing files.
 */
interface DzFile extends DzFileInfo
{

  /**
   * TODO: Add description.
   */
  /**
   * No error occurred.
   */
  readonly NoError: number;

  /**
   * An error occurred when reading from the file.
   */
  readonly ReadError: number;

  /**
   * An error occurred when writing to the file.
   */
  readonly WriteError: number;

  /**
   * A fatal error occurred.
   */
  readonly FatalError: number;

  /**
   * TODO: Add description.
   */
  readonly ResourceError: number;

  /**
   * The file could not be opened.
   */
  readonly OpenError: number;

  /**
   * The operation was aborted.
   */
  readonly AbortError: number;

  /**
   * A timeout occurred.
   */
  readonly TimeOutError: number;

  /**
   * An unspecified error occurred.
   */
  readonly UnspecifiedError: number;

  /**
   * The file could not be removed.
   */
  readonly RemoveError: number;

  /**
   * The file could not be renamed.
   */
  readonly RenameError: number;

  /**
   * The position in the file could not be changed.
   */
  readonly PositionError: number;

  /**
   * The file could not be resized.
   */
  readonly ResizeError: number;

  /**
   * The file could not be accessed.
   */
  readonly PermissionsError: number;

  /**
   * The file could not be copied.
   */
  readonly CopyError: number;

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   * '. When writing, the end-of-line terminators are translated to the local encoding.
   */
  /**
   * The file is not open.
   */
  readonly NotOpen: number;

  /**
   * The file is open the for reading.
   */
  readonly ReadOnly: number;

  /**
   * The file is open the for writing.
   */
  readonly WriteOnly: number;

  /**
   * The file is open the for reading and writing.
   */
  readonly ReadWrite: number;

  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;

  /**
   * If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
   */
  readonly Truncate: number;

  /**
   * When reading, the end-of-line terminators are translated to '
   */
  readonly Text: number;

  /**
   * Alias for Text.
   */
  readonly Translate: number;

  /**
   * Closes the file, sets its openMode() to NotOpen, and resets the error string.
   */
  close (): void;

  /**
   * @returns true if copying the file is successful, otherwise false.
   * @attention If newName already exists it will not be overwritten.
   * @param newName - The path to copy this file to.
   */
  copy (newName: string): boolean;

  /**
   * @returns true if the current position is at the end of the file, otherwise false.
   */
  eof (): boolean;

  /**
   * @returns The file error status.
   * @attention For example, if open() returns false, or a read/write operation returns -1, this function can be called to find out the reason why the operation failed.
   * @since 4.9.3.35
   */
  error (): number;

  /**
   * @returns A human-readable description of the last error that occurred.
   * @since 4.9.3.35
   */
  errorString (): string;

  /**
   * @returns true if the file is open, otherwise false.
   * @since 4.9.3.35
   */
  isOpen (): boolean;

  /**
   * @returns true if the Text OpenModeFlag is enabled, otherwise false.
   * @since 4.9.3.35
   */
  isTextModeEnabled (): boolean;

  /**
   * Creates a link named linkName that points to the file currently specified by fileName(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Mac OS X).
   * @returns true if successful, otherwise false.
   * @attention This will not overwrite an already existing entity in the file system; in this case, link() will return false and set error() to return RenameError.
   * @since 4.9.3.35
   * Renames the file currently specified by fileName() to newName.
   * @returns true if successful, otherwise false (for example, if a file with the name newName already exists).
   * @attention The file is closed before it is renamed.
   * @since 4.9.3.35
   * @param linkName - 
   */
  link (linkName: string): boolean;

  /**
   * Opens the file and sets its openMode() to mode.
   * @returns true if the file was opened successfully, otherwise false.
   * @param mode - 
   */
  open (mode: number): boolean;

  /**
   * @returns The mode in which the device has been opened.
   * @since 4.9.3.35
   */
  openMode (): number;

  /**
   * Peeks at most maxSize bytes from the file, without side effects (i.e., if you read after you peek, you will get the same data).
   * @returns The data peeked.
   * @since 4.9.3.35
   * @param maxSize - 
   */
  peek (maxSize: number): ByteArray;

  /**
   * @returns The position that data is written to or read from.
   * @since 4.9.3.35
   */
  pos (): number;

  /**
   * Read the entire file.
   * @returns The file contents as a string.
   */
  read (): string;

  /**
   * Reads at most maxSize bytes from the file.
   * @returns The data read.
   * @since 4.9.3.35
   * @param maxSize - 
   */
  read (maxSize: number): ByteArray;

  /**
   * Read the entire file.
   * @returns All bytes of the file.
   * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
   */
  readAll (): ByteArray;

  /**
   * Read one character from the file.
   * @returns The character read from the file.
   */
  readByte (): number;

  /**
   * Reads a line from the file, but no more than maxSize characters.
   * @returns The bytes read.
   * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
   * @param [maxSize=0] - The maximum nuber of characters to read. Since 4.9.3.35.
   */
  readByteLine (maxSize?: number): ByteArray;

  /**
   * Read a line of text from the file.
   * @returns The file line as a string.
   */
  readLine (): string;

  /**
   * Read the entire file and split it into lines of text.
   * @returns All lines from the file.
   */
  readLines (): Array<unknown>;

  /**
   * TODO: Add description.
   * @param newName - 
   */
  rename (newName: string): boolean;

  /**
   * Seeks to the start of input.
   * @returns true on success, otherwise false (for example, if the file is not open).
   * @since 4.9.3.35
   */
  reset (): boolean;

  /**
   * Sets the current position to pos.
   * @returns true on success, otherwise false.
   * @since 4.9.3.35
   * @param pos - 
   */
  seek (pos: number): boolean;

  /**
   * Sets the name of the file to name. The name can have no path, a relative path, or an absolute path.
   * @attention Do not call this function if the file has already been opened. If the file name has no path or a relative path, the path used will be the application's current directory path at the time of the open() call.
   * @since 4.9.3.35
   * @param name - 
   */
  setFileName (name: string): void;

  /**
   * Sets the permissions for the file to permissions.
   * @returns true if successful, otherwise false (for example, if the permissions cannot be modified).
   * @since 4.9.3.35
   * @param permissions - 
   */
  setPermissions (permissions: Permissions): boolean;

  /**
   * If enabled is true, sets the Text flag on the file, otherwise the Text flag is removed.
   * @since 4.9.3.35
   * @param enabled - 
   */
  setTextModeEnabled (enabled: boolean): void;

  /**
   * Write a string to the file.
   * @returns The number of bytes that were actually written, or -1 if an error occurred. (since 4.9.3.35)
   * @param data - The string to write to the file.
   * @param [maxSize=-1] - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
   */
  write (data: string, maxSize?: number): number;

  /**
   * Writes the content of byteArray to the file.
   * @returns The number of bytes that were actually written, or -1 if an error occurred.
   * @since 4.9.3.35
   * @param byteArray - 
   */
  write (byteArray: ByteArray): number;

  /**
   * Write a single byte (character) to the file.
   * @param byte - The character to write to the file.
   */
  writeByte (byte: number): void;

  /**
   * Write a line to the file.
   * @param data - The string to write to the file - a new line character will be written immediately following the string contents.
   */
  writeLine (data: string): void;

}

declare var DzFile:
{
  prototype: DzFile;

  /**
   * Creates a file object with the given file name.
   * @param file - The path of the file.
   */
  new (file: string): DzFile;

  /**
   * TODO: Add description.
   */
  /**
   * No error occurred.
   */
  readonly NoError: number;
  /**
   * An error occurred when reading from the file.
   */
  readonly ReadError: number;
  /**
   * An error occurred when writing to the file.
   */
  readonly WriteError: number;
  /**
   * A fatal error occurred.
   */
  readonly FatalError: number;
  /**
   * TODO: Add description.
   */
  readonly ResourceError: number;
  /**
   * The file could not be opened.
   */
  readonly OpenError: number;
  /**
   * The operation was aborted.
   */
  readonly AbortError: number;
  /**
   * A timeout occurred.
   */
  readonly TimeOutError: number;
  /**
   * An unspecified error occurred.
   */
  readonly UnspecifiedError: number;
  /**
   * The file could not be removed.
   */
  readonly RemoveError: number;
  /**
   * The file could not be renamed.
   */
  readonly RenameError: number;
  /**
   * The position in the file could not be changed.
   */
  readonly PositionError: number;
  /**
   * The file could not be resized.
   */
  readonly ResizeError: number;
  /**
   * The file could not be accessed.
   */
  readonly PermissionsError: number;
  /**
   * The file could not be copied.
   */
  readonly CopyError: number;

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   * '. When writing, the end-of-line terminators are translated to the local encoding.
   */
  /**
   * The file is not open.
   */
  readonly NotOpen: number;
  /**
   * The file is open the for reading.
   */
  readonly ReadOnly: number;
  /**
   * The file is open the for writing.
   */
  readonly WriteOnly: number;
  /**
   * The file is open the for reading and writing.
   */
  readonly ReadWrite: number;
  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;
  /**
   * If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
   */
  readonly Truncate: number;
  /**
   * When reading, the end-of-line terminators are translated to '
   */
  readonly Text: number;
  /**
   * Alias for Text.
   */
  readonly Translate: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filedialog_dz
 * DAZScript wrapper for QFileDialog.
 * @remarks The DzFileDialog class is available in DAZScript via Global::FileDialog.
 * It provides functions that display OS native file dialogs to the user.
 */
interface DzFileDialog extends QObject
{

  /**
   * A convenience file dialog that automatically creates a filter list for all audio formats the application can import and displays a file open dialog.
   * @returns The path of the file selected by the user, undefined if the user cancels.
   * @seealso DzMainWindow::doAudioClipOpenDialog()
   * @param [startWith=“”] - The starting directory; can include a default file name.
   * @param [parent=undefined] - The parent widget for the file dialog.
   */
  doAudioClipOpenDialog (startWith?: string, parent?: DzWidget): string;

  /**
   * Display a dialog for the user to choose a directory.
   * @returns The path of the directory selected by the user, undefined if the user cancels.
   * @example
   * Have the user select a directory.
   * var path = FileDialog.doDirectoryDialog( qsTr("Select a Directory") );
   * @seealso DzMainWindow::doDirectoryDialog()
   * @param [title=“”] - The title of the dialog box.
   * @param [desc=“”] - Unused; retained for backward compatibility.
   * @param [parent=undefined] - The parent widget for the directory dialog.
   */
  doDirectoryDialog (title?: string, desc?: string, parent?: DzWidget): string;

  /**
   * Display a dialog for the user to choose a directory.
   * @returns The path of the directory selected by the user, undefined if the user cancels.
   * @example
   * Have the user select a directory.
   * var path = FileDialog.doDirectoryDialog( qsTr("Select a Directory"), "", App.getDocumentsPath() );
   * @seealso DzMainWindow::doDirectoryDialog()
   * @param title - The title of the dialog box.
   * @param desc - Unused; retained for backward compatibility.
   * @param startWith - The directory that the dialog will start in.
   * @param [parent=undefined] - The parent widget for the directory dialog.
   */
  doDirectoryDialog (title: string, desc: string, startWith: string, parent?: DzWidget): string;

  /**
   * Display a dialog for the user to choose a file.
   * @returns The path of the file selected by the user, undefined if the user cancels.
   * @example
   * Get the name of an existing jpeg file.
   * var filename = FileDialog.doFileDialog( true, qsTr("Select an Image File"), App.getImageMgr().getImportPath(), "JPEG Files (*.jpg)" );
   * @example
   * Get the name of an existing image file (w/ additional filters).
   * var filename = FileDialog.doFileDialog( true, qsTr("Select an Image File"), "",
   * 					"Image Files (*.tif *.tiff *.jpg);TIFF Files (*.tif *.tiff);JPEG Files (*.jpg)" );
   * @example
   * Get the name of a text file to save to.
   * var filename = FileDialog.doFileDialog( false, qsTr("Save As"), "", "Text Files (*.txt)" );
   * @seealso DzMainWindow::doFileDialog()
   * @param open - If true, displays an open file dialog, otherwise displays a save file dialog.
   * @param [title=“”] - The title of the dialog box.
   * @param [startWith=“”] - The starting directory (can include a default file name).
   * @param [filter=“”] - The file name filter; e.g., “TIFF files (*.tif *.tiff); JPEG files (*.jpg)”.
   * @param [selectedFilter=0] - If not null, its value is set to the index of the filter that corresponds to the selected file.
   * @param [parent=undefined] - The parent widget for the file dialog.
   */
  doFileDialog (open: boolean, title?: string, startWith?: string, filter?: string, selectedFilter?: number, parent?: DzWidget): string;

  /**
   * A convenience file dialog that automatically creates a filter list for all image formats the application can import/export and displays a file open/save dialog.
   * @returns The path of the file selected by the user, undefined if the user cancels.
   * @seealso DzMainWindow::doImageDialog()
   * @param open - If true, displays an open image dialog, otherwise displays a save image dialog.
   * @param [startWith=“”] - The starting directory; can include a default file name.
   * @param [parent=undefined] - The parent widget for the file dialog.
   */
  doImageDialog (open: boolean, startWith?: string, parent?: DzWidget): string;

  /**
   * A convenience file dialog that automatically creates a filter list for all video formats the application can export and displays a file save dialog.
   * @returns The path of the file selected by the user, undefined if the user cancels.
   * @seealso DzMainWindow::doVideoClipSaveDialog()
   * @param [startWith=“”] - The starting directory; can include a default file name.
   * @param [parent=undefined] - The parent widget for the file dialog.
   */
  doVideoClipSaveDialog (startWith?: string, parent?: DzWidget): string;

  /**
   * Shows an open file dialog to the user that allows selection of multiple files.
   * @returns A list of paths (if any) for the files selected by the user.
   * @example
   * Have the user select one or more image files.
   * var files = FileDialog.getOpenFileNames( "", "Image files (*.tif *.jpg *.png)", qsTr("Select Image Files") );
   * @param [dir=“”] - The directory that the dialog will start with.
   * @param [filter=“”] - The file name filter; e.g., “TIFF files (*.tif *.tiff); JPEG files (*.jpg)”.
   * @param [title=“”] - The title of the dialog.
   * @param [parent=undefined] - The parent widget of the dialog.
   */
  getOpenFileNames (dir?: string, filter?: string, title?: string, parent?: DzWidget): Array<unknown>;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filefilter_dz
 * Encapsulates one or more file filters to be chosen from in a file dialogs.
 * @remarks For each group of files that you want to make available to the user, create a new filter with the newFilter() call, then add one or more file extensions to be accepted by the filter.
 */
interface DzFileFilter extends QObject
{

  /**
   * Adds a file extension to the current filter.
   * @param extension - A file extension that this filter will open/save e.g. “duf”
   */
  addExtension (extension: string): void;

  /**
   * Adds file extensions to the current filter.
   * @param extensions - A list of file extensions that this filter will open/save
   */
  addExtensions (extensions: Array<unknown>): void;

  /**
   * @returns The default filter index, returns -1 if no default is set.
   */
  getDefaultFilter (): number;

  /**
   * @returns The extension of the filter at the given index.
   * @param filterIdx - The index of the filter to return an extension for.
   * @param extensionIdx - The index of the extension to return.
   */
  getExtension (filterIdx: number, extensionIdx: number): string;

  /**
   * @returns The description of the filter at the given index.
   * @param filterIdx - The index of the filter to return a description for.
   */
  getFilterDescription (filterIdx: number): string;

  /**
   * @returns The number of extensions in the filter at the given index.
   * @param filterIdx - The index of the filter to get the number of extensions for.
   */
  getNumExtensions (filterIdx: number): number;

  /**
   * @returns The number of filters.
   */
  getNumFilters (): number;

  /**
   * Starts a new filter with the given description.
   * @param description - The description of files this filter will open/save e.g. “DAZ Studio files”
   */
  newFilter (description: string): void;

  /**
   * Sets the default filter index - by default this is 0.
   * @param filterIdx - The index of the filter to become the default - if the index is invalid the default is not changed.
   */
  setDefaultFilter (filterIdx: number): void;

}

declare var DzFileFilter:
{
  prototype: DzFileFilter;

  /**
   * Default Constructor.
   */
  new (): DzFileFilter;

  /**
   * Creates a new file filter and adds a filter with the given description and extensions.
   * @param description - The description of the filter.
   * @param extensions - The list of extensions for the filter.
   */
  new (description: string, extensions: Array<unknown>): DzFileFilter;

  /**
   * Creates a new file filter and adds a filter with the given description and extension.
   * @param description - The description of the filter.
   * @param extension - The extension for the filter.
   */
  new (description: string, extension: string): DzFileFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileinfo_dz
 * DAZ Script file information class.
 * @remarks Provides access to getting information about files. It also serves as the base class for the other DAZ Script File I/O types.
 */
interface DzFileInfo extends QObject
{

  /**
   * Enumerated values used by permission() and permissions() to set/report the permissions and/or ownership of a file. The values may be OR-ed together to set/test multiple permissions and ownership values.
   */
  /**
   * The file is readable by the owner of the file.
   */
  readonly ReadOwner: number;

  /**
   * The file is writable by the owner of the file.
   */
  readonly WriteOwner: number;

  /**
   * The file is executable by the owner of the file.
   */
  readonly ExeOwner: number;

  /**
   * The file is readable by the user.
   */
  readonly ReadUser: number;

  /**
   * The file is writable by the user.
   */
  readonly WriteUser: number;

  /**
   * The file is executable by the user.
   */
  readonly ExeUser: number;

  /**
   * The file is readable by the group.
   */
  readonly ReadGroup: number;

  /**
   * The file is writable by the group.
   */
  readonly WriteGroup: number;

  /**
   * The file is executable by the group.
   */
  readonly ExeGroup: number;

  /**
   * The file is readable by anyone.
   */
  readonly ReadOther: number;

  /**
   * The file is writable by anyone.
   */
  readonly WriteOther: number;

  /**
   * The file is executable by anyone.
   */
  readonly ExeOther: number;

  /**
   * Deprecated
   * Use absoluteFilePath() instead.
   * @returns The absolute path of the file, including the file name.
   * @since 4.9.3.29
   */
  absFileName (): string;

  /**
   * @returns The file's absolute path as a DzDir object.
   * @since 4.9.3.35
   */
  absoluteDir (): DzDir;

  /**
   * TODO: Add description.
   */
  absoluteFilePath (): string;

  /**
   * @returns The absolute path of the file, excluding the file name.
   * @since 4.9.3.29
   */
  absolutePath (): string;

  /**
   * Deprecated
   * Use completeBaseName() instead.
   */
  baseName (): string;

  /**
   * @returns On Mac OS X, the proper localized name for a bundle if the path isBundle(). On all other platforms an empty string.
   * @since 4.9.3.29
   */
  bundleName (): string;

  /**
   * @returns true if caching is enabled, otherwise false.
   * @since 4.9.3.29
   */
  caching (): boolean;

  /**
   * @returns The canonical path including the file name, i.e. an absolute path without symbolic links or redundant “.” or “..” elements. If the file does not exist, returns an empty string.
   * @since 4.9.3.29
   */
  canonicalFilePath (): string;

  /**
   * @returns The canonical path excluding the file name, i.e. an absolute path without symbolic links or redundant “.” or “..” elements. If the file does not exist, returns an empty string.
   * @since 4.9.3.29
   */
  canonicalPath (): string;

  /**
   * @returns The file name excluding the last '.' and extension.
   * @since 4.9.3.29
   */
  completeBaseName (): string;

  /**
   * @returns All characters in the file name after (but not including) the first “.”.
   * @since 4.9.3.29
   */
  completeSuffix (): string;

  /**
   * @returns The date and time the file was created.
   */
  created (): Date;

  /**
   * @returns The path of the object's parent directory as a DzDir object.
   * @since 4.9.3.35
   */
  dir (): DzDir;

  /**
   * @returns true if the file exists on the disk.
   */
  exists (): boolean;

  /**
   * Deprecated
   * Use suffix() instead.
   */
  extension (): string;

  /**
   * @returns The name of the file, excluding the path.
   */
  fileName (): string;

  /**
   * @returns The file name, including the path (which may be absolute or relative).
   * @since 4.9.3.29
   */
  filePath (): string;

  /**
   * @returns true if the file path is absolute, otherwise false.
   * @since 4.9.3.29
   */
  isAbsolute (): boolean;

  /**
   * @returns true if this object points to a bundle or to a symbolic link to a bundle on Mac OS X, otherwise false.
   * @since 4.9.3.29
   */
  isBundle (): boolean;

  /**
   * @returns true if this object points to a directory or to a symbolic link to a directory, otherwise false.
   * @since 4.9.3.29
   */
  isDir (): boolean;

  /**
   * @returns true if this object points to file that is executable, otherwise false.
   * @since 4.9.3.29
   */
  isExecutable (): boolean;

  /**
   * @returns true if this object points to a file or to a symbolic link to a file, otherwise false (e.g., a directory).
   * @since 4.9.3.29
   */
  isFile (): boolean;

  /**
   * @returns true if the file is 'hidden', otherwise false.
   */
  isHidden (): boolean;

  /**
   * @returns true if the file is readable by the user, otherwise false.
   */
  isReadable (): boolean;

  /**
   * @returns true if the file path is relative, otherwise false.
   * @since 4.9.3.29
   */
  isRelative (): boolean;

  /**
   * @returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory, otherwise false.
   * @since 4.9.3.29
   */
  isRoot (): boolean;

  /**
   * @returns true if this object points to a symbolic link (shortcut on Windows), otherwise false.
   * @since 4.9.3.29
   */
  isSymLink (): boolean;

  /**
   * @returns true if the file is writable by the user, otherwise false.
   */
  isWritable (): boolean;

  /**
   * @returns The date and time the file was last modified.
   */
  lastModified (): Date;

  /**
   * @returns The date and time the file was last accessed.
   */
  lastRead (): Date;

  /**
   * Converts the file's path to an absolute path if it is not already in that form.
   * @returns true if the path was converted, otherwise false.
   * @since 4.9.3.29
   */
  makeAbsolute (): boolean;

  /**
   * @returns The absolute path of the file.
   * @seealso absolutePath()
   */
  path (): string;

  /**
   * TODO: Add description.
   * @param permissions - 
   */
  permission (permissions: Permissions): boolean;

  /**
   * @returns The complete OR-ed together combination of Permissions for the file.
   * @since 4.9.3.29
   */
  permissions (): Permissions;

  /**
   * Refreshes information about the file, i.e. reads in information from the file system the next time a cached property is fetched.
   * @since 4.9.3.29
   */
  refresh (): void;

  /**
   * Delete the file from the disk.
   * @returns true if successful, otherwise false.
   */
  remove (): boolean;

  /**
   * Sets whether or not caching of file information caching is enabled. When caching is enabled, file information is read from the file system the first time it's needed, but generally not later.
   * @since 4.9.3.29
   * @param enable - 
   */
  setCaching (enable: boolean): void;

  /**
   * Sets the file to provide information about to file in dir.
   * @since 4.9.3.29
   * @param dir - 
   * @param file - 
   */
  setFile (dir: DzDir, file: string): void;

  /**
   * Sets the file to provide information about to file.
   * @since 4.9.3.29
   * @param file - 
   */
  setFile (file: DzFile): void;

  /**
   * Sets the file to provide information about to file.
   * @since 4.9.3.29
   * @param file - 
   */
  setFile (file: string): void;

  /**
   * @returns The file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.
   */
  size (): number;

  /**
   * @returns The file size in bytes, formatted in an easy-to-read manner.
   * @seealso DzApp::byteSizeToString()
   */
  sizeStr (): string;

  /**
   * @returns All characters in the file after, but not including, the last '.'.
   * @since 4.9.3.29
   */
  suffix (): string;

  /**
   * @returns The absolute path that the file or directory a symbolic link (shortcut on Windows) points to, or a an empty string if the object is not a symbolic link.
   * @since 4.9.3.29
   */
  symLinkTarget (): string;

}

declare var DzFileInfo:
{
  prototype: DzFileInfo;

  /**
   * Creates a file info object to retrieve information about the given file.
   * @param file - The path of the file.
   */
  new (file: string): DzFileInfo;

  /**
   * Enumerated values used by permission() and permissions() to set/report the permissions and/or ownership of a file. The values may be OR-ed together to set/test multiple permissions and ownership values.
   */
  /**
   * The file is readable by the owner of the file.
   */
  readonly ReadOwner: number;
  /**
   * The file is writable by the owner of the file.
   */
  readonly WriteOwner: number;
  /**
   * The file is executable by the owner of the file.
   */
  readonly ExeOwner: number;
  /**
   * The file is readable by the user.
   */
  readonly ReadUser: number;
  /**
   * The file is writable by the user.
   */
  readonly WriteUser: number;
  /**
   * The file is executable by the user.
   */
  readonly ExeUser: number;
  /**
   * The file is readable by the group.
   */
  readonly ReadGroup: number;
  /**
   * The file is writable by the group.
   */
  readonly WriteGroup: number;
  /**
   * The file is executable by the group.
   */
  readonly ExeGroup: number;
  /**
   * The file is readable by anyone.
   */
  readonly ReadOther: number;
  /**
   * The file is writable by anyone.
   */
  readonly WriteOther: number;
  /**
   * The file is executable by anyone.
   */
  readonly ExeOther: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileio_dz
 * Base class for all file importers/exporters.
 * @remarks This class provides functionality common to all file importers and exporters such as the ability to edit options before file import/export. Also, this class provides functions for importers/exporters to report errors to the user/log file, and provides static convenience functions for dissecting file paths into their parts.
 */
interface DzFileIO extends DzBase
{

  /**
   * Holds whether or not the options for the importer/exporter has been shown.
   * @since 4.9.3.23
   */
  optionsShown: boolean

  /**
   * TODO: Add description.
   * @param options - 
   */
  getDefaultOptions (options: DzFileIOSettings): void;

  /**
   * Gets the options for an import operation.
   * @returns if options has been updated, otherwise false.
   * @param options - The settings object that the selected options will be added to.
   * @param useInterface - If true and the importer/exporter implements the getOptionsFrame() virtual member function, the options interface for the importer/exporter will be displayed to the user. If the default (or last-used) options will be added to or updated in options.
   * @param filename - 
   */
  getOptions (options: DzFileIOSettings, useInterface: boolean, filename: string): boolean;

  /**
   * @returns true if this importer/exporter should display an options dialog by default, otherwise false.
   */
  showOptions (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiopresetmgr_dz
 * Class for managing File I/O preset settings.
 * @remarks This class manages presets in the form of DzFileIOSettings objects for various importers, exporters, and other forms of File I/O.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request it from DzApp via DzApp::getFileIOPresetMgr().
 * File I/O presets are defined by a unique name. They have two types of settings: Specific Settings and Common Settings.
 * Specific Settings
 * Specific settings are tied to a class name. This class name is typically, but not always, the name of an importer or exporter, such as “DzObjImporter” or “DzObjExporter.” The key values for specific settings will vary based on the class.
 * Common Settings
 * Common settings for a preset are common to all class names. These include settings that define scale values and axis settings. Common keys can be accessed via the following methods: * getLateralAxisKey()
 * getVerticalAxisKey()
 * getDepthAxisKey()
 * getInvertLateralAxisKey()
 * getInvertVerticalAxisKey()
 * getInvertDepthAxisKey()
 * getScaleKey()
 * The scale value used by the presets is for importers. If you are working with an exporter then the scale value needs to be converted to 1/scale. As an example, if the scale value for a preset is 2.54 then the scale value for an exporter would be 1/2.54 = 0.3937
 */
interface DzFileIOPresetMgr extends QObject
{

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getAllCurrentSettings (className: string, settings: DzFileIOSettings): boolean;

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getAllDefaults (className: string, settings: DzFileIOSettings): boolean;

  /**
   * TODO: Add description.
   * @param presetName - 
   * @param className - 
   * @param settings - 
   */
  getAllSettings (presetName: string, className: string, settings: DzFileIOSettings): boolean;

  /**
   * @returns the available classes (typically importers or exporters) of the given preset
   * @param presetName - The name of the preset to get available classes for.
   */
  getAvailableClasses (presetName: string): Array<unknown>;

  /**
   * @returns the available presets for the given class name
   * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as “DzObjImporter.” If className is empty, returns all presets
   */
  getAvailablePresets (className: string): Array<unknown>;

  /**
   * TODO: Add description.
   * @param settings - 
   */
  getCommonApplicationDefaults (settings: DzFileIOSettings): void;

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getCommonDefaults (className: string, settings: DzFileIOSettings): boolean;

  /**
   * Populates settings with the values for common to all presets named presetName
   * @returns true if successful, false if presetName does not represent a valid preset
   * @param presetName - The name of the preset to get common settings for
   * @param className - 
   * @param settings - The settings object to populate with preset values
   */
  getCommonSettings (presetName: string, className: string, settings: DzFileIOSettings): boolean;

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getCurrentCommonSettings (className: string, settings: DzFileIOSettings): boolean;

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getCurrentSpecificSettings (className: string, settings: DzFileIOSettings): boolean;

  /**
   * @returns The name of the custom preset
   */
  getCustomPresetLabel (): string;

  /**
   * @returns The key for the depth axis common setting
   */
  getDepthAxisKey (): string;

  /**
   * @returns The key for the invert depth axis common setting
   */
  getInvertDepthAxisKey (): string;

  /**
   * @returns The key for the invert lateral axis common setting
   */
  getInvertLateralAxisKey (): string;

  /**
   * @returns The key for the invert vertical axis common setting
   */
  getInvertVerticalAxisKey (): string;

  /**
   * @returns The key for the lateral axis common setting
   */
  getLateralAxisKey (): string;

  /**
   * @returns the id of the preset with the given name, or an -1 if the preset does not exist. Will also return -1 even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
   * @param presetName - 
   * @param [className=String] - The name of the desired preset
   */
  getPresetID (presetName: string, className?: string): number;

  /**
   * @returns the name of the preset with the given id, or an empty string if the preset does not exist. Will also return an empty string even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
   * @param id - The id of the desired preset
   * @param [className=String] - The optional class name for the given preset. If not passed in or empty then the method will not take into account whether the preset has settings for the given class name.
   */
  getPresetName (id: number, className?: string): string;

  /**
   * Note:
   * The scale value for all presets is the value to use as an importer. If this value is going to be used as an exporter it needs to be converted. See the class description for an explanation
   * @returns The key for the scale common setting
   */
  getScaleKey (): string;

  /**
   * TODO: Add description.
   * @param className - 
   * @param settings - 
   */
  getSpecificDefaults (className: string, settings: DzFileIOSettings): boolean;

  /**
   * TODO: Add description.
   * @param presetName - 
   * @param className - 
   * @param settings - 
   */
  getSpecificSettings (presetName: string, className: string, settings: DzFileIOSettings): boolean;

  /**
   * @returns the available system-defined presets for the given class name
   * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as “DzObjImporter.” If className is empty, returns all system presets
   */
  getSystemPresets (className: string): Array<unknown>;

  /**
   * @returns the available user-defined presets for the given class name
   * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as “DzObjImporter.” If className is empty, returns all user presets
   */
  getUserPresets (className: string): Array<unknown>;

  /**
   * @returns The key for the vertical axis common setting
   */
  getVerticalAxisKey (): string;

  /**
   * @returns true if the preset is a system preset, false if it is a user preset or does not exist
   * @param presetName - The name of the preset to check
   */
  isSystemPreset (presetName: string): boolean;

  /**
   * @returns true if the preset is a user preset, false if it is a system preset or does not exist
   * @param presetName - The name of the preset to check
   */
  isUserPreset (presetName: string): boolean;

  /**
   * @returns true if the given preset exists, false otherwise
   * @param id - The id of the preset to check
   * @param [className=String] - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
   */
  presetExists (id: number, className?: string): boolean;

  /**
   * @returns true if the given preset exists, false otherwise
   * @param presetName - The name of the preset to check
   * @param [className=String] - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
   */
  presetExists (presetName: string, className?: string): boolean;

  /**
   * Attempts to remove the preset with the given preset name and class name.
   * @returns true if successful, false if the preset could not be removed
   * @param presetName - 
   * @param className - 
   */
  removeUserPreset (presetName: string, className: string): boolean;

  /**
   * Attempts to save a user preset with the given preset name and class name
   * @returns true if the preset was saved, false otherwise
   * @param presetName - The name of the preset to save
   * @param className - The name of the class to save settings for presetName
   * @param keepCommonSettings - If a preset named presetName already exists, this settings determines what to do with common settings in the settings parameter. If true, the existing common settings will be kept and those in the settings will be ignored.
   * @param settings - If a preset presetName and className already exists, this setting determines what to do with the specific settings. If true, the specific settings will remain unchanged.
   */
  saveUserPreset (presetName: string, className: string, keepCommonSettings: boolean, settings: DzFileIOSettings): boolean;

  presetAdded: Signal<{
    /**
     * Emitted when a preset is added
     * @param presetName - The name of the preset that was added
     * @param className - The name of the class that was added
     */
  (presetName: string, className: string): void;
  }>;
  presetLoadFinished: Signal<{
    /**
     * Emitted when presets have been loaded from file and are ready to use
     */
  (): void;
  }>;
  presetRemoved: Signal<{
    /**
     * Emitted when a preset is removed
     * @param presetName - The name of the preset that was removed
     * @param className - The name of the class that was removed
     */
  (presetName: string, className: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiosettings_dz
 * Base class for all file I/O options. File I/O classes should use this to pass the options supported by the class.
 * @remarks TODO: Add detailed description.
 */
interface DzFileIOSettings extends DzSettings
{

}

declare var DzFileIOSettings:
{
  prototype: DzFileIOSettings;

  /**
   * Default Constructor - creates an empty set of options
   */
  new (): DzFileIOSettings;

  /**
   * Copy constructor.
   * @param settings - The settings object to copy data from.
   */
  new (settings: DzFileIOSettings): DzFileIOSettings;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileproperty_dz
 * A static (non-animatable) string property that holds a file path. Attempts to save and restore as relative path when possible.
 * @remarks TODO: Add detailed description.
 */
interface DzFileProperty extends DzStringProperty
{

  /**
   * The type of file dialog that will used when the user browses for the file.
   */
  /**
   * The user will be prompted with a 'Save As' type dialog when browsing for a file.
   */
  readonly FileSave: number;

  /**
   * The user will be prompted with an 'Open' type dialog when browsing for a file.
   */
  readonly FileOpen: number;

  /**
   * The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
   */
  readonly Dir: number;

  /**
   * @returns The absolute path of the file specified by the given path
   * @param path - The (relative) path of the file.
   */
  getAbsolutePath (path: string): string;

  /**
   * Gets the filter value.
   */
  getFilter (): string;

  /**
   * Gets the file type.
   */
  getType (): number;

  /**
   * Sets the value to use as a file extension filter.
   * @attention If this property is of the type SaveFile, and if the save file is not given an extension by the user, then the first extension listed will be added to the filename. The filter is not checked if setValue() is used.
   * @param filter - The filter to set. This should be in the form “FilterName (*.ext1 *.ext2 *.ext3)”.
   */
  setFilter (filter: string): void;

  /**
   * Sets the file type for the property.
   * @param type - The file type to set.
   */
  setType (type: number): void;

  filterChanged: Signal<{
    /**
     * Emitted when the filter for the property changes.
     */
  (): void;
  }>;
}

declare var DzFileProperty:
{
  prototype: DzFileProperty;

  /**
   * Default Constructor. Creates a non-user property.
   */
  new (): DzFileProperty;

  /**
   * @param name - The name of this property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, isUserProperty: boolean): DzFileProperty;

  /**
   * The type of file dialog that will used when the user browses for the file.
   */
  /**
   * The user will be prompted with a 'Save As' type dialog when browsing for a file.
   */
  readonly FileSave: number;
  /**
   * The user will be prompted with an 'Open' type dialog when browsing for a file.
   */
  readonly FileOpen: number;
  /**
   * The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
   */
  readonly Dir: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/flipmanip_dz
 * An image manipulator that flips an image layer horizontally and/or vertically.
 * @remarks TODO: Add detailed description.
 */
interface DzFlipManip extends DzImageManip
{

  /**
   * @returns true if the image will be flipped horizontally, false if the image is not flipped horizontally.
   */
  flipHorizontal (): boolean;

  /**
   * @returns true if the image will be flipped vertically, false if the image is not flipped vertically.
   */
  flipVertical (): boolean;

  /**
   * Sets whether or not the image is flipped horizontally.
   * @param onOff - If true, the image will be flipped horizontally, otherwise the image is not flipped horizontally.
   */
  setFlipHorizontal (onOff: boolean): void;

  /**
   * Sets whether or not the image is flipped vertically.
   * @param onOff - If true, the image will be flipped vertically, otherwise the image is not flipped vertically.
   */
  setFlipVertical (onOff: boolean): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float2property_dz
 * An animatable floating-point property with 2 values.
 * @remarks This class provides an animatable floating-point property with 2 values that is stored and can be accessed as a DzVec2.
 */
interface DzFloat2Property extends DzFloatProperty
{

  /**
   * Adjust the value of the property based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param val - The 'final' value desired for the property.
   */
  adjustFloat2Value (val: DzVec2): DzVec2;

  /**
   * Adjust the value of the property at the given time based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param tm - The scene time at which to adjust the value.
   * @param val - The 'final' value desired for the property.
   */
  adjustFloat2Value (tm: DzTime, val: DzVec2): DzVec2;

  /**
   * @returns The default value of the property.
   */
  getDefaultFloat2Value (): DzVec2;

  /**
   * TODO: Add description.
   */
  getFloat2FollowValue (): DzVec2;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getFloat2FollowValue (tm: DzTime): DzVec2;

  /**
   * @returns The value of the property at the current time.
   */
  getFloat2Value (): DzVec2;

  /**
   * @returns The value of the property at the given time.
   * @param tm - The scene time to get the value for.
   */
  getFloat2Value (tm: DzTime): DzVec2;

  /**
   * @returns The value of the i'th key in the property.
   * @param i - The index of the key to get the value for.
   */
  getKeyFloat2Value (i: number): DzVec2;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the current time without any ERC link redirection.
   */
  getLocalFloat2Value (): DzVec2;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the given time without any ERC link redirection.
   * @param tm - The scene time to get the local value for.
   */
  getLocalFloat2Value (tm: DzTime): DzVec2;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
   * @param tm - The scene time to get the raw value for.
   */
  getRawFloat2Value (tm: DzTime): DzVec2;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
   */
  getRawFloat2Value (): DzVec2;

  /**
   * Sets the default value for this property.
   * @param val - The value to set the property to.
   */
  setDefaultFloat2Value (val: DzVec2): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set the property to.
   */
  setFloat2Value (tm: DzTime, val: DzVec2): void;

  /**
   * Sets the value for this property at the current time; or the default value if this property is not animatable.
   * @param val - The value to set the property to.
   */
  setFloat2Value (val: DzVec2): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set the property to.
   * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
   */
  setFloat2Value (tm: DzTime, val: DzVec2, interp: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - 
   * @param interp - The type of interpolation to perform between this keyframe and the next.
   * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
   * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
   * @param param2 - The value to set the property to.
   */
  setFloat2Value (tm: DzTime, val: DzVec2, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * Sets the value of the i'th key.
   * @Attention You are responsible to ensure the key indices are within the valid range.
   * @param i - The index of the key to change.
   * @param val - The new value for the key.
   */
  setKeyFloat2Value (i: number, val: DzVec2): void;

}

declare var DzFloat2Property:
{
  prototype: DzFloat2Property;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzFloat2Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param initVal - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal: DzVec2): DzFloat2Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzFloat2Property;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float3property_dz
 * An animatable floating-point property with 3 values.
 * @remarks This class provides an animatable floating-point property with 3 values that is stored and can be accessed as a DzVec3.
 */
interface DzFloat3Property extends DzFloatProperty
{

  /**
   * Adjust the value of the property based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param val - The 'final' value desired for the property.
   */
  adjustFloat3Value (val: DzVec3): DzVec3;

  /**
   * Adjust the value of the property at the given time based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param tm - The scene time at which to adjust the value.
   * @param val - The 'final' value desired for the property.
   */
  adjustFloat3Value (tm: DzTime, val: DzVec3): DzVec3;

  /**
   * @returns The default value of the property.
   */
  getDefaultFloat3Value (): DzVec3;

  /**
   * TODO: Add description.
   */
  getFloat3FollowValue (): DzVec3;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getFloat3FollowValue (tm: DzTime): DzVec3;

  /**
   * @returns The value of the property at the current time.
   */
  getFloat3Value (): DzVec3;

  /**
   * @returns The value of the property at the given time.
   * @param tm - The scene time to get the value for.
   */
  getFloat3Value (tm: DzTime): DzVec3;

  /**
   * @returns The value of the i'th key in the property.
   * @param i - The index of the key to get the value for.
   */
  getKeyFloat3Value (i: number): DzVec3;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the current time without any ERC link redirection.
   */
  getLocalFloat3Value (): DzVec3;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the given time without any ERC link redirection.
   * @param tm - The scene time to get the local value for.
   */
  getLocalFloat3Value (tm: DzTime): DzVec3;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
   * @param tm - The scene time to get the raw value for.
   */
  getRawFloat3Value (tm: DzTime): DzVec3;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
   */
  getRawFloat3Value (): DzVec3;

  /**
   * Sets the default value for this property.
   * @param val - The value to set the property to.
   */
  setDefaultFloat3Value (val: DzVec3): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set the property to.
   */
  setFloat3Value (tm: DzTime, val: DzVec3): void;

  /**
   * Sets the value for this property at the current time; or the default value if this property is not animatable.
   * @param val - The value to set the property to.
   */
  setFloat3Value (val: DzVec3): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set the property to.
   * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
   */
  setFloat3Value (tm: DzTime, val: DzVec3, interp: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - 
   * @param interp - The type of interpolation to perform between this keyframe and the next.
   * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
   * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
   * @param param2 - The value to set the property to.
   */
  setFloat3Value (tm: DzTime, val: DzVec3, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * Sets the value of the i'th key.
   * @Attention You are responsible to ensure the key indices are within the valid range.
   * @param i - The index of the key to change.
   * @param val - The new value for the key.
   */
  setKeyFloat3Value (i: number, val: DzVec3): void;

}

declare var DzFloat3Property:
{
  prototype: DzFloat3Property;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzFloat3Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param initVal - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal: DzVec3): DzFloat3Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzFloat3Property;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolor_dz
 * A 4-component floating point color value.
 * @remarks This class manages 4-component colors (colors that can include an alpha value).
 */
interface DzFloatColor extends Object
{

  /**
   * Holds the blue value for the color. Should be in the [0,1] range.
   */
  blue: string

  /**
   * Holds the green value for the color. Should be in the [0,1] range.
   */
  green: string

  /**
   * Holds the red value for the color. Should be in the [0,1] range.
   */
  red: string

  /**
   * Modifies the color such that the value of no component is less than min and no more than max.
   * @param min - The minimum value to allow in each component of the color.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clamp (min: number, max: number, includeAlpha?: boolean): void;

  /**
   * @returns A copy of this color where the value of no component is less than min and no more than max.
   * @param min - The minimum value to allow in each component of the color.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clamped (min: number, max: number, includeAlpha?: boolean): DzFloatColor;

  /**
   * @returns A copy of this color where the value of no component is more than max.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clampedMax (max: number, includeAlpha?: boolean): DzFloatColor;

  /**
   * @returns A copy of this color where the value of no component is less than min.
   * @param min - The minimum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clampedMin (min: number, includeAlpha?: boolean): DzFloatColor;

  /**
   * Modifies the color such that the value of no component is more than max.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clampMax (max: number, includeAlpha?: boolean): void;

  /**
   * Modifies the color such that the value of no component is less than min.
   * @param min - The minimum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  clampMin (min: number, includeAlpha?: boolean): void;

  /**
   * @returns true if this color is within tolerance of color, otherwise false.
   * @param color - The color to test this color against.
   * @param [tolerance=0.000001] - The amount of deviation to allow in each component of the color.
   */
  equals (color: DzFloatColor, tolerance?: number): boolean;

  /**
   * Applies a gamma value to the color.
   * @param [gamma=2.2] - The gamma value to apply.
   * @param [doAlpha=false] - If true, applies gamma to the alpha channel of the color.
   */
  gammaColor (gamma?: number, doAlpha?: boolean): void;

  /**
   * Holds the alpha value for the color. Should be in the [0,1] range.
   */
  getColor (): Color;

  /**
   * @returns A suitable grayscale equivalent of this color.
   */
  getGrayscale (): number;

  /**
   * @returns An array consisting of the hue, saturation, lightness and alpha component values.
   */
  getHsl (): Array<unknown>;

  /**
   * @returns An array consisting of the hue, saturation, value and alpha component values.
   */
  getHsv (): Array<unknown>;

  /**
   * @returns The maximum value for this color.
   */
  getMaxRGBValue (): number;

  /**
   * @returns The relative luminance for this color, calculated as: Y = 0.212671*R + 0.715160*G + 0.072169*B
   */
  getRelativeLuminance (): number;

  /**
   * @returns An array consisting of the red, green, blue and alpha component values.
   */
  getRgba (): Array<unknown>;

  /**
   * Linerizes the color based on a gamma value.
   * @param [gamma=2.2] - The gamma value to linearize by.
   * @param [doAlpha=false] - If true, linearizes the alpha channel of the color by gamma.
   */
  linearizeColor (gamma?: number, doAlpha?: boolean): void;

  /**
   * @returns A copy of this color where the value of each component is modulated between min and max.
   * @param min - The minimum value to allow in each component of the color.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also clamped.
   */
  modulate (min: number, max: number, includeAlpha?: boolean): DzFloatColor;

  /**
   * Modifies the color such that the value of each component is modulated between min and max.
   * @param min - The minimum value to allow in each component of the color.
   * @param max - The maximum value to allow in each component of the color.
   * @param [includeAlpha=false] - If true, the alpha component is also modulated.
   */
  modulo (min: number, max: number, includeAlpha?: boolean): void;

  /**
   * Sets the color according to an array of the hue, saturation, lightness and (optionally) alpha component values.
   * @param list - 
   */
  setHsl (list: Array<unknown>): void;

  /**
   * Sets a HSL value on the color.
   * @param h - The value to set on the hue component.
   * @param s - The value to set on the saturation component.
   * @param l - The value to set on the lightness component.
   * @param [a=1.0] - The value to set on the alpha component.
   */
  setHsl (h: number, s: number, l: number, a?: number): void;

  /**
   * Sets a HSV value on the color.
   * @param h - The value to set on the hue component.
   * @param s - The value to set on the saturation component.
   * @param v - The value to set on the value component.
   * @param [a=1.0] - The value to set on the alpha component.
   */
  setHsv (h: number, s: number, v: number, a?: number): void;

  /**
   * Sets the color according to an array of the hue, saturation, value and alpha component values.
   * @param list - 
   */
  setHsv (list: Array<unknown>): void;

  /**
   * Sets the color according to an array of the red, green, blue and alpha component values.
   * @param list - 
   */
  setRgba (list: Array<unknown>): void;

  /**
   * Sets the color values. Values should be in the [0,1] range.
   * @seealso getValue()
   * @param r - The red value for the color
   * @param g - The green value for the color
   * @param b - The blue value for the color
   * @param [a=1.0] - The alpha value for the color
   */
  setValue (r: number, g: number, b: number, a?: number): void;

  /**
   * TODO: Add description.
   * @param color - 
   */
  setValue (color: Color): void;

}

declare var DzFloatColor:
{
  prototype: DzFloatColor;

  /**
   * Default constructor. Initializes a new color to opaque black.
   */
  new (): DzFloatColor;

  /**
   * Constructor that takes individual floating-point RGBA components. Initializes the color to the given values. Values should be in the [0,1] range.
   * @example
   * var oFloatColor4Arg = new DzFloatColor( 1, 0.5, 0.5, 1 );
   * print( oFloatColor4Arg ); //[1,0.5,0.5,1]
   * @param r - The red value for the color
   * @param g - The green value for the color
   * @param b - The blue value for the color
   * @param [a=1.0] - The alpha value for the color
   */
  new (r: number, g: number, b: number, a?: number): DzFloatColor;

  /**
   * Constructor that creates an achromatic color.
   * @example
   * var oFloatColor1Arg = new DzFloatColor( 0.5 );
   * print( oFloatColor1Arg ); //[0.5,0.5,0.5,1]
   *  
   * var oFloatColor2Arg = new DzFloatColor( 0.5, 1 );
   * print( oFloatColor2Arg ); //[0.5,0.5,0.5,1]
   * @param val - The value to use for each color component.
   * @param [alpha=1.0] - The value to use for the alpha component.
   */
  new (val: number, alpha?: number): DzFloatColor;

  /**
   * Constructor that takes a floating-point array to define RGBA colors. Initializes the color to the given values.
   * @example
   * var oFloatColorArray1Arg = new DzFloatColor( [ 1 ] );
   * print( oFloatColorArray1Arg ); //[1,1,1,1]
   *  
   * var oFloatColorArray2Arg = new DzFloatColor( [ 0.5, 1 ] );
   * print( oFloatColorArray2Arg ); //[0.5,0.5,0.5,1]
   *  
   * var oFloatColorArray3Arg = new DzFloatColor( [ 1, 0.5, 0.25 ] );
   * print( oFloatColorArray3Arg ); //[1,0.5,0.25,1]
   *  
   * var oFloatColorArray4Arg = new DzFloatColor( [ 1, 0.5, 0.25, 1 ] );
   * print( oFloatColorArray4Arg ); //[1,0.5,0.25,1]
   * @param color - An array of float values for the color. The array can have 1, 2, 3 or 4 float values. The length of the array has meanings that correspond with the other constructors. Values should be in the [0,1] range.
   */
  new (color: Array<unknown>): DzFloatColor;

  /**
   * Constructor that takes a QColor. Initializes the color to the given color. The color is assumed to be completely opaque.
   * @example
   * var oColor = new Color( 255, 128, 0 );
   *  
   * var oFloatColorCopyColor = new DzFloatColor( oColor );
   * print( oFloatColorCopyColor ); //[1,0.501961,0,1]
   * @param color - The color value to copy into this color.
   */
  new (color: Color): DzFloatColor;

  /**
   * Copy Constructor.
   * @example
   * var oColor = new Color( 255, 128, 0 );
   *  
   * var oFloatColorCopyColor = new DzFloatColor( oColor );
   * print( oFloatColorCopyColor ); //[1,0.501961,0,1]
   *  
   * var oFloatColorCopyFloatColor = new DzFloatColor( oFloatColorCopyColor );
   * print( oFloatColorCopyFloatColor ); //[1,0.501961,0,1]
   * @param color - The color object to copy.
   */
  new (color: DzFloatColor): DzFloatColor;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolorproperty_dz
 * An animatable color property.
 * @remarks This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 */
interface DzFloatColorProperty extends DzColorProperty
{

  /**
   * TODO: Add description.
   * @param val - 
   */
  adjustFloatColorValue (val: DzFloatColor): DzFloatColor;

  /**
   * TODO: Add description.
   * @param tm - 
   * @param val - 
   */
  adjustFloatColorValue (tm: DzTime, val: DzFloatColor): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getDefaultFloatColorValue (): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getFloatColorFollowValue (): DzFloatColor;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getFloatColorFollowValue (tm: DzTime): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getFloatColorValue (): DzFloatColor;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getFloatColorValue (tm: DzTime): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getFloatMax (): number;

  /**
   * TODO: Add description.
   */
  getFloatMin (): number;

  /**
   * TODO: Add description.
   */
  getFloatSensitivity (): number;

  /**
   * TODO: Add description.
   * @param i - 
   */
  getKeyFloatColorValue (i: number): DzFloatColor;

  /**
   * TODO: Add description.
   * @param i - 
   */
  getKeyInterpolationTypeValues (i: number): Array<unknown>;

  /**
   * TODO: Add description.
   */
  getLocalFloatColorValue (): DzFloatColor;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getLocalFloatColorValue (tm: DzTime): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getRawFloatColorValue (): DzFloatColor;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getRawFloatColorValue (tm: DzTime): DzFloatColor;

  /**
   * TODO: Add description.
   * @param val - 
   */
  setDefaultFloatColorValue (val: DzFloatColor): void;

  /**
   * TODO: Add description.
   * @param val - 
   */
  setFloatColorValue (val: DzFloatColor): void;

  /**
   * TODO: Add description.
   * @param tm - 
   * @param val - 
   * @param interp - 
   */
  setFloatColorValue (tm: DzTime, val: DzFloatColor, interp: number): void;

  /**
   * TODO: Add description.
   * @param tm - 
   * @param val - 
   */
  setFloatColorValue (tm: DzTime, val: DzFloatColor): void;

  /**
   * TODO: Add description.
   * @param tm - 
   * @param val - 
   * @param interp - 
   * @param param0 - 
   * @param param1 - 
   * @param param2 - 
   */
  setFloatColorValue (tm: DzTime, val: DzFloatColor, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * TODO: Add description.
   * @param max - 
   */
  setFloatMax (max: number): void;

  /**
   * TODO: Add description.
   * @param min - 
   */
  setFloatMin (min: number): void;

  /**
   * TODO: Add description.
   * @param min - 
   * @param max - 
   */
  setFloatMinMax (min: number, max: number): void;

  /**
   * TODO: Add description.
   * @param sens - 
   */
  setFloatSensitivity (sens: number): void;

  /**
   * TODO: Add description.
   * @param i - 
   * @param val - 
   */
  setKeyFloatColorValue (i: number, val: DzFloatColor): void;

  /**
   * TODO: Add description.
   * @param i - 
   * @param interp - 
   * @param param0 - 
   * @param param1 - 
   * @param param2 - 
   */
  setKeyInterpolation (i: number, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * TODO: Add description.
   * @param i - 
   * @param interp - 
   */
  setKeyInterpolation (i: number, interp: number): void;

  /**
   * TODO: Add description.
   * @param val - 
   */
  setRawFloatColorValue (val: DzFloatColor): void;

  /**
   * TODO: Add description.
   * @param tm - 
   * @param val - 
   */
  setRawFloatColorValue (tm: DzTime, val: DzFloatColor): void;

}

declare var DzFloatColorProperty:
{
  prototype: DzFloatColorProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzFloatColorProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param initVal - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal: Color): DzFloatColorProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzFloatColorProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatproperty_dz
 * An animatable floating-point property.
 * @remarks TODO: Add detailed description.
 */
interface DzFloatProperty extends DzNumericProperty
{

  /**
   * TODO: Add description.
   */
  /**
   * Linear interpolation between key values.
   */
  readonly LINEAR_INTERP: number;

  /**
   * Constant interpolation between key values.
   */
  readonly CONSTANT_INTERP: number;

  /**
   * TCB (Kochanek-Bartels) Spline interpolation between key values.
   */
  readonly TCB_INTERP: number;

  /**
   * Hermite Spline interpolation between key values.
   */
  readonly HERMITE_INTERP: number;

  /**
   * TODO: Add description.
   */
  /**
   * This property is not a transform property.
   */
  readonly NON_TRANSFORM: number;

  /**
   * This property is a scale transform.
   */
  readonly SCALE: number;

  /**
   * This property is a translation transform property.
   */
  readonly TRANSLATE: number;

  /**
   * This property is a rotation on the first axis of the rotation order.
   */
  readonly ROT_FIRST_AXIS: number;

  /**
   * This property is a rotation on the second axis of the rotation order.
   */
  readonly ROT_SECOND_AXIS: number;

  /**
   * This property is a rotation on the third axis of the rotation order.
   */
  readonly ROT_THIRD_AXIS: number;

  /**
   * Adds the given value to all the key values.
   * @param val - The addend for the values.
   * @param [applyToDefault=true] - If true, val will also be added to the default value for the property.
   */
  add (val: number, applyToDefault?: boolean): void;

  /**
   * Adjust the value of the property based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param val - The 'final' value desired for the property.
   */
  adjustValue (val: number): number;

  /**
   * Adjust the value of the property at the given time based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param tm - The scene time at which to adjust the value.
   * @param val - The 'final' value desired for the property.
   */
  adjustValue (tm: DzTime, val: number): number;

  /**
   * Divides all key values by the given amount.
   * @param val - The divisor for the values.
   * @param [applyToDefault=true] - If true, the default value for the property will also be divided.
   */
  divide (val: number, applyToDefault?: boolean): void;

  /**
   * @returns The default value of the property.
   */
  getDefaultValue (): number;

  /**
   * @returns true if this property should be displayed as a percentage, false if this property should be displayed as a decimal.
   */
  getDisplayAsPercent (): boolean;

  /**
   * @returns The default value of this property as a double precision value.
   */
  getDoubleDefaultValue (): number;

  /**
   * @returns The value of this property as a double at the given time.
   * @param tm? - The scene time to get the value for.
   */
  getDoubleValue (tm?: DzTime): number;

  /**
   * @returns The type of interpolation performed for the i'th key in the property.
   * @param i - The index of the key to get the interpolation values for.
   */
  getKeyInterpolationType (i: number): number;

  /**
   * @returns The interpolation type values for this property.
   * @param i - The index of the key to get the interpolation type values for.
   */
  getKeyInterpolationTypeValues (i: number): Array<unknown>;

  /**
   * @returns The value of the i'th key in the property.
   * @param i - The index of the key to get the value for.
   */
  getKeyValue (i: number): number;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the current time without any ERC link redirection.
   */
  getLocalValue (): number;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the given time without any ERC link redirection.
   * @param tm - The scene time to get the local value for.
   */
  getLocalValue (tm: DzTime): number;

  /**
   * @returns The maximum allowable value of the property.
   */
  getMax (): number;

  /**
   * @returns The minimum allowable value of the property.
   */
  getMin (): number;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
   */
  getRawValue (): number;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
   * @param tm - The scene time to get the raw value for.
   */
  getRawValue (tm: DzTime): number;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getScaledFollowValue (tm: DzTime): number;

  /**
   * @returns The sensitivity value for this property.
   */
  getSensitivity (): number;

  /**
   * @returns The transform type for this property.
   */
  getTransformType (): number;

  /**
   * @returns The value of the property at the current time.
   */
  getValue (): number;

  /**
   * @returns The value of the property at the given time.
   * @param tm - The scene time to get the value for.
   */
  getValue (tm: DzTime): number;

  /**
   * Multiplies all key values by the given amount.
   * @param val - The multiplier for the values.
   * @param [applyToDefault=true] - If true, the default value for the property will also be multiplied.
   */
  multiply (val: number, applyToDefault?: boolean): void;

  /**
   * Sets the default value for this property.
   * @param val - The value to set as the default for this property.
   */
  setDefaultValue (val: number): void;

  /**
   * Sets whether this property should have its value displayed as a percentage; the default is false (value is displayed as a decimal).
   * @param onOff - 
   */
  setDisplayAsPercent (onOff: boolean): void;

  /**
   * Sets the default value for this property.
   * @param val - The value to set as the default for this property.
   */
  setDoubleDefaultValue (val: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value for.
   * @param val? - The value to set for this property.
   */
  setDoubleValue (tm: DzTime, val?: number): void;

  /**
   * Sets the interpolation method for the i'th key.
   * @Attention You are responsible to ensure the key index is within the valid range.
   * @param i - The index of the key to change.
   * @param interp - The type of interpolation to perform between this keyframe and the next.
   */
  setKeyInterpolation (i: number, interp: number): void;

  /**
   * Sets the interpolation method for the i'th key.
   * @Attention You are responsible to ensure the key index is within the valid range.
   * @param i - The index of the key to change.
   * @param interp - The type of interpolation to perform between this keyframe and the next.
   * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
   * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
   * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation.
   */
  setKeyInterpolation (i: number, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * Sets the value of the i'th key.
   * @Attention You are responsible to ensure the key index is within the valid range.
   * @param i - 
   * @param val - The index of the key to set the value for.
   */
  setKeyValue (i: number, val: number): void;

  /**
   * Set the maximum allowable value.
   * @param max - The maximum value to set.
   */
  setMax (max: number): void;

  /**
   * Set the mininimum allowable value.
   * @param min - The minimum value to set.
   */
  setMin (min: number): void;

  /**
   * Set the mininimum and maximum allowable values.
   * @param min - The minimum value to set.
   * @param max - The maximum value to set.
   */
  setMinMax (min: number, max: number): void;

  /**
   * Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
   * @param sens - The value to set.
   */
  setSensitivity (sens: number): void;

  /**
   * Sets the transform type for this property.
   * @param type - The enumeration value for the type of transform.
   */
  setTransformType (type: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set the property to.
   * @param interp - The type of interpolation to perform between this keyframe and the next.
   * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
   * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
   * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation
   */
  setValue (tm: DzTime, val: number, interp: number, param0: number, param1: number, param2: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set.
   */
  setValue (tm: DzTime, val: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set.
   * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
   */
  setValue (tm: DzTime, val: number, interp: number): void;

  /**
   * Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
   * @param val - The value to set.
   */
  setValue (val: number): void;

  /**
   * Subtracts the given value to all the key values.
   * @param val - The value to be subtracted from the key values.
   * @param [applyToDefault=true] - If true, val will also be subtracted from the default value for the property.
   */
  subtract (val: number, applyToDefault?: boolean): void;

  displayAsPercentChanged: Signal<{
    /**
     * Emitted if the way this property is displayed changed.
     */
  (): void;
  }>;
}

declare var DzFloatProperty:
{
  prototype: DzFloatProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzFloatProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param [defaultVal=0.0] - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, defaultVal?: number): DzFloatProperty;

  /**
   * TODO: Add description.
   */
  /**
   * Linear interpolation between key values.
   */
  readonly LINEAR_INTERP: number;
  /**
   * Constant interpolation between key values.
   */
  readonly CONSTANT_INTERP: number;
  /**
   * TCB (Kochanek-Bartels) Spline interpolation between key values.
   */
  readonly TCB_INTERP: number;
  /**
   * Hermite Spline interpolation between key values.
   */
  readonly HERMITE_INTERP: number;

  /**
   * TODO: Add description.
   */
  /**
   * This property is not a transform property.
   */
  readonly NON_TRANSFORM: number;
  /**
   * This property is a scale transform.
   */
  readonly SCALE: number;
  /**
   * This property is a translation transform property.
   */
  readonly TRANSLATE: number;
  /**
   * This property is a rotation on the first axis of the rotation order.
   */
  readonly ROT_FIRST_AXIS: number;
  /**
   * This property is a rotation on the second axis of the rotation order.
   */
  readonly ROT_SECOND_AXIS: number;
  /**
   * This property is a rotation on the third axis of the rotation order.
   */
  readonly ROT_THIRD_AXIS: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatslider_dz
 * DAZScript floating point (decimal) slider widget.
 * @remarks A DzFloatSlider provides a control that allows a user to adjust a bounded floating point value.
 */
interface DzFloatSlider extends DzWidget
{

  /**
   * Holds whether or not the slider obeys its limits. false by default.
   */
  clamped: boolean

  /**
   * Holds whether or not the slider text is displayed as a percentage value. false by default.
   */
  displayAsPercent: boolean

  /**
   * If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
   */
  indeterminate: boolean

  /**
   * Holds the label text for the slider.
   */
  label: string

  /**
   * Holds whether or not the slider's label is visible.
   */
  labelVisible: boolean

  /**
   * Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
   */
  max: number

  /**
   * Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
   */
  min: number

  /**
   * Holds the sensitivity of the slider.
   */
  sensitivity: number

  /**
   * Holds the text of the slider. (Read Only)
   */
  text: string

  /**
   * Holds whether or not the slider text is editable by the user. false by default.
   */
  textEditable: boolean

  /**
   * Holds whether or not the slider text is visible to the user. true by default.
   */
  textVisible: boolean

  /**
   * Holds the current value of the slider.
   */
  value: number

  editEnd: Signal<{
    /**
     * Emitted when the user releases the slider.
     */
  (): void;
  }>;
  editStart: Signal<{
    /**
     * Emitted when the user starts dragging the slider.
     */
  (): void;
  }>;
  valueChanged: Signal<{
    /**
     * Emitted when the value of the slider changes, passes the new value.
     * @param value - 
     */
  (value: number): void;
  }>;
}

declare var DzFloatSlider:
{
  prototype: DzFloatSlider;

  /**
   * Creates a slider as a child of the given parent widget.
   * @param parent - The widget parent for the slider.
   */
  new (parent: DzWidget): DzFloatSlider;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/folderassetcontainer_dz
 * A container type that presents assets as content files reside on disk.
 * @remarks The “Folder” container type serves to present assets as the files they represent exist in the folder structure on disk.
 * @seealso DzAssetMgr::getContentDirs()
 * DzAssetMgr::getPoserDirs()
 * DzAssetMgr::getImportDirs()
 * DzAsset
 */
interface DzFolderAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * Holds the list of folder names to exclude as children of this container.
   */
  excludeFolders: Array<unknown>

  /**
   * Holds the list of file filters for this container.
   */
  fileFilters: Array<unknown>

  /**
   * Holds whether or not this container represents an Import folder. (Read Only)
   * @since 4.11.0.193
   */
  isImport: boolean

  /**
   * Holds whether or not this container is at the top level of the Import folder hierarchy. (Read Only)
   * @since 4.11.0.193
   */
  isImportTopLevel: boolean

  /**
   * Holds whether or not this container represents a native folder. (Read Only)
   * @since 4.11.0.193
   */
  isNative: boolean

  /**
   * Holds whether or not this container is at the top level of the native folder hierarchy. (Read Only)
   * @since 4.11.0.193
   */
  isNativeTopLevel: boolean

  /**
   * Holds whether or not this container represents a Poser folder. (Read Only)
   * @since 4.11.0.193
   */
  isPoser: boolean

  /**
   * Holds whether or not this container is an immediate child of the top level folder in a Poser folder hierarchy. (Read Only)
   * @since 4.11.0.214
   */
  isPoserIntermediate: boolean

  /**
   * Holds whether or not this container is at the top level of the Poser folder hierarchy. (Read Only)
   * @since 4.11.0.193
   */
  isPoserTopLevel: boolean

  /**
   * Holds the list of folder names to allow as children of this container.
   */
  onlyIncludeFolders: Array<unknown>

  /**
   * @returns true if shortFileName matches the filter for this container, otherwise false.
   * @param shortFileName - 
   */
  fileMatchesFilter (shortFileName: string): boolean;

  /**
   * @returns The full path of the folder that this container represents.
   */
  getFullPath (): string;

  /**
   * @returns true if this container has child containers that are directories, otherwise false.
   */
  hasDirectoryChildren (): boolean;

  /**
   * @returns true if asset conflicts will create a link when called, otherwise false.
   * @since 4.9.0.47
   * @param asset - 
   */
  insertsAsLink (asset: DzAsset): boolean;

  /**
   * Attempts to update the child containers of this container.
   * @returns true if the update was successful, otherwise false.
   */
  updateChildren (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/font
 * DAZScript wrapper for QFont.
 * @remarks This is the DAZScript counterpart to the QFont type used in the DAZ Studio SDK.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Font extends QObject
{

  /**
   * Holds whether or not the Font is bolded.
   */
  bold: boolean

  /**
   * Holds the family name of the Font.
   */
  family: string

  /**
   * Holds whether or not the Font is italicized.
   */
  italic: boolean

  /**
   * The pixel size of the font (the device dependent size of the font)
   */
  pixelSize: number

  /**
   * The point size of the font (the device independent size of the font)
   */
  pointSize: number

  /**
   * Holds whether or not the Font is striked.
   */
  strikeout: boolean

  /**
   * Holds whether or not the Font is underlined.
   */
  underline: boolean

  /**
   * @returns The bounding rectangle of the characters in text, which is the set of pixels the text would cover if drawn at (0, 0), constrained to maxRect.
   * @since 4.10.0.121
   * @param maxRect - The rectangle to constrain the bounding rectangle to.
   * @param text - The text to get the bounding rectangle of.
   * @param [flags=0] - A bitwise OR of the following flags:   *         DzWidget.AlignLeft   *         DzWidget.AlignRight   *         DzWidget.AlignHCenter   *         DzWidget.AlignJustify   *         DzWidget.AlignTop   *         DzWidget.AlignBottom   *         DzWidget.AlignVCenter   *         DzWidget.AlignCenter   *         DzWidget.TextSingleLine   *         DzWidget.TextExpandTabs   *         DzWidget.TextShowMnemonic   *         DzWidget.TextWordWrap
   */
  boundingRect (maxRect: Rect, text: string, flags?: number): Rect;

  /**
   * @returns If text is wider than width, an elided version of text, otherwise the original string.
   * @since 4.10.0.121
   * @param text - The text to get an elided version of.
   * @param mode - The mode to elide the text with.
   * @param width - The width (in pixels) to test text with.
   * @param [flags=0] - Currently only supports DzWidget.TextShowMnemonic.
   */
  elidedText (text: string, mode: number, width: number, flags?: number): string;

  /**
   * @returns A list of the font families available on the current machine (if any), otherwise an empty list.
   * @since 4.10.0.121
   */
  families (): Array<unknown>;

  /**
   * @returns A list of the point sizes for the font specified by family and style.
   * @since 4.10.0.121
   * @param family - The name of the font family to get sizes for.
   * @param style - The style of the font family to get sizes for.
   */
  pointSizes (family: string, style: string): Array<unknown>;

  /**
   * @returns The size (in pixels) of text.
   * @since 4.10.0.121
   * @param text - The text to get the size of.
   * @param [flags=0] - A bitwise OR of the following flags:   *         DzWidget.TextSingleLine   *         DzWidget.TextExpandTabs   *         DzWidget.TextShowMnemonic   *         DzWidget.TextWordWrap
   */
  size (text: string, flags?: number): Size;

  /**
   * @returns A list of the styles for the font specified by family (if any), otherwise an empty list.
   * @since 4.10.0.121
   * @param family - The name of the font family to get styles for.
   */
  styles (family: string): Array<unknown>;

}

declare var Font:
{
  prototype: Font;

  /**
   * Default Constructor.
   */
  new (): Font;

  /**
   * Copy Constructor.
   * @param font - The Font to copy.
   */
  new (font: Font): Font;

  /**
   * Constructs a new font of the given family.
   * @param familyName - The name of the font family that the new font will be of.
   */
  new (familyName: string): Font;
}
// DzGeometry API error: Line 1, column 1: Expected "CLS ", "GLO ", "NOT ", "RAW ", or "UNK " but end of input found.

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryimporter_dz
 * Base class for all geometry importers.
 * @remarks TODO: Add detailed description.
 */
interface DzGeometryImporter extends DzImporter
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryshellnode_dz
 * Node class for geometry shells.
 * @remarks A geometry shell is a heavy instance of another scene node. It is a deep copy of the world space geometry with its own unique materials.
 */
interface DzGeometryShellNode extends DzNode
{

  /**
   * TODO: Add description.
   */
  getShellNodeControl (): DzNodeProperty;

}

declare var DzGeometryShellNode:
{
  prototype: DzGeometryShellNode;

  /**
   * Default Constructor. Creates a shell with DzObject, pushmodifier_dz, and DzGeometryShellShape. This is the preferred way to create a shell node.
   */
  new (): DzGeometryShellNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryutil_dz
 * DAZ Script's global static object for geometry manipulation utility functions.
 */
interface DzGeometryUtil extends QObject
{

  /**
   * Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param node - The scene item to convert.
   * @param [defaultLevel=1] - The default subdivision level of the item after conversion.
   */
  convertToSubD (node: DzNode, defaultLevel?: number): DzError;

  /**
   * Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param node - The scene item to convert.
   * @param defaultViewLevel - 
   * @param defaultRenderLevel - The default subdivision level of the item after conversion.
   */
  convertToSubD (node: DzNode, defaultViewLevel: number, defaultRenderLevel: number): DzError;

  /**
   * Creates a primitive based on the settings supplied.
   * @returns DzNode The new primitive node in the scene. NULL if nothing was created.
   * @param settings - The settings that specify the type of primitive and corresponding dimensions.
   */
  createPrimitive (settings: DzSettings): DzNode;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geomsourcefiledata_dz
 * DzSourceFileData implementation that stores the file and group name for a geometry source.
 * @remarks TODO: Add detailed description.
 */
interface DzGeomSourceFileData extends DzSourceFileData
{

  /**
   * The name of the group that the geometry came from.
   */
  groupName: string

}

declare var DzGeomSourceFileData:
{
  prototype: DzGeomSourceFileData;

  /**
   * Creates a new Geometry Source File Data object that stores the given file path and group name.
   * @param [filePath=“”] - 
   * @param [groupName=“”] - 
   */
  new (filePath?: string, groupName?: string): DzGeomSourceFileData;
}

  /**
   * A special value used to indicate a division by zero occurrence. In Daz Script, division by zero does not raise an error, instead it assigns the Infinity value. Use isFinite() to test if a value is finite or not. (Read Only)
   * @example
   * var nNum = 1/0;
   * print( typeof nNum ); // number
   * print( nNum ); // Infinity
   */
declare var Infinity: number

  /**
   * Global variable giving all DAZ Scripts access to the ECMAScript JSON object.
   */
declare var JSON: JSON

  /**
   * Global variable giving all DAZ Scripts access to the ECMAScript Math object.
   */
declare var Math: Math

  /**
   * A special value used to indicate that the value of a Number, is “Not a Number”. (Read Only)
   * @example
   * var nNum = 1/"six";
   * print( typeof nNum ); // number
   * print( nNum ); // NaN
   * A special value used to indicate a variable does not have a value. (Read Only)
   * @example
   * var nNum = null;
   * print( typeof nNum ); // object
   * print( nNum ); // null
   * A special value corresponding to the primitive value, true. (Read Only)
   * @example
   * var nTest = 0 < 1;
   * print( typeof nTest ); // boolean
   * print( nTest ); // true
   * A special value used to indicate a variable does not have a defined value (e.g., has not yet been assigned). (Read Only)
   * @example
   * var nNum;
   * print( typeof nNum ); // undefined
   * print( nNum ); // undefined
   */
declare var NaN: number

  /**
   * A global variable giving all DAZ Scripts access to the application object.
   */
declare var App: DzApp

  /**
   * A global variable giving all DAZ Scripts access to public static members on QColorDialog.
   */
declare var ColorDialog: DzColorDialog

  /**
   * A global variable giving all DAZ Scripts access to the file dialog object.
   */
declare var FileDialog: DzFileDialog

  /**
   * A global variable giving all DAZ Scripts access to the geometry object.
   */
declare var Geometry: DzGeometryUtil

  /**
   * A global variable giving all DAZ Scripts access to the interface object.
   */
declare var MainWindow: DzMainWindow

  /**
   * A global variable giving all DAZ Scripts access to public static members on QMessageBox.
   */
declare var MessageBox: DzMessageBox

  /**
   * A global variable giving all DAZ Scripts access to the OpenGL object.
   */
declare var OpenGL: DzOpenGL

  /**
   * A global variable giving all DAZ Scripts access to the scene object.
   */
declare var Scene: DzScene

  /**
   * A global variable giving all DAZ Scripts access to the system object.
   */
declare var System: DzSystem

  /**
   * A global variable giving all DAZ Scripts access to the undo stack object.
   */
declare var UndoStack: DzUndoStack

  /**
   * @returns A new version of encodedURI in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURI() is replaced with the character that it represents. Escape sequences that could not have been introduced by encodeURI() are not replaced.
   * @param encodedURI - The encoded URI to decode.
   */
declare function decodeURI (encodedURI: string): string;

  /**
   * @returns A new version of encodedURIComponent in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURIComponent() is replaced with the character that it represents.
   * @param encodedURIComponent - 
   */
declare function decodeURIComponent (encodedURIComponent: string): string;

  /**
   * @returns A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
   * @param uri - The URI to encode.
   */
declare function encodeURI (uri: string): string;

  /**
   * @returns A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
   * @param uriComponent - 
   */
declare function encodeURIComponent (uriComponent: string): string;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use encodeURI() or encodeURIComponent() instead.
   * @param text - 
   */
declare function escape (text: string): string;

  /**
   * Parses and executes str, and returns the result.
   * @example
   * var sTmp = "x";
   * var nTmp = 5;
   * sTmp = eval( "sTmp + nTmp" );
   * // sTmp: "x5"
   * @example
   * var nTmp = 2;
   * var nTmp2 = 5;
   * nTmp = eval( "nTmp + nTmp2" );
   * // nTmp: 7
   * @param str - The statement to evaluate.
   */
declare function eval (str: string): Object;

  /**
   * @returns false if expression coerces to NaN or Infinity, otherwise true.
   * @example
   * print( "isFinite( NaN ) //", isFinite( NaN ) );
   * print( "isFinite( undefined ) //", isFinite( undefined ) );
   * print( "isFinite( {} ) //", isFinite( {} ) );
   *  
   * print( "isFinite( true ) //", isFinite( true ), ":", Number( true ) );
   * print( "isFinite( true ) //", isFinite( false ), ":", Number( false ) );
   * print( "isFinite( null ) //", isFinite( null ), ":", Number( null ) );
   * print( "isFinite( 5 ) //", isFinite( 5 ) );
   *  
   * print( "isFinite( \"5\" ) //", isFinite( "5" ), ":", Number( "5" ) );
   * print( "isFinite( \"5.5\" ) //", isFinite( "5.5" ), ":", Number( "5.5" ) );
   * print( "isFinite( \"5,5\" ) //", isFinite( "5,5" ), ":", Number( "5,5" ) );
   * print( "isFinite( \"ABC123\" ) //", isFinite( "ABC123" ), ":", Number( "ABC123" ) );
   * print( "isFinite( \"\" ) //", isFinite( "" ), ":", Number( "" ) );
   * print( "isFinite( \" \" ) //", isFinite( " " ), ":", Number( " " ) );
   *  
   * var dateNow = new Date();
   * print( "isFinite( new Date() ) //", isFinite( dateNow ), ":", Number( dateNow ) );
   * var sDate = dateNow.toString();
   * print( "isFinite( (new Date()).toString() ) //", isFinite( sDate ), ":", Number( sDate ) );
   * @param expression - The script expression to evaluate.
   */
declare function isFinite (expression: Object): boolean;

  /**
   * @returns true if expression is NaN (Not a Number), otherwise false.
   * @example
   * print( "isNaN( NaN ) //", isNaN( NaN ) );
   * print( "isNaN( undefined ) //", isNaN( undefined ) );
   * print( "isNaN( {} ) //", isNaN( {} ) );
   *  
   * print( "isNaN( true ) //", isNaN( true ), ":", Number( true ) );
   * print( "isNaN( true ) //", isNaN( false ), ":", Number( false ) );
   * print( "isNaN( null ) //", isNaN( null ), ":", Number( null ) );
   * print( "isNaN( 5 ) //", isNaN( 5 ) );
   *  
   * print( "isNaN( \"5\" ) //", isNaN( "5" ), ":", Number( "5" ) );
   * print( "isNaN( \"5.5\" ) //", isNaN( "5.5" ), ":", Number( "5.5" ) );
   * print( "isNaN( \"5,5\" ) //", isNaN( "5,5" ), ":", Number( "5,5" ) );
   * print( "isNaN( \"ABC123\" ) //", isNaN( "ABC123" ), ":", Number( "ABC123" ) );
   * print( "isNaN( \"\" ) //", isNaN( "" ), ":", Number( "" ) );
   * print( "isNaN( \" \" ) //", isNaN( " " ), ":", Number( " " ) );
   *  
   * var dateNow = new Date();
   * print( "isNaN( new Date() ) //", isNaN( dateNow ), ":", Number( dateNow ) );
   * var sDate = dateNow.toString();
   * print( "isNaN( (new Date()).toString() ) //", isNaN( sDate ), ":", Number( sDate ) );
   * @param expression - The script expression to evaluate.
   */
declare function isNaN (expression: Object): boolean;

  /**
   * Parses str and returns the floating point number that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
   * @returns A floating point number or NaN.
   * @example
   * print( "parseFloat( \"5\" ) //", parseFloat( "5" ) );
   * print( "parseFloat( \"5.5\" ) //", parseFloat( "5.5" ) );
   * print( "parseFloat( \"5,5\" ) //", parseFloat( "5,5" ) );
   * print( "parseFloat( \"5ABC\" ) //", parseFloat( "5ABC" ) );
   * print( "parseFloat( \"ABC5\" ) //", parseFloat( "ABC5" ) );
   * @param str - The string to convert to a floating point number.
   */
declare function parseFloat (str: string): number;

  /**
   * Parses the string and returns the integer that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
   * @returns An integer or NaN.
   * @example
   * print( "parseInt( \"5\" ) //", parseInt( "5" ) );
   * print( "parseInt( \"5.5\" ) //", parseInt( "5.5" ) );
   * print( "parseInt( \"5,5\" ) //", parseInt( "5,5" ) );
   * print( "parseInt( \"5ABC\" ) //", parseInt( "5ABC" ) );
   * print( "parseInt( \"ABC5\" ) //", parseInt( "ABC5" ) );
   * print( "parseInt( \"0x0123456789abcdef\" ) //", parseInt( "0x0123456789abcdef" ) );
   * print( "parseInt( \"0123456789abcdef\", 16 ) //", parseInt( "0123456789abcdef", 16 ) );
   * print( "parseInt( \"01234567\" ) //", parseInt( "01234567" ) );
   * print( "parseInt( \"01234567\", 8 ) //", parseInt( "01234567", 8 ) );
   * print( "parseInt( \"10001110101\", 2 ) //", parseInt( "10001110101", 2 ) );
   * @param str - The string to convert to an integer.
   * @param radix - The (optional) base of the number; [2,36]; if not specified, base is determined as follows:   *         - base 16 if the number begins with “0x” or “0X”   *         - base 8 if the number begins with “0”   *         - base 10 otherwise
   */
declare function parseInt (str: string, radix: number): number;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use decodeURI() or decodeURIComponent() instead.
   * @param text - 
   */
declare function unescape (text: string): string;

  /**
   * While the garbage collector is automatically run for script objects that are no longer referenced, there is no guarantee on when it will take place. This function can be used to explicitly request garbage collection.
   */
declare function gc (): void;

  /**
   * Prints the expression to the console (if executed from within the Script Editor) or to the log.
   * @example
   * print( "Hello, World!" );
   * @param expression - The expression to print - the argument will be converted to a string (via toString) if necessary.
   * @param _ - 
   */
declare function print (expression: string, ..._: String[]): void;

  /**
   * @returns A translated version of sourceText if an appropriate translated string is available, otherwise returns sourceText itself.
   * @param sourceText - 
   */
declare function qsTr (sourceText: string): string;

  /**
   * @returns The translation text for sourceText, by querying the installed translation files. Translation files are searched from the most recently installed file back to the first installed file.
   * @param sourceText - 
   */
declare function qsTranslate (sourceText: string): string;

  /**
   * @returns A translated string identified by id. If no matching string is found, id itself is returned.
   * @param id - 
   */
declare function qsTrId (id: string): string;

  /**
   * Scripts can call this function to accept and finish a hold on the undo stack started by calling beginUndo().
   * @param caption - The brief description for the action that will be displayed to the user.
   */
declare function acceptUndo (caption: string): void;

  /**
   * @returns true if one or more background progress operations are currently being tracked.
   * @seealso Sample: Wait For Background Progress
   */
declare function backgroundProgressIsActive (): boolean;

  /**
   * @returns true if the user has cancelled the current operation by pressing the 'Cancel' button on the background progress.
   */
declare function backgroundProgressIsCancelled (): boolean;

  /**
   * Captures a view of scene seletion.
   * @seealso restoreNodeSelectionHold()
   * dropNodeSelectionHold()
   * @since 4.9.4.109
   */
declare function beginNodeSelectionHold (): void;

  /**
   * Starts a hold on the undo stack. It is recommended that scripts use this function rather than accessing DzUndoStack directly, since if the script crashes or a logic error results in leaving the undo stack open, calling this function insures that the undo stack will be closed at the end of script execution.
   */
declare function beginUndo (): void;

  /**
   * Scripts can call this function to cancel a hold on the undo stack started by calling beginUndo().
   */
declare function cancelUndo (): void;

  /**
   * Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
   * @example
   * setBusyCursor();
   * // ... do something ...
   * clearBusyCursor();
   */
declare function clearBusyCursor (): void;

  /**
   * Clears all selection holds without restoring the selection.
   * @seealso beginNodeSelectionHold()
   * dropNodeSelectionHold()
   * @since 4.9.4.109
   */
declare function clearNodeSelectionHolds (): void;

  /**
   * Scripts can call this function to clear the undo stack.
   */
declare function clearUndoStack (): void;

  /**
   * Connects a signal from one object to a function (slot) on another object.
   * @seealso Signals and Slots
   * @param sender - The object emitting the signal.
   * @param signal - The signal being emitted.
   * @param receiver - The object that will receive the signal.
   * @param slot - The method on receiver to execute when sender emits signal.
   */
declare function connect (sender: Object, signal: string, receiver: Object, slot: string): void;

  /**
   * Connects a signal from an object to a Daz Script function (slot).
   * @seealso Sample: Version Conversion
   * Signals and Slots
   * @param sender - The object emitting the signal.
   * @param signal - The signal being emitted.
   * @param functionRef - The function to execute when sender emits signal.
   */
declare function connect (sender: Object, signal: string, functionRef: Function): void;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use DzApp::modifierKeyState() instead.
   * var bControlPressed = App.modifierKeyState() & 0x04000000;
   * This deprecated function allows a script to determine what meta keys were pressed when the script was activated.
   * @returns true if the control button was pressed when the script was activated, otherwise false.
   */
declare function ctrlPressed (): boolean;

  /**
   * Prints expression to the output console (stderr), followed by a newline.
   * @example
   * debug( "Um... Houston?" );
   * @param expression - 
   */
declare function debug (expression: any): void;

  /**
   * Disconnects a signal from one object to a function (slot).
   * @seealso Signals and Slots
   * @param sender - The object emitting the signal.
   * @param signal - The signal being emitted.
   * @param functionRef - The function to disconnect from signal.
   */
declare function disconnect (sender: Object, signal: string, functionRef: Function): void;

  /**
   * Disconnects a signal from one object to a function (slot) on another object.
   * @seealso Signals and Slots
   * @param sender - The object emitting the signal.
   * @param signal - The signal being emitted.
   * @param receiver - The object that receives the signal.
   * @param slot - The method on receiver to disconnect from signal.
   */
declare function disconnect (sender: Object, signal: string, receiver: Object, slot: string): void;

  /**
   * Removes a scene node selection hold on scene selection without restoring the selection.
   * @seealso beginNodeSelectionHold()
   * @since 4.9.4.109
   */
declare function dropNodeSelectionHold (): void;

  /**
   * Scripts can call this function to drop a hold on the undo stack started by calling beginUndo().
   */
declare function dropUndo (): void;

  /**
   * Ends the current background progress tracking operation, and closes the background progress if no other background progress tracking operations are active.
   * @seealso Sample: Wait For Background Progress
   */
declare function finishBackgroundProgress (): void;

  /**
   * Ends the current progress tracking operation, and closes the progress dialog if no other progress tracking operations are active.
   * @seealso Sample: Progress
   */
declare function finishProgress (): void;

  /**
   * @returns The list of arguments passed to the script (if any) upon execution, otherwise an empty Array.
   * @seealso DzScript::execute( Array )
   */
declare function getArguments (): Array<unknown>;

  /**
   * This function provides access to the desktop widget. This can be useful to get the size of the machine's desktop.
   * @returns The desktop widget.
   */
declare function getDesktop (): QDesktopWidget;

  /**
   * This function converts an error code into a string message.
   * @returns A user-readable message that describes the error represented by the error code.
   * @param errCode - The Daz Studio error code.
   */
declare function getErrorMessage (errCode: DzError): string;

  /**
   * This function allows a script to get the object-parent of a QObject.
   * @returns The QObject parent of obj.
   * @param obj - The QObject to get the parent of.
   */
declare function getObjectParent (obj: QObject): QObject;

  /**
   * @returns The author of the current script (if any).
   */
declare function getScriptAuthor (): DzAuthor;

  /**
   * @returns The file name of the current script (if any).
   */
declare function getScriptFileName (): string;

  /**
   * @returns The file type that this script was saved out as.
   */
declare function getScriptType (): string;

  /**
   * @returns The version of the current script (if any).
   */
declare function getScriptVersionString (): string;

  /**
   * Includes the contents of scriptPath in the same context as the calling script. This function should only be called within the global scope of the script; it should not be called within a nested scope and it should not be called inline. As a safeguard against circular references, the script engine keeps an internal list of unique paths for included scripts; per script context, per execution. Each time the function is called, scriptPath is checked against the list to ensure that the path has only been included once within the context of the script.
   * @example
   * include( "MyFolder/MyScript.dse" );
   * oMyObject.myFunction();
   * @param scriptPath - The path of the script to include. The path is assumed to be relative to the ./scripts directory. Absolute paths are also supported.
   */
declare function include (scriptPath: string): void;

  /**
   * This function allows a script to test if two QObject derived variables point to the same instance.
   * @returns true if the pointers point to the same object, otherwise false.
   * @param ptr1 - The first object.
   * @param ptr2 - The second object.
   */
declare function pointersAreEqual (ptr1: QObject, ptr2: QObject): boolean;

  /**
   * Pauses execution of the script and allows the GUI thread time to process events.
   */
declare function processEvents (): void;

  /**
   * @returns true if one or more progress operations are currently being tracked, otherwise false.
   */
declare function progressIsActive (): boolean;

  /**
   * @returns true if the user has cancelled the current operation by pressing the 'Cancel' button on the progress dialog.
   */
declare function progressIsCancelled (): boolean;

  /**
   * Restores the scene selection to the view at last call to beginNodeSelectionHold().
   * @seealso beginNodeSelectionHold()
   * dropNodeSelectionHold()
   * @since 4.9.4.109
   */
declare function restoreNodeSelectionHold (): void;

  /**
   * Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
   * @example
   * setBusyCursor();
   * // ... do something ...
   * clearBusyCursor();
   */
declare function setBusyCursor (): void;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use DzApp::modifierKeyState() instead.
   * var bShiftPressed = App.modifierKeyState() & 0x02000000;
   * This deprecated function allows a script to determine what meta keys were pressed when the script was activated.
   * @returns true if the shift button was pressed when the script was activated, otherwise false.
   */
declare function shiftPressed (): boolean;

  /**
   * Pauses the script for the specified number of milliseconds without blocking the application event loop.
   * @example
   * print( new Date );
   * sleep( 6000 ); // 0.1 min
   * print( new Date );
   * @since 4.8.0.45
   * @param milliseconds - The duration, in milliseconds, to sleep.
   */
declare function sleep (milliseconds: number): void;

  /**
   * Displays a background progress bar to the user if one is not already being displayed and starts a progress tracking operation.
   * @seealso Sample: Background Progress
   * Sample: Wait For Background Progress
   * @param info - The string to display in the status bar as the current description of the operation.
   * @param [totalSteps=0] - The number of progress steps for the operation to be complete.
   * @param [isCancellable=false] - If true, the user is given the option to cancel the operation.
   */
declare function startBackgroundProgress (info: string, totalSteps?: number, isCancellable?: boolean): void;

  /**
   * Displays a progress dialog to the user if one is not already being displayed and starts a progress tracking operation.
   * @seealso Sample: Progress
   * @param info - The string to display in the progress dialog as the current description of the operation.
   * @param [totalSteps=0] - The number of progress steps for the operation to be complete.
   * @param [isCancellable=false] - If true, the user is given the option to cancel the operation.
   * @param [showTimeElapsed=false] - If true, the amount of time since the progress operation was started will be displayed in the dialog.
   */
declare function startProgress (info: string, totalSteps?: number, isCancellable?: boolean, showTimeElapsed?: boolean): void;

  /**
   * Steps the current background progress forward the given number of steps.
   * @param [numSteps=1] - The number of steps to move the progress indicator forward.
   */
declare function stepBackgroundProgress (numSteps?: number): void;

  /**
   * Steps the current progress dialog forward the given number of steps.
   * @seealso Sample: Progress
   * @param [numSteps=1] - The number of steps to move the progress indicator forward.
   */
declare function stepProgress (numSteps?: number): void;

  /**
   * Sets the current background progress to the given number of steps.
   * @seealso Sample: Wait For Background Progress
   * @param position - The number of steps to set as the current position for the progress indicator.
   */
declare function updateBackgroundProgress (position: number): void;

  /**
   * Sets the current progress dialog to the given number of steps.
   * @param position - The number of steps to set as the current position for the progress indicator.
   */
declare function updateProgress (position: number): void;

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gridlayout_dz
 * DAZScript wrapper for QGridLayout.
 * @remarks TODO: Add detailed description.
 */
interface DzGridLayout extends DzLayout
{

  /**
   * Adds the given layout to the items managed by this layout
   * @param layout - The layout to add to this layout
   * @param row - The row to insert the layout into.
   * @param col - The column to insert the layout into.
   * @param [rowSpan=1] - 
   * @param [colSpan=1] - The number of rows the layout should span (1 if not specified)
   */
  addLayout (layout: DzLayout, row: number, col: number, rowSpan?: number, colSpan?: number): void;

  /**
   * Deprecated
   * Use addLayout() instead
   * @param layout - 
   * @param fromRow - 
   * @param toRow - 
   * @param fromCol - 
   * @param toCol - 
   */
  addMultiCellLayout (layout: DzLayout, fromRow: number, toRow: number, fromCol: number, toCol: number): void;

  /**
   * Deprecated
   * Use addWidget() instead
   * @param widget - 
   * @param fromRow - 
   * @param toRow - 
   * @param fromCol - 
   * @param toCol - 
   */
  addMultiCellWidget (widget: DzWidget, fromRow: number, toRow: number, fromCol: number, toCol: number): void;

  /**
   * Adds the given widget to the items managed by this layout
   * @param widget - The widget to add to the layout
   * @param row? - 
   * @param col? - 
   * @param [rowSpan=1] - 
   * @param [colSpan=1] - The row to insert the widget into.
   */
  addWidget (widget: DzWidget, row?: number, col?: number, rowSpan?: number, colSpan?: number): void;

  /**
   * @returns The number of columns in this grid
   */
  colCount (): number;

  /**
   * @returns The the minimum width for the given column
   * @param col - 
   */
  colSpacing (col: number): number;

  /**
   * @returns The relative amount of stretch for the given column
   * @param col - 
   */
  colStretch (col: number): number;

  /**
   * @returns The number of rows in this grid
   */
  rowCount (): number;

  /**
   * @returns The the minimum height for the given row
   * @param row - 
   */
  rowSpacing (row: number): number;

  /**
   * @returns The relative amount of stretch for the given row
   * @param row - 
   */
  rowStretch (row: number): number;

  /**
   * Sets the minimum width for the given column
   * @param col - 
   * @param minSize - 
   */
  setColSpacing (col: number, minSize: number): void;

  /**
   * Sets the relative amount of stretch for the given column
   * @param col - 
   * @param stretch - 
   */
  setColStretch (col: number, stretch: number): void;

  /**
   * Sets the minimum height for the given row
   * @param row - 
   * @param minSize - 
   */
  setRowSpacing (row: number, minSize: number): void;

  /**
   * Sets the relative amount of stretch for the given row
   * @param row - 
   * @param stretch - 
   */
  setRowStretch (row: number, stretch: number): void;

}

declare var DzGridLayout:
{
  prototype: DzGridLayout;

  /**
   * Creates a grid layout that manages the children widgets of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzGridLayout;

  /**
   * Creates a grid layout as a sub-layout of the given layout
   * @param parent - 
   */
  new (parent: DzLayout): DzGridLayout;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupbox_dz
 * DAZScript wrapper for Q3GroupBox.
 * @remarks A DzGroupBox provides a group box frame, with an optional title and an ability to be checked like a DzCheckBox.
 * DzWidget::AlignmentFlags : alignment
 * Holds the alignment of the group box title.
 */
interface DzGroupBox extends DzWidget
{

  /**
   * Holds whether or not the group box is checkable.
   */
  checkable: boolean

  /**
   * Holds whether or not the group box is checked.
   */
  checked: boolean

  /**
   * Holds the number of columns in the group box.
   */
  columns: number

  /**
   * Holds whether or not the group box is painted flat (without a frame).
   */
  flat: boolean

  /**
   * Holds the margin between items inside the group box and the frame.
   */
  insideMargin: number

  /**
   * Holds the spacing between items inside the group box.
   * DzWidget::Orientation : orientation
   * Holds the orientation of the group box.
   */
  insideSpacing: number

  /**
   * Holds the title of the group box.
   */
  title: string

  /**
   * Adds an empty cell at the next free position. If space is greater than 0, the empty cell uses space as its fixed width (if Orientation is Horizontal) or height (if Orientation is Vertical).
   * @param space - 
   */
  addSpace (space: number): void;

  clicked: Signal<{
    /**
     * Emitted when the DzGroupBox's check box is clicked. Passes the new state of the check box.
     * @param [checked=false] - 
     */
  (checked?: boolean): void;
  }>;
  toggled: Signal<{
    /**
     * Emitted when the DzGroupBox's check box is toggled. Passes the new state of the check box.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
}

declare var DzGroupBox:
{
  prototype: DzGroupBox;

  /**
   * Creates a group box as a child of the given parent widget.
   * @param parent - The widget parent for the group box.
   */
  new (parent: DzWidget): DzGroupBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupnode_dz
 * Node for grouping multiple nodes in the scene.
 * @remarks This specialized DzNode is intended for grouping multiple nodes in the scene under one parent node. This allows easy transformation, visibility and/or selectability of the whole group.
 * The bounding box of the group is calculated by getting the world space bounding box of the immediate children of the group node. This allows better use of framing the group to see the whole of the contents of the group.
 */
interface DzGroupNode extends DzNode
{

}

declare var DzGroupNode:
{
  prototype: DzGroupNode;

  /**
   * TODO: Add description.
   */
  new (): DzGroupNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/guidepage_dz
 * Provides a script defined widget that participates in a widget stack.
 * @remarks Guide Pages are intended as a dynamic means of providing users with instructions on how to use a portion of the User Interface (UI), and/or provide widgets that simplify the process of getting started where an otherwise non-descript area of the UI would be displayed.
 * These pages are typically found within a DzPane via instances of filecontenttab_dz or productcontenttab_dz, or within an embedded instance of productassetsview_dz or associatedassetsview_dz.
 */
interface DzGuidePage extends QWidget
{

  /**
   * @returns The default path to the script to execute in order to create the UI in this page, sans extension.
   * @seealso setUiscript()
   * @since 4.10.0.41
   */
  defaultScriptPath (): string;

  /**
   * @returns true if the page is the current widget in the stack, otherwise false.
   */
  isCurrentPage (): boolean;

  /**
   * Sets whether the guide page is the current widget in the stack.
   * @param onOff - If true, the guide page is set as the current widget, otherwise the other widget in the stack is raised.
   */
  makeCurrentPage (onOff: boolean): void;

  /**
   * Loads the contents of the page by calling the current script. A special script context is provided to this script which exposes a global “getWidget()” function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
   * @seealso scriptFilename()
   * setUiScript()
   * @since 4.10.0.41
   */
  reload (): DzError;

  /**
   * @returns The full path to the script to execute in order to create the UI in this page.
   * @seealso setUiScript()
   * @since 4.10.0.41
   */
  scriptFilename (): string;

  /**
   * Loads the contents of the page by calling the script at scriptPath. A special script context is provided to this script which exposes a global “getWidget()” function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
   * @seealso DzApp.getAppDataPath()
   * DzApp.getResourcesPath()
   * Sample: Guide Pages
   * @param scriptPath - The path to the script to execute in order to create the UI in this page. The path can be absolute, relative to the resources folder in the application data path, or relative to the application resources path. If the path does not include an extension, an attempt is made to locate a script with one of the possible extensions (in dsa, dsb, dse, ds order) at the specified path until one is found.
   */
  setUiScript (scriptPath: string): DzError;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gzfile_dz
 * DAZ Script *.gz (gzip) file I/O class.
 * @remarks This class provides DAZ Script functionality for reading and writing *.gz ('gzipped') files. A high-level interface for zipping/unzipping files is provided with the functions zip() and unzip(). Also, a low-level interface is provided, allowing scripts to read and write compressed files directly.
 */
interface DzGZFile extends DzFileInfo
{

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   * '. When writing, the end-of-line terminators are translated to the local encoding.
   */
  /**
   * Open the file for reading only.
   */
  readonly ReadOnly: number;

  /**
   * Open the file for writing only.
   */
  readonly WriteOnly: number;

  /**
   * Open the file for reading and writing.
   */
  readonly ReadWrite: number;

  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;

  /**
   * If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
   */
  readonly Truncate: number;

  /**
   * When reading, the end-of-line terminators are translated to '
   */
  readonly Text: number;

  /**
   * Alias for Text.
   */
  readonly Translate: number;

  /**
   * Closes the file.
   */
  close (): void;

  /**
   * @returns true if the current file position is at the end of the file, otherwise false.
   */
  eof (): boolean;

  /**
   * Open the file with the given mode.
   * @returns true if the file was opened successfully, otherwise false.
   * @param accessMode - The access mode to open with.
   */
  open (accessMode: number): boolean;

  /**
   * Reads the entire file.
   * @returns The uncompressed file contents as a string.
   */
  read (): string;

  /**
   * Read one uncompressed character from the file buffer.
   * @returns The next uncompressed character read from the file.
   */
  readByte (): number;

  /**
   * Read an uncompressed line of text from the file.
   * @returns The next uncompressed file line as a string.
   */
  readLine (): string;

  /**
   * Uncompresses the entire file and splits it into lines of text.
   * @returns A list of uncompressed text lines from the file.
   */
  readLines (): Array<unknown>;

  /**
   * Unzips this file into the given filename.
   * @returns true if the file was successfully unzipped, otherwise false.
   * @param filename - The name of the file to write to.
   */
  unzip (filename: string): boolean;

  /**
   * Write a string to the file compression buffer.
   * @param data - The string to write to the file.
   * @param [length=-1] - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
   */
  write (data: string, length?: number): void;

  /**
   * Write a single byte (character) to the file compression buffer.
   * @param byte - The character to write to the file.
   */
  writeByte (byte: number): void;

  /**
   * Write a line of text to the file compression buffer.
   * @param data - The string to write to the file - a new line character will be written immediately following the string contents.
   */
  writeLine (data: string): void;

  /**
   * Replaces this file's contents with the gzipped contents of the given file. If this file does not exist, it will be created.
   * @returns true if the file was successfully zipped, otherwise false.
   * @param filename - The name of the file to replace this file's contents with.
   */
  zip (filename: string): boolean;

}

declare var DzGZFile:
{
  prototype: DzGZFile;

  /**
   * Creates a gzip file with the given file name.
   * @param file - The path of the *.gz file.
   */
  new (file: string): DzGZFile;

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   * '. When writing, the end-of-line terminators are translated to the local encoding.
   */
  /**
   * Open the file for reading only.
   */
  readonly ReadOnly: number;
  /**
   * Open the file for writing only.
   */
  readonly WriteOnly: number;
  /**
   * Open the file for reading and writing.
   */
  readonly ReadWrite: number;
  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;
  /**
   * If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
   */
  readonly Truncate: number;
  /**
   * When reading, the end-of-line terminators are translated to '
   */
  readonly Text: number;
  /**
   * Alias for Text.
   */
  readonly Translate: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hboxlayout_dz
 * DAZScript wrapper for QHBoxLayout.
 * @remarks Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout::LeftToRight.
 */
interface DzHBoxLayout extends DzBoxLayout
{

}

declare var DzHBoxLayout:
{
  prototype: DzHBoxLayout;

  /**
   * Creates a horizontal box layout that manages the children widgets of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzHBoxLayout;

  /**
   * Creates a horizontal box layout as a sub-layout of the given layout
   * @param parent - 
   */
  new (parent: DzLayout): DzHBoxLayout;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hbuttongroup_dz
 * DAZScript wrapper for Q3HButtonGroup.
 * @remarks DzButtonGroup with a horizontal layout.
 */
interface DzHButtonGroup extends DzButtonGroup
{

}

declare var DzHButtonGroup:
{
  prototype: DzHButtonGroup;

  /**
   * Creates a button group as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzHButtonGroup;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/header_dz
 * DAZScript wrapper for Q3Header.
 * @seealso DzListView::header()
 */
interface DzHeader extends DzWidget
{

  /**
   * Holds whether the header sections respond to mouse clicks.
   */
  clickEnabled: boolean

  /**
   * Holds whether the header sections can be moved.
   */
  movingEnabled: boolean

  /**
   * Holds whether the header sections can be resized.
   */
  resizeEnabled: boolean

  /**
   * Holds whether the header sections can be stretched.
   */
  stretchEnabled: boolean

  /**
   * @returns Whether or not the header for a given section responds to mouse clicks
   * @param section - 
   */
  isClickEnabled (section: number): boolean;

  /**
   * @returns Whether or not resizing for a given section is enabled
   * @param section - 
   */
  isResizeEnabled (section: number): boolean;

  /**
   * @returns Whether or not stretch for a given section is enabled
   * @param section - 
   */
  isStretchEnabled (section: number): boolean;

  /**
   * Sets whether or not the header for a given section responds to mouse clicks
   * @param enable - 
   * @param section - 
   */
  setClickEnabled (enable: boolean, section: number): void;

  /**
   * Sets whether or not resizing for a given section is enabled
   * @param enable - 
   * @param section - 
   */
  setResizeEnabled (enable: boolean, section: number): void;

  /**
   * Sets whether or not stretch for a given section is enabled
   * @param enable - 
   * @param section - 
   */
  setStretchEnabled (enable: boolean, section: number): void;

  clicked: Signal<{
    /**
     * Emitted when an item in the header is clicked
     * @param section - 
     */
  (section: number): void;
  }>;
  indexChange: Signal<{
    /**
     * Emitted when an item in the header changes index
     * @param section - 
     * @param fromIndex - 
     * @param toIndex - 
     */
  (section: number, fromIndex: number, toIndex: number): void;
  }>;
  pressed: Signal<{
    /**
     * Emitted when an item in the header is pressed
     * @param section - 
     */
  (section: number): void;
  }>;
  released: Signal<{
    /**
     * Emitted when an item in the header is released
     * @param section - 
     */
  (section: number): void;
  }>;
  sectionHandleDoubleClicked: Signal<{
    /**
     * Emitted when an item in the header is double clicked
     * @param section - 
     */
  (section: number): void;
  }>;
  sizeChange: Signal<{
    /**
     * Emitted when an item in the header changes size
     * @param section - 
     * @param oldSize - 
     * @param newSize - 
     */
  (section: number, oldSize: number, newSize: number): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/helpmgr_dz
 * Class that maintains the all the inline help documentation for DAZ Studio.
 * @remarks Use DzApp::getHelpMgr() to access.
 * See daz_studio_help_generator for information on how to populate the Help Manager.
 */
interface DzHelpMgr extends QObject
{

  /**
   * Opens the help browser at the given identifier.
   * @param identifier - 
   */
  browseToIdentifier (identifier: string): void;

  /**
   * Opens the help browser at the given keyword.
   * @param keyword - 
   */
  browseToKeyword (keyword: string): void;

  /**
   * Opens the given page in the help browser.
   * @param page - 
   */
  browseToPage (page: string): void;

  /**
   * Opens the help browser at the given url.
   * @param urlString - 
   */
  browseToUrl (urlString: string): void;

  /**
   * @returns The list of attributes for the help filter help keyword, or an empty list if the filter is not found.
   * @param name - The name of the help filter to get the attributes of.
   */
  findFilterAttributes (name: string): Array<unknown>;

  /**
   * TODO: Add description.
   * @param id - 
   */
  findIdentifierUrl (id: string): string;

  /**
   * @returns The url associated with the help keyword, or an empty url if the keyword is not found.
   * @param keyword - The keyword to find the associated url for.
   */
  findKeywordUrl (keyword: string): string;

  /**
   * @returns The description for the help item named label.
   * @param label - The label of the help item
   */
  getDescription (label: string): string;

  /**
   * @returns The list of attributes for the help filter at the given index.
   * @param which - The index of the help filter attributes to return.
   */
  getFilterAttributes (which: number): Array<unknown>;

  /**
   * @returns The name of the help filter at the given index.
   * @param which - The index of the help filter to return.
   */
  getFilterName (which: number): string;

  /**
   * @returns The group for the help item named label.
   * @param label - The label of the help item
   */
  getGroup (label: string): string;

  /**
   * @returns The root help contents item. The root contents item is usually not displayed, rather it serves to hold all the top-level help contents items.
   */
  getHelpContents (): DzHelpContentsItem;

  /**
   * @returns The help string text, named label.
   * @param label - The label of the help item
   */
  getHelpString (label: string): string;

  /**
   * @returns The help identifier at the given index.
   * @param which - The index of the help identifier to return.
   */
  getIdentifier (which: number): string;

  /**
   * @returns The url associated with the help identifier at the given index.
   * @param which - The index of the help identifier url to return.
   */
  getIdentifierUrl (which: number): string;

  /**
   * @returns The help keyword at the given index.
   * @param which - The index of the help keyword to return.
   */
  getKeyword (which: number): string;

  /**
   * @returns The url associated with the help keyword at the given index.
   * @param which - The index of the help keyword url to return.
   */
  getKeywordUrl (which: number): string;

  /**
   * @returns The number of help filters.
   */
  getNumFilters (): number;

  /**
   * @returns The number of help identifiers.
   */
  getNumIdentifiers (): number;

  /**
   * @returns The number of help keywords.
   */
  getNumKeywords (): number;

  /**
   * @returns The status tip text, named label.
   * @param label - The label of the help item
   */
  getStatusTip (label: string): string;

  /**
   * @returns The tool tip text, named label.
   * @param label - The label of the help item
   */
  getToolTip (label: string): string;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hgroupbox_dz
 * DAZScript wrapper for Q3HGroupBox.
 * @remarks A DzHGroupBox provides a DzGroupBox with a horizontal layout.
 */
interface DzHGroupBox extends DzGroupBox
{

}

declare var DzHGroupBox:
{
  prototype: DzHGroupBox;

  /**
   * Creates a group box as a child of the given parent widget.
   * @param parent - The widget parent for the group box.
   */
  new (parent: DzWidget): DzHGroupBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalmaterialassetfilter_dz
 * Class for saving DSON-based Hierarchical Material(s) Presets.
 * @remarks An asset save filter for saving a Hierarchical Material(s) Preset in the DSON format.
 * @seealso Sample: Save a Hierarchical Material(s) Preset
 */
interface DzHierarchicalMaterialAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzHierarchicalMaterialAssetFilter:
{
  prototype: DzHierarchicalMaterialAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzHierarchicalMaterialAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalposeassetfilter_dz
 * Class for saving DSON-based Hierarchical Pose Presets.
 * @remarks An asset save filter for saving a Hierarchical Pose Preset in the DSON format.
 * @seealso Sample: Save a Hierarchical Pose Preset
 */
interface DzHierarchicalPoseAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzHierarchicalPoseAssetFilter:
{
  prototype: DzHierarchicalPoseAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzHierarchicalPoseAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/image
 * DAZScript wrapper for QImage.
 * @remarks This is the DAZScript counterpart to the QImage type used in the DAZ Studio SDK.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Image extends QObject
{

  /**
   * Supported image formats.
   * @since 4.9.4.4
   */
  /**
   * The image is invalid.
   */
  readonly Format_Invalid: number;

  /**
   * The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
   */
  readonly Format_Mono: number;

  /**
   * The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
   */
  readonly Format_MonoLSB: number;

  /**
   * The image is stored using 8-bit indexes into a colormap.
   */
  readonly Format_Indexed8: number;

  /**
   * The image is stored using a 32-bit RGB format (0xffRRGGBB).
   */
  readonly Format_RGB32: number;

  /**
   * The image is stored using a 32-bit ARGB format (0xAARRGGBB).
   */
  readonly Format_ARGB32: number;

  /**
   * The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
   */
  readonly Format_ARGB32_Premultiplied: number;

  /**
   * The image is stored using a 16-bit RGB format (5-6-5).
   */
  readonly Format_RGB16: number;

  /**
   * The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
   */
  readonly Format_ARGB8565_Premultiplied: number;

  /**
   * The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
   */
  readonly Format_RGB666: number;

  /**
   * The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
   */
  readonly Format_ARGB6666_Premultiplied: number;

  /**
   * The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
   */
  readonly Format_RGB555: number;

  /**
   * The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
   */
  readonly Format_ARGB8555_Premultiplied: number;

  /**
   * The image is stored using a 24-bit RGB format (8-8-8).
   */
  readonly Format_RGB888: number;

  /**
   * The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
   */
  readonly Format_RGB444: number;

  /**
   * The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
   */
  readonly Format_ARGB4444_Premultiplied: number;

  /**
   * Holds whether or not the image has an alpha channel.
   */
  alphaBuffer: boolean

  /**
   * Holds the color depth of the image. (Read-Only)
   */
  depth: number

  /**
   * Holds the X resolution of the image.
   */
  dotsPerMeterX: number

  /**
   * Holds the Y resolution of the image.
   */
  dotsPerMeterY: number

  /**
   * Holds the format of the image.
   * @since 4.9.4.4
   */
  format: number

  /**
   * Holds the height of the image. (Read-Only)
   */
  height: number

  /**
   * Holds the number of colors in the image.
   */
  numColors: number

  /**
   * Holds the number of pixels to offset the image when positioning it.
   */
  offset: Point

  /**
   * Holds the number of pixels to offset the image when positioning it.
   */
  size: Size

  /**
   * Holds the width of the image. (Read-Only)
   */
  width: number

  /**
   * Gets a color value from the color table for the image only valid for.
   * @returns The RGB value of the color at the given index.
   * @param index - The index of the color to look up in the table.
   */
  color (index: number): Color;

  /**
   * @returns A copy of this image, where the pixels of this image are blended on top of other and the alpha of this image is reduced by the alpha of other.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeAtop (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the other color is darkened to reflect the color of this image. White in this image leaves the other color unchanged.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeColorBurn (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the other color is brightened to reflect the color of this image. Black in this image leaves the other color unchanged.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeColorDodge (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the darker color of this image and other is selected.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeDarken (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeDifference (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeExclusion (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the color of this image and other are multiplied or screened depending on the color of this image. A light color in this image will lighten the other color, whereas a dark color in this image will darken the other color.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeHardLight (other: Image, x?: number, y?: number): Image;

  /**
   * @returns A copy of this image, where the alpha of this image is reduced by the alpha of other.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeIn (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the lighter color of this image and other is selected.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeLighten (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the color of this image and other are multiplied together.
   * @attention Multiplying a color with white (1) leaves the color unchanged, while multiplying a color with black (0) produces black.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeMultiply (other: Image, x?: number, y?: number): Image;

  /**
   * @returns A copy of this image, where the alpha of this image is reduced by the inverse of the alpha of other.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeOut (other: Image, x?: number, y?: number): Image;

  /**
   * @returns A copy of this image, where the alpha of this image is used to blend it on top of other.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeOver (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the color of this image and other are multiplied or screened depending on other color. The other color is mixed with this color to reflect the lightness or darkness of other.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeOverlay (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the alpha/color of this image and other are added together.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositePlus (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the inverse color of this image and other are multiplied together.
   * @attention Screening a color with white (1) produces white, while screening a with black (0) leaves the color unchanged.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeScreen (other: Image, x?: number, y?: number): Image;

  /**
   * @returns An image where the color of this image and other are darkened or lightened depending on the color of this image.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeSoftLight (other: Image, x?: number, y?: number): Image;

  /**
   * @returns A copy of this image, where the alpha is reduced by the inverse of the alpha of other, is merged with other, and whose alpha is reduced by the inverse of this image alpha.
   * @since 4.10.0.120
   * @param other - The image to composite this image with.
   * @param [x=0] - The offset, in the horizontal direction, from the top left corner of other.
   * @param [y=0] - The offset, in the vertical direction, from the top left corner of other.
   */
  compositeXor (other: Image, x?: number, y?: number): Image;

  /**
   * Creates a copy of the image with the given color depth.
   * @returns The image converted to the new color depth.
   * @param depth - The color depth to convert the image to.
   */
  convertDepth (depth: number): Image;

  /**
   * Creates a copy of a portion of the image.
   * @returns A new copy of the specified area of the image.
   * @param x - The x position of the area to copy.
   * @param y - The y position of the area to copy.
   * @param w - The width of the area to copy.
   * @param h - The height of the area to copy.
   */
  copy (x: number, y: number, w: number, h: number): Image;

  /**
   * Creates a copy of the image.
   * @returns A new copy of the image.
   */
  copy (): Image;

  /**
   * Creates a copy of a portion of the image.
   * @returns A new copy of the specified area of the image.
   * @param rect - The area to copy.
   */
  copy (rect: Rect): Image;

  /**
   * Clears the image data and creates a new image with the given settings.
   * @param size - The new size for the image.
   * @param depth - The new color depth for the image.
   * @param [numColors=0] - The number of colors for the new image.
   */
  create (size: Size, depth: number, numColors?: number): void;

  /**
   * Clears the image data and creates a new image with the given settings.
   * @param w - The new width for the image.
   * @param h - The new height for the image.
   * @param depth - The new color depth for the image.
   * @param [numColors=0] - The number of colors for the new image.
   */
  create (w: number, h: number, depth: number, numColors?: number): void;

  /**
   * @returns A bounding rectangle that encloses the drawn text.
   * @since 4.10.0.121
   * @param x - The offset, in the horizontal direction, from the top left corner of the image to start drawing the (left of the) text.
   * @param y - The offset, in the vertical direction, from the top left corner of the image to start drawing the (top of the) text.
   * @param text - The text to draw.
   * @param font - The font to use when drawing the text.
   * @param color - The color to use when drawing the text.
   * @param [flags=0] - A bitwise OR of the following flags:   *         - DzWidget.AlignLeft   *         - DzWidget.AlignRight   *         - DzWidget.AlignHCenter   *         - DzWidget.AlignJustify   *         - DzWidget.AlignTop   *         - DzWidget.AlignBottom   *         - DzWidget.AlignVCenter   *         - DzWidget.AlignCenter   *         - DzWidget.TextSingleLine   *         - DzWidget.TextExpandTabs   *         - DzWidget.TextShowMnemonic   *         - DzWidget.TextWordWrap
   */
  drawText (x: number, y: number, text: string, font: Font, color: Color, flags?: number): Rect;

  /**
   * Fills the image with color.
   * @param color - The color to set the pixels of the image.
   */
  fill (color: Color): void;

  /**
   * @returns An image mask for the specified color.
   * @since 4.10.0.120
   * @param maskColor - The color to mask from this image.
   * @param [invert=false] - If true, the mask is inverted.
   * @param [tolerance=0] - The allowable amount of variation from the value of maskColor to consider as maskColor.
   */
  getColorMask (maskColor: Color, invert?: boolean, tolerance?: number): Image;

  /**
   * Inverts all pixels in the image.
   * @param [invertAlpha=true] - If the image has a 32 bit depth, and this is true, the alpha channel will also be inverted, otherwise the alpha channel is unaffected.
   */
  invertPixels (invertAlpha?: boolean): void;

  /**
   * Gets whether or not the image is Null.
   * @returns true if the image is Null (empty), otherwise .
   */
  isNull (): boolean;

  /**
   * Loads data for the image from a file.
   * @param filename - The name of the file to load into the image.
   */
  load (filename: string): void;

  /**
   * Loads data into the image from a byte array using the specified format.
   * @returns true if the data was loaded, otherwise false.
   * @since 4.10.0.88
   * @param data - The binary data to load into the image.
   * @param [format=“”] - The file format of the bytes in data; i.e. “PNG”.
   */
  loadFromData (data: ByteArray, format?: string): boolean;

  /**
   * Creates a copy of this image that has been mirrored vertically.
   * @returns The mirrored copy of the image.
   */
  mirror (): Image;

  /**
   * Creates a copy of this image that has been mirrored.
   * @returns The mirrored copy of the image.
   * @param horizontal - If true, the image will be mirrored horizontally.
   * @param vertical - If true, the image will be mirrored vertically.
   */
  mirror (horizontal: boolean, vertical: boolean): Image;

  /**
   * Gets the color value of an individual pixel.
   * @returns The value of the pixel at the given location.
   * @param x - The x position of the pixel.
   * @param y - The y position of the pixel.
   */
  pixel (x: number, y: number): Color;

  /**
   * Saves the image to a file.
   * @param filename - The name of the file to save the image to.
   */
  save (filename: string): void;

  /**
   * Creates a new image that is a scaled version of this image.
   * @returns The new scaled image.
   * @param width - The width of the new image.
   * @param height - The height of the new image.
   */
  scale (width: number, height: number): Image;

  /**
   * Creates a new image that is a scaled version of this image.
   * @returns The new scaled image.
   * @param size - The size of the new image.
   */
  scale (size: Size): Image;

  /**
   * @returns false if img is null, otherwise true.
   * @since 4.10.0.120
   * @param img - The image to set the alpha of this image from.
   */
  setAlphaFromImage (img: Image): boolean;

  /**
   * Sets the color value of a color in the color table.
   * @param index - The index of the color in the color table to change.
   * @param color - The new value for the color.
   */
  setColor (index: number, color: Color): void;

  /**
   * Sets the color value of the given pixel.
   * @param x - The x position of the pixel to change.
   * @param y - The y position of the pixel to change.
   * @param color - The new value for the pixel.
   */
  setPixel (x: number, y: number, color: Color): void;

  /**
   * Sets the image text to text and associates it with key.
   * If you want to store a single text block (i.e., a “comment” or description), you can either pass an empty key, or use a generic key like “Description”.
   * The image text is embedded into the image data when you call save(). Not all image formats support embedded text.
   * @seealso textKeys(), text()
   * @since 4.9.3.78
   * @param key - The name of the key to associate the embedded text with.
   * @param text - The text to embedd and associate with the key.
   */
  setText (key: string, text: string): void;

  /**
   * Creates a new image that is a scaled version of this image.
   * @returns The new scaled image.
   * @param size - The size of the new image.
   */
  smoothScale (size: Size): Image;

  /**
   * Creates a new image that is a scaled version of this image.
   * @returns The new scaled image.
   * @param width - The width of the new image.
   * @param height - The height of the new image.
   */
  smoothScale (width: number, height: number): Image;

  /**
   * Creates a copy of the image in which the Red and Blue values have been swapped.
   * @returns A BGR version of the image.
   */
  swapRGB (): Image;

  /**
   * @returns The embedded text associated with key. If key is an empty string, the whole embedded text is returned, with each key-text pair separated by a newline.
   * @seealso textKeys(), setText()
   * @since 4.9.3.78
   * @param [key=“”] - The name of the key to get the associated text of.
   */
  text (key?: string): void;

  /**
   * @returns The text keys for this image.
   * @seealso text()
   * @since 4.9.3.78
   */
  textKeys (): Array<unknown>;

}

declare var Image:
{
  prototype: Image;

  /**
   * Default Constructor.
   */
  new (): Image;

  /**
   * @since 4.9.4.4
   * @param width - The width of the image.
   * @param height - The height of the image.
   * @param format - The format of the image.
   */
  new (width: number, height: number, format: number): Image;

  /**
   * Copy Constructor.
   * @param image - The image to copy.
   */
  new (image: Image): Image;

  /**
   * @param filename - The name of the file to load the image's data from.
   */
  new (filename: string): Image;

  /**
   * Supported image formats.
   * @since 4.9.4.4
   */
  /**
   * The image is invalid.
   */
  readonly Format_Invalid: number;
  /**
   * The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
   */
  readonly Format_Mono: number;
  /**
   * The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
   */
  readonly Format_MonoLSB: number;
  /**
   * The image is stored using 8-bit indexes into a colormap.
   */
  readonly Format_Indexed8: number;
  /**
   * The image is stored using a 32-bit RGB format (0xffRRGGBB).
   */
  readonly Format_RGB32: number;
  /**
   * The image is stored using a 32-bit ARGB format (0xAARRGGBB).
   */
  readonly Format_ARGB32: number;
  /**
   * The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
   */
  readonly Format_ARGB32_Premultiplied: number;
  /**
   * The image is stored using a 16-bit RGB format (5-6-5).
   */
  readonly Format_RGB16: number;
  /**
   * The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
   */
  readonly Format_ARGB8565_Premultiplied: number;
  /**
   * The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
   */
  readonly Format_RGB666: number;
  /**
   * The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
   */
  readonly Format_ARGB6666_Premultiplied: number;
  /**
   * The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
   */
  readonly Format_RGB555: number;
  /**
   * The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
   */
  readonly Format_ARGB8555_Premultiplied: number;
  /**
   * The image is stored using a 24-bit RGB format (8-8-8).
   */
  readonly Format_RGB888: number;
  /**
   * The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
   */
  readonly Format_RGB444: number;
  /**
   * The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
   */
  readonly Format_ARGB4444_Premultiplied: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageblend_dz
 * The base class for objects that blend image layers together.
 * @remarks TODO: Add detailed description.
 */
interface DzImageBlend extends QObject
{

  /**
   * Used to blend src into dest.
   * @param dest - The destination image that the blending operation will add to.
   * @param src - The source image that is being blended into the destination image.
   */
  blendImage (dest: Image, src: Image): void;

  /**
   * @returns The description of the blending operation that will be displayed to the user.
   */
  getDescription (): string;

  blendMethodChanged: Signal<{
    /**
     * Emitted when the blend method has changed.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecolorlayer_dz
 * A single layer in a multi-layer texture image that is filled with a solid color.
 * @remarks TODO: Add detailed description.
 */
interface DzImageColorLayer extends DzImageLayer
{

  /**
   * The color for this layer.
   */
  color: Color

  /**
   * Sets the size for this color layer.
   * @param size - The new size to use.
   */
  setSize (size: Size): void;

  colorChanged: Signal<{
    /**
     * Emitted when the layer color changes
     * @param color - The new layer color
     */
  (color: Color): void;
  }>;
  sizeChanged: Signal<{
    /**
     * Emitted when the layer size changes
     * @param size - The new layer size
     */
  (size: Size): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecomponent_dz
 * A single layer in a multi-layer texture image.
 * @remarks TODO: Add detailed description.
 */
interface DzImageComponent extends QObject
{

  /**
   * The label for the layer.
   */
  label: string

  /**
   * Holds whether or not the layer contributes to the final image.
   */
  visible: boolean

  /**
   * TODO: Add description.
   * @param manip - 
   */
  addManipulator (manip: DzImageManip): void;

  /**
   * TODO: Add description.
   */
  freeImageData (): void;

  /**
   * @returns The image data of the component.
   */
  getImageData (): Image;

  /**
   * TODO: Add description.
   * @param idx - 
   */
  getManipulator (idx: number): DzImageManip;

  /**
   * TODO: Add description.
   */
  getNumManipulators (): number;

  /**
   * @returns The size of the image data of the component.
   */
  getSize (): Size;

  /**
   * TODO: Add description.
   * @param idx - 
   * @param manip - 
   */
  insertManipulator (idx: number, manip: DzImageManip): void;

  /**
   * TODO: Add description.
   * @param idx - 
   */
  removeManipulator (idx: number): boolean;

  /**
   * TODO: Add description.
   * @param manip - 
   */
  removeManipulator (manip: DzImageManip): boolean;

  /**
   * TODO: Add description.
   * @param layer - 
   * @param imageSize - 
   */
  toTextureLayer (layer: DzTextureLayer, imageSize: Size): boolean;

  imageDataChanged: Signal<{
    /**
     * Emitted when the image data for the component has been changed.
     */
  (): void;
  }>;
  labelChanged: Signal<{
    /**
     * Emitted when the label of the component has been changed.
     * @param label - 
     */
  (label: string): void;
  }>;
  manipulatorListChanged: Signal<{
    /**
     * Emitted when the list of manipulators for the component has been changed.
     */
  (): void;
  }>;
  visibilityChanged: Signal<{
    /**
     * Emitted when the visibility of the component has been changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagefilelayer_dz
 * A single layer in a multi-layer texture image that references an image file for its data.
 * @remarks TODO: Add detailed description.
 */
interface DzImageFileLayer extends DzImageLayer
{

  /**
   * The filename of the image that this layer references.
   */
  filename: string

  filenameChanged: Signal<{
    /**
     * Emitted when the file name associated with this layer changes
     * @param filename - The new file name
     */
  (filename: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagelayer_dz
 * A single layer in a multi-layer texture image.
 * @remarks TODO: Add detailed description.
 */
interface DzImageLayer extends DzImageComponent
{

  /**
   * @returns The blend mode for this image layer. The layer owns this object.
   */
  getBlendMode (): DzImageBlend;

  /**
   * @returns A user-readable description of the layer.
   */
  getDescription (): string;

  /**
   * @returns The mask for this image layer, NULL if the layer is not masked. The layer owns this object.
   */
  getMask (): DzImageMask;

  /**
   * Sets the blending mode for this image layer.
   * @param mode - The new blending mode for the image layer. The layer takes ownership of this object and deletes it when it is no longer used.
   */
  setBlendMode (mode: DzImageBlend): void;

  /**
   * Sets the mask for this image layer.
   * @param mask - A pointer to the new mask for the image layer. The layer takes ownership of this object and deletes it when it is no longer used. To clear the current mask, pass in a NULL pointer.
   */
  setMask (mask: DzImageMask): void;

  blendModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mode - 
     */
  (mode: DzImageBlend): void;
  }>;
  maskChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mask - 
     */
  (mask: DzImageMask): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemanip_dz
 * The base class for image manipulators.
 * @remarks Image manipulators are applied to an image layer before it is blended into the final image.
 */
interface DzImageManip extends QObject
{

  /**
   * @returns The description of the manipulator that will be displayed to the user.
   */
  getDescription (): string;

  /**
   * Applies the manipulator to img.
   * @param img - The image to apply the manipulation to.
   */
  manipulate (img: Image): void;

  manipulationChanged: Signal<{
    /**
     * Emitted when the value of the manipulator has changed and it needs to be reapplied.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemask_dz
 * A mask component in a multi-layer texture image.
 * @remarks TODO: Add detailed description.
 */
interface DzImageMask extends DzImageComponent
{

  /**
   * The filename of the image that this mask references.
   */
  filename: string

  filenameChanged: Signal<{
    /**
     * Emitted when the file name associated with this mask changes
     * @param filename - The new file name
     */
  (filename: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemgr_dz
 * Manager class for all loaded images.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getImageMgr().
 */
interface DzImageMgr extends QObject
{

  /**
   * @returns The size of the image, without actually reading the image contents. If the image format does not support this feature, this function returns an invalid size.
   * @since 4.9.3.82
   * @param imagePath - The full path of an image file to get the size of.
   */
  getImageSize (imagePath: string): Size;

  /**
   * Called prior to editing an image; pauses image preparation.
   */
  beginEditingImage (): void;

  /**
   * @returns A sharable object that stores information for a layered texture (image map) that is used in OpenGL.
   * @param name - The name of the layered texture to create.
   */
  createLayeredTexture (name: string): DzLayeredTexture;

  /**
   * This method is called from the 3D viewports to clear out any texture objects that are no longer being used. It has to be called only when a Studio OGL context is current.
   */
  deleteUnusedTextureObjects (): void;

  /**
   * @returns A currently loaded image object whose source matches the given image filename (if any), otherwise NULL.
   * @param fullPath - The full path of the image file to find a DzTexture instance for.
   */
  findImage (fullPath: string): DzTexture;

  /**
   * @returns The image with the given name (if any), otherwise NULL.
   * @param name - The name of the image to find.
   */
  findImageByName (name: string): DzTexture;

  /**
   * @returns The found layered texture (if any), otherwise null.
   * @param uri - The URI of the layered texture to find.
   */
  findLayeredTexture (uri: DzUri): DzLayeredTexture;

  /**
   * @returns The found texture (if any), otherwise null.
   * @param uri - The URI of the texture to find.
   */
  findTexture (uri: DzUri): DzTexture;

  /**
   * Called after editing an image; restarts image preparation.
   * @param img - The image to add to the preparation list.
   */
  finishedEditingImage (img: DzTexture): void;

  /**
   * @returns The image at the given index (if valid), otherwise NULL.
   * @param which - The index of the image to return.
   */
  getImage (which: number): DzTexture;

  /**
   * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
   * @param fullPath - The full path of the image file to get a DzTexture instance for.
   * @param creationGamma - The gamma to set on this DzTexture instance if this function creates it.
   */
  getImage (fullPath: string, creationGamma: number): DzTexture;

  /**
   * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
   * @param fullPath - The full path of the image file to get a DzTexture instance for.
   */
  getImage (fullPath: string): DzTexture;

  /**
   * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
   * @param fullPath - The full path of the image file to get a DzTexture instance for.
   * @param creationGamma - The gamma to set on this DzTexture instance if this function creates it.
   * @param creationType - The texture type to set on this DzTexture instance if this function creates it.
   */
  getImage (fullPath: string, creationGamma: number, creationType: number): DzTexture;

  /**
   * @returns The path of the last directory that images were loaded from.
   */
  getImageOpenPath (): string;

  /**
   * @returns The path of the last directory that images were saved to.
   */
  getImageSavePath (): string;

  /**
   * @returns The number of currently available images.
   */
  getNumImages (): number;

  /**
   * Creates a modified version of the given name if necessary to make it unique.
   * @returns The given name if it is already unique, otherwise a modified copy of the name that is unique.
   * @param name - The image name to make unique.
   */
  getUniqueImageName (name: string): string;

  /**
   * Called by the framework to notify the manager that the image has been prepared for the off-line renderer.
   * @param img - The image that has been prepared.
   * @param tempName - The new temporary name for the image.
   */
  imagePrepared (img: DzTexture, tempName: string): void;

  /**
   * Reads an image from a file.
   * @returns The loaded image.
   * @param filename - The name of the image file to load.
   */
  loadImage (filename: string): Image;

  /**
   * Reads an image from a file.
   * @returns DZ_NO_ERROR if the file was loaded successfully, otherwise an appropriate error code.
   * @param filename - The name of the image file to load.
   * @param img - The image that the file will be loaded into.
   * @param [importerIdx=-1] - The index of the importer to use to load the image. If less than zero, the manager will attempt to find an importer that can load the file.
   */
  loadImage (filename: string, img: Image, importerIdx?: number): DzError;

  /**
   * Forces a flush of the background image processing buffer.
   * @param r - The renderer that is about to render the scene.
   */
  prepareAllImages (r: DzRenderer): void;

  /**
   * Reloads any images whose source files have changed.
   */
  refresh (): void;

  /**
   * Writes an image to a file.
   * @returns DZ_NO_ERROR if the file was saved successfully, otherwise an appropriate error code.
   * @param filename - The name of the image file to save.
   * @param image - The image to save.
   * @param [exporterIdx=-1] - The index of the exporter to use to save the image. If less than zero, the manager will attempt to find an appropriate exporter based on the filename extension.
   */
  saveImage (filename: string, image: Image, exporterIdx?: number): DzError;

  /**
   * Sets the file path that a file open dialog will point to for images.
   * @param path - The folder path that the open image dialogs will default to.
   */
  setImageOpenPath (path: string): void;

  /**
   * Sets the file path that a file save dialog will point to for images.
   * @param path - The folder path that the save image dialogs will default to.
   */
  setImageSavePath (path: string): void;

  autoRefreshChanged: Signal<{
    /**
     * Emitted when the auto refresh state changes.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  imageListChanged: Signal<{
    /**
     * Emitted when an image is added to or removed from the list.
     */
  (): void;
  }>;
}

declare namespace DzImageMgr
{

  /**
   * @returns The size of the image, without actually reading the image contents. If the image format does not support this feature, this function returns an invalid size.
   * @since 4.9.3.82
   * @param imagePath - The full path of an image file to get the size of.
   */
  export function getImageSize (imagePath: string): Size;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageproperty_dz
 * A static (non-animatable) image property.
 * @remarks TODO: Add detailed description.
 */
interface DzImageProperty extends DzProperty
{

  /**
   * @returns The default map gamma.
   * @since 4.5.2.23
   */
  getDefaultMapGamma (): number;

  /**
   * @returns The default map texture type.
   * @since 4.6.4.30
   */
  getDefaultMapTextureType (): number;

  /**
   * @returns The texture modifier for this property (if any), otherwise NULL.
   * @since 4.6.4.80
   */
  getTextureModifier (): DzTextureModifier;

  /**
   * @returns The texture modifier flags.
   * @since 4.6.4.82
   */
  getTextureModifierFlags (): number;

  /**
   * @returns The image value of this property.
   */
  getValue (): DzTexture;

  /**
   * Sets the default map gamma.
   * @since 4.5.2.23
   * @param gamma - The gamma value to set.
   */
  setDefaultMapGamma (gamma: number): void;

  /**
   * Sets the default map texture type.
   * @since 4.6.4.30
   * @param type - The map texture type to set.
   */
  setDefaultMapTextureType (type: number): void;

  /**
   * Sets the texture modifier.
   * @since 4.6.4.80
   * @param txtMod - The texture modifier to set.
   */
  setTextureModifier (txtMod: DzTextureModifier): void;

  /**
   * Sets texture modifier flags for this property.
   * @since 4.6.4.82
   * @param flags - The texture modifier flags to set.
   */
  setTextureModifierFlags (flags: number): void;

  /**
   * Sets the texture value on this property.
   * @param val - The texture value to set.
   */
  setValue (val: DzTexture): boolean;

  /**
   * Sets the image value.
   * @param imgFile - The path of the image to set as the value; can be absolute or relative to a mapped directory.
   */
  setValue (imgFile: string): boolean;

  defaultMapGammaChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  defaultMapTextureTypeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  textureModifierChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  textureModifierFlagsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzImageProperty:
{
  prototype: DzImageProperty;

  /**
   * Default Constructor. Creates a non-user property.
   */
  new (): DzImageProperty;

  /**
   * @param name - The name of this property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, isUserProperty: boolean): DzImageProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagerenderhandler_dz
 * A render handler that renders into an image (or images).
 * @remarks Has an array of QImage objects for capturing data from a renderer - one image will be created for each frame rendered.
 */
interface DzImageRenderHandler extends DzRenderHandler
{

  /**
   * Holds whether each frame is written to file when finishFrame is called. The internal images is reset on each new frame.
   * @since 4.9.3.57
   */
  writeToFile: boolean

  /**
   * Begins rendering the given frame
   * @param frame - 
   */
  beginFrame (frame: number): void;

  /**
   * Starts a render
   */
  beginRender (): void;

  /**
   * Finishes rendering the current frame
   */
  finishFrame (): void;

  /**
   * Finishes the render and saves it out to file
   */
  finishRender (): void;

  /**
   * @returns true if a thumbnail is created, false otherwise
   */
  getCreateThumbnail (): boolean;

  /**
   * @returns The current frame's image. This image is reset at every call to beginFrame.
   */
  getCurrentFrameImage (): Image;

  /**
   * @returns The number of frames in the render
   */
  getNumFrames (): number;

  /**
   * @returns the size of the rendered image
   */
  getSize (): Size;

  /**
   * @returns The starting time of the render
   */
  getStartingTime (): DzTime;

  /**
   * Sets whether a thumbnail is created
   * @param createThumb - If true, a thumbnail is created
   */
  setCreateThumbnail (createThumb: boolean): void;

}

declare var DzImageRenderHandler:
{
  prototype: DzImageRenderHandler;

  /**
   * Create a new image render handler for rendering a single frame.
   * @example
   * // Get the active viewport and camera
   * var oActiveView = MainWindow.getViewportMgr().getActiveViewport();
   * var oCamera = oActiveView.get3DViewport().getCamera();
   *  
   * // Get the render options
   * var oRenderOptions = App.getRenderOptions();
   *  
   * // Create a handler
   * var oHandler = new DzImageRenderHandler( oRenderOptions.getImageSize(), 0, App.getTempPath() + "/test.jpg" );
   *  
   * // If we have a valid handler
   * if( oHandler ){
   * 	// Set the background color
   * 	oHandler.setBackColor( oActiveView.get3DViewport().background );
   *  
   * 	// Get the renderer
   * 	var oRenderer = oRenderOptions.getActiveRenderer();
   *  
   * 	// Render, using our handler and options
   * 	oRenderer.render( oHandler, oCamera, oRenderOptions );
   * }
   * @param size - The width & height of the rendered image.
   * @param renderTime - The time to render the frame at.
   * @param filename - The filename to save the image to.
   */
  new (size: Size, renderTime: DzTime, filename: string): DzImageRenderHandler;

  /**
   * Create a new image render handler for rendering a multiple frames.
   * @example
   * // Get the active viewport and camera
   * var oActiveView = MainWindow.getViewportMgr().getActiveViewport();
   * var oCamera = oActiveView.get3DViewport().getCamera();
   *  
   * // Get the render options
   * var oRenderOptions = App.getRenderOptions();
   *  
   * // Create a handler
   * var oHandler = new DzImageRenderHandler( oRenderOptions.getImageSize(), 0, 1, App.getTempPath() + "/test.jpg", false );
   *  
   * // Render if we have a handler
   * if( oHandler ){
   * 	var oRenderer = oRenderOptions.getActiveRenderer();
   * 	oRenderer.render( oHandler, oCamera, oRenderOptions );
   * }
   * @param size - The width & height of the rendered images.
   * @param startingTime - The time to start the render at.
   * @param numFrames - The number of frames to render.
   * @param filename - The name of the movie file or the base file name for the series.
   * @param isMovie - If true, the filename is expected to be a valid filename for saving a movie file, if false, it is expected to be a valid image name.
   */
  new (size: Size, startingTime: DzTime, numFrames: number, filename: string, isMovie: boolean): DzImageRenderHandler;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagetexture_dz
 * Class that handles sharing of data for image maps.
 * @remarks TODO: Add detailed description.
 */
interface DzImageTexture extends DzTexture, DzRefCountedItem
{

  /**
   * The author of the file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * The revision version of the asset file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * The asset id for this texture.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The modified date of the asset file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * The URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * The asset URI for this texture. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  assetModified: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzImageTexture:
{
  prototype: DzImageTexture;

  /**
   * TODO: Add description.
   * @param filename - 
   * @param gamma - 
   */
  new (filename: string, gamma: number): DzImageTexture;

  /**
   * TODO: Add description.
   * @param filename - 
   * @param gamma - 
   * @param textureType - 
   */
  new (filename: string, gamma: number, textureType: number): DzImageTexture;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importer_dz
 * Base class for all file importers.
 * @remarks TODO: Add detailed description.
 */
interface DzImporter extends DzFileIO
{

  /**
   * @returns A description of the importer that can be placed in a file type selection combobox (e.g. “Acclaim Skeleton”).
   */
  getDescription (): string;

  /**
   * @returns The i'th file extension (excluding the preceding dot) supported by this importer.
   * @param i - 
   */
  getExtension (i: number): string;

  /**
   * @returns The number of supported file extensions for this importer.
   */
  getNumExtensions (): number;

  /**
   * Imports from a file.
   * @returns DZ_NO_ERROR on success, or an error code if the import failed.
   * @param filename - The full path of the file to import
   * @param options - The options to use while importing the file
   */
  readFile (filename: string, options: DzFileIOSettings): DzError;

  /**
   * Imports from a file.
   * @returns DZ_NO_ERROR on success, or an error code if the import failed.
   * @param filename - Name of the file to import.
   */
  readFile (filename: string): DzError;

  /**
   * Test the given filename and file contents to see if this importer can read it.
   * @returns true if the importer can import the file, otherwise false.
   * @param filename - The name of the file to test.
   */
  recognize (filename: string): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importmgr_dz
 * Manager of all scene file importer classes.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getImportMgr().
 * @seealso Importer Settings
 */
interface DzImportMgr extends QObject
{

  /**
   * Calls recognize() on each of the importers and attempts to match an importer with the filename.
   * @returns true if an importer was found that can read the given file.
   * @param filename - The name of the file to try to find an importer for.
   */
  canImport (filename: string): boolean;

  /**
   * Calls recognize() on each of the importers and attempts to match an importer with the filename.
   * @returns A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
   * @param filename - The name of the file to try to find an importer for.
   */
  findImporter (filename: string): DzImporter;

  /**
   * Attempts to locate an importer class type by name.
   * @returns A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
   * @param className - The class name of the importer to find.
   */
  findImporterByClassName (className: string): DzImporter;

  /**
   * Calls recognize() on each of the importers and attempts to match an importer with the filename.
   * @returns The index of a matching importer, or -1 if none was found.
   * @param filename - The name of the file to try to find an importer for.
   */
  findImporterIndex (filename: string): number;

  /**
   * Gets the full import file name.
   * @returns The full import file name.
   */
  getImportFileName (): string;

  /**
   * Gets the default import directory - this is typically the last directory that the user imported a file from, and will be the directory that user will be taken to next time the file import dialog is displayed.
   * @returns The default import directory.
   */
  getImportPath (): string;

  /**
   * @returns The number of importers currently supported.
   */
  getNumImporters (): number;

  /**
   * @returns True if there is currently a file being imported, false otherwise.
   */
  isImporting (): boolean;

  /**
   * Populates the given filter with all the geometry types recognized by the import manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   * @param [makeAllFilesEntry=true] - If true, an extra filter is appended to the list that matches all the valid extensions.
   */
  makeGeometryFileFilter (filter: DzFileFilter, defaultFilter?: string, makeAllFilesEntry?: boolean): void;

  /**
   * Populates the given filter with all the types recognized by the import manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   * @param [makeAllFilesEntry=true] - If true, an extra filter is appended to the list that matches all the valid extensions.
   */
  makeImportFileFilter (filter: DzFileFilter, defaultFilter?: string, makeAllFilesEntry?: boolean): void;

  /**
   * Import the contents of a file into the scene.
   * @returns DZ_NO_ERROR if the file import was successfull.
   * @param filename - The name of the file to import. This must be the full filename including the path to the file.
   * @param [importerIdx=-1] - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropiate importer.
   */
  readFile (filename: string, importerIdx?: number): DzError;

  /**
   * Import the contents of a file into the scene.
   * @returns DZ_NO_ERROR if the file import was successfull.
   * @param filename - The name of the file to import. This must be the full filename including the path to the file.
   * @param importerIdx - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropiate importer.
   * @param options - The fileload filter for this type of import defaults to NULL
   */
  readFile (filename: string, importerIdx: number, options: DzFileIOSettings): DzError;

  /**
   * Reads the geometry file into a new shape.
   * @returns The new shape that the geometry was read into, NULL on failure.
   * @param filename - The full path of the file to import.
   * @param importerIdx - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
   * @param options - 
   */
  readGeometry (filename: string, importerIdx: number, options: DzFileIOSettings): shape_dz;

  /**
   * Reads the geometry file into a new shape.
   * @returns The new shape that the geometry was read into, NULL on failure.
   * @param filename - The full path of the file to import.
   * @param [importerIdx=-1] - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
   */
  readGeometry (filename: string, importerIdx?: number): shape_dz;

  /**
   * Sets the import file name - this is the full file name that file was import
   * @param fileName - The full file name .
   */
  setImportFileName (fileName: string): void;

  /**
   * Sets the default import directory - this is the directory that user will be taken to next time the file import dialog is displayed.
   * @param path - The new default import directory.
   */
  setImportPath (path: string): void;

  fileImported: Signal<{
    /**
     * Emitted after importing a file. This may not always be emitted after every fileImportStarting() signal if there were errors during file loading.
     * TODO: Add description.
     */
  (): void;
  }>;
  fileImportStarting: Signal<{
    /**
     * Emitted just before importing a file.
     * TODO: Add description.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infodivider_dz
 * Provides a divider bar with an information panel as the second widget.
 * @remarks DzInfoDivider places a divider bar between your widget and a tab bar of info tabs. This class is very similar (but not exactly like) DzDynamicDividerWgt. For situations where you want to control both sides of the divider bar it is recommended to use DzDynamicDividerWgt.
 */
interface DzInfoDivider extends QWidget
{

  /**
   * @returns The current divider position, or -1 if minimized.
   */
  getActualDividerPercent (): number;

  /**
   * @returns The info tabs for this divider bar. The info divider allows you to display tips, metadata, and other info relating to your product.
   */
  getInfoTabs (): DzInfoTabs;

  /**
   * @returns The preffered relative position of the divider.
   */
  getPreferredDividerPercent (): number;

  /**
   * @returns The minimized (toggled) state as a Number. * 0 = NotMinimized
   * 1 = HalfMinimized
   * 2 = FullMinimized
   */
  getToggleState (): number;

  /**
   * @returns true if the divider bar is in a minimized state, othewise false.
   * This method is the same as DzInfoDivider::isToggled()
   */
  isMinimized (): boolean;

  /**
   * @returns true if the divider bar is in a minimized state, otherwise false.
   * This method is the same as DzInfoDivider::isMinimized()
   */
  isToggled (): boolean;

  /**
   * Moves the divider distance pixels from the current location.
   * @param distance - The distance in pixels from the current location. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location to where it was dragged
   */
  moveDivider (distance: number): void;

  /**
   * Sets the location of the divider bar.
   * @param distance - The preffered relative position of the divider. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location possible.
   */
  setPreferredDividerPercent (distance: number): void;

  /**
   * Sets the toggled state of this divider bar.
   * @param state - The new state of this divider bar: * 0 = Not Minimized   *         - 1 = Half Minimized   *         - 2 = Full Minimized
   */
  setToggleState (state: number): void;

  /**
   * Toggles the second widget between fully closed and fully open.
   */
  toggleClosed (): void;

  /**
   * @returns true if this divider bar can be toggled, otherwise false.
   */
  toggleEnabled (): boolean;

  /**
   * Toggles the minimized state of the second widget. If toggling is disabled, this method has no effect. If either the first or second widget is null, toggling this method will also have no effect.
   */
  toggleMinimized (): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infotabs_dz
 * Tab bar that provides Tips, MetaData, and Info tabs…
 * @remarks Tab bar that provides Tips, MetaData, and Info tabs that can be used to provide various information about products.
 */
interface DzInfoTabs extends QWidget
{

  /**
   * @returns The index of the current tab
   */
  currentTab (): number;

  /**
   * Hides the widget responsible for displaying tab contents
   */
  hideStack (): void;

  /**
   * @returns true if the widget responsible for displaying tab contents is hidden, false otherwise
   */
  isStackHidden (): boolean;

  /**
   * Sets the current tab to which
   * @param which - The tab to make current
   */
  setCurrentTab (which: number): void;

  /**
   * Sets the file info for the given asset
   * @param asset - The asset file from which file info will be populated
   */
  setFileInfo (asset: DzAsset): void;

  /**
   * Sets file and meta data info for the given asset
   * @param asset - The asset file from which file and metadata info will be populated
   */
  setInfo (asset: DzAsset): void;

  /**
   * Sets metadata info for the given asset
   * @param asset - The asset file from which file info will be populated
   */
  setMetaInfo (asset: DzAsset): void;

  /**
   * Sets info for the given node
   * @param node - The node from which info will be populated
   */
  setNodeInfo (node: DzNode): void;

  /**
   * Sets file info from the given asset container
   * @param product - The product from which product info will be populated
   */
  setProductInfo (product: DzProductAssetContainer): void;

  /**
   * Sets the UI script responsible for displaying the contents of the Tips tab
   * @returns A DzError error code indicating the status of setting the UI File
   * @param path - The path to the UI script file to use
   */
  setTipUIScript (path: string): DzError;

  /**
   * Specifies whether the file tab is shown or not
   * @param onOff - If true, the file tab will be shown, otherwise it will be hidden
   */
  showFileTab (onOff: boolean): void;

  /**
   * Specifies whether the metadata tab is shown or not
   * @param onOff - If true, the metadata tab will be shown, otherwise it will be hidden
   */
  showMetaTab (onOff: boolean): void;

  /**
   * Specifies whether the node tab is shown or not
   * @param onOff - If true, the node tab will be shown, otherwise it will be hidden
   */
  showNodeTab (onOff: boolean): void;

  /**
   * Specifies whether the render tab is shown or not
   * @param onOff - If true, the render tab will be shown, otherwise it will be hidden
   */
  showRenderTab (onOff: boolean): void;

  /**
   * Shows the widget responsible for displaying the contents of the tabs
   */
  showStack (): void;

  /**
   * Specifies whether the store tab is shown or not
   * @since 4.8.1.79
   * @param onOff - If true, the store tab will be shown, otherwise it will be hidden
   */
  showStoreTab (onOff: boolean): void;

  keywordAddUniqueClicked: Signal<{
    /**
     * Emitted when a keyword is clicked and the CTRL modifier key is pressed.
     * @param keyword - The link text for the keyword clicked.
     */
  (keyword: string): void;
  }>;
  keywordSetClicked: Signal<{
    /**
     * Emitted when a keyword is clicked.
     * @param keyword - The link text for the keyword clicked.
     */
  (keyword: string): void;
  }>;
  renderApplyClicked: Signal<{
    /**
     * Emitted when the apply button on the render tab is clicked.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupitem_dz
 * A class for creating a single instance of another node in a group of like nodes.
 * @remarks This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject for inclusion in a group of like nodes. These instances are drawn the same as the target node except for transforms.
 */
interface DzInstanceGroupItem extends DzBase
{

  /**
   * Copies the transform values of the given nodes transform properties. Also copies rotation order.
   * @param node - The node to copy transform values from.
   */
  copyTransformFromNode (node: DzNode): void;

  /**
   * Copies the transform values to the given nodes transform properties. Also copies rotation order
   * @param node - The node to copy transform values from.
   */
  copyTransformToNode (node: DzNode): void;

  /**
   * @returns The endpoint values of this item.
   */
  getEndPointValues (): DzVec3;

  /**
   * @returns The general scale value of this item.
   */
  getGeneralScaleValue (): number;

  /**
   * @returns The label of this item.
   */
  getLabel (): string;

  /**
   * @returns The local-space position of the item at the current time.
   */
  getLocalPos (): DzVec3;

  /**
   * @returns The local-space rotation of the item at the current time.
   */
  getLocalRot (): DzQuat;

  /**
   * @returns The local-space scale of the item at the time.
   */
  getLocalScale (): DzMatrix3;

  /**
   * @returns A matrix representing the composed local transform for this item at the current time.
   */
  getLocalTransform (): DzMatrix3;

  /**
   * @returns The orientation of the item.
   */
  getOrientation (): DzQuat;

  /**
   * @returns The orientation values of this item, in degrees.
   */
  getOrientationValues (): DzVec3;

  /**
   * @returns The origin (centerpoint) values of this item.
   */
  getOriginValues (): DzVec3;

  /**
   * @returns The potion values of this item.
   */
  getPositionValues (): DzVec3;

  /**
   * @returns The rotation order of this item.
   */
  getRotationOrder (): DzRotationOrder;

  /**
   * @returns The rotation values of this item, in degrees.
   */
  getRotationValues (): DzVec3;

  /**
   * @returns The world-space position of the item.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSPos (tm: DzTime, defaultVal?: boolean): DzVec3;

  /**
   * @returns The world-space position of the item at the current time.
   */
  getWSPos (): DzVec3;

  /**
   * @returns The world-space rotation of the item.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSRot (tm: DzTime, defaultVal?: boolean): DzQuat;

  /**
   * @returns The world-space rotation of the item at the current time.
   */
  getWSRot (): DzQuat;

  /**
   * @returns The world-space scale of the item.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSScale (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * @returns The world-space scale of the item at the current time.
   */
  getWSScale (): DzMatrix3;

  /**
   * @returns A matrix representing the composed world-space transform for this item at the current time.
   */
  getWSTransform (): DzMatrix3;

  /**
   * @returns A matrix representing the composed world-space transform for this item.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSTransform (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * @returns The xyz scale values of this item.
   */
  getXYZScaleValues (): DzVec3;

  /**
   * @returns true if this node inherits scale from its parent, otherwise false.
   */
  inheritsScale (): boolean;

  /**
   * Sets the endpoint for this item.
   * @param x - The x position.
   * @param y - The y position.
   * @param z - The z position.
   */
  setEndPoint (x: number, y: number, z: number): void;

  /**
   * Sets whether or not this node inherits the scale of its parent.
   * @param onOff - If true, scaling the parent of this node will scale this node also.
   */
  setInheritScale (onOff: boolean): void;

  /**
   * Sets the label for this item.
   * @param label - The label to set.
   */
  setLabel (label: string): void;

  /**
   * Sets the orientation for this item.
   * @param x - The rotation, in degrees, on the x axis.
   * @param y - The rotation, in degrees, on the y axis.
   * @param z - The rotation, in degrees, on the z axis.
   */
  setOrientation (x: number, y: number, z: number): void;

  /**
   * Sets the origin for this item.
   * @param x - The x position.
   * @param y - The y position.
   * @param z - The z position.
   */
  setOrigin (x: number, y: number, z: number): void;

  /**
   * Sets the position for this item.
   * @param x - The x position.
   * @param y - The y position.
   * @param z - The z position.
   */
  setPosition (x: number, y: number, z: number): void;

  /**
   * Sets the rotation for this item.
   * @param x - The rotation, in degrees, on the x axis.
   * @param y - The rotation, in degrees, on the y axis.
   * @param z - The rotation, in degrees, on the z axis.
   */
  setRotation (x: number, y: number, z: number): void;

  /**
   * Sets the rotation order for this item.
   * @param order - The rotation order to set.
   */
  setRotationOrder (order: DzRotationOrder): void;

  /**
   * Sets the scale for this item.
   * @param x - The scale on the x axis.
   * @param y - The scale on the y axis.
   * @param z - The scale on the z axis.
   * @param genScale - The general scale.
   */
  setScale (x: number, y: number, z: number, genScale: number): void;

  localTransformChanged: Signal<{
    /**
     * Emitted when the local transform for this item has changed.
     */
  (): void;
  }>;
  transformChanged: Signal<{
    /**
     * Emitted when the transform for this item has changed.
     */
  (): void;
  }>;
}

declare var DzInstanceGroupItem:
{
  prototype: DzInstanceGroupItem;

  /**
   * TODO: Add description.
   */
  new (): DzInstanceGroupItem;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupnode_dz
 * A class for creating multiple instances of another node.
 * @remarks This class can be used to create a multiple instances of another DzNode (subclass) that also has a DzOobject. These instances are drawn the same as the target node except for transforms.
 */
interface DzInstanceGroupNode extends DzInstanceNode
{

  /**
   * Begin edit of this node.
   * @attention If adding or removing many items from this node it is more efficient to call beginItemEdit() do edits and call finishItemEdit() when done.
   * @seealso finishItemEdit()
   */
  beginItemEdit (): void;

  /**
   * @returns Removes all items from this node.
   */
  clearItems (): void;

  /**
   * @returns A new instance group item.
   */
  createItem (): DzInstanceGroupItem;

  /**
   * @returns The index for the given item or -1 if it does not belong to this node.
   * @param item - The item to get the index for.
   */
  findIndexForItem (item: DzInstanceGroupItem): number;

  /**
   * Finish edit of this node.
   * @seealso beginItemEdit()
   */
  finishItemEdit (): void;

  /**
   * @returns The group item at the given index or null if it does not exist.
   * @param index - The index of the item to get the group of.
   */
  getGroupItem (index: number): DzInstanceGroupItem;

  /**
   * @returns The number of group items.
   */
  getNumberOfGroupItems (): number;

  /**
   * @returns true if in beginItemEdit/finishItemEdit session
   */
  isEditingItems (): boolean;

  /**
   * @returns Removes and deletes the item at the given index.
   * @param index - The index of the item to remove.
   */
  removeItem (index: number): void;

}

declare var DzInstanceGroupNode:
{
  prototype: DzInstanceGroupNode;

  /**
   * Default Constructor.
   */
  new (): DzInstanceGroupNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancenode_dz
 * A class for creating a single instance of another node.
 * @remarks This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject. The instance is drawn the same as the target node except for transforms.
 */
interface DzInstanceNode extends DzNode
{

  /**
   * @returns The property controlling how the node is instanced (i.e., just the target or the target and its children).
   */
  getCopyModeControl (): DzEnumProperty;

  /**
   * @returns The current node being instanced by this node (if any), otherwise NULL.
   */
  getTarget (): DzNode;

  /**
   * @returns The property pointing at the target node.
   */
  getTargetControl (): DzNodeProperty;

  targetChanged: Signal<{
    /**
     * Emitted when the target for this instance has changed.
     */
  (): void;
  }>;
}

declare var DzInstanceNode:
{
  prototype: DzInstanceNode;

  /**
   * Default Constructor.
   */
  new (): DzInstanceNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2_dz
 * A two dimensional integer-based vector.
 * @seealso DzVec2
 * @since 4.6.4.88
 */
interface DzInt2 extends Object
{

  /**
   * Holds the height of this vector; an alias to the y value.
   */
  height: number

  /**
   * Holds the width of this vector; an alias for the x value.
   */
  width: number

  /**
   * Holds the x value of this vector.
   */
  x: number

  /**
   * Holds the y value of this vector.
   */
  y: number

  /**
   * Sets the value of each component to its respective absolute value.
   */
  abs (): void;

  /**
   * @returns The result of adding another vector to this vector.
   * @param vec - 
   */
  add (vec: DzInt2): DzInt2;

  /**
   * @returns The average of each component of this vector.
   * @since 4.9.3.118
   */
  average (): number;

  /**
   * Clamps each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamp (min: number, max: number): void;

  /**
   * @returns A copy of this vector where each component has been clamped to min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamped (min: number, max: number): DzInt2;

  /**
   * @returns A copy of this vector where each component has been clamped to max.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampedMax (max: number): DzInt2;

  /**
   * @returns A copy of this vector where each component has been clamped to min.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampedMin (min: number): DzInt2;

  /**
   * Clamps the maximum value for each component of this vector.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampMax (max: number): void;

  /**
   * Clamps the minimum value for each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampMin (min: number): void;

  /**
   * @returns The result of dividing this vector by another vector.
   * @param vec - 
   */
  divide (vec: DzInt2): DzInt2;

  /**
   * @returns true if both values are zero (0, 0), otherwise false.
   */
  isNull (): boolean;

  /**
   * @returns The length of this vector.
   */
  length (): number;

  /**
   * @returns The length of this vector, squared.
   */
  lengthSquared (): number;

  /**
   * Performs a linear interpolation between v1 and v2 based on the value of t.
   * @returns v1 if t = 0. v2 if t = 1. Values outside the 0 ⇐ t ⇐ 1 range may also be used to return an extrapolated vector.
   * @since 4.9.3.118
   * @param t - The value to evaluate.
   * @param v1 - 
   * @param v2 - The first vector.
   */
  linearInterp (t: number, v1: DzInt2, v2: DzInt2): DzInt2;

  /**
   * Sets this vector to (1, 1).
   */
  makeIdentity (): void;

  /**
   * Sets this vector to (0, 0).
   */
  makeZero (): void;

  /**
   * @returns The rectilinear distance of this vector.
   */
  manhattanLength (): number;

  /**
   * @returns A copy of this vector where each component has been modulated by min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulate (min: number, max: number): DzInt2;

  /**
   * Modulates each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulo (min: number, max: number): void;

  /**
   * @returns The result of multiplying this vector by another vector.
   * @param vec - 
   */
  multiply (vec: DzInt2): DzInt2;

  /**
   * Negates each component of this vector.
   */
  negate (): void;

  /**
   * Sets this vector to have a specific length in the current direction.
   * @seealso length()
   * makeZero()
   * @param length - The length to set.
   */
  setLength (length: number): void;

  /**
   * Sets the value of each component to its respective squared value.
   */
  square (): void;

  /**
   * @returns The result of subtracting another vector from this vector.
   * @param vec - 
   */
  subtract (vec: DzInt2): DzInt2;

  /**
   * Swaps the values of x and y.
   */
  transpose (): void;

}

declare var DzInt2:
{
  prototype: DzInt2;

  /**
   * Default Constructor. Creates an uninitialized vector.
   */
  new (): DzInt2;

  /**
   * Copy Constructor.
   * @param vec - 
   */
  new (vec: DzVec2): DzInt2;

  /**
   * Copy Constructor.
   * @param vec - 
   */
  new (vec: DzInt2): DzInt2;

  /**
   * Creates and inititializes this vector with an array of 2 integer values.
   * @param vals - 
   */
  new (vals: Array<unknown>): DzInt2;

  /**
   * Creates and inititializes this vector with 2 integers.
   * @param x - 
   * @param y - 
   */
  new (x: number, y: number): DzInt2;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2property_dz
 * An animatable integer property with 2 values.
 * @remarks This class provides an animatable integer property with 2 values that is stored and can be accessed as a DzInt2.
 */
interface DzInt2Property extends DzIntProperty
{

  /**
   * Adjust the value of the property based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param val - The 'final' value desired for the property.
   */
  adjustInt2Value (val: DzInt2): DzInt2;

  /**
   * Adjust the value of the property at the given time based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param tm - The scene time at which to adjust the value.
   * @param val - The 'final' value desired for the property.
   */
  adjustInt2Value (tm: DzTime, val: DzInt2): DzInt2;

  /**
   * @returns The default value of the property.
   */
  getDefaultInt2Value (): DzInt2;

  /**
   * TODO: Add description.
   */
  getInt2FollowValue (): DzInt2;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getInt2FollowValue (tm: DzTime): DzInt2;

  /**
   * @returns The value of the property at the current time.
   */
  getInt2Value (): DzInt2;

  /**
   * @returns The value of the property at the given time.
   * @param tm - The scene time to get the value for.
   */
  getInt2Value (tm: DzTime): DzInt2;

  /**
   * @returns The value of the i'th key in the property.
   * @param i - The index of the key to get the value for.
   */
  getKeyInt2Value (i: number): DzInt2;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the current time without any ERC link redirection.
   */
  getLocalInt2Value (): DzInt2;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the given time without any ERC link redirection.
   * @param tm - The scene time to get the local value for.
   */
  getLocalInt2Value (tm: DzTime): DzInt2;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
   * @param tm - The scene time to get the raw value for.
   */
  getRawInt2Value (tm: DzTime): DzInt2;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
   */
  getRawInt2Value (): DzInt2;

  /**
   * Sets the default value for this property.
   * @param val - The value to set the property to.
   */
  setDefaultInt2Value (val: DzInt2): void;

  /**
   * Sets the value for this property at the current time; or the default value if this property is not animatable.
   * @param val - The value to set.
   */
  setInt2Value (val: DzInt2): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set.
   */
  setInt2Value (tm: DzTime, val: DzInt2): void;

  /**
   * Sets the value of the i'th key.
   * @Attention You are responsible to ensure the key indices are within the valid range.
   * @param i - The index of the key to change.
   * @param val - The new value for the key.
   */
  setKeyInt2Value (i: number, val: DzInt2): void;

  /**
   * The same as calling setInt2Value( DzInt2 ).
   * @param val - 
   */
  setRawInt2Value (val: DzInt2): void;

  /**
   * The same as calling setInt2Value( DzTime, DzInt2 ).
   * @param tm - 
   * @param val - 
   */
  setRawInt2Value (tm: DzTime, val: DzInt2): void;

}

declare var DzInt2Property:
{
  prototype: DzInt2Property;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzInt2Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param initVal - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal: DzInt2): DzInt2Property;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzInt2Property;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactiveinstructionobject_dz
 * Encapsulates an Interactive Lesson Instruction object.
 * @since 4.6.4.24
 */
interface DzInteractiveInstructionObject extends QObject
{

  /**
   * @returns An Object, Array, Boolean, Number or String if the instruction has a member named name, otherwise null
   * @param name - 
   */
  getMember (name: string): Object;

  /**
   * @returns true if the object has a member named name, otherwise false
   * @param name - 
   */
  hasMember (name: string): boolean;

  /**
   * Removes the member/value named name from the instruction.
   * @param name - 
   */
  removeMember (name: string): void;

  /**
   * Sets the member name of the instruction to value. A valid value depends on the type of instruction and can be one of Boolean, Number, String or Array.
   * @param name - 
   * @param value - 
   */
  setMember (name: string, value: Object): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonmgr_dz
 * Manager that handles interactive lessons.
 * @remarks This class manages interactive lessons that the user can perform in the interface via lessonstripwgt_dz. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance from DzMainWindow via DzMainWindow::getInteractiveLessonMgr().
 */
interface DzInteractiveLessonMgr extends QObject
{

  /**
   * The width of the progress indicator displayed above the instruction box.
   */
  progressWidth: number

  /**
   * Starts the lesson using a list of instructions in a separate file.
   * @seealso dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param path - The absolute path to a file that provides a list of instructions for the lesson.
   */
  begin (path: string): void;

  /**
   * Starts the lesson using the instructions list.
   * @seealso dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param instructions - The list of instructions for the lesson.
   */
  begin (instructions: Array<unknown>): void;

  /**
   * @returns The index of the current instruction within the lesson.
   */
  currentIndex (): number;

  /**
   * @returns The path of the current lesson.
   */
  currentPath (): string;

  /**
   * @returns The query of the current instruction within the lesson.
   */
  currentQuery (): boolean;

  /**
   * TODO: Add description.
   */
  currentQuery (): number;

  /**
   * TODO: Add description.
   */
  currentQuery (): string;

  /**
   * @returns The type of the current instruction within the lesson.
   */
  currentType (): string;

  /**
   * @returns A string representation of an “action” type instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param classname - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getActionInstruction (classname: string, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of an “activity” type instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param activity - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getActivityInstruction (activity: string, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of a “display” type instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param info - 
   * @param [button=“”] - 
   */
  getDisplayInstruction (info: string, button?: string): string;

  /**
   * @returns A string representation of an instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param type - 
   * @param query - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getInstruction (type: string, query: ByteArray, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of an instruction if the type is valid, otherwise an empty string.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param type - 
   * @param query - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getInstruction (type: string, query: string, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of an instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param type - 
   * @param query - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getInstruction (type: string, query: boolean, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of an instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param type - 
   * @param query - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getInstruction (type: string, query: number, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of an “layout” type instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param layout - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getLayoutInstruction (layout: string, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * @returns A string representation of a “widget” type instruction.
   * @seealso JSON::parse()
   * dzscript{api_reference/samples/education/interactive_lessons/start, Interactive Lessons}
   * @param widgetPath - 
   * @param info - 
   * @param [tag=“”] - 
   * @param [locateOnly=false] - 
   */
  getWidgetInstruction (widgetPath: string, info: string, tag?: string, locateOnly?: boolean): string;

  /**
   * TODO: Add description.
   */
  instructionTypes (): Array<unknown>;

  /**
   * @returns true if the lesson is currently running, otherwise false.
   */
  isRunning (): boolean;

  /**
   * TODO: Add description.
   */
  iterate (): void;

  /**
   * Skips the next instruction in the lesson.
   */
  skip (): void;

  /**
   * Stops the lesson.
   */
  stop (): void;

  skipped: Signal<{
    /**
     * Emitted when an instruction in an interactive lesson has been skipped.
     */
  (): void;
  }>;
  started: Signal<{
    /**
     * Emitted when an interactive lesson has started.
     */
  (): void;
  }>;
  stepped: Signal<{
    /**
     * Emitted when an interactive lesson has stepped to the next instruction.
     */
  (): void;
  }>;
  stopped: Signal<{
    /**
     * Emitted when an interactive lesson is stopped.
     * @param success - Whether or not the lesson stopped because it has reached the end.
     */
  (success: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonobject_dz
 * Encapsulates an Interactive Lesson object.
 * @since 4.6.4.24
 */
interface DzInteractiveLessonObject extends QObject
{

  /**
   * @returns A new DzInteractiveInstructionObject appended to the end of the interactive lesson.
   */
  appendInstruction (): DzInteractiveInstructionObject;

  /**
   * @returns The number of instructions in the interactive lesson.
   */
  count (): number;

  /**
   * @returns The index of the current instruction in the interactive lesson.
   */
  currentIndex (): number;

  /**
   * @returns A new DzInteractiveInstructionObject inserted into the interactive lesson at index position.
   * @param index - 
   */
  insertInstruction (index: number): DzInteractiveInstructionObject;

  /**
   * @returns The instruction at index in the interactive lesson.
   * @param index - 
   */
  instructionAt (index: number): DzInteractiveInstructionObject;

  /**
   * @returns The next instruction in the interactive lesson, or NULL if the last instruction.
   */
  nextInstruction (): DzInteractiveInstructionObject;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intproperty_dz
 * An animatable integer property.
 * @remarks TODO: Add detailed description.
 */
interface DzIntProperty extends DzNumericProperty
{

  /**
   * Adjust the value of the property based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param val - The 'final' value desired for the property.
   */
  adjustValue (val: number): number;

  /**
   * Adjust the value of the property at the given time based on the contribution of property controllers.
   * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
   * @param tm - The scene time at which to adjust the value.
   * @param val - The 'final' value desired for the property.
   */
  adjustValue (tm: DzTime, val: number): number;

  /**
   * @returns The default value of the property.
   */
  getDefaultValue (): number;

  /**
   * @returns The default value of this property as a double precision value.
   */
  getDoubleDefaultValue (): number;

  /**
   * @returns The value of this property as a double at the given time.
   * @param tm? - The scene time to get the value for.
   */
  getDoubleValue (tm?: DzTime): number;

  /**
   * @returns The value of the i'th key in the property.
   * @param i - The index of the key to get the value for.
   */
  getKeyValue (i: number): number;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the current time without any ERC link redirection.
   */
  getLocalValue (): number;

  /**
   * This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
   * @returns The value of the property at the given time without any ERC link redirection.
   * @param tm - The scene time to get the local value for.
   */
  getLocalValue (tm: DzTime): number;

  /**
   * @returns The maximum allowable value of the property.
   */
  getMax (): number;

  /**
   * @returns The minimum allowable value of the property.
   */
  getMin (): number;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
   * @param tm - The scene time to get the raw value for.
   */
  getRawValue (tm: DzTime): number;

  /**
   * This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
   * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
   */
  getRawValue (): number;

  /**
   * @returns The sensitivity setting for this property.
   */
  getSensitivity (): number;

  /**
   * @returns The value of the property at the given time.
   * @param tm - The scene time to get the value for.
   */
  getValue (tm: DzTime): number;

  /**
   * @returns The value of the property at the current time.
   */
  getValue (): number;

  /**
   * Sets the default value for this property.
   * @param val - The value to set as the default for this property.
   */
  setDefaultValue (val: number): void;

  /**
   * Truncates a double precision value to an integer and sets the default value.
   * @param val - The value to set as the default for this property.
   */
  setDoubleDefaultValue (val: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable; truncates a double precision value to an integer.
   * @param tm - The scene time to set the value for.
   * @param val? - The value to set for this property.
   */
  setDoubleValue (tm: DzTime, val?: number): void;

  /**
   * Sets the value of the i'th key.
   * @Attention You are responsible to ensure the key index is within the valid range.
   * @param keyIndex - 
   * @param val - The index of the key to set the value for.
   */
  setKeyValue (keyIndex: number, val: number): void;

  /**
   * Set the maximum allowable value.
   * @param max - The maximum value to set.
   */
  setMax (max: number): void;

  /**
   * Set the mininimum allowable value.
   * @param min - The minimum value to set.
   */
  setMin (min: number): void;

  /**
   * Set the mininimum and maximum allowable values.
   * @param min - The minimum value to set.
   * @param max - The maximum value to set.
   */
  setMinMax (min: number, max: number): void;

  /**
   * Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
   * @param sens - The value to set.
   */
  setSensitivity (sens: number): void;

  /**
   * Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
   * @param tm - The scene time to set the value at.
   * @param val - The value to set.
   */
  setValue (tm: DzTime, val: number): void;

  /**
   * Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
   * @param val - The value to set.
   */
  setValue (val: number): void;

}

declare var DzIntProperty:
{
  prototype: DzIntProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzIntProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param [initVal=0] - Sets the default value of this property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal?: number): DzIntProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intslider_dz
 * DAZScript integer (whole number) slider widget.
 * @remarks A DzIntSlider provides a control that allows a user to adjust a bounded integer value.
 */
interface DzIntSlider extends DzWidget
{

  /**
   * Holds whether or not the slider obeys its limits. false by default.
   */
  clamped: boolean

  /**
   * Holds whether or not the slider text is displayed as a percentage value. false by default.
   */
  displayAsPercent: boolean

  /**
   * If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
   */
  indeterminate: boolean

  /**
   * Holds the label text for the slider.
   */
  label: string

  /**
   * Holds whether or not the slider's label is visible.
   */
  labelVisible: boolean

  /**
   * Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
   */
  max: number

  /**
   * Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
   */
  min: number

  /**
   * Holds the sensitivity of the slider.
   */
  sensitivity: number

  /**
   * Holds the text of the slider. (Read Only)
   */
  text: string

  /**
   * Holds whether or not the slider text is editable by the user. false by default.
   */
  textEditable: boolean

  /**
   * Holds whether or not the slider text is visible to the user. true by default.
   */
  textVisible: boolean

  /**
   * Holds the current value of the slider.
   */
  value: number

  editEnd: Signal<{
    /**
     * Emitted when the user releases the slider.
     */
  (): void;
  }>;
  editStart: Signal<{
    /**
     * Emitted when the user starts dragging the slider.
     */
  (): void;
  }>;
  valueChanged: Signal<{
    /**
     * Emitted when the value of the slider changes, passes the new value.
     * @param value - 
     */
  (value: number): void;
  }>;
}

declare var DzIntSlider:
{
  prototype: DzIntSlider;

  /**
   * Creates a slider as a child of the given parent widget.
   * @param parent - The widget parent for the slider.
   */
  new (parent: DzWidget): DzIntSlider;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/invertmanip_dz
 * A manipulator that inverts the color channels of an image layer.
 * @remarks TODO: Add detailed description.
 */
interface DzInvertManip extends DzImageManip
{

  /**
   * TODO: Add description.
   */
  on: boolean

  /**
   * @returns true if the image's colors will be inverted, otherwise false.
   */
  isOn (): boolean;

  /**
   * Sets whether or not the invert manipulator is applied.
   * @param onOff - If true, the manipulator is applied, if false, the image's colors are not inverted.
   */
  setOn (onOff: boolean): void;

}

declare var DzInvertManip:
{
  prototype: DzInvertManip;

  /**
   * Holds whether or not the manipulater is active
   * Default Constructor
   * @param [onOff=false] - 
   */
  new (onOff?: boolean): DzInvertManip;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/irayrenderer_dz
 * The NVIDIA Iray renderer.
 * @remarks Implements a Physically Based Rendering (PBR) interface for the scene to render itself through the NVIDIA Iray renderer.
 */
interface DzIrayRenderer extends DzRenderer
{

  /**
   * @returns The element that holds the properties for this renderer.
   */
  getPropertyHolder (): DzElement;

  /**
   * @returns true if this renderer is currently performing an interactive progressive render, otherwise false.
   */
  isIPRRendering (): boolean;

}

declare var DzIrayRenderer:
{
  prototype: DzIrayRenderer;

  /**
   * Default Constructor.
   */
  new (): DzIrayRenderer;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/label_dz
 * DAZScript wrapper for QLabel.
 * @remarks This class provides text or image display.
 */
interface DzLabel extends DzWidget
{

  /**
   * Enumerated values that describe how the text string is interpreted.
   * @since 4.9.3.93
   */
  /**
   * The text string is interpreted as a plain text.
   */
  readonly PlainText: number;

  /**
   * The text string is interpreted as a rich text.
   */
  readonly RichText: number;

  /**
   * The text is interpreted as automatically.
   */
  readonly AutoText: number;

  /**
   * Holds the alignment of the text displayed in the label.
   */
  alignment: number

  /**
   * Holds the name of the text style used to draw the label on this label.
   * @since 4.10.0.22
   */
  elideMode: number

  /**
   * Holds whether or not text is selected. (Read Only)
   */
  hasSelectedText: boolean

  /**
   * Holds the label's indent in pixels from its current alignment.
   */
  indent: number

  /**
   * Holds whether or not external links will be opened when clicked.
   */
  openExternalLinks: boolean

  /**
   * The pixmap shown on the label. If the pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. undefined if no pixmap is set.
   */
  pixmap: Pixmap

  /**
   * TODO: Add description.
   */
  primitive: string

  /**
   * Holds whether or not the contents of the label are scaled to fill the available space.
   */
  scaledContents: boolean

  /**
   * Holds the text that is currently selected. (Read Only)
   */
  selectedText: string

  /**
   * Holds the text displayed in the label.
   */
  text: string

  /**
   * Holds the value that is used to determine if the text string should be interpreted as plain, rich or log text.
   * DzWidget::TextInteractionFlags : textInteractionFlags
   * Holds the value that is used to determine how the label reacts to user input.
   */
  textFormat: number

  /**
   * Holds the name of the primitive element used to draw this label.
   * @since 4.10.0.22
   */
  textStyle: string

  /**
   * Holds whether or not the text is wrapped where necessary; i.e., word-breaks.
   */
  wordWrap: boolean

  /**
   * @returns The buddy widget for the label, undefined if none.
   */
  buddy (): DzWidget;

  /**
   * Clears the text displayed in the label.
   */
  clear (): void;

  /**
   * Sets the buddy widget for this label.
   * @param buddy - The widget to set.
   */
  setBuddy (buddy: DzWidget): void;

  elideModeChanged: Signal<{
    /**
     * @since 4.10.0.22
     * @param mode - 
     */
  (mode: number): void;
  }>;
  primitiveChanged: Signal<{
    /**
     * @since 4.10.0.22
     * @param name - 
     */
  (name: string): void;
  }>;
  textFormatChanged: Signal<{
    /**
     * TODO: Add description.
     * @param format - 
     */
  (format: number): void;
  }>;
  textInteractionFlagsChanged: Signal<{
    /**
     * @since 4.10.0.22
     * @param flags - 
     */
  (flags: number): void;
  }>;
  textStyleChanged: Signal<{
    /**
     * @since 4.10.0.22
     * @param name - 
     */
  (name: string): void;
  }>;
}

declare var DzLabel:
{
  prototype: DzLabel;

  /**
   * Holds the elide mode to be used for the text on this label.
   * @since 4.10.0.22
   * Creates a label as a child of the given parent widget.
   * @param parent - The widget parent for the label.
   */
  new (parent: DzWidget): DzLabel;

  /**
   * Enumerated values that describe how the text string is interpreted.
   * @since 4.9.3.93
   */
  /**
   * The text string is interpreted as a plain text.
   */
  readonly PlainText: number;
  /**
   * The text string is interpreted as a rich text.
   */
  readonly RichText: number;
  /**
   * The text is interpreted as automatically.
   */
  readonly AutoText: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layerassetfilter_dz
 * Class for saving DSON-based Layered Image(s) Presets.
 * @remarks An asset save filter for saving a Layered Image(s) Preset in the DSON format.
 * @seealso Sample: Save a Layered Image(s) Preset
 */
interface DzLayerAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzLayerAssetFilter:
{
  prototype: DzLayerAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzLayerAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredimage_dz
 * Class that implements multi-layered images.
 * @remarks This class uses explicit sharing to make it very efficient to copy. This does, however, mean that modifying one copy of the image modifies all copies. DzLayeredImage does not currently support detach() or copy() functions for creating unique instances or deep copies.
 */
interface DzLayeredImage extends DzBase
{

  /**
   * Add a layer to the image.
   * @param layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
   */
  addLayer (layer: DzImageLayer): void;

  /**
   * @returns An image that is the final result of merging all the visible layers in the image.
   * @param [freeMem=false] - If true, any image layers loaded from file will be unloaded immediately after flattening. They will have to be re-loaded again for future flattening operations.
   */
  getFlattenedImage (freeMem?: boolean): Image;

  /**
   * @returns The layer at index which. This object is owned by the image.
   * @param which - 
   */
  getLayer (which: number): DzImageLayer;

  /**
   * @returns The number of layers in this image.
   */
  getLayerCount (): number;

  /**
   * @returns The size of the canvas for this image.
   */
  getSize (): Size;

  /**
   * Insert a layer at a specific index.
   * @param layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
   * @param idx - The index in the list to insert the layer at.
   */
  insertLayer (layer: DzImageLayer, idx: number): void;

  /**
   * Adjust layer order.
   * @param from - The index of the layer to move.
   * @param to - The index in the list to move the layer to.
   */
  moveLayer (from: number, to: number): void;

  /**
   * Remove the specified layer.
   * @returns true if the layer was removed from the image, otherwise false.
   * @param layer - The layer to remove from the image. The layer will be deleted if it is owned by the image.
   */
  removeLayer (layer: DzImageLayer): boolean;

  /**
   * Replace a layer with a new layer.
   * @returns true if the layer was successfully replaced, otherwise false.
   * @param oldLayer - A pointer to the layer to remove from the image. The layer will be deleted if it is owned by the image.
   * @param newLayer - The new layer to add to the image in place of the old layer. The image takes ownership of this object and deletes it when it is no longer used.
   */
  replaceLayer (oldLayer: DzImageLayer, newLayer: DzImageLayer): boolean;

  /**
   * Sets the size of the image's canvas.
   * @param size - The new size for the image's canvas.
   */
  setSize (size: Size): void;

  /**
   * @returns true if the image was successfully copied to img, otherwise false.
   * @param img - The layered texture to copy/convert the layered image into.
   */
  toLayeredTexture (img: DzLayeredTexture): boolean;

  layerListChanged: Signal<{
    /**
     * Emits a signal when the list of layers has changed.
     */
  (): void;
  }>;
  sizeChanged: Signal<{
    /**
     * Emits a signal that the size of canvas has changed.
     * @param size - The new size of the canvas.
     */
  (size: Size): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredtexture_dz
 * Class that handles sharing of data for layered image maps.
 * @remarks This is a sharable object that stores information for a layered texture (image map) that is used in OpenGL. Do not create a layered texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 */
interface DzLayeredTexture extends DzTexture, DzRefCountedItem
{

  /**
   * The author of the file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * The revision version of the asset file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * The asset id for this texture.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The modified date of the asset file for this texture. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * The URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * The asset URI for this texture. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  /**
   * The size of the texture.
   */
  size: boolean

  /**
   * TODO: Add description.
   * @param layer - 
   */
  addLayer (layer: DzTextureLayer): void;

  /**
   * TODO: Add description.
   */
  beginEditing (): void;

  /**
   * TODO: Add description.
   * @param texture - 
   */
  copyFrom (texture: DzLayeredTexture): void;

  /**
   * TODO: Add description.
   * @param name - 
   */
  createLayer (name: string): DzTextureLayer;

  /**
   * TODO: Add description.
   */
  endEditing (): void;

  /**
   * TODO: Add description.
   * @param layer - 
   */
  findLayer (layer: DzTextureLayer): number;

  /**
   * TODO: Add description.
   * @param index - 
   */
  getLayer (index: number): DzTextureLayer;

  /**
   * TODO: Add description.
   */
  getNumLayers (): number;

  /**
   * TODO: Add description.
   */
  getSourceDSI (): string;

  /**
   * TODO: Add description.
   * @param index - 
   * @param layer - 
   */
  insertLayer (index: number, layer: DzTextureLayer): void;

  /**
   * TODO: Add description.
   * @param fromIndex - 
   * @param toIndex - 
   */
  moveLayer (fromIndex: number, toIndex: number): boolean;

  /**
   * TODO: Add description.
   */
  refeshLayeredTexture (): void;

  /**
   * TODO: Add description.
   */
  removeAllLayers (): void;

  /**
   * TODO: Add description.
   * @param index - 
   */
  removeLayer (index: number): boolean;

  /**
   * TODO: Add description.
   * @param layer - 
   */
  removeLayer (layer: DzTextureLayer): boolean;

  /**
   * TODO: Add description.
   * @param oldLayer - 
   * @param newLayer - 
   */
  replaceLayer (oldLayer: DzTextureLayer, newLayer: DzTextureLayer): boolean;

  /**
   * TODO: Add description.
   * @param index - 
   */
  takeLayer (index: number): DzTextureLayer;

  aboutToInsertLayers: Signal<{
    /**
     * TODO: Add description.
     * @param index - 
     * @param count - 
     */
  (index: number, count: number): void;
  }>;
  aboutToRemoveLayers: Signal<{
    /**
     * TODO: Add description.
     * @param index - 
     * @param count - 
     */
  (index: number, count: number): void;
  }>;
  assetModified: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  layerListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  layersInserted: Signal<{
    /**
     * TODO: Add description.
     * @param index - 
     * @param count - 
     */
  (index: number, count: number): void;
  }>;
  layersRemoved: Signal<{
    /**
     * TODO: Add description.
     * @param index - 
     * @param count - 
     */
  (index: number, count: number): void;
  }>;
  sizeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param size - 
     */
  (size: Size): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layout_dz
 * DAZScript wrapper for QLayout.
 * @remarks This is an abstract base class that provides general functionality for DAZ Script interface layout components.
 */
interface DzLayout extends QObject
{

  /**
   * Whether the parent widget's children are automatically added to the layout or not.
   */
  autoAdd: boolean

  /**
   * The margin between the widgets in the layout and the parent widget's edge
   */
  margin: number

  /**
   * The spacing between the widgets in the layout
   */
  spacing: number

  /**
   * Adds the given widget to the items managed by this layout
   * @param item - The widget to add
   */
  addWidget (item: DzWidget): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lcdnumber_dz
 * DAZScript wrapper for QLCDNumber.
 * @remarks A DzLCDNumber provides a LCD-style number display.
 * The following digits and symbols can be displayed:
 * 0/O, 1, 2, 3, 4, 5/S, 6, 7, 8, 9/g, - (minus), . (decimal point), A, B, C, D, E, F, h, H, L, o, P, r, u, U, Y, : (colon), &deg; (degree sign - which is specified as single quote in the string) and space.
 * Illegal characters are substituted with spaces.
 */
interface DzLCDNumber extends DzWidget
{

  /**
   * Enumerated mode (number base) types.
   */
  /**
   * Hexadecimal (base 16)
   */
  readonly Hex: number;

  /**
   * Decimal (base 10)
   */
  readonly Dec: number;

  /**
   * Octal (base 8)
   */
  readonly Oct: number;

  /**
   * Binary (base 2)
   */
  readonly Bin: number;

  /**
   * Same as Hex
   */
  readonly HEX: number;

  /**
   * Same as Dec
   */
  readonly DEC: number;

  /**
   * Same as Oct
   */
  readonly OCT: number;

  /**
   * Same as Bin
   */
  readonly BIN: number;

  /**
   * Enumerated segment style (visual appearance) types.
   */
  /**
   * Raised segments filled with the background color
   */
  readonly Outline: number;

  /**
   * Raised segments filled with the foreground color
   */
  readonly Filled: number;

  /**
   * Flat segments filled with the foreground color
   */
  readonly Flat: number;

  /**
   * Holds the display mode of the number.
   */
  mode: number

  /**
   * Holds the number of digits displayed in the widget.
   */
  numDigits: number

  /**
   * Holds the style of the number.
   */
  segmentStyle: number

  /**
   * Holds whether the decimal point is drawn between digits - otherwise it takes up a digit of its own.
   */
  smallDecimalPoint: boolean

  /**
   * Holds the value of the number.
   */
  value: number

  overflow: Signal<{
    /**
     * Emitted when the number is set to a value that exceeds the number of digits.
     */
  (): void;
  }>;
}

declare var DzLCDNumber:
{
  prototype: DzLCDNumber;

  /**
   * Creates a LCD number widget as a child of the given parent widget.
   * @param parent - The widget parent for the LCD number.
   */
  new (parent: DzWidget): DzLCDNumber;

  /**
   * Enumerated mode (number base) types.
   */
  /**
   * Hexadecimal (base 16)
   */
  readonly Hex: number;
  /**
   * Decimal (base 10)
   */
  readonly Dec: number;
  /**
   * Octal (base 8)
   */
  readonly Oct: number;
  /**
   * Binary (base 2)
   */
  readonly Bin: number;
  /**
   * Same as Hex
   */
  readonly HEX: number;
  /**
   * Same as Dec
   */
  readonly DEC: number;
  /**
   * Same as Oct
   */
  readonly OCT: number;
  /**
   * Same as Bin
   */
  readonly BIN: number;

  /**
   * Enumerated segment style (visual appearance) types.
   */
  /**
   * Raised segments filled with the background color
   */
  readonly Outline: number;
  /**
   * Raised segments filled with the foreground color
   */
  readonly Filled: number;
  /**
   * Flat segments filled with the foreground color
   */
  readonly Flat: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/light_dz
 * Base class for all lights.
 * @remarks TODO: Add detailed description.
 */
interface DzLight extends DzCamera
{

  /**
   * The type of shadowing to use for the light.
   */
  /**
   * The light does not utilize shadows.
   */
  readonly None: number;

  /**
   * The light utilizes a Deep Shadow Map (DSM).
   */
  readonly DeepShadowMap: number;

  /**
   * The light utilizes ray-traced shadows.
   */
  readonly Raytraced: number;

  /**
   * @returns A list of [trimmed] categories on this light.
   * @since 4.8.0.7
   */
  getCategories (): Array<unknown>;

  /**
   * @returns The property that holds the categories for this light.
   * @since 4.8.0.7
   */
  getCategoriesControl (): DzStringProperty;

  /**
   * @returns The current diffuse light color, including adjustment for intensity.
   */
  getDiffuseColor (): Color;

  /**
   * @returns The enumerated value indicating the type of shadow utilized by the light.
   */
  getShadowType (): number;

  /**
   * @returns The property used to indicate the type of shadow utilized by the light.
   */
  getShadowTypeControl (): DzEnumProperty;

  /**
   * Calculates the direction that light is being cast from this light.
   * Only valid for directional light sources.
   * @returns The current world-space light-casting direction vector.
   */
  getWSDirection (): DzVec3;

  /**
   * @returns true if this is an area light source, otherwise false. If true, the light source center will be given by the position of the light. Additional light geometry will be defined in the derived classes.
   */
  isAreaLight (): boolean;

  /**
   * Indicates if this light is an infinite directional light.
   * Directional lights do not have a position per se. They are assumed to lie at infinity and cast parallel rays of light into the scene.
   * @returns true if this light is directional, otherwise (e.g., omni-directional) false.
   */
  isDirectional (): boolean;

  /**
   * @returns true if this light is currently on, otherwise false.
   */
  isOn (): boolean;

  categoriesChanged: Signal<{
    /**
     * Emitted when the categories that a light is in changes.
     */
  (): void;
  }>;
}

declare namespace DzLight
{

  /**
   * The type of shadowing to use for the light.
   */
  /**
   * The light does not utilize shadows.
   */
  export const None: number;
  /**
   * The light utilizes a Deep Shadow Map (DSM).
   */
  export const DeepShadowMap: number;
  /**
   * The light utilizes ray-traced shadows.
   */
  export const Raytraced: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lightassetfilter_dz
 * Class for saving DSON-based Light(s) Presets.
 * @remarks An asset save filter for saving a Light(s) Preset in the DSON format.
 * @seealso Sample: Save a Light(s) Preset
 */
interface DzLightAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzLightAssetFilter:
{
  prototype: DzLightAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzLightAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/line3_dz
 * A three dimensional line segment.
 * @remarks TODO: Add detailed description.
 */
interface DzLine3 extends Object
{

  /**
   * Holds the line's ending point in three dimensional space.
   */
  end: DzVec3

  /**
   * Holds the line's starting point in three dimensional space.
   */
  origin: DzVec3

  /**
   * @returns The vector direction of this line (end - origin).
   * @since 4.9.3.121
   */
  getDirection (): DzVec3;

  /**
   * @returns The point with the given parametric distance along the line.
   * @since 4.9.3.121
   * @param t - 
   */
  getPoint (t: number): DzVec3;

  /**
   * @returns The length of the line given a parametric distance along the line.
   * @seealso setLength()
   * @since 4.9.3.121
   * @param [t=1.0] - 
   */
  length (t?: number): number;

  /**
   * Tests the intersection of two lines. This line and the given line are assumed to be infinitely long in both directions (i.e. the intersection can be outside the origin-end segment of either line).
   * @returns true if this line intersects with the given line, otherwise false.
   * @since 4.9.3.121
   * @param line - The line to test intersection with.
   * @param intersection - This vector will be set to the intersection point if the lines intersect.
   * @param [tolerance=0.0] - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
   */
  linesIntersect (line: DzLine3, intersection: DzVec3, tolerance?: number): boolean;

  /**
   * @returns The minimum distance from this line to the given point. s is the parametric distance along the line to the minimum perpendicular distance point. If clampEnds is true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the nearest distance to the infinite line formed by the two end points of the segment.
   * @since 4.9.3.121
   * @param pnt - 
   * @param s - 
   * @param [clampEnds=false] - 
   */
  minDistance (pnt: DzVec3, s: number, clampEnds?: boolean): number;

  /**
   * @returns The minimum distance between this line and another line.
   * @since 4.9.3.121
   * @param line1 - 
   * @param s - The parametric distance along this line.
   * @param t - The line to calculate min distance from.
   */
  minDistance (line1: DzLine3, s: number, t: number): number;

  /**
   * @returns The square of the minimum distance along the line to the minimum perpendicular distance point. If clampEnds is true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the distance to the infinite line formed by two end points of a segment.
   * @since 4.9.3.121
   * @param pnt - 
   * @param s - 
   * @param [clampEnds=false] - 
   */
  minDistanceSquared (pnt: DzVec3, s: number, clampEnds?: boolean): number;

  /**
   * Reverses the direction of the line by mirroring the endpoint.
   * @since 4.9.3.121
   */
  negate (): void;

  /**
   * Calculates the intersection of this line and the plane specified. The plane is defined by a point on the plane and the normal to the plane.
   * @returns true if this line intersects the given plane, false if not (i.e. the two are parallel).
   * @since 4.9.3.121
   * @param planePoint - A point on the plane (to define the plane).
   * @param planeNormal - The normal to the plane (to define the plane).
   * @param t - This will be set to the parametric distance along this line to the intersection point, if there is one.
   * @param intersection - This vector will be set to the intersection point if the line and plane intersect.
   */
  planeIntersect (planePoint: DzVec3, planeNormal: DzVec3, t: number, intersection: DzVec3): boolean;

  /**
   * Tests the intersection of two line segments.
   * @returns true if this line segment intersects with the given line segment, otherwise false.
   * @since 4.9.3.121
   * @param line - The line to test intersection with.
   * @param intersection - This vector will be set to the intersection point if the lines intersect.
   * @param [tolerance=0.0] - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
   */
  segmentsIntersect (line: DzLine3, intersection: DzVec3, tolerance?: number): boolean;

  /**
   * Sets the line to have the length given by setting the endpoint relative to the current origin.
   * @seealso length()
   * @since 4.9.3.121
   * @param length - 
   */
  setLength (length: number): void;

  /**
   * Swaps the origin for the endpoint.
   * @since 4.9.3.121
   */
  swapEnds (): void;

}

declare var DzLine3:
{
  prototype: DzLine3;

  /**
   * Default Constructor. Creates an uninitialized line.
   */
  new (): DzLine3;

  /**
   * Copy Constructor.
   * @param line - 
   */
  new (line: DzLine3): DzLine3;

  /**
   * Parameterized Constructor.
   * @param origin - The origin point of the line.
   * @param end - The end point of the line.
   */
  new (origin: DzVec3, end: DzVec3): DzLine3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/linearpointlight_dz
 * A light that emits in all directions from a single point and has fall off start/end controls.
 * @remarks TODO: Add detailed description.
 */
interface DzLinearPointLight extends DzPointLight
{

  /**
   * @returns The distance from the origin of the node where the intensity reaches 0.
   * @since 4.9.3.145
   */
  getFallOffEnd (): number;

  /**
   * @returns The property that controls the distance from the origin of the node where the intensity reaches 0.
   */
  getFallOffEndControl (): DzFloatProperty;

  /**
   * @returns The distance from the origin of the node where the intensity begins to decrease.
   * @since 4.9.3.145
   */
  getFallOffStart (): number;

  /**
   * @returns The property that controls the distance from the origin of the node where the intensity begins to decrease.
   */
  getFallOffStartControl (): DzFloatProperty;

  /**
   * Sets the distance from the origin of the node where the intensity reaches 0.
   * @since 4.9.3.145
   * @param end - The distance from the origin to set.
   */
  setFallOffEnd (end: number): void;

  /**
   * Sets the distance from the origin of the node where the intensity begins to decrease.
   * @since 4.9.3.145
   * @param start - The distance from the origin to set.
   */
  setFallOffStart (start: number): void;

}

declare var DzLinearPointLight:
{
  prototype: DzLinearPointLight;

  /**
   * Default Constructor. Creates a new linear point light.
   */
  new (): DzLinearPointLight;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lineedit_dz
 * DAZScript wrapper for QLineEdit.
 * @remarks This class provides a single line text editor.
 */
interface DzLineEdit extends DzWidget
{

  /**
   * Enumerated values for describing how a line edit should display its contents.
   */
  /**
   * Display characters as they are entered.
   */
  readonly Normal: number;

  /**
   * Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
   */
  readonly NoEcho: number;

  /**
   * Display asterisks instead of the characters actually entered.
   */
  readonly Password: number;

  /**
   * Display characters as they are entered while editing otherwise display asterisks.
   */
  readonly PasswordEchoOnEdit: number;

  /**
   * Holds whether or not the input satisfies the inputMask and the validator. (Read Only)
   * DzWidget::AlignmentFlags : alignment
   * Holds the alignment of the text displayed in the editor.
   */
  acceptableInput: boolean

  /**
   * Holds the position of the cursor in the editor.
   */
  cursorPosition: number

  /**
   * Holds the value that determines how the text entered is displayed to the user.
   */
  echoMode: number

  /**
   * Holds whether or not the editor is drawn with a frame.
   */
  frame: boolean

  /**
   * Holds whether or not text is selected. (Read Only)
   */
  hasSelectedText: boolean

  /**
   * Holds the input mask for the editor. Set this to an empty string to clear the input mask.
   */
  inputMask: string

  /**
   * Holds the maximum length of the text in the editor.
   */
  maxLength: number

  /**
   * Holds whether or not the text in the editor has been modified. (Read Only < 4.9.3.93)
   */
  modified: boolean

  /**
   * Holds the text string displayed in the editor when its text string is empty.
   */
  placeholderText: string

  /**
   * Holds whether or not the text in the editor can be edited by the user.
   */
  readOnly: boolean

  /**
   * Holds whether or not a redo operation is available. (Read Only)
   */
  redoAvailable: boolean

  /**
   * Holds the selected text (if any) of the editor.
   */
  selectedText: string

  /**
   * Holds the text value of the editor.
   */
  text: string

  /**
   * Holds whether or not an undo operation is available. (Read Only)
   */
  undoAvailable: boolean

  /**
   * If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
   */
  backspace (): void;

  /**
   * Clears the text in the editor.
   */
  clear (): void;

  /**
   * Deprecated
   * Exists only to keep old code working. Do not use in new code. Use the modified property instead.
   */
  clearModified (): void;

  /**
   * Copies the selected text into the clipboard.
   */
  copy (): void;

  /**
   * Moves the cursor backward the given number of characters.
   * @param [mark=false] - If true, each character that is stepped over will be added to the current selection.
   * @param [steps=1] - The number of characters to move the cursor.
   */
  cursorBackward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor forward the given number of characters.
   * @param [mark=false] - If true, each character that is stepped over will be added to the current selection.
   * @param [steps=1] - The number of characters to move the cursor.
   */
  cursorForward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor backward one word.
   * @param [mark=false] - If true, the word will be added to the current selection.
   * @param [steps=1] - The number of words to move the cursor. (since 4.9.3.93)
   */
  cursorWordBackward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor forward one word.
   * @param [mark=false] - If true, the word will be added to the current selection.
   * @param [steps=1] - The number of words to move the cursor. (since 4.9.3.93)
   */
  cursorWordForward (mark?: boolean, steps?: number): void;

  /**
   * Copies the selected text into the clipboard and removes it from the editor.
   */
  cut (): void;

  /**
   * If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
   */
  del (): void;

  /**
   * Clears any selection in the editor.
   */
  deselect (): void;

  /**
   * Moves the cursor to the end of the line.
   * @param [mark=false] - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
   */
  end (mark?: boolean): void;

  /**
   * @returns true if the input satisfies the inputMask and the validator, otherwise false.
   */
  hasAcceptableInput (): boolean;

  /**
   * @returns true if some or all of the text in the editor is selected, otherwise false.
   */
  hasSelectedText (): boolean;

  /**
   * Moves the cursor to the beginning of the line.
   * @param [mark=false] - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
   */
  home (mark?: boolean): void;

  /**
   * Inserts any text on the clipboard into the line at the cursor's current position.
   */
  paste (): void;

  /**
   * If redoAvailable is true, redoes the next operation in the editor.
   */
  redo (): void;

  /**
   * Selects all the text in the editor.
   */
  selectAll (): void;

  /**
   * @returns The currently selected text (if any) in the editor.
   */
  selectedText (): string;

  /**
   * @returns The position in the editor where the current selection begins.
   */
  selectionStart (): number;

  /**
   * Causes this line edit to only accept characters that represent double precision floating point (decimal) numbers.
   * @param bottom - The minimum acceptable value.
   * @param top - The maximum acceptable value.
   * @param decimals - The maximum number of digits after the decimal point to allow.
   * @param [scientific=false] - If true, the text of the editor is expressed in scientific form; i.e., it may have an exponent part; i.e., 1.5E-2. If false (default), the text of the editor is expressed as a standard number; i.e., 0.015.
   */
  setDoubleValidator (bottom: number, top: number, decimals: number, scientific?: boolean): void;

  /**
   * Causes this line edit to only accept characters that represent whole numbers (integers).
   * @param minimum - The minimum acceptable value.
   * @param maximum - The maximum acceptable value.
   */
  setIntValidator (minimum: number, maximum: number): void;

  /**
   * Causes this line edit to only accept characters that satisfy a Regular Expression.
   * @param rx - 
   * @param [caseSensitive=true] - The Regular Expression to use.
   */
  setRegExValidator (rx: string, caseSensitive?: boolean): void;

  /**
   * Sets the selected portion of the text in the editor.
   * @param start - The position to start the selection from.
   * @param length - The number of characters from start to select.
   */
  setSelection (start: number, length: number): void;

  /**
   * If undoAvailable is true, undoes the last operation in the editor.
   */
  undo (): void;

  cursorPositionChanged: Signal<{
    /**
     * Emitted when the current position changes.
     * @param oldPos - 
     * @param newPos - 
     */
  (oldPos: number, newPos: number): void;
  }>;
  editingFinished: Signal<{
    /**
     * Emitted when the [Return] or [Enter] key is pressed or the editor loses focus.
     */
  (): void;
  }>;
  returnPressed: Signal<{
    /**
     * Emitted when the user presses the [Return] key in the editor.
     */
  (): void;
  }>;
  selectionChanged: Signal<{
    /**
     * Emitted when the selected text in the editor changes.
     */
  (): void;
  }>;
  textChanged: Signal<{
    /**
     * Emitted when the text of the editor changes, passes the new text.
     * @param text - 
     */
  (text: string): void;
  }>;
  textEdited: Signal<{
    /**
     * Emitted when the text edited, passes the new text.
     * @param text - 
     */
  (text: string): void;
  }>;
}

declare var DzLineEdit:
{
  prototype: DzLineEdit;

  /**
   * Creates a line edit as a child of the given parent widget.
   * @param parent - The widget parent for the editor.
   */
  new (parent: DzWidget): DzLineEdit;

  /**
   * Enumerated values for describing how a line edit should display its contents.
   */
  /**
   * Display characters as they are entered.
   */
  readonly Normal: number;
  /**
   * Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
   */
  readonly NoEcho: number;
  /**
   * Display asterisks instead of the characters actually entered.
   */
  readonly Password: number;
  /**
   * Display characters as they are entered while editing otherwise display asterisks.
   */
  readonly PasswordEchoOnEdit: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listbox_dz
 * DAZ Script list box widget.
 * @remarks TODO: Add detailed description.
 */
interface DzListBox extends DzScrollView
{

  /**
   * The possible layout modes for the columns and rows of the list box
   */
  /**
   * There is a fixed number of rows or columns
   */
  readonly FixedNumber: number;

  /**
   * There are as many columns as will fit
   */
  readonly FitToWidth: number;

  /**
   * There are as many rows as will fit
   */
  readonly FitToHeight: number;

  /**
   * There are as many rows as required by the column mode and vice-versa
   */
  readonly Variable: number;

  /**
   * The possible selection modes for the list box
   */
  /**
   * Single selection - only one item in the box can be selected at a time
   */
  readonly Single: number;

  /**
   * Multi selection - when the user clicks on an item, its selection state is toggled, all other items remain the same
   */
  readonly Multi: number;

  /**
   * Extended selection - when the user clicks on an item, the current selection is replaced with that item. The ctrl and shift keys can be used to select multiple items.
   */
  readonly Extended: number;

  /**
   * Items can not be selected
   */
  readonly NoSelection: number;

  /**
   * The layout mode for the columns of the list box
   */
  columnMode: number

  /**
   * The number of items in the list box (read-only)
   */
  count: number

  /**
   * The index of the currently highlighted item in the list box
   */
  currentItem: number

  /**
   * The text of the currently highlighted item in the list box
   */
  currentText: string

  /**
   * The number of columns in the list box (read-only)
   */
  numColumns: number

  /**
   * The number of items visible in the list box (read-only)
   */
  numItemsVisible: number

  /**
   * The number of rows in the list box (read-only)
   */
  numRows: number

  /**
   * The layout mode for the rows of the list box
   */
  rowMode: number

  /**
   * The index of the currently selected item in the list box (in single selection mode only)
   */
  selected: number

  /**
   * The selection mode of the list box
   */
  selectionMode: number

  /**
   * The index of the item at the top of the list box
   */
  topItem: number

  /**
   * Whether or not the list box has variable height rows
   */
  variableHeight: boolean

  /**
   * Whether or not the list box has variable width columns
   */
  variableWidth: boolean

  /**
   * Clears all items in the list box
   */
  clear (): void;

  /**
   * Inserts the given item into the list box
   * @param text - 
   */
  insertItem (text: string): void;

  /**
   * @returns true if the item at the given index is selected
   * @param index - 
   */
  isSelected (index: number): boolean;

  /**
   * Removes the given item from the list box
   * @param index - 
   */
  removeItem (index: number): void;

  /**
   * Sets whether the item at the given index is selected
   * @param index - 
   * @param selected - 
   */
  setSelected (index: number, selected: boolean): void;

  /**
   * @returns The text of the item at the given index
   * @param index - 
   */
  text (index: number): string;

  clicked: Signal<{
    /**
     * Emitted when an item is clicked (mouse button pressed and released).
     * @param index - 
     */
  (index: number): void;
    /**
     * Emitted when an item is clicked (mouse button pressed and released).
     * @param index - 
     * @param pnt - 
     */
  (index: number, pnt: Point): void;
  }>;
  contextMenuRequested: Signal<{
    /**
     * Emitted when the user right clicks the list box for a context menu.
     * @param index - 
     * @param pos - 
     */
  (index: number, pos: Point): void;
  }>;
  currentChanged: Signal<{
    /**
     * Emitted when the current item changes.
     * @param index - 
     */
  (index: number): void;
  }>;
  doubleClicked: Signal<{
    /**
     * Emitted when an item is double clicked.
     * @param index - 
     */
  (index: number): void;
  }>;
  highlighted: Signal<{
    /**
     * Emitted when the highlighted item changes.
     * @param index - 
     */
  (index: number): void;
    /**
     * Emitted when the highlighted item changes.
     * @param str - 
     */
  (str: string): void;
  }>;
  mouseButtonClicked: Signal<{
    /**
     * Emitted when an item is clicked with the a mouse button (mouse button pressed and released).
     * @param button - 
     * @param index - 
     * @param pos - 
     */
  (button: number, index: number, pos: Point): void;
  }>;
  mouseButtonPressed: Signal<{
    /**
     * Emitted when an item is pressed with the a mouse button (mouse button pressed).
     * @param button - 
     * @param index - 
     * @param pos - 
     */
  (button: number, index: number, pos: Point): void;
  }>;
  onItem: Signal<{
    /**
     * Emitted mouse cursor moves onto an item.
     * @param index - 
     */
  (index: number): void;
  }>;
  onViewport: Signal<{
    /**
     * Emitted mouse cursor moves from an item to an empty part of the list box.
     */
  (): void;
  }>;
  pressed: Signal<{
    /**
     * Emitted when an item is pressed (mouse button pressed).
     * @param index - 
     * @param pnt - 
     */
  (index: number, pnt: Point): void;
    /**
     * Emitted when an item is pressed (mouse button pressed).
     * @param index - 
     */
  (index: number): void;
  }>;
  returnPressed: Signal<{
    /**
     * Emitted when return is pressed on the current item.
     * @param index - 
     */
  (index: number): void;
  }>;
  rightButtonClicked: Signal<{
    /**
     * Emitted when an item is clicked with the right button (mouse button pressed and released).
     * @param index - 
     * @param pnt - 
     */
  (index: number, pnt: Point): void;
  }>;
  rightButtonPressed: Signal<{
    /**
     * Emitted when an item is pressed with the right button (mouse button pressed).
     * @param index - 
     * @param pnt - 
     */
  (index: number, pnt: Point): void;
  }>;
  selected: Signal<{
    /**
     * Emitted when the selected item changes.
     * @param str - 
     */
  (str: string): void;
    /**
     * Emitted when the selected item changes.
     * @param index - 
     */
  (index: number): void;
  }>;
  selectionChanged: Signal<{
    /**
     * Emitted when the selection in the box changes.
     */
  (): void;
    /**
     * Emitted when a new item is selected in single selection mode.
     * @param index - 
     */
  (index: number): void;
  }>;
}

declare var DzListBox:
{
  prototype: DzListBox;

  /**
   * Creates a list box with the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzListBox;

  /**
   * The possible layout modes for the columns and rows of the list box
   */
  /**
   * There is a fixed number of rows or columns
   */
  readonly FixedNumber: number;
  /**
   * There are as many columns as will fit
   */
  readonly FitToWidth: number;
  /**
   * There are as many rows as will fit
   */
  readonly FitToHeight: number;
  /**
   * There are as many rows as required by the column mode and vice-versa
   */
  readonly Variable: number;

  /**
   * The possible selection modes for the list box
   */
  /**
   * Single selection - only one item in the box can be selected at a time
   */
  readonly Single: number;
  /**
   * Multi selection - when the user clicks on an item, its selection state is toggled, all other items remain the same
   */
  readonly Multi: number;
  /**
   * Extended selection - when the user clicks on an item, the current selection is replaced with that item. The ctrl and shift keys can be used to select multiple items.
   */
  readonly Extended: number;
  /**
   * Items can not be selected
   */
  readonly NoSelection: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listview_dz
 * DAZScript wrapper for Q3ListView.
 * @remarks Todo
 * The findItem() method takes a ComparisonFlags enum. ComparisonFlags is either not exposed or not documented.
 */
interface DzListView extends DzScrollView
{

  /**
   * This typedef is used in Q3ListView's API for values that are OR'd combinations of StringComparisonMode values.
   * https://doc.qt.io/archives/qt-4.8/q3listview.html#ComparisonFlags-typedef
   */
  /**
   * The strings must match case sensitively.
   */
  readonly CaseSensitive: number;

  /**
   * The target and search strings must match exactly.
   */
  readonly ExactMatch: number;

  /**
   * The target string begins with the search string.
   */
  readonly BeginsWith: number;

  /**
   * The target string ends with the search string.
   */
  readonly EndsWith: number;

  /**
   * The target string contains the search string.
   */
  readonly Contains: number;

  /**
   * The item mode types
   */
  /**
   * The selected items
   */
  readonly Selected: number;

  /**
   * The unselected items
   */
  readonly Unselected: number;

  /**
   * The items that are checked
   */
  readonly Checked: number;

  /**
   * The items that are not checked
   */
  readonly NotChecked: number;

  /**
   * All the items in the view
   */
  readonly All: number;

  /**
   * The rename action types
   */
  /**
   * The item is renamed if return is pressed or if the user clicks away from the entry field (it loses focus)
   */
  readonly Accept: number;

  /**
   * The item is renamed only if the user presses return in the entry field. If the entry field loses focus, the rename operation is discarded.
   */
  readonly Reject: number;

  /**
   * The resize modes of list views
   */
  /**
   * The columns do not get resized
   */
  readonly NoColumn: number;

  /**
   * All columns get resized equally
   */
  readonly AllColumns: number;

  /**
   * The last column is resized to fit the width of the view
   */
  readonly LastColumn: number;

  /**
   * The selection mode types for list views
   * > summary
   *   https://doc.qt.io/qt-5/qt.html#SortOrder-enum
   * + AscendingOrder  - The items are sorted ascending e.g. starts with 'AAA' ends with 'ZZZ' in Latin-1 locales
   * + DescendingOrder - he items are sorted descending e.g. starts with 'ZZZ' ends with 'AAA' in Latin-1 locales
   */
  /**
   * Only one item in the list view can be selected
   */
  readonly Single: number;

  /**
   * Multiple items in the list view can be selected. When the user clicks on an item, its selection state is toggled on/off.
   */
  readonly Multi: number;

  /**
   * Multiple items in the list view can be selected. When the user clicks on an item, the current selection is cleared, and that item becomes selected. Multiple items are selected by clicking with the CTRL key, or SHIFT key pressed, or by clicking and dragging.
   */
  readonly Extended: number;

  /**
   * No items in the list view can be selected
   */
  readonly NoSelection: number;

  /**
   */

  /**
   * The width modes types
   */
  /**
   * The column width does not change automatically
   */
  readonly Manual: number;

  /**
   * The column width grows automatically according to the maximum width of all items in the column.
   */
  readonly Maximum: number;

  /**
   * Whether or not all columns show keyboard focus.
   */
  allColumnsShowFocus: boolean

  /**
   * Read-Only: The number root level children in the list view
   */
  childCount: number

  /**
   * Read-Only: The number of items in the list box
   */
  columns: number

  /**
   * The default action that is taken when the user attempts to rename an item.
   */
  defaultRenameAction: number

  /**
   * The advisory margin for list view items
   */
  itemMargin: number

  /**
   * The resize mode for the list view
   */
  resizeMode: number

  /**
   * Whether or not the root level items show expand/collapse boxes.
   */
  rootIsDecorated: boolean

  /**
   * The selection mode for the list view
   */
  selectionMode: number

  /**
   * Whether or not the sort indicator should be displayed.
   */
  showSortIndicator: boolean

  /**
   * Whether or not tool tips should be displayed.
   */
  showToolTips: boolean

  /**
   * The column that the list is sorted by
   */
  sortColumn: number

  /**
   * The sort order of the list view.
   */
  sortOrder: number

  /**
   * The number of pixels that a child item is offset from its parent
   */
  treeStepSize: number

  /**
   * Add a column to the list view with the given label
   * @param label - 
   */
  addColumn (label: string): number;

  /**
   * Clears all the items from the list view.
   */
  clear (): void;

  /**
   * Clears the current selection in the view.
   */
  clearSelection (): void;

  /**
   * @returns The alignment of the given column.
   * @param column - 
   */
  columnAlignment (column: number): number;

  /**
   * @returns The label of the column at the given index
   * @param index - 
   */
  columnText (index: number): string;

  /**
   * @returns The width of the given column.
   * @param column - 
   */
  columnWidth (column: number): number;

  /**
   * @returns The width mode of the given column.
   * @param column - 
   */
  columnWidthMode (column: number): number;

  /**
   * @returns The currently highlighted item
   */
  currentItem (): DzListViewItem;

  /**
   * Deletes given item from the list view.
   * @param item - 
   */
  deleteItem (item: DzListViewItem): void;

  /**
   * Ensures the the given item is visible in the view.
   * @param item - 
   */
  ensureItemVisible (item: DzListViewItem): void;

  /**
   * @returns The list view item with the given text for the given column, matched according to the given flags.
   * @param text - 
   * @param column - 
   * @param [compare=DzListView.ComparisonFlags.ExactMatch|DzListView.ComparisonFlags.CaseSensitive] - ExactMatch|CaseSensitive
   */
  findItem (text: string, column: number, compare?: number): DzListViewItem;

  /**
   * @returns The first child in the list view.
   */
  firstChild (): DzListViewItem;

  /**
   * Return an array of DzListViewItems that match the supplied ItemsMode Flag.
   * @returns Array of DzListViewItems which match the supplied flag.
   * @param mode - The ItemsMode which will be used to fill the array.
   */
  getItems (mode: number): Array<unknown>;

  /**
   * Hide the given column
   * @param column - 
   */
  hideColumn (column: number): void;

  /**
   * @returns true if the given item is expanded (open), or false if it is collapsed (closed)
   * @param item - 
   */
  isOpen (item: DzListViewItem): boolean;

  /**
   * @returns true if the view is currently in a renaming operation.
   */
  isRenaming (): boolean;

  /**
   * @returns true if the given item is selected
   * @param item - 
   */
  isSelected (item: DzListViewItem): boolean;

  /**
   * @returns The last item in the list view.
   */
  lastItem (): DzListViewItem;

  /**
   * Remove the column at index from the list view
   * @param index - 
   */
  removeColumn (index: number): void;

  /**
   * Sets the alignment of the given column.
   * @param column - 
   * @param align - 
   */
  setColumnAlignment (column: number, align: number): void;

  /**
   * Change the label of the column at the given index
   * @param index - 
   * @param label - 
   */
  setColumnText (index: number, label: string): void;

  /**
   * Sets the width of the given column.
   * @param column - 
   * @param width - 
   */
  setColumnWidth (column: number, width: number): void;

  /**
   * Sets the width mode of the given column.
   * @param column - 
   * @param mode - 
   */
  setColumnWidthMode (column: number, mode: number): void;

  /**
   * Set the currently highlighted item
   * @param item - 
   */
  setCurrentItem (item: DzListViewItem): void;

  /**
   * Sets whether the given item is expanded (open) or collapsed (closed)
   * @param item - 
   * @param open - 
   */
  setOpen (item: DzListViewItem, open: boolean): void;

  /**
   * Sets whether the given item is selected
   * @param item - 
   * @param selected - 
   */
  setSelected (item: DzListViewItem, selected: boolean): void;

  /**
   * Sets the selection anchor of the view to item.
   * @param item - 
   */
  setSelectionAnchor (item: DzListViewItem): void;

  /**
   * Sets the sorting column and order for the view.
   * @param column - 
   * @param [ascending=TRUE] - 
   */
  setSorting (column: number, ascending?: boolean): void;

  /**
   * Sort the view
   */
  sort (): void;

  clicked: Signal<{
    /**
     * Emitted when an item is clicked (mouse button pressed and released)
     * @param item - The item clicked (or 0 if no item was clicked)
     */
  (item: DzListViewItem): void;
    /**
     * Emitted when an item is clicked (mouse button pressed and released)
     * @param item - The item clicked (or 0 if no item was clicked)
     * @param pos - The position, in global coordinates, where the user clicked
     * @param col - The column in which the click occurred (undefined if item is 0)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
  }>;
  collapsed: Signal<{
    /**
     * Emitted when an item is collapsed (when item 's children are hidden)
     * @param item - The item collapsed
     */
  (item: DzListViewItem): void;
  }>;
  contextMenuRequested: Signal<{
    /**
     * Emitted when the user right clicks the list view, or uses a special system key, for a context menu
     * @param item - The item under the cursor if pressed (or 0 if no item is under the cursor), the current item if the system key is used
     * @param pos - The position, in global coordinates, where the user pressed
     * @param col - The column in which the press occurred (-1 if no item is pressed)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
  }>;
  currentChanged: Signal<{
    /**
     * Emitted when the current item changes
     * @param item - The newly currentItem()
     */
  (item: DzListViewItem): void;
  }>;
  doubleClicked: Signal<{
    /**
     * Emitted when an item is double clicked (on the second button press, not release)
     * @param item - The item double clicked (or 0 if no item was double clicked)
     * @param pos - The position, in global coordinates, where the user double clicked
     * @param col - The column in which the double click occurred (-1 if outside the list view)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
  }>;
  expanded: Signal<{
    /**
     * Emitted when an item is expanded (when item 's children are shown)
     * @param item - The item expanded
     */
  (item: DzListViewItem): void;
  }>;
  itemRenamed: Signal<{
    /**
     * Emitted when an item is renamed
     * @param item - The item renamed
     * @param col - The column in which the renaming occurred
     * @param text - The the new text for item
     */
  (item: DzListViewItem, col: number, text: string): void;
    /**
     * Emitted when an item is renamed
     * @param item - The item renamed
     * @param col - The column in which the renaming occurred
     */
  (item: DzListViewItem, col: number): void;
  }>;
  mouseButtonClicked: Signal<{
    /**
     * Emitted when an item is clicked with the a mouse button (mouse button pressed and released)
     * @param button - The mouse button clicked
     * @param item - The item clicked (or 0 if no item was clicked)
     * @param pos - The position, in global coordinates, where the user clicked
     * @param col - The column in which the click occurred (undefined if item is 0)
     */
  (button: number, item: DzListViewItem, pos: Point, col: number): void;
  }>;
  mouseButtonPressed: Signal<{
    /**
     * Emitted when an item is pressed with the a mouse button (mouse button pressed)
     * @param button - The mouse button pressed
     * @param item - The item pressed (or 0 if no item was pressed)
     * @param pos - The position, in global coordinates, where the user pressed
     * @param col - The column in which the press occurred (undefined if item is 0)
     */
  (button: number, item: DzListViewItem, pos: Point, col: number): void;
  }>;
  pressed: Signal<{
    /**
     * Emitted when an item is pressed (mouse button pressed)
     * @param item - The item pressed (or 0 if no item was pressed)
     * @param pos - The position, in global coordinates, where the user pressed
     * @param col - The column in which the press occurred (undefined if item is 0)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
    /**
     * Emitted when an item is pressed (mouse button pressed)
     * @param item - The item pressed (or 0 if no item was pressed)
     */
  (item: DzListViewItem): void;
  }>;
  returnPressed: Signal<{
    /**
     * Emitted when return is pressed on the current item
     * @param item - The current item
     */
  (item: DzListViewItem): void;
  }>;
  rightButtonClicked: Signal<{
    /**
     * Emitted when an item is clicked with the right button (mouse button pressed and released)
     * @param item - The item clicked (or 0 if no item was clicked)
     * @param pos - The position, in global coordinates, where the user clicked
     * @param col - The column in which the click occurred (-1 if outside the list view)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
  }>;
  rightButtonPressed: Signal<{
    /**
     * Emitted when an item is pressed with the right button (mouse button pressed)
     * @param item - The item pressed (or 0 if no item was pressed)
     * @param pos - The position, in global coordinates, where the user pressed
     * @param col - The column in which the press occurred (-1 if outside the list view)
     */
  (item: DzListViewItem, pos: Point, col: number): void;
  }>;
  selectionChanged: Signal<{
    /**
     * Emitted when the selected item changes.
     */
  (): void;
    /**
     * Emitted when the selected item changes
     * @param item - The newly selected item
     */
  (item: DzListViewItem): void;
  }>;
  spacePressed: Signal<{
    /**
     * Emitted when the spacebar is pressed on the current item
     * @param item - The current item
     */
  (item: DzListViewItem): void;
  }>;
}

declare var DzListView:
{
  prototype: DzListView;

  /**
   * Creates a list view widget with the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzListView;

  /**
   * This typedef is used in Q3ListView's API for values that are OR'd combinations of StringComparisonMode values.
   * https://doc.qt.io/archives/qt-4.8/q3listview.html#ComparisonFlags-typedef
   */
  /**
   * The strings must match case sensitively.
   */
  readonly CaseSensitive: number;
  /**
   * The target and search strings must match exactly.
   */
  readonly ExactMatch: number;
  /**
   * The target string begins with the search string.
   */
  readonly BeginsWith: number;
  /**
   * The target string ends with the search string.
   */
  readonly EndsWith: number;
  /**
   * The target string contains the search string.
   */
  readonly Contains: number;

  /**
   * The item mode types
   */
  /**
   * The selected items
   */
  readonly Selected: number;
  /**
   * The unselected items
   */
  readonly Unselected: number;
  /**
   * The items that are checked
   */
  readonly Checked: number;
  /**
   * The items that are not checked
   */
  readonly NotChecked: number;
  /**
   * All the items in the view
   */
  readonly All: number;

  /**
   * The rename action types
   */
  /**
   * The item is renamed if return is pressed or if the user clicks away from the entry field (it loses focus)
   */
  readonly Accept: number;
  /**
   * The item is renamed only if the user presses return in the entry field. If the entry field loses focus, the rename operation is discarded.
   */
  readonly Reject: number;

  /**
   * The resize modes of list views
   */
  /**
   * The columns do not get resized
   */
  readonly NoColumn: number;
  /**
   * All columns get resized equally
   */
  readonly AllColumns: number;
  /**
   * The last column is resized to fit the width of the view
   */
  readonly LastColumn: number;

  /**
   * The selection mode types for list views
   * > summary
   *   https://doc.qt.io/qt-5/qt.html#SortOrder-enum
   * + AscendingOrder  - The items are sorted ascending e.g. starts with 'AAA' ends with 'ZZZ' in Latin-1 locales
   * + DescendingOrder - he items are sorted descending e.g. starts with 'ZZZ' ends with 'AAA' in Latin-1 locales
   */
  /**
   * Only one item in the list view can be selected
   */
  readonly Single: number;
  /**
   * Multiple items in the list view can be selected. When the user clicks on an item, its selection state is toggled on/off.
   */
  readonly Multi: number;
  /**
   * Multiple items in the list view can be selected. When the user clicks on an item, the current selection is cleared, and that item becomes selected. Multiple items are selected by clicking with the CTRL key, or SHIFT key pressed, or by clicking and dragging.
   */
  readonly Extended: number;
  /**
   * No items in the list view can be selected
   */
  readonly NoSelection: number;

  /**
   */

  /**
   * The width modes types
   */
  /**
   * The column width does not change automatically
   */
  readonly Manual: number;
  /**
   * The column width grows automatically according to the maximum width of all items in the column.
   */
  readonly Maximum: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listviewitem_dz
 * DAZScript wrapper for Q3ListViewItem.
 * @remarks This class is not a widget, but a helper class for working with DzListView. Each DzListViewItem represents a single item in a list view - add items to a list view by creating a new DzListViewItem that is a child of the list view, or a child of another list view item in the list view.
 */
interface DzListViewItem extends QObject
{

  /**
   * Holds whether the item can be dragged
   */
  dragEnabled: boolean

  /**
   * Holds whether the item can have other items dropped on it
   */
  dropEnabled: boolean

  /**
   * Holds whether the item can be enabled
   */
  enabled: boolean

  /**
   * Holds whether the item can be expanded (opened)
   */
  expandable: boolean

  /**
   * Holds the height of the item.
   */
  height: number

  /**
   * Holds the identifier for this item. (Read Only)
   */
  id: number

  /**
   * Holds whether the item can be displayed on multiple lines
   */
  multiLinesEnabled: boolean

  /**
   * Holds whether the item is expanded (open) or collapsed (closed)
   */
  open: boolean

  /**
   * Holds whether the item can be selected
   */
  selectable: boolean

  /**
   * Holds whether the item is selected
   */
  selected: boolean

  /**
   * Holds whether the item is visible
   */
  visible: boolean

  /**
   * Adds an arbitrary data item to be stored with the item
   * @param key - 
   * @param val - 
   */
  addDataItem (key: string, val: Object): void;

  /**
   * @returns The number of children in this item.
   */
  childCount (): number;

  /**
   * Compares the given listview item with this item
   * @param item - 
   * @param column - 
   * @param ascending - 
   */
  compare (item: DzListViewItem, column: number, ascending: boolean): number;

  /**
   * Deletes given item from the list view item's list of children items.
   * @param item - 
   */
  deleteItem (item: DzListViewItem): void;

  /**
   * @returns The depth of this item
   */
  depth (): number;

  /**
   * @returns The first child of this list view item
   */
  firstChild (): DzListViewItem;

  /**
   * @returns The value of an arbitrary data item
   * @param key - 
   */
  getDataItem (key: string): Object;

  /**
   * @returns The number of data items on the item
   */
  getNumDataItems (): number;

  /**
   * Insert the item as a child of this item
   * @param newChild - 
   */
  insertItem (newChild: DzListViewItem): void;

  /**
   * @returns The item above this list view item
   */
  itemAbove (): DzListViewItem;

  /**
   * @returns The item below this list view item
   */
  itemBelow (): DzListViewItem;

  /**
   * Sets the column and order that determines how the list is sorted
   * @param column - 
   * @param ascending - 
   */
  key (column: number, ascending: boolean): string;

  /**
   * @returns The list view that this item resides in
   */
  listView (): DzListView;

  /**
   * Moves this item to be after the given item, which must be one of its siblings
   * @param item - 
   */
  moveItem (item: DzListViewItem): void;

  /**
   * @returns The next sibling of this list view item
   */
  nextSibling (): DzListViewItem;

  /**
   * @returns The parent of this list view item
   */
  parent (): DzListViewItem;

  /**
   * @returns The pixmap for this item in the given column
   * @param column - 
   */
  pixmap (column: number): Pixmap;

  /**
   * Remove the item from the children of this item
   * @param item - 
   */
  removeItem (item: DzListViewItem): void;

  /**
   * @returns Whether or not the text in the given column can be changed by the user.
   * @param column - 
   */
  renameEnabled (column: number): boolean;

  /**
   * Sets the pixmap for this item in the given column
   * @param column - 
   * @param pm - 
   */
  setPixmap (column: number, pm: Pixmap): void;

  /**
   * Sets whether or not the text in the given column can be changed by the user.
   * @param column - 
   * @param yesNo - 
   */
  setRenameEnabled (column: number, yesNo: boolean): void;

  /**
   * Set the text for this list view item in the given column
   * @param column - 
   * @param text - 
   */
  setText (column: number, text: string): void;

  /**
   * Sorts the children of this item according to the current sorting column and order.
   */
  sort (): void;

  /**
   * Sorts the children items of this item by the given column in the given order.
   * @param column - 
   * @param ascending - 
   */
  sortChildItems (column: number, ascending: boolean): void;

  /**
   * Starts a rename operation.
   * @param column - 
   */
  startRename (column: number): void;

  /**
   * @returns The text for this list view item in the given column
   * @param column - 
   */
  text (column: number): string;

}

declare var DzListViewItem:
{
  prototype: DzListViewItem;

  /**
   * Creates a list view item at the root level of the given list view
   * @param parent - The listview to create this item as a child of
   * @param [id=-1] - The identifier for this item
   */
  new (parent: DzListView, id?: number): DzListViewItem;

  /**
   * Creates a list view item as a child of the given list view item
   * @param parent - The item to create this item as a child of
   * @param [id=-1] - The identifier for this item
   */
  new (parent: DzListViewItem, id?: number): DzListViewItem;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/mainwindow_dz
 * The main interface widget.
 * @remarks There is only one of these widgets in the application, which is created and owned by DzApp. It can be accessed by using the Global::MainWindow variable.
 */
interface DzMainWindow extends QWidget
{

  /**
   * Whether or not the main window is always on top of other application windows.
   */
  alwaysOnTop: boolean

  /**
   * Whether or not tool tips are enabled.
   */
  toolTipsEnabled: boolean

  /**
   * Presents the user with a dialog that asks if they want to save changes to the scene, and does a scene save if the user selects yes.
   * @returns false if the user selects 'Cancel', true if the user selects 'Yes' or 'No'.
   */
  askSaveChanges (): boolean;

  /**
   * Presents the user with a dialog that asks if they want to turn off limits to apply the preset currently being loaded.
   * @returns true if limits should be turned off, false if limits should be left alone.
   */
  askTurnOffLimits (): boolean;

  /**
   * Checks to see if the given file already exists - if it does, prompts the user if they want to overwrite it.
   * @returns true if the file does not exist or the user wants to overwrite it, false if the user needs to select a new name.
   * @param name - The name of the file to look for.
   */
  checkExistingFile (name: string): boolean;

  /**
   * Clears a the current UI popup if there is one.
   */
  clearUIPopUp (): void;

  /**
   * Display a message in the status bar.
   * @param msg - 
   * @param [millisec=-1] - Message to display
   */
  displayPrompt (msg: string, millisec?: number): void;

  /**
   * @returns The dock area located at the goven position.
   * @param pos - 
   */
  dockArea (pos: Point): DzDockArea;

  /**
   * Displays a dialog for saving the scene to a non-native file, and saves the scene if the user does not cancel.
   * @returns true if a file was selected and successfully saved, otherwise false.
   * @param [parent=null] - The widget that the file dialog will be parented to.
   */
  doFileExport (parent?: QWidget): boolean;

  /**
   * Displays a dialog for loading a non-native file, and loads the file if the user does not cancel.
   * @returns true if a file was selected and successfully loaded, otherwise false.
   * @param [parent=null] - The widget that the file dialog will be parented to.
   */
  doFileImport (parent?: QWidget): boolean;

  /**
   * Displays a dialog for loading a native scene file, and merges the file into the current scene if the user does not cancel.
   * @returns true if a file was selected and successfully loaded, otherwise false.
   * @param [parent=null] - 
   */
  doFileMerge (parent?: QWidget): boolean;

  /**
   * Displays a dialog for loading a native scene file, and opens the file as a new scene if the user does not cancel.
   * @returns true if a file was selected and successfully loaded, otherwise false.
   * @param [parent=null] - 
   */
  doFileOpen (parent?: QWidget): boolean;

  /**
   * Saves the scene to the current scene file - displaying a dialog to the user if a file needs to be selected.
   * @returns true if a file was selected and successfully saved, otherwise false.
   * @param [parent=null] - 
   */
  doFileSave (parent?: QWidget): boolean;

  /**
   * Displays a dialog for loading an image file, and loads the file if the user does not cancel.
   * @returns Empty image if the user cancels, or loading fails, otherwise the selected image.
   * @param [parent=null] - The widget that the file dialog will be parented to.
   */
  doImageOpen (parent?: QWidget): Image;

  /**
   * Displays a dialog for saving the given image, and saves the image if the user does not cancel.
   * @returns true if a file was selected and successfully saved, otherwise false.
   * @param image - The Image to save.
   * @param [parent=null] - The widget that the file dialog will be parented to.
   */
  doImageSaveAs (image: Image, parent?: QWidget): boolean;

  /**
   * Clears the scene
   */
  doNewFile (): boolean;

  /**
   * Displays a dialog for saving the given video clip, and saves the clip if the user does not cancel.
   * @returns true if a file was selected and successfully saved, otherwise false.
   * @param clip - The video clip to save.
   * @param [parent=null] - The widget that the file dialog will be parented to.
   */
  doVideoClipSaveAs (clip: DzVideoClip, parent?: QWidget): boolean;

  /**
   * Switches from full screen back to normal mode
   */
  exitFullScreen (): void;

  /**
   * @returns A pointer to the global Action manager for the application interface
   */
  getActionMgr (): DzActionMgr;

  /**
   * @returns The dock area located at the bottom of the main window.
   */
  getBottomDockArea (): DzDockArea;

  /**
   * @returns The dock area located in the center of the main window.
   */
  getCenterDockArea (): DzDockArea;

  /**
   * @returns A pointer to the global interactive lesson manager for the application interface
   */
  getInteractiveLessonMgr (): DzInteractiveLessonMgr;

  /**
   * @returns The dock area located at the left of the main window.
   */
  getLeftDockArea (): DzDockArea;

  /**
   * @returns A pointer to the global pane manager for the application interface
   */
  getPaneMgr (): DzPaneMgr;

  /**
   * @returns The dock area located at the right of the main window.
   */
  getRightDockArea (): DzDockArea;

  /**
   * @returns The dock area located at the top of the main window.
   */
  getTopDockArea (): DzDockArea;

  /**
   * @returns the current UI popup or NULL
   */
  getUIPopUp (): DzUIPopUpWgt;

  /**
   * @returns A pointer to the global viewport manager for the application interface
   */
  getViewportMgr (): DzViewportMgr;

  /**
   * Switches from normal to full screen mode
   */
  goFullScreen (): void;

  /**
   * @returns If the ui is locked.
   */
  isUILocked (): boolean;

  /**
   * Position the popup according to a widget.
   * @param posWgt - The widget to position the popup on.
   */
  positionUIPopUp (posWgt: QWidget): void;

  /**
   * Clear the message in the status bar.
   */
  removePrompt (): void;

  /**
   * A convenience method for forcing a repaint of the currently active 3D viewport (if any).
   */
  repaintActive3DViewport (): void;

  /**
   * Restores the state of the UI Lock variable to the setting in the registry.
   */
  restoreUILockState (): void;

  /**
   * @param onOff - turn user interface locking on/off
   * @param [storeSetting=true] - 
   */
  setUILocked (onOff: boolean, storeSetting?: boolean): void;

  /**
   * Show the Home page dialog.
   */
  showHomeDlg (): void;

  /**
   * @returns the DzUIPopUpWgt.
   * @param filename - The script that loads a .ui, or a .ui, file to show in the UIPopUpWgt.
   * @param [posWgt=null] - The widget to position the popup on.
   */
  showUIPopUpWgt (filename: string, posWgt?: QWidget): DzUIPopUpWgt;

  /**
   * @returns The DzUIPopUpWgt that was created. If it was toggled off, then it returns undefined
   * If a popup already exists with the same filename, it is cleared (toggled). Otherwise it has the same effect as calling DzMainWindow::showUIPopUpWgt()
   * @param filename - The script that loads a .ui, or a .ui, file to show in the UIPopUpWgt.
   * @param [posWgt=null] - The widget to position the popup on.
   */
  toggleUIPopUpWgt (filename: string, posWgt?: QWidget): DzUIPopUpWgt;

  aboutToClose: Signal<{
    /**
     * Emitted just before the main window closes.
     */
  (): void;
  }>;
  alwaysOnTopChanged: Signal<{
    /**
     * Emitted when the main window is switched to/from being always on top.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  started: Signal<{
    /**
     * Emitted after the startup() function has finished.
     */
  (): void;
  }>;
  uiLockedChanged: Signal<{
    /**
     * Emitted when the main window is switched to/from having the ui locked.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/material_dz
 * Base class for all material types.
 * @remarks A “material” represents a collection of properties and settings that, when applied through the use of a “shader” (a small program/subroutine that describes how the settings are used), describe how the geometry associated with a 3D object interacts with light and ultimately what the surface of that 3D object looks like when rendered.
 * @seealso shape_dz
 * facetmesh_dz
 * materialfacegroup_dz
 * materialselectionset_dz
 */
interface DzMaterial extends DzElement, DzRefCountedItem
{

  /**
   * The author of the file for this material. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * The revision version of the asset file for this material. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * The asset id for this material.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The modified date of the asset file for this material. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * The URI of the asset source for this material; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * The asset URI for this material. (Read Only)
   * @since 4.8.1.18
   * DzRenderMgr::RenderPriority : renderPriority
   * The render priority for the material. Render priority controls the order in which materials are handled during a render. The higher the priority, the earlier the material will be handled. If several materials have the same render priority, those materials will be handled in an arbitrary order.
   * The render priority on all nodes that use this material (this will include the top-level skeleton node when dealing with figures) can automatically be set to match the material's new priority by calling enablePropagateRenderPriorityToNodes() with true before calling this method.
   * The default render priority is DzRenderMgr::RENDER_PRIORITY_NORMAL.
   */
  assetUri: DzUri

  /**
   * @returns The material with the given index
   * @param which - 
   */
  getMaterial (which: number): DzMaterial;

  /**
   * @returns The number of materials that have been created
   */
  getNumMaterials (): number;

  /**
   * @returns The duplicate material if a material could be duplicated, otherwise a DzDefaultMaterial.
   * @since 4.6.2.104
   * @param context - The context of the material to duplicate.
   */
  duplicateOrDefaultMaterial (context: DzElementDuplicateContext): DzMaterial;

  /**
   * Sets whether or not this material should propagate its render priority up to all the nodes that use it. Setting this to true will also ensure that the render priority is set for nodes that the material is assigned to at a later time.
   * The default behaviour is to not propagate.
   * @param propagate - Whether or not the new priority value should be applied to all nodes that use this material (this will include the top-level skeleton node when dealing with figures).
   */
  enablePropagateRenderPriorityToNodes (propagate: boolean): void;

  /**
   * @returns The uv set that is used by this material for the given shape. May be NULL if the shape does not have any UV Sets.
   * @since 4.9.3.69
   * @param shape - 
   */
  getActiveUVSet (shape: shape_dz): DzUVSet;

  /**
   * @returns The UV set that is used by this material for the given geometry. May be NULL if the geometry does not have any UV Sets.
   * @since 4.9.3.69
   * @param geom - 
   */
  getActiveUVSet (geom: DzGeometry): DzUVSet;

  /**
   * Collects all the images that are being used by this material at the current time and inserts them into the given list if they are not already there.
   */
  getAllMaps (): Array<unknown>;

  /**
   * @returns The 'baked' map for the material. NULL if the material is not using a baked map.
   */
  getBakedMap (): DzTexture;

  /**
   * @returns The opactiy value for this material.
   */
  getBaseOpacity (): number;

  /**
   * TODO: Add description.
   */
  getBoundingBox (): DzBox3;

  /**
   * @returns The color ('texture') map for this material.
   */
  getColorMap (): DzTexture;

  /**
   * @returns The diffuse color for this material.
   */
  getDiffuseColor (): Color;

  /**
   * @returns The material index of this material.
   */
  getIndex (): number;

  /**
   * @returns The name for the type of shader (not the name for the material instance).
   */
  getMaterialName (): string;

  /**
   * @returns The number of OpenGL texture maps necessary for rendering this material in OpenGL (e.g. one for a diffuse color map, one for an opacity map, etc.).
   */
  getNumGLMaps (): number;

  /**
   * Deprecated
   * This is deprecated because its name is somewhat of a misnomer. Use getNumGLMaps instead.
   * @returns The number of OpenGL texture maps necessary for rendering this material in OpenGL (e.g. one for a diffuse color map, one for an opacity map, etc.).
   */
  getNumUVMaps (): number;

  /**
   * @returns The opacity map for this material.
   */
  getOpacityMap (): DzTexture;

  /**
   * @returns The property that controls the render priority propagation for this material.
   */
  getPropagatePriorityControl (): DzBoolProperty;

  /**
   * @returns The property that controls the render priority for this material.
   */
  getRenderPriorityControl (): DzEnumProperty;

  /**
   * @returns A list of the shapes this material is on.
   */
  getShapeList (): Array<unknown>;

  /**
   * @returns The property that controls the smoothing angle for this material.
   */
  getSmoothAngleControl (): DzFloatProperty;

  /**
   * @returns The property that controls whether smoothing is enabled for this material.
   */
  getSmoothControl (): DzBoolProperty;

  /**
   * @returns The current smoothing angle for the material.
   */
  getSmoothingAngle (): number;

  /**
   * @returns A list of [trimmed] tags on this material.
   * @since 4.7.1.29
   */
  getTags (): Array<unknown>;

  /**
   * @returns The property that holds the tags for this material.
   * @since 4.7.1.29
   */
  getTagsControl (): DzStringProperty;

  /**
   * @returns The property that controls the active UV set for this material.
   */
  getUVSetControl (): DzEnumProperty;

  /**
   * @returns true if the material supports mapping of the Diffuse channel, otherwise false.
   */
  isColorMappable (): boolean;

  /**
   * @returns true if the material is currently drawn with a highlight, otherwise false.
   */
  isHighlighted (): boolean;

  /**
   * @returns true if the material supports mapping of the Opacity channel, otherwise false.
   */
  isOpacityMappable (): boolean;

  /**
   * @returns true if this material is opaque, otherwise false.
   */
  isOpaque (): boolean;

  /**
   * @returns Whether or not this material should propagate its render priority up to all the nodes that use it.
   */
  isPropagateRenderPriorityToNodesEnabled (): boolean;

  /**
   * Retrieve selection state.
   * @returns true if the material is selected, otherwise false.
   */
  isSelected (): boolean;

  /**
   * @returns true if smoothing is enabled for the material, otherwise false.
   */
  isSmoothingOn (): boolean;

  /**
   * Marks the asset as being modified. Makes the current author the author of the file.
   * @returns true if the asset was successfully marked as modified, otherwise false.
   */
  modifyAsset (): boolean;

  /**
   * Marks the asset as being modified. Makes the current author the author of the file. Sets the file URI for the asset to the given URI.
   * @returns true if the asset was successfully marked as modified, otherwise false.
   * @param newUri - The new file URI to set for the asset.
   */
  modifyAsset (newUri: DzUri): boolean;

  /**
   * TODO: Add description.
   */
  needsPtex (): boolean;

  /**
   * @returns true if the rendering geometry needs the additional dPds and dPdsM parameters for shaders, otherwise false.
   */
  needsTangentSpaceParams (): boolean;

  /**
   * Set the selection state for this material.
   * @param onOff - If true, the material will be selected. If false, the material will be deselected.
   */
  select (onOff: boolean): void;

  /**
   * Set the 'baked' shader map for this material. This overrides any current material settings and just draws the map. This is useful for representing the results of off-line shaders that can not be represented in OpenGL - the results of the shader are 'baked' onto a texture map, and then applied to the material with this function.
   * @param img - The image that will be applied to the material instead of the current material settings. If NULL, the current baked map is cleared and the material is returned to using its current settings.
   */
  setBakedMap (img: DzTexture): void;

  /**
   * Set the opacity value for this material.
   * @param val - 
   */
  setBaseOpacity (val: number): void;

  /**
   * Set the color ('texture') map for this material.
   * @param img - 
   */
  setColorMap (img: DzTexture): void;

  /**
   * Set the diffuse color for this material.
   * @param color - 
   */
  setDiffuseColor (color: Color): void;

  /**
   * Set the opactiy map for this material.
   * @param img - 
   */
  setOpacityMap (img: DzTexture): void;

  /**
   * Sets the smoothing angle for the material. This only has effect on the material if smoothing is enabled.
   * @param angle - The smoothing angle for the material. Any edges on the mesh where angle of the normals of the adjacent facets is less than this value will be smoothed. Higher values mean more smoothing, lower values mean less smoothing.
   */
  setSmoothingAngle (angle: number): void;

  /**
   * Sets whether or not smoothing is enabled for the material.
   * @param onOff - If true, smoothing is applied according to the smoothing angle. If false, no smoothing is applied to the material.
   */
  setSmoothingOn (onOff: boolean): void;

  /**
   * @returns true if these materials are using the same shaders, otherwise false.
   * Default implementation returns true if the materials are the same class.
   * @param otherMat - 
   */
  shadersMatch (otherMat: DzMaterial): boolean;

  /**
   * @returns true if this material should always embed into a DSON scene, otherwise false.
   */
  shouldAlwaysEmbed (): boolean;

  /**
   * Causes this material to be drawn with a highlight based on the styles current highlight color. This is used by material selection tools, etc, to give visual feedback to the user about a material in the viewport.
   */
  startDrawHighlight (): void;

  /**
   * Causes this material to stop being drawn with a highlight.
   */
  stopDrawHighlight (): void;

  assetModified: Signal<{
    /**
     * Emitted when the material has been modified.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * Emitted after the material has been saved.
     */
  (): void;
  }>;
  bakedMapChanged: Signal<{
    /**
     * Transmitted when the baked map of this material changes.
     */
  (): void;
  }>;
  selectionStateChanged: Signal<{
    /**
     * Transmitted when the selection state of this material changes.
     * @param mat - 
     * @param onOff - 
     */
  (mat: DzMaterial, onOff: boolean): void;
  }>;
  settingsChanged: Signal<{
    /**
     * Transmitted when one of the values of this material changes.
     */
  (): void;
  }>;
  smoothingChanged: Signal<{
    /**
     * Transmitted when the smoothing settings of this material change.
     */
  (): void;
  }>;
  tagsChanged: Signal<{
    /**
     * Transmitted when the tags on this material change.
     */
  (): void;
  }>;
  uvsChanged: Signal<{
    /**
     * Transmitted when the uv settings of this material change.
     */
  (): void;
  }>;
}

declare namespace DzMaterial
{

  /**
   * @returns The material with the given index
   * @param which - 
   */
  export function getMaterial (which: number): DzMaterial;

  /**
   * @returns The number of materials that have been created
   */
  export function getNumMaterials (): number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/materialassetfilter_dz
 * Class for saving DSON-based Material(s) Presets.
 * @remarks An asset save filter for saving a Material(s) Preset in the DSON format.
 * @seealso Sample: Save a Material(s) Preset
 */
interface DzMaterialAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzMaterialAssetFilter:
{
  prototype: DzMaterialAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzMaterialAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/matrix3_dz
 * A 4 x 3 transformation matrix.
 * @remarks A transformation matrix consisting of 4 rows and 3 columns.
 */
interface DzMatrix3 extends Object
{

  /**
   * Whether or not the matrix is identity
   */
  isIdentity: boolean

  /**
   * The value of the matrix at [1, 1]
   */
  m11: number

  /**
   * The value of the matrix at [1, 2]
   */
  m12: number

  /**
   * The value of the matrix at [1, 3]
   */
  m13: number

  /**
   * The value of the matrix at [1, 4]
   */
  m14: number

  /**
   * The value of the matrix at [2, 1]
   */
  m21: number

  /**
   * The value of the matrix at [2, 2]
   */
  m22: number

  /**
   * The value of the matrix at [2, 3]
   */
  m23: number

  /**
   * The value of the matrix at [2, 4]
   */
  m24: number

  /**
   * The value of the matrix at [3, 1]
   */
  m31: number

  /**
   * The value of the matrix at [3, 2]
   */
  m32: number

  /**
   * The value of the matrix at [3, 3]
   */
  m33: number

  /**
   * The value of the matrix at [3, 4]
   */
  m34: number

  /**
   * @returns The determinant of the upper 3×3 part of the matrix.
   * @since 4.9.2.18
   */
  det3 (): number;

  /**
   * @returns The inverse of the matrix.
   */
  inverse (): DzMatrix3;

  /**
   * Sets the matrix to be identity
   */
  makeIdentity (): void;

  /**
   * @returns this matrix as a 4×4 matrix
   * @since 4.9.2.18
   */
  matrix4 (): DzMatrix4;

  /**
   * Calculates the multiplication of this matrix by the given matrix.
   * @returns The result of the multiplication
   * @param mat - The matrix to multiply by
   */
  multiply (mat: DzMatrix3): DzMatrix3;

  /**
   * Multiplies matrix by given column vector, giving column vector result
   * @returns The result of multiplying the given vector through this matrix
   * @param vec - The vector to multiplying this matrix by
   */
  multMatrixVec (vec: DzVec3): DzVec3;

  /**
   * Transforms the given vector through this matrix.
   * @since 4.9.2.18
   * @param vec - The vector to transform through this matrix
   */
  multVec (vec: DzVec3): DzVec3;

  /**
   * Zero rotation part of the matrix.
   */
  noRot (): void;

  /**
   * Set scale to unity.
   */
  noScale (): void;

  /**
   * Zero translation part of the matrix.
   */
  noTrans (): void;

  /**
   * Test for orthogonal 3×3 sub-matrix (orthonormal rows)
   */
  orthogonal (): boolean;

  /**
   * Orthogonalize the matrix.
   */
  orthogonalize (): void;

  /**
   * Accumulate rotation by pre-multiplying.
   * @param rot - 
   */
  preRotate (rot: DzQuat): void;

  /**
   * Accumulate rotation around the X axis by pre-multiplying.
   * @param radians - 
   */
  preRotateX (radians: number): void;

  /**
   * Accumulate rotation around the Y axis by pre-multiplying.
   * @param radians - 
   */
  preRotateY (radians: number): void;

  /**
   * Accumulate rotation around the Z axis by pre-multiplying.
   * @param radians - 
   */
  preRotateZ (radians: number): void;

  /**
   * Accumulate a translation by pre-multiplying.
   * @param vec - The point at which to translate
   */
  preTranslate (vec: DzVec3): void;

  /**
   * Accumulate rotation (by post-multiplying).
   * @param rot - 
   */
  rotate (rot: DzQuat): void;

  /**
   * Accumulate rotation around the X axis (by post-multiplying).
   * @param radians - 
   */
  rotateX (radians: number): void;

  /**
   * Accumulate rotation around the Y axis (by post-multiplying).
   * @param radians - 
   */
  rotateY (radians: number): void;

  /**
   * Accumulate rotation around the Z axis (by post-multiplying).
   * @param radians - 
   */
  rotateZ (radians: number): void;

  /**
   * @returns The i'th row of the matrix.
   * @since 4.9.2.18
   * @param i - 
   */
  row (i: number): DzVec3;

  /**
   * TODO: Add description.
   * @param scale - 
   * @param [affectTrans=false] - 
   */
  scale (scale: number, affectTrans?: boolean): void;

  /**
   * Accumulates a scale along an arbitrary axis (by post-multiplying).
   * @since 4.9.2.18
   * @param scale - The scale to apply
   * @param direction - 
   * @param [affectTrans=false] - The direction to scale
   */
  scale (scale: number, direction: DzVec3, affectTrans?: boolean): void;

  /**
   * TODO: Add description.
   * @param vec - 
   * @param [affectTrans=false] - 
   */
  scale (vec: DzVec3, affectTrans?: boolean): void;

  /**
   * Set translation part.
   * @param vec - The point to use for translation
   */
  setTrans (vec: DzVec3): void;

  /**
   * Shears the matrix along the x and y axis (by post-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param yShear - The value to shear along the y axis
   */
  shearXY (xShear: number, yShear: number): void;

  /**
   * Shears the matrix along the x and z axis (by post-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param zShear - The value to shear along the z axis
   */
  shearXZ (xShear: number, zShear: number): void;

  /**
   * Shears the matrix along the y and z axis (by post-multiplying).
   * @since 4.9.2.18
   * @param yShear - The value to shear along the y axis
   * @param zShear - The value to shear along the z axis
   */
  shearYZ (yShear: number, zShear: number): void;

  /**
   * @returns The trace of the matrix
   * @since 4.9.2.18
   */
  trace (): number;

  /**
   * Accumulate a translation (by post-multiplying).
   * @param vec - The point at which to translate
   */
  translate (vec: DzVec3): void;

}

declare var DzMatrix3:
{
  prototype: DzMatrix3;

  /**
   * Default Constructor.
   * @param [initIdentity=false] - If true, the matrix will be set to the identity matrix, otherwise, the matrix values will be indeterminate.
   */
  new (initIdentity?: boolean): DzMatrix3;

  /**
   * Constructs a 4×3 matrix from 12 elements in “Column Major” order.
   * @example
   * // Create a new 4x3 matrix
   * var mtx3 = new DzMatrix3( 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0 );
   * // Print the input sequence, for comparison
   * print( 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0 );
   * // Print elements of the matrix in column major order
   * print(
   * 	mtx3.m11, mtx3.m21, mtx3.m31,
   * 	mtx3.m12, mtx3.m22, mtx3.m32,
   * 	mtx3.m13, mtx3.m23, mtx3.m33,
   * 	mtx3.m14, mtx3.m24, mtx3.m34 );
   * @param m11 - The value of the matrix at [1, 1]
   * @param m21 - The value of the matrix at [2, 1]
   * @param m31 - The value of the matrix at [3, 1]
   * @param m12 - The value of the matrix at [1, 2]
   * @param m22 - The value of the matrix at [2, 2]
   * @param m32 - The value of the matrix at [3, 2]
   * @param m13 - The value of the matrix at [1, 3]
   * @param m23 - The value of the matrix at [2, 3]
   * @param m33 - The value of the matrix at [3, 3]
   * @param m14 - The value of the matrix at [1, 4]
   * @param m24 - The value of the matrix at [2, 4]
   * @param m34 - The value of the matrix at [3, 4]
   */
  new (m11: number, m21: number, m31: number, m12: number, m22: number, m32: number, m13: number, m23: number, m33: number, m14: number, m24: number, m34: number): DzMatrix3;

  /**
   * Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
   * @since 4.6.4.98
   * @param xAxis - 
   * @param yAxis - 
   * @param zAxis - 
   */
  new (xAxis: DzVec3, yAxis: DzVec3, zAxis: DzVec3): DzMatrix3;

  /**
   * Constructs a 4×3 matrix from a quaternion. Initializes the matrix to the given rotation.
   * @since 4.6.4.98
   * @param rot - The rotation to initialize the matrix to.
   */
  new (rot: DzQuat): DzMatrix3;

  /**
   * Copy Constructor.
   * @param mat - The matrix to copy.
   */
  new (mat: DzMatrix3): DzMatrix3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/matrix4_dz
 * A 4 x 4 transformation matrix.
 * @remarks A transformation matrix consisting of 4 rows and 4 columns.
 */
interface DzMatrix4 extends Object
{

  /**
   * Whether or not the matrix is identity
   */
  isIdentity: boolean

  /**
   * The value of the matrix at [1, 1]
   */
  m11: number

  /**
   * The value of the matrix at [1, 2]
   */
  m12: number

  /**
   * The value of the matrix at [1, 3]
   */
  m13: number

  /**
   * The value of the matrix at [1, 4]
   */
  m14: number

  /**
   * The value of the matrix at [2, 1]
   */
  m21: number

  /**
   * The value of the matrix at [2, 2]
   */
  m22: number

  /**
   * The value of the matrix at [2, 3]
   */
  m23: number

  /**
   * The value of the matrix at [2, 4]
   */
  m24: number

  /**
   * The value of the matrix at [3, 1]
   */
  m31: number

  /**
   * The value of the matrix at [3, 2]
   */
  m32: number

  /**
   * The value of the matrix at [3, 3]
   */
  m33: number

  /**
   * The value of the matrix at [3, 4]
   */
  m34: number

  /**
   * The value of the matrix at [4, 1]
   */
  m41: number

  /**
   * The value of the matrix at [4, 2]
   */
  m42: number

  /**
   * The value of the matrix at [4, 3]
   */
  m43: number

  /**
   * The value of the matrix at [4, 4]
   */
  m44: number

  /**
   * @returns The inverse of the matrix.
   */
  inverse (): DzMatrix4;

  /**
   * Test and choose best inverse for current matrix
   * @since 4.9.2.18
   */
  invert (): void;

  /**
   * Sets the matrix to be identity
   */
  makeIdentity (): void;

  /**
   * @returns The value of this matrix as a DzMatrix3.
   * @since 4.9.2.18
   */
  matrix3 (): DzMatrix3;

  /**
   * Calculates the multiplication of this matrix by the given matrix.
   * @returns The result of the multiplication
   * @param mat - The matrix to multiply by
   */
  multiply (mat: DzMatrix4): DzMatrix4;

  /**
   * Multiplies matrix by given column vector, giving column vector result
   * @returns The result of multiplying the given vector through this matrix
   * @param vec - The vector to multiplying this matrix by
   */
  multMatrixVec (vec: DzVec3): DzVec3;

  /**
   * Multiplies given row vector by matrix, giving row vector result
   * @returns The result of multiplying the given vector through this matrix
   * @param vec - The vector to multiplying this matrix by
   */
  multVecMatrix (vec: DzVec3): DzVec3;

  /**
   * Test for orthogonal 3×3 sub-matrix (orthonormal rows)
   * @since 4.6.4.98
   */
  orthogonal (): boolean;

  /**
   * Accumulates a uniform scale by pre-multiplying.
   * @param scale - 
   */
  preScale (scale: number): void;

  /**
   * Accumulates a general scale by pre-multiplying.
   * @param vec - The scale to use
   */
  preScale (vec: DzVec3): void;

  /**
   * Accumulates a scale along an arbitrary axis by pre-multiplying.
   * @since 4.9.2.18
   * @param scale - 
   * @param direction - 
   */
  preScale (scale: number, direction: DzVec3): void;

  /**
   * Shears the matrix along the x and y axis (by pre-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param yShear - The value to shear along the y axis
   */
  preShearXY (xShear: number, yShear: number): void;

  /**
   * Shears the matrix along the x and z axis (by pre-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param zShear - The value to shear along the z axis
   */
  preShearXZ (xShear: number, zShear: number): void;

  /**
   * Shears the matrix along the y and z axis (by pre-multiplying).
   * @since 4.9.2.18
   * @param yShear - The value to shear along the y axis
   * @param zShear - The value to shear along the z axis
   */
  preShearYZ (yShear: number, zShear: number): void;

  /**
   * Accumulate a translation by pre-multiplying.
   * @param vec - The point at which to translate
   */
  preTranslate (vec: DzVec3): void;

  /**
   * Accumulate rotation (by post-multiplying).
   * @param rot - 
   */
  rotate (rot: DzQuat): void;

  /**
   * Accumulate rotation around the X axis (by post-multiplying).
   * @param radians - 
   */
  rotateX (radians: number): void;

  /**
   * Accumulate rotation around the Y axis (by post-multiplying).
   * @param radians - 
   */
  rotateY (radians: number): void;

  /**
   * Accumulate rotation around the Z axis (by post-multiplying).
   * @param radians - 
   */
  rotateZ (radians: number): void;

  /**
   * @returns The first three elements of the i'th row of the matrix.
   * @since 4.9.2.18
   * @param i - 
   */
  row (i: number): DzVec3;

  /**
   * Accumulates a general scale (by post-multiplying).
   * @param vec - 
   */
  scale (vec: DzVec3): void;

  /**
   * Accumulates a uniform scale (by post-multiplying).
   * @param scale - 
   */
  scale (scale: number): void;

  /**
   * Accumulates a scale along an arbitrary axis (by post-multiplying).
   * @since 4.9.2.18
   * @param scale - 
   * @param direction - 
   */
  scale (scale: number, direction: DzVec3): void;

  /**
   * TODO: Add description.
   * @param i - 
   * @param vec - 
   */
  setRow (i: number, vec: DzVec3): void;

  /**
   * Sets matrix to translate by given vector, leaving rotation as is
   * @param vec - The point at which to translate
   */
  setTrans (vec: DzVec3): void;

  /**
   * Shears the matrix along the x and y axis (by post-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param yShear - The value to shear along the y axis
   */
  shearXY (xShear: number, yShear: number): void;

  /**
   * Shears the matrix along the x and z axis (by post-multiplying).
   * @since 4.9.2.18
   * @param xShear - The value to shear along the x axis
   * @param zShear - The value to shear along the z axis
   */
  shearXZ (xShear: number, zShear: number): void;

  /**
   * Shears the matrix along the y and z axis (by post-multiplying).
   * @since 4.9.2.18
   * @param yShear - The value to shear along the y axis
   * @param zShear - The value to shear along the z axis
   */
  shearYZ (yShear: number, zShear: number): void;

  /**
   * @returns The trace of the matrix
   * @since 4.9.2.18
   */
  trace (): number;

  /**
   * Accumulate a translation (by post-multiplying).
   * @param vec - The point at which to translate
   */
  translate (vec: DzVec3): void;

  /**
   * @returns The transpose of the matrix.
   * @since 4.9.2.18
   */
  transpose (): DzMatrix4;

}

declare var DzMatrix4:
{
  prototype: DzMatrix4;

  /**
   * Default Constructor.
   * @param [initIdentity=false] - If true, the matrix will be set to the identity matrix, otherwise, the matrix values will be indeterminate.
   */
  new (initIdentity?: boolean): DzMatrix4;

  /**
   * Constructs a 4×4 matrix from 16 elements in “Column Major” order.
   * @example
   * // Create a new 4x4 matrix
   * var mtx4 = new DzMatrix4( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 );
   * // Print the input sequence, for comparison
   * print( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 );
   * // Print elements of the matrix in column major order
   * print(
   * 	mtx4.m11, mtx4.m21, mtx4.m31, mtx4.m41,
   * 	mtx4.m12, mtx4.m22, mtx4.m32, mtx4.m42,
   * 	mtx4.m13, mtx4.m23, mtx4.m33, mtx4.m43,
   * 	mtx4.m14, mtx4.m24, mtx4.m34, mtx4.m44 );
   * @param m11 - The value of the matrix at [1, 1]
   * @param m21 - The value of the matrix at [2, 1]
   * @param m31 - The value of the matrix at [3, 1]
   * @param m41 - The value of the matrix at [4, 1]
   * @param m12 - The value of the matrix at [1, 2]
   * @param m22 - The value of the matrix at [2, 2]
   * @param m32 - The value of the matrix at [3, 2]
   * @param m42 - The value of the matrix at [4, 2]
   * @param m13 - The value of the matrix at [1, 3]
   * @param m23 - The value of the matrix at [2, 3]
   * @param m33 - The value of the matrix at [3, 3]
   * @param m43 - The value of the matrix at [4, 3]
   * @param m14 - The value of the matrix at [1, 4]
   * @param m24 - The value of the matrix at [2, 4]
   * @param m34 - The value of the matrix at [3, 4]
   * @param m44 - The value of the matrix at [4, 4]
   */
  new (m11: number, m21: number, m31: number, m41: number, m12: number, m22: number, m32: number, m42: number, m13: number, m23: number, m33: number, m43: number, m14: number, m24: number, m34: number, m44: number): DzMatrix4;

  /**
   * Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
   * @since 4.6.4.98
   * @param xAxis - 
   * @param yAxis - 
   * @param zAxis - 
   */
  new (xAxis: DzVec3, yAxis: DzVec3, zAxis: DzVec3): DzMatrix4;

  /**
   * Constructs a 4×4 matrix from a quaternion. Initializes the matrix to the given rotation.
   * @since 4.6.4.98
   * @param rot - The rotation to initialize the matrix to.
   */
  new (rot: DzQuat): DzMatrix4;

  /**
   * Copy Constructor.
   * @param mat - The matrix to copy.
   */
  new (mat: DzMatrix4): DzMatrix4;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/menu_dz
 * Basic Menu construction class.
 * @remarks TODO: Add detailed description.
 */
interface DzMenu extends QObject
{

  /**
   * Adds the DzAction to the given menu.
   * @returns The item id of the action in the menu.
   * @param action - A pointer to the action item to add to the menu.
   * @param [menu=0] - The menu id of the menu to add the action to. If zero, the action will be added to the root menu.
   */
  addAction (action: DzAction, menu?: number): number;

  /**
   * Adds an entry to the given menu.
   * @returns The item id of the new menu item.
   * @param item - The label that will appear in the menu for the user to activate the item.
   * @param [menu=0] - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
   */
  addItem (item: string, menu?: number): number;

  /**
   * Adds an entry to the given menu and connects it to a slot.
   * @returns The item id of the new menu item.
   * @param item - The label that will appear in the menu for the user to activate the item.
   * @param receiver - The QObject to connect the activate signal to.
   * @param member - The slot/signal that will be connect to the activate signal.
   * @param [menu=0] - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
   */
  addItem (item: string, receiver: QObject, member: string, menu?: number): number;

  /**
   * Adds a separator bar to the given menu.
   * @param [menu=0] - The menu id of the menu to add the separator to. If zero, the separator will be added to the root menu.
   */
  addSeparator (menu?: number): void;

  /**
   * Creates a submenu with the given label, and adds it to the given menu.
   * @returns The menu id of the new submenu.
   * @param label - The text that will appear in the parent menu for the user to activate the submenu.
   * @param [menu=0] - The menu id of the parent menu to add the submenu to. If zero, the submenu will be added to the root menu.
   */
  addSubMenu (label: string, menu?: number): number;

  /**
   * Shows the menu to the user.
   * @returns The item id of the item selected by the user, or -1 if the menu was closed without the user selecting an item.
   * @param pos - The global position that the menu will be displayed at.
   */
  exec (pos: Point): number;

  /**
   * Shows the menu to the user.
   * @returns The item id of the item selected by the user, or -1 if the menu was closed without the user selecting an item.
   */
  exec (): number;

  /**
   * Finds a submenu with the given label, and returns its menu id.
   * @returns The menu id of the new submenu, -1 if submenu is not found.
   * @param label - The text that appears in the parent menu for the user to activate the submenu.
   * @param [menu=0] - The menu id of the parent menu to search for the submenu in. If zero, the root menu will be searched.
   */
  findSubMenu (label: string, menu?: number): number;

  /**
   * @returns true if no items or actions have been added to the menu.
   */
  isEmpty (): boolean;

  activated: Signal<{
    /**
     * Emitted when the user selects an item in the menu, or one of its submenus.
     * @param id - The item id of the item the user selected.
     */
  (id: number): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/messagebox_dz
 * DAZScript wrapper for QMessageBox.
 * @remarks The DzMessageBox class is available in DAZScript via Global::MessageBox.
 * It provides functions that display pre-built message boxes to the user. This is the easiest way for a script to interact with a user - simply call one of the functions as shown in the following examples:
 * @example
 * Display an information box with an 'Ok' button
 * MessageBox.information( qsTr("MyScript finished successfully."), qsTr("MyScript"), qsTr("&OK") );
 * @example
 * Ask the user a question with 'Yes'/'No' buttons
 * if( MessageBox.question( qsTr("Do you want to reset the entire figure?"), qsTr("MyScript"), qsTr("&Yes"), qsTr("&No") ) == 0 ){
 * 	resetEntireFigure();
 * }
 * @example
 * Display a warning message to the user
 * if( MessageBox.warning( qsTr("If you continue, the entire figure will be reset!"), qsTr("MyScript"), qsTr("&OK"), qsTr("&Cancel") ) == 1 ){
 * 	return;
 * }
 * @example
 * Display a critical message to the user
 * var error = doSomething();
 * if( error != 0 ){
 * 	MessageBox.critical( qsTr("The script has encountered a critical error!"), qsTr("MyScript"), qsTr("&OK") );
 * 	return;
 * }
 */
interface DzMessageBox extends QObject
{

  /**
   * Shows a critical dialog box to the user.
   * @returns The index of the button that the user pressed (0, 1, or 2)
   * @param text - The text that is shown in the body of the dialog.
   * @param title - The title of the dialog.
   * @param button0 - The text of button 0.
   * @param [button1=“”] - The text of button 1 (if empty, no button will be shown).
   * @param [button2=“”] - The text of button 2 (if empty, no button will be shown).
   */
  critical (text: string, title: string, button0: string, button1?: string, button2?: string): number;

  /**
   * Shows an information dialog box to the user.
   * @returns The index of the button that the user pressed (0, 1, or 2).
   * @param text - The text that is shown in the body of the dialog.
   * @param title - The title of the dialog.
   * @param button0 - The text of button 0.
   * @param [button1=“”] - The text of button 1 (if empty, no button will be shown).
   * @param [button2=“”] - The text of button 2 (if empty, no button will be shown).
   */
  information (text: string, title: string, button0: string, button1?: string, button2?: string): number;

  /**
   * Shows a question dialog box to the user.
   * @returns The index of the button that the user pressed (0, 1, or 2).
   * @param text - The text that is shown in the body of the dialog.
   * @param title - The title of the dialog.
   * @param button0 - The text of button 0.
   * @param button1 - The text of button 1.
   * @param [button2=“”] - The text of button 2 (if empty, no button will be shown).
   */
  question (text: string, title: string, button0: string, button1: string, button2?: string): number;

  /**
   * Shows a warning dialog box to the user.
   * @returns The index of the button that the user pressed (0, 1, or 2).
   * @param text - The text that is shown in the body of the dialog.
   * @param title - The title of the dialog.
   * @param button0 - The text of button 0.
   * @param button1 - The text of button 1.
   * @param [button2=“”] - The text of button 2 (if empty, no button will be shown).
   */
  warning (text: string, title: string, button0: string, button1: string, button2?: string): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/modifier_dz
 * Base class of all local space modifiers.
 * @remarks TODO: Add detailed description.
 */
interface DzModifier extends DzElement
{

  /**
   * @returns The section that this modifier was assigned to in the DzObject modifier stack (list).
   * @since 4.11.0.44
   */
  getAssignedModifierStackSectionID (): number;

  /**
   * @returns The section that this modifier should be a part of in the DzObject modifier stack (list).
   * @since 4.11.0.44
   */
  getPreferredModifierStackSectionID (): number;

  /**
   * @returns The value used to mark a modifier as not having a section ID.
   * @since 4.11.0.44
   */
  getUnknownModifierStackSectionID (): number;

  aboutToBeRemoved: Signal<{
    /**
     * Emitted immediately before the modifier is removed from its owner.
     */
  (): void;
  }>;
  added: Signal<{
    /**
     * Emitted when the modifier has been added to its owner.
     */
  (): void;
  }>;
  currentValueChanged: Signal<{
    /**
     * Emitted when the modifier has changed and needs to be reapplied.
     */
  (): void;
  }>;
  removed: Signal<{
    /**
     * Emitted when the modifier has been removed from its owner.
     */
  (): void;
  }>;
}


/**
 * Defines the DzMorph class.
 * 
 */
interface DzMorph extends DzModifier, DzSceneAsset
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloader_dz
 * Implements the loading and application of a morph from a geometry file.
 * @since 4.9.3.46
 * @attention This object is provided by the Morph Loader Pro plugin. It is only available when the Morph Loader Pro plugin is activated and enabled.
 */
interface DzMorphLoader extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly WeightMap: number;

  /**
   * TODO: Add description.
   */
  readonly FacetList: number;

  /**
   * TODO: Add description.
   */
  readonly EdgeList: number;

  /**
   * TODO: Add description.
   */
  readonly VertexList: number;

  /**
   * TODO: Add description.
   */
  readonly UnknownMap: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly EntireFigure: number;

  /**
   * TODO: Add description.
   */
  readonly SelectedNodes: number;

  /**
   * TODO: Add description.
   */
  readonly PrimaryNode: number;

  /**
   * TODO: Add description.
   */
  readonly SingleSkinFigure: number;

  /**
   * TODO: Add description.
   */
  readonly SingleSkinFigureFromGraft: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly DoNotMirror: number;

  /**
   * TODO: Add description.
   */
  readonly XSwap: number;

  /**
   * TODO: Add description.
   */
  readonly XPosToNeg: number;

  /**
   * TODO: Add description.
   */
  readonly XNegToPos: number;

  /**
   * TODO: Add description.
   */
  readonly YSwap: number;

  /**
   * TODO: Add description.
   */
  readonly YPosToNeg: number;

  /**
   * TODO: Add description.
   */
  readonly YNegToPos: number;

  /**
   * TODO: Add description.
   */
  readonly ZSwap: number;

  /**
   * TODO: Add description.
   */
  readonly ZPosToNeg: number;

  /**
   * TODO: Add description.
   */
  readonly ZNegToPos: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly MakeUnique: number;

  /**
   * TODO: Add description.
   */
  readonly DeltasAndERCLinks: number;

  /**
   * TODO: Add description.
   */
  readonly DeltasOnly: number;

  /**
   * Gets the path for a given weight map context and a given node.
   * @returns The path for the weight map context on node.
   * @param context - The weight map context.
   * @param node - The node.
   */
  getPathForContext (context: DzWeightMapContext, node: DzNode): string;

  /**
   * Creates a morph on the node provided from the geometry loaded from the file. This function supports morph creation from vertex-only geometries.
   * @returns The log containing messages about the creation of the morph.
   * @param settings - The scale to apply to the geometry that is read from the file.
   * @param node - The node containing the geometry to create the morph for.
   * @param [onlyErrorsOrWarnings=true] - If true (default), only errors and warnings will be returned.
   * @param [plainText=true] - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
   */
  createMorph (settings: DzFileIOSettings, node: DzNode, onlyErrorsOrWarnings?: boolean, plainText?: boolean): string;

  /**
   * Creates a morph on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
   * @returns The log containing messages about the creation of the morph.
   * @param mesh - The geometry for the morph.
   * @param node - The node containing the geometry to create the morph for.
   * @param [onlyErrorsOrWarnings=true] - If true (default), only errors and warnings will be returned.
   * @param [plainText=true] - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
   */
  createMorph (mesh: vertexmesh_dz, node: DzNode, onlyErrorsOrWarnings?: boolean, plainText?: boolean): string;

  /**
   * @returns The strength that will be used for attenuating the effect of the morph being loaded on the vertices that reside along the boundary of the current geometric selection.
   */
  getAttenuateEdgeStrength (): number;

  /**
   * @returns The path to the map that will be used for attentuating the effect of the morph.
   */
  getAttenuateMapPath (): string;

  /**
   * @returns The strength that the map used to attenuate the effect of the morph will be applied at.
   */
  getAttenuateStrength (): number;

  /**
   * Gets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
   * @returns true if orphans are to be cleaned up when overwriting existing morphs, otherwise false.
   */
  getCleanUpOrphans (): boolean;

  /**
   * @returns The node that the control property will be located on.
   * @attention This has no meaning if getCreateControlProperty() is false.
   */
  getControlNode (): DzNode;

  /**
   * @returns The property that will serve as the additional control property for the morph(s) created.
   * @attention This has no meaning if getCreateControlProperty() is false.
   */
  getControlProperty (): DzNumericProperty;

  /**
   * @returns The custom label that will be used for secondary (non-control) properties.
   * @attention This has no meaning if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
   */
  getControlPropertyCustomLabel (): string;

  /**
   * @returns The custom value for creating ERC links to the control property.
   * @attention This has no meaning if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
   * DzERCLink::ERCType : getControlPropertyERCType()
   * @returns The ERC type to use when connecting secondary properties to the control property.
   */
  getControlPropertyERCCustomValue (): number;

  /**
   * @returns true if a custom value will be used for the ERC links to the control property, otherwise false.
   * @attention This has no meaning if getCreateControlProperty() is false.
   */
  getControlPropertyERCUseCustomValue (): boolean;

  /**
   * @returns true if a custom label will be used for the secondary (non-control) properties, otherwise false.
   * @attention This has no meaning if getCreateControlProperty() is false.
   */
  getControlPropertyUseCustomLabel (): boolean;

  /**
   * @returns true if the loader will create and use ERC links to an additional control property.
   */
  getCreateControlProperty (): boolean;

  /**
   * Gets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
   * @returns The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
   */
  getDeltaTolerance (): number;

  /**
   * @returns The full path to the file that this morph will load its geometry from.
   */
  getFilename (): string;

  /**
   * @returns true if secondary (non-control) properties are hidden, otherwise false.
   * @attention This has no meaning if getCreateControlProperty() is false.
   */
  getHideSecondaryProperties (): boolean;

  /**
   * Gets the type of mirroring to apply.
   * @returns The type of mirroring that will be applied to the morph.
   */
  getMorphMirroring (): number;

  /**
   * @returns The name of the morph(s) that will be created by this morph loader.
   */
  getMorphName (): string;

  /**
   * @returns true if an existing morph by the same name will be replaced, otherwise false.
   */
  getOverwriteExisting (): number;

  /**
   * @returns true if existing deltas in a morph by the same name be preserved, otherwise false.
   */
  getPreserveExistingDeltas (): boolean;

  /**
   * @returns The path of the property group that morph value properties will be added to.
   */
  getPropertyGroupPath (): string;

  /**
   * @returns true if joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas, otherwise false.
   */
  getReverseDeformations (): boolean;

  /**
   * @returns The path of the pose file to be applied to the figure before a morph is loaded.
   */
  getReverseDeformationsPose (): QString;

  /**
   * @returns true if the morph of the same name already exists, otherwise false.
   * @param node - The node to check for the morph.
   */
  morphAlreadyExists (node: DzNode): boolean;

  /**
   * Reads common object settings from a configuration file (*.dsx).
   * @returns true if the file was successfully read, otherwise false.
   * @since 4.9.3.47
   * @param filename - The full path of the file to read.
   */
  readObjectCommonSettingsFromConfigFile (filename: string): boolean;

  /**
   * Reads the settings of the first object in a configuration file (*.dsx).
   * @since 4.9.3.47
   * @param filename - The name of the file to read.
   * @param filePath - The path of the directory that the file to read is in.
   */
  readObjectSettingsFromConfigFile (filename: string, filePath: string): void;

  /**
   * Saves object settings to a configuration file (*.dsx).
   * @since 4.9.3.47
   * @param filename - The full path of the file to write to.
   * @param projectPath - The full path of the directory containing the files of a project.
   * @param saveProjectRelative - If true, filename is saved relative to projectPath. If false, filename is considered to be absolute and projectPath is ignored.
   */
  saveObjectSettingsToConfigFile (filename: string, projectPath: string, saveProjectRelative: boolean): void;

  /**
   * Sets the strength to use for attenuating the effect of the morph on the vertices that reside along the boundary of the current geometric selection.
   * @attention This value is ignored when a weight map is used for attenuation.
   * @seealso setAttenuateMapPath()
   * getAttenuateMapPath()
   * @param val - The strength value to set. A value of 0 yeilds no (0%) attenuation. A value of 1 yeilds full (100%) attenuation. Values between 0 and 1 yeild attentuation that is commensurate with the specified value.
   */
  setAttenuateEdgeStrength (val: number): void;

  /**
   * Sets the path to the map used to attenuate the effect of the morph.
   * @attention The value of mapPath can be one of the following:
   * <NodeName>::<FacetListType>::<FaceGroupName>
   * <NodeName>::<FacetListType>::<SurfaceName>
   * <NodeName>::<FacetListType>::<SelectionSetName>
   * <NodeName>::<EdgeListType>::<SelectionSetName>
   * <NodeName>::<VertexListType>::<SelectionSetName>
   * @seealso getPathForContext()
   * @param mapPath - The path to the map.
   */
  setAttenuateMapPath (mapPath: string): void;

  /**
   * Sets the strength to apply the map used to attenuate the effect of the morph.
   * @param val - The strength value to set. A value of 1.0 will cause the values in the map to be applied at their full respective values. A value of 0.0 will cause the values in the map to not be applied. A value of -1.0 will cause the values in the map to be inverted and applied at the opposite of their full respective values.
   */
  setAttenuateStrength (val: number): void;

  /**
   * Sets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
   * @param onOff - If true, orphans will be cleaned up.
   */
  setCleanUpOrphans (onOff: boolean): void;

  /**
   * Sets the node that the control property will be located on.
   * @attention This has no effect if getCreateControlProperty() is false.
   * @param node - The node that will own the control property.
   */
  setControlNode (node: DzNode): void;

  /**
   * Sets the property that will serve as the additional control property for the morph(s) created by this loader.
   * @attention This has no effect if getCreateControlProperty() is false.
   * @param prop - The control property for the new morph(s).
   */
  setControlProperty (prop: DzNumericProperty): void;

  /**
   * Sets the custom label that will be used for secondary (non-control) properties.
   * @attention This has no effect if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
   * @param label - The custom label to use for the secondary (non-control) properties.
   */
  setControlPropertyCustomLabel (label: string): void;

  /**
   * Sets the custom value for creating ERC links to the control property.
   * @attention This has no effect if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
   * @param val - The custom multiplier for the ERC links that are created to the control property.
   */
  setControlPropertyERCCustomValue (val: number): void;

  /**
   * Sets the ERC link type to use when connecting secondary properties to the control property.
   * @param type - The ERC link type to use when connecting secondary properties to the control property.
   */
  setControlPropertyERCType (type: number): void;

  /**
   * Sets whether or not a custom value will be used for the ERC links to the control property.
   * @attention This has no effect if getCreateControlProperty() is false.
   * @param onOff - If true, a custom value will be used for the links to the control property. Otherwise the default 1:1 ratio is assumed.
   */
  setControlPropertyERCUseCustomValue (onOff: boolean): void;

  /**
   * Sets whether or not a custom label will be used for the secondary (non-control) properties.
   * @attention This has no effect if getCreateControlProperty() is false.
   * @param onOff - If true, a custom label will be used for the secondary (non-control) properties. Otherwise the default label is used.
   */
  setControlPropertyUseCustomLabel (onOff: boolean): void;

  /**
   * Sets whether or not the loader will use and create ERC links to an additional control property.
   * @param onOff - If true, the loader will create links to an additional control property, otherwise, settings for the additional control property will be ignored.
   */
  setCreateControlProperty (onOff: boolean): void;

  /**
   * Sets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
   * @param val - The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
   */
  setDeltaTolerance (val: number): void;

  /**
   * Sets the file to read the geometry from.
   * @param filename - The full path of the file to load this morph's geometry from.
   */
  setFilename (filename: string): void;

  /**
   * Sets whether or not secondary (non-control) properties are hidden.
   * @attention This has no effect if getCreateControlProperty() is false.
   * @param onOff - If true, secondary (non-control) properties will be set as hidden.
   */
  setHideSecondaryProperties (onOff: boolean): void;

  /**
   * Sets the mode to load the morph for node.
   * @returns true if mode can be set for node, otherwise false.
   * @attention If node is a “single skin” figure, only the SingleSkinFigure and SingleSkinFigureFromGraft modes are considered valid. If node is a figure, but not a “single skin” figure (e.g., a legacy figure), only the EntireFigure, SelectedNodes and PrimaryNode modes are considered valid. If node is a prop, only the PrimaryNode mode is considered valid.
   * @param mode - The mode to set for the morph being loaded.
   * @param node - The node with the geometry that the morph is being loaded for.
   */
  setLoadMode (mode: number, node: DzNode): boolean;

  /**
   * Sets the type of mirroring to apply to the morph.
   * @param type - The type of mirroring to apply to the morph.
   */
  setMorphMirroring (type: number): void;

  /**
   * Sets the name of the morph(s) that will be created by this morph loader.
   * @param name - The name for the DzMorph object(s) that will be created by this loader.
   */
  setMorphName (name: string): void;

  /**
   * Sets whether or not to override/replace existing morphs with the same name.
   * @param mode - If true, existing morphs on the node(s) with the same name will be replaced by the loaded morph.
   */
  setOverwriteExisting (mode: number): void;

  /**
   * Sets whether or not to preserve existing deltas in a morph by the same name.
   * @param onOff - If true, existing deltas in a morph by the same name will be preserved.
   */
  setPreserveExistingDeltas (onOff: boolean): void;

  /**
   * Sets the property group that morph value properties will be added to.
   * @param path - The path of the property group that value properties from the morph(s) created by this loader will be assigned to.
   */
  setPropertyGroupPath (path: string): void;

  /**
   * Sets whether or not joint deformations and other modifiers will be reversed before calculating deltas.
   * @param onOff - If true, joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas. If false, the deltas will be calculated from the base geometry.
   */
  setReverseDeformations (onOff: boolean): void;

  /**
   * Sets the path of the pose file to apply to the figure before a morph is loaded.
   * @param filePath - The path of the pose file to be used.
   */
  setReverseDeformationsPose (filePath: string): void;

  applyAfterJointChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  attenuateChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  attenuateEdgeStrengthChanged: Signal<{
    /**
     * TODO: Add description.
     * @param strength - 
     */
  (strength: number): void;
  }>;
  attenuateStrengthChanged: Signal<{
    /**
     * TODO: Add description.
     * @param strength - 
     */
  (strength: number): void;
  }>;
  controlNodeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param node - 
     */
  (node: DzNode): void;
  }>;
  controlPropertyChanged: Signal<{
    /**
     * TODO: Add description.
     * @param prop - 
     */
  (prop: DzNumericProperty): void;
  }>;
  createControlPropertyChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  deltaToleranceChanged: Signal<{
    /**
     * TODO: Add description.
     * @param val - 
     */
  (val: number): void;
  }>;
  ercCustomValueChanged: Signal<{
    /**
     * TODO: Add description.
     * @param val - 
     */
  (val: number): void;
  }>;
  filenameChanged: Signal<{
    /**
     * Emitted when the filename has changed.
     * @param name - The new name of the file.
     */
  (name: string): void;
  }>;
  hideSecondaryChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  mirroringChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mirroring - 
     */
  (mirroring: number): void;
  }>;
  morphNameChanged: Signal<{
    /**
     * Emitted when the morph name has changed.
     * @param name - The new name of the morph.
     */
  (name: string): void;
  }>;
  overwriteExistingChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  preserveExistingDeltasChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  propertyGroupPathChanged: Signal<{
    /**
     * Emitted when the path of the property group has changed.
     * @param path - The new path of the property group.
     */
  (path: string): void;
  }>;
  reverseDeformationsChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  secondaryLabelChanged: Signal<{
    /**
     * TODO: Add description.
     * @param label - 
     */
  (label: string): void;
  }>;
  smoothCageChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  useErcCustomValueChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  useSecondaryLabelChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
}

declare var DzMorphLoader:
{
  prototype: DzMorphLoader;

  /**
   * Default Constructor. Creates a morph loader with default settings.
   */
  new (): DzMorphLoader;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly WeightMap: number;
  /**
   * TODO: Add description.
   */
  readonly FacetList: number;
  /**
   * TODO: Add description.
   */
  readonly EdgeList: number;
  /**
   * TODO: Add description.
   */
  readonly VertexList: number;
  /**
   * TODO: Add description.
   */
  readonly UnknownMap: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly EntireFigure: number;
  /**
   * TODO: Add description.
   */
  readonly SelectedNodes: number;
  /**
   * TODO: Add description.
   */
  readonly PrimaryNode: number;
  /**
   * TODO: Add description.
   */
  readonly SingleSkinFigure: number;
  /**
   * TODO: Add description.
   */
  readonly SingleSkinFigureFromGraft: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly DoNotMirror: number;
  /**
   * TODO: Add description.
   */
  readonly XSwap: number;
  /**
   * TODO: Add description.
   */
  readonly XPosToNeg: number;
  /**
   * TODO: Add description.
   */
  readonly XNegToPos: number;
  /**
   * TODO: Add description.
   */
  readonly YSwap: number;
  /**
   * TODO: Add description.
   */
  readonly YPosToNeg: number;
  /**
   * TODO: Add description.
   */
  readonly YNegToPos: number;
  /**
   * TODO: Add description.
   */
  readonly ZSwap: number;
  /**
   * TODO: Add description.
   */
  readonly ZPosToNeg: number;
  /**
   * TODO: Add description.
   */
  readonly ZNegToPos: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly MakeUnique: number;
  /**
   * TODO: Add description.
   */
  readonly DeltasAndERCLinks: number;
  /**
   * TODO: Add description.
   */
  readonly DeltasOnly: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloaderbatch_dz
 * Implements the loading and application of a batch of morphs from geometry files.
 * @remarks This class implements a batch of morph loader objects that will be applied to the same node(s).
 * @since 4.9.3.46
 * @attention This object is provided by the Morph Loader Pro plugin. It is only available when the Morph Loader Pro plugin is activated and enabled.
 */
interface DzMorphLoaderBatch extends QObject
{

  /**
   * TODO: Add description.
   * @param filename - 
   */
  addFromConfigFile (filename: string): void;

  /**
   * TODO: Add description.
   * @param file - 
   */
  addFromFile (file: string): void;

  /**
   * TODO: Add description.
   * @param files - 
   */
  addFromFiles (files: Array<unknown>): void;

  /**
   * TODO: Add description.
   * @param mesh - 
   */
  addFromMesh (mesh: vertexmesh_dz): void;

  /**
   * TODO: Add description.
   * @param morph - 
   */
  addMorph (morph: DzMorphLoader): void;

  /**
   * TODO: Add description.
   */
  clear (): void;

  /**
   * Creates morphs on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
   * @returns The log containing messages about the creation of the morphs.
   * @param mesh - The geometry for the morphs.
   * @param node - The node containing the geometry to create the morphs for.
   * @param [onlyErrorsOrWarnings=true] - If true (default), only errors and warnings will be returned.
   * @param [plainText=true] - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
   */
  createMorphs (mesh: vertexmesh_dz, node: DzNode, onlyErrorsOrWarnings?: boolean, plainText?: boolean): string;

  /**
   * Creates morphs on the node provided from the geometry loaded from the files. This function supports morph creation from vertex-only geometries.
   * @returns The log containing messages about the creation of the morph.
   * @param settings - The scale to apply to the geometry that is read from the file.
   * @param node - The node containing the geometry to create the morph for.
   * @param [onlyErrorsOrWarnings=true] - If true (default), only errors and warnings will be returned.
   * @param [plainText=true] - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
   */
  createMorphs (settings: DzFileIOSettings, node: DzNode, onlyErrorsOrWarnings?: boolean, plainText?: boolean): string;

  /**
   * TODO: Add description.
   * @param morph - 
   */
  findMorph (morph: DzMorphLoader): number;

  /**
   * TODO: Add description.
   * @param index - 
   */
  getMorph (index: number): DzMorphLoader;

  /**
   * TODO: Add description.
   */
  getNode (): DzNode;

  /**
   * TODO: Add description.
   */
  getNumMorphs (): number;

  /**
   * TODO: Add description.
   * @param morph - 
   * @param upDown - 
   */
  moveMorph (morph: DzMorphLoader, upDown: boolean): void;

  /**
   * TODO: Add description.
   */
  presetConfigurationFile (): string;

  /**
   * TODO: Add description.
   * @param morph - 
   */
  removeMorph (morph: DzMorphLoader): void;

  /**
   * TODO: Add description.
   * @param filename - 
   * @param saveRelative - 
   * @param saveObjects - 
   */
  saveProjectSettingsToConfigFile (filename: string, saveRelative: boolean, saveObjects: boolean): void;

  /**
   * TODO: Add description.
   * @param node - 
   */
  setNode (node: DzNode): void;

  /**
   * TODO: Add description.
   * @param filename - 
   */
  setPresetConfigurationFile (filename: string): void;

  /**
   * TODO: Add description.
   * @param onOff - 
   */
  setUsePresetConfiguration (onOff: boolean): void;

  /**
   * TODO: Add description.
   */
  usePresetConfiguration (): boolean;

  morphAdded: Signal<{
    /**
     * TODO: Add description.
     * @param morph - 
     */
  (morph: DzMorphLoader): void;
  }>;
  morphListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  morphMoved: Signal<{
    /**
     * TODO: Add description.
     * @param srcIdx - 
     * @param destIdx - 
     */
  (srcIdx: number, destIdx: number): void;
  }>;
  morphRemoved: Signal<{
    /**
     * TODO: Add description.
     * @param morph - 
     * @param formerIndex - 
     */
  (morph: DzMorphLoader, formerIndex: number): void;
  }>;
}

declare var DzMorphLoaderBatch:
{
  prototype: DzMorphLoaderBatch;

  /**
   * Default Constructor. Creates a morph loader batch that will be applied to the given node.
   */
  new (): DzMorphLoaderBatch;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphsupportassetfilter_dz
 * Class for saving DSON-based Morph Support Asset(s).
 * @remarks An asset save filter for saving Morph Support Asset(s) in the DSON format.
 * @seealso Sample: Save Morph Support Asset(s)
 */
interface DzMorphSupportAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzMorphSupportAssetFilter:
{
  prototype: DzMorphSupportAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzMorphSupportAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multimediamgr_dz
 * Manager of multimedia (video and audio) export/import classes.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getMultiMediaMgr().
 */
interface DzMultiMediaMgr extends QObject
{

  /**
   * Uses the filename extension to find an appropriate audio importer.
   * @returns An appropriate importer for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
   * @param filename - 
   */
  findAudioImporter (filename: string): DzAudioImporter;

  /**
   * Uses the filename extension to find an appropriate video exporter.
   * @returns An appropriate exporter for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
   * @param filename - 
   */
  findVideoExporter (filename: string): DzVideoExporter;

  /**
   * @returns A new instance of the i'th audio importer in the list. The caller takes ownership of this object and is responsible for deleting it.
   * @param i - 
   */
  getAudioImporter (i: number): DzAudioImporter;

  /**
   * @returns The number of audio importers currently supported.
   */
  getNumAudioImporters (): number;

  /**
   * @returns The number of video exporters currently supported.
   */
  getNumVideoExporters (): number;

  /**
   * @returns A new instance of the i'th video exporter in the list. The caller takes ownership of this object and is responsible for deleting it.
   * @param i - The index of the exporter to create.
   */
  getVideoExporter (i: number): DzVideoExporter;

  /**
   * Populates the given filter with all the audio types recognized by the multimedia manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   * @param [makeAllFilesEntry=true] - If true, and additional filter is created for all recognized file extensions.
   */
  makeAudioImportFileFilter (filter: DzFileFilter, defaultFilter?: string, makeAllFilesEntry?: boolean): void;

  /**
   * Populates the given filter with all the video types recognized by the multimedia manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   */
  makeVideoExportFileFilter (filter: DzFileFilter, defaultFilter?: string): void;

  /**
   * Export the clip to a video file.
   * @returns DZ_NO_ERROR if the file export was successful.
   * @param fileName - 
   * @param clip - An instance of DzVideoClip containing the data to save.
   * @param [exporterIndex=-1] - The name of the file to export to.
   */
  exportVideoClip (fileName: string, clip: DzVideoClip, exporterIndex?: number): DzError;

  /**
   * @returns Last directory that audio files were imported from.
   */
  getAudioClipLoadPath (): string;

  /**
   * @returns Last directory that video files were exported to.
   */
  getVideoClipSavePath (): string;

  /**
   * Import an audio clip from a file.
   * @returns DZ_NO_ERROR if the file import was successful.
   * @param fileName - 
   * @param clip - A pointer to a DzAudioClip instance to import the data into.
   * @param [importerIndex=-1] - The name of the file to import from.
   */
  importAudioClip (fileName: string, clip: DzAudioClip, importerIndex?: number): DzError;

}

declare namespace DzMultiMediaMgr
{

  /**
   * Uses the filename extension to find an appropriate audio importer.
   * @returns An appropriate importer for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
   * @param filename - 
   */
  export function findAudioImporter (filename: string): DzAudioImporter;

  /**
   * Uses the filename extension to find an appropriate video exporter.
   * @returns An appropriate exporter for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
   * @param filename - 
   */
  export function findVideoExporter (filename: string): DzVideoExporter;

  /**
   * @returns A new instance of the i'th audio importer in the list. The caller takes ownership of this object and is responsible for deleting it.
   * @param i - 
   */
  export function getAudioImporter (i: number): DzAudioImporter;

  /**
   * @returns The number of audio importers currently supported.
   */
  export function getNumAudioImporters (): number;

  /**
   * @returns The number of video exporters currently supported.
   */
  export function getNumVideoExporters (): number;

  /**
   * @returns A new instance of the i'th video exporter in the list. The caller takes ownership of this object and is responsible for deleting it.
   * @param i - The index of the exporter to create.
   */
  export function getVideoExporter (i: number): DzVideoExporter;

  /**
   * Populates the given filter with all the audio types recognized by the multimedia manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   * @param [makeAllFilesEntry=true] - If true, and additional filter is created for all recognized file extensions.
   */
  export function makeAudioImportFileFilter (filter: DzFileFilter, defaultFilter?: string, makeAllFilesEntry?: boolean): void;

  /**
   * Populates the given filter with all the video types recognized by the multimedia manager.
   * @param filter - The filter to populate
   * @param [defaultFilter=“”] - The filter to set as the default
   */
  export function makeVideoExportFileFilter (filter: DzFileFilter, defaultFilter?: string): void;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multiplyblend_dz
 * A multiplicative image blending operation.
 * @remarks TODO: Add detailed description.
 */
interface DzMultiplyBlend extends DzImageBlend
{

}

declare var DzMultiplyBlend:
{
  prototype: DzMultiplyBlend;

  /**
   * Default Constructor
   */
  new (): DzMultiplyBlend;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nativeerror
 * ECMAScript NativeError prototype object.
 * @remarks When the interpreter detects a runtime error, it throws an instance of one of the NativeError objects. The native error objects differ only in their type and in the implementation-defined value of the message property of the prototype object. See the ECMA script specification for more information.
 */
interface NativeError extends Error
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/node_dz
 * Base class for objects that can participate in a transform hierarchy.
 * @remarks DzNode objects all contain animatable position, rotation, and scale channels that can be set and accessed via the properties list in the DzElement class or through specialized calls in this class.
 * The transform order is Translate/Rotate/Scale. Non-uniform scaling is supported by implementing seperate X, Y, and Z scale channels. All channels are independent internally and can have keys set on them independent of any other channel.
 * Note that channel independence holds exactly true for translations and scales, but does not hold for rotations (which are represented as Euler angle degrees in each channel). Euler angles are inherently inter-dependent and prone to numerical singularities (gimbals) that make them less than perfect at representing rotations. For this reason, rotations are handled as DzQuat objects whenever possible. When setting keys on a DzNode, it is prefferable to use the set*Rot() methods or set*Transform() methods that take DzQuat arguments. Setting rotations as a DzQuat will create keys on all three rotation channels but will assure that the values are reasonable.
 * Nodes have an origin and an orientation that define their default state. The origin is the center point of the node and is given in untransformed world space. In other words, the origin is the center point of the node in relation to its untransformed and undeformed geometry. The orientation of the node defines the space in which this node's rotations occur. Orientation only has an effect on the rotation of the node, it does not affect translation or scale transforms.
 * Each node defines a local axis that is determined by evaluating the transforms of all nodes in the parent tree for this node in order.
 * Several functions are provided for accessing the transformation data of a node. Below are descriptions of the groups of functions, and the transform space that they return data for.
 * World Space Transforms:getWSTransform(), getWSPos(), getWSRot(), getWSScale() WS (world space) transforms are just that - the transformation of the node into world space, including keyed transformation data. These functions essentially traverse up the hierarchy evaluating the local transforms for each parent node, resulting in the final World Space transform of the node.
 * Local Transforms:getLocalTransform(), getLocalPos(), getLocalRot(), getLocalScale() Local transforms are the full transformation of the node in the space of its immediate parent - for root nodes, the nodes origin added to the local pos is equivalent to the worldspace transform.
 * Classes derived from DzNode may also be drawn in the interactive 3D views (via the draw() method) or/and may be rendered using a RenderMan- compliant renderer (via the render() method).
 */
interface DzNode extends DzElement
{

  /**
   * The author of the file for this node. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * The revision version of the asset file for this node. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * The asset id for this node.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The asset id aliases for this node.
   */
  assetIdAliases: Array<unknown>

  /**
   * The modified date of the asset file for this node. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * The URI of the asset source for this node; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * The asset URI for this node. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  /**
   * The name aliases for this node.
   * DzRenderMgr.RenderPriority : renderPriority
   * The render priority for the node. Render priority controls the order in which nodes are rendered. The higher the priority, the earlier the node will be rendered. If several nodes have the same render priority, those nodes will be rendered in an arbitrary order.
   * The default render priority is RENDER_PRIORITY_NORMAL.
   */
  nameAliases: Array<unknown>

  /**
   * TODO: Add description.
   * @param node - 
   * @param propagate - 
   */
  duplicate (node: DzNode, propagate: boolean): DzNode;

  /**
   * Adds a child to this node.
   * @param child - The node to add to this node's list of children. A child must be removed from one parent before it can be attached to another.
   * @param [inPlace=false] - If true, the necessary transforms to parent 'In Place' will be calculated and applied to the child.
   */
  addNodeChild (child: DzNode, inPlace?: boolean): DzError;

  /**
   * Sets the end point for this node adjusting for controllers.
   * @param endPnt - The end point for the node. This is the node's end point in relation to its geometry.
   */
  adjustEndPoint (endPnt: DzVec3): void;

  /**
   * Sets the orientation for the node adjusting for controllers.
   * @param orientation - The orientation for the node. This defines the space in which node rotations occur.
   */
  adjustOrientation (orientation: DzQuat): void;

  /**
   * Sets the orientation for the node adjusting for controllers.
   * @param angles - The orientation for the node in degrees. This defines the space in which node rotations occur.
   */
  adjustOrientationAngles (angles: DzVec3): void;

  /**
   * Sets the origin for the node adjusting for controllers.
   * @param origin - The origin for the node. This is the node's center point in relation to its geometry.
   */
  adjustOrigin (origin: DzVec3): void;

  /**
   * Get the current shadow-casting status of this node.
   * @returns true if the node is casting shadows or the active mode of the active renderer does not allow disabling shadows (and thus dynamically hides the property providing control to the user), otherwise false.
   */
  castsShadow (): boolean;

  /**
   * Removes all local transform data.
   */
  clearAllTransformData (): void;

  /**
   * Clears the override color to be used to draw the node while using manipulation draw styles.
   */
  clearManipOverColor (): void;

  /**
   * Removes local transform data.
   * @param range - The timerange to clear transform data across.
   */
  clearTransformData (range: DzTimeRange): void;

  /**
   * @returns The (root) node (if any) that results from duplicating this node, otherwise null.
   * @since 4.9.3.80
   * @param propagate - If true, the hierarchy of nodes that are children of this node will also be duplicated.
   */
  duplicate (propagate: boolean): DzNode;

  /**
   * Finalizes the node's geometry cache.
   * @param [isRender=false] - If true, the geometry cache will be finalized for a render operation, otherwise, the geometry will be prepared for a drawing operation.
   * @param [allowResChange=true] - If true, the geometry is allowed to change resolution in the finalize. otherwise, the geometry will stay at it's current resolution.
   */
  finalize (isRender?: boolean, allowResChange?: boolean): void;

  /**
   * @returns The index of curNode (if any), otherwise -1.
   * @param curNode - The node to find the index of.
   */
  findChildIndex (curNode: DzNode): number;

  /**
   * Get a child from this node by name.
   * @returns A child node having a matching name (if any), otherwise NULL.
   * @param name - The name of the child to find.
   * @param [recurse=false] - If true, this will be called recursively until a child with a matching name is found.
   */
  findNodeChild (name: string, recurse?: boolean): DzNode;

  /**
   * Get a child from this node by asset id.
   * @returns A child node having a matching asset ID (if any), otherwise NULL.
   * @param assetID - The asset ID of the child to find.
   * @param [recurse=false] - If true, this will be called recursively until a child with a matching asset ID is found.
   * @param [checkSource=true] - If true, the asset's source will be checked for a match.
   */
  findNodeChildByAssetID (assetID: string, recurse?: boolean, checkSource?: boolean): DzNode;

  /**
   * Get a child from this node by label.
   * @returns A child node having a matching label (if any), otherwise NULL.
   * @since 4.10.0.68
   * @param label - The label of the child to find.
   * @param [recurse=false] - If true, this will be called recursively until a child with a matching label is found.
   */
  findNodeChildByLabel (label: string, recurse?: boolean): DzNode;

  /**
   * Get a child from this node by name (or alias).
   * @returns A child node having a matching name or alias (if any), otherwise NULL.
   * @param name - The name (or alias) of the child to find.
   * @param alaises - 
   * @param [recurse=false] - If true, consider name aliases.
   */
  findNodeChildByNameOrAlias (name: string, alaises: boolean, recurse?: boolean): DzNode;

  /**
   * @returns The property referred to by the uri or null if the property cannot be found.
   * @since 4.9.2.20
   * @param uri - The URI path to the property.
   */
  findPropertyReference (uri: DzUri): DzProperty;

  /**
   * @returns The property used for controlling if the node's transfrom is disabled.
   * @since 4.9.2.11
   */
  getDisableTransfromControl (): DzBoolProperty;

  /**
   * @returns The endpoint for this node.
   * @param [defaultVal=false] - If true, the default value for the end point is returned, otherwise the current value is.
   */
  getEndPoint (defaultVal?: boolean): DzVec3;

  /**
   * @returns The float property that controls the x position of the node's end point.
   */
  getEndXControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the y position of the node's end point.
   */
  getEndYControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the z position of the node's end point.
   */
  getEndZControl (): DzFloatProperty;

  /**
   * @returns The float property that controls local rotation of the node around the first axis of the rotation order.
   * @since 4.9.3.17
   */
  getFirstAxisRotControl (): DzFloatProperty;

  /**
   * Calculate the local space bounding box for this node.
   * @returns A box containing the current node (including an attached object) in the local space of the node.
   */
  getLocalBoundingBox (): DzBox3;

  /**
   * Calculate the local space bounding box for this node.
   * @returns A box containing the current node (including an attached object) in the local space of the node.
   */
  getLocalOrientedBox (): DzOrientedBox3;

  /**
   * @returns The local-space position of the node at the current time.
   */
  getLocalPos (): DzVec3;

  /**
   * @returns The local-space position of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getLocalPos (tm: DzTime, defaultVal?: boolean): DzVec3;

  /**
   * @returns The local-space rotation of the node at the current time.
   */
  getLocalRot (): DzQuat;

  /**
   * @returns The local-space rotation of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getLocalRot (tm: DzTime, defaultVal?: boolean): DzQuat;

  /**
   * @returns The local-space scale of the node at the time.
   */
  getLocalScale (): DzMatrix3;

  /**
   * @returns The local-space scale of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getLocalScale (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * Get the composed local transform info for this node at the current time.
   * @returns A matrix representing the composed local transform for this node.
   */
  getLocalTransform (): DzMatrix3;

  /**
   * Get the composed local transform info for this node.
   * @returns A matrix representing the composed local transform for this node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getLocalTransform (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * Get the child at the given index.
   * @returns The i'th node attached to this node as a child. NULL if the index is invalid.
   * @param i - 
   */
  getNodeChild (i: number): DzNode;

  /**
   * @returns A list containing the children of this node.
   * @param [recurse=false] - If true, recursively collect all this node's children, scanning the hierarchy from this node down. If false (default), collect only this node's immediate children.
   */
  getNodeChildren (recurse?: boolean): Array<DzNode>;

  /**
   * Get the parent of this node.
   * @returns The parent of this node in the scene hierarchy, NULL if this node is at root level.
   */
  getNodeParent (): DzNode;

  /**
   * Get the number of children attached to this node.
   * @returns The number of nodes attached to this node as children in the scene hierarchy.
   */
  getNumNodeChildren (): number;

  /**
   * Get the object currently associated with this node.
   * @returns The object that is associated with this node. NULL if node has no object.
   */
  getObject (): DzObject;

  /**
   * @returns The orientation of the node.
   * @param [defaultVal=false] - Get the default or current values of the orientation. defaultVal defaults to false or current position.
   */
  getOrientation (defaultVal?: boolean): DzQuat;

  /**
   * @returns The float property that controls the x rotation of the node's orientation.
   */
  getOrientXControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the y rotation of the node's orientation.
   */
  getOrientYControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the z rotation of the node's orientation.
   */
  getOrientZControl (): DzFloatProperty;

  /**
   * @returns The origin of the node.
   * @param [defaultVal=false] - Get the default or current values of the origin. Default is false for current.
   */
  getOrigin (defaultVal?: boolean): DzVec3;

  /**
   * @returns The float property that controls the x position of the node's origin.
   */
  getOriginXControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the y position of the node's origin.
   */
  getOriginYControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the z position of the node's origin.
   */
  getOriginZControl (): DzFloatProperty;

  /**
   * @returns The property used for tracking the point-at target.
   */
  getPointAtControl (): DzNumericNodeProperty;

  /**
   * @returns The presentation for this property or NULL if there is none.
   */
  getPresentation (): DzPresentation;

  /**
   * Get the local-space preview box for this node, if any.
   * @returns The preview box for this node, or an invalid box if none has been set.
   */
  getPreviewBox (): DzOrientedBox3;

  /**
   * @returns The enum property that controls the render priority of this node.
   */
  getRenderPriorityControl (): DzEnumProperty;

  /**
   * @returns The boolean property that controls render visibility of this node.
   */
  getRenderVisibilityControl (): DzBoolProperty;

  /**
   * Get the node rotation order.
   * @returns The order that the axis rotations are applied to this node.
   */
  getRotationOrder (): DzRotationOrder;

  /**
   * @returns The float property that controls general scale of the node.
   */
  getScaleControl (): DzFloatProperty;

  /**
   * @returns The float property that controls local rotation of the node around the second axis of the rotation order.
   * @since 4.9.3.17
   */
  getSecondAxisRotControl (): DzFloatProperty;

  /**
   * @returns The boolean property that controls selectability of this node.
   */
  getSelectabilityControl (): DzBoolProperty;

  /**
   * @returns The selection map for this node.
   */
  getSelectionMap (): DzSelectionMap;

  /**
   * @returns The node to be selected if selection is promoted, otherwise this node.
   */
  getSelectionNode (): DzNode;

  /**
   * @returns The boolean property that controls whether this light is casting shadows.
   */
  getShadowControl (): DzBoolProperty;

  /**
   * @returns The boolean property that controls simulation visibility of this node.
   * @since 4.9.4.25
   */
  getSimulationVisibilityControl (): DzBoolProperty;

  /**
   * Traverse up the hierarchy and attempt to find a DzSkeleton.
   * @returns The first DzSkeleton node encountered. NULL if this node is not in the hierarchy of a skeleton.
   */
  getSkeleton (): DzSkeleton;

  /**
   * @returns The float property that controls local rotation of the node around the third axis of the rotation order.
   * @since 4.9.3.17
   */
  getThirdAxisRotControl (): DzFloatProperty;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the first axis of the rotation order.
   * @since 4.9.3.17
   */
  getToolFirstAxisRotControl (): DzFloatProperty;

  /**
   * @returns The local-space rotation of the node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   */
  getToolLocalRot (): DzQuat;

  /**
   * @returns The local-space rotation of the node, in the context of the current tool.
   * @since 4.8.1.13
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getToolLocalRot (tm: DzTime, defaultVal?: boolean): DzQuat;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the second axis of the rotation order.
   * @since 4.9.3.17
   */
  getToolSecondAxisRotControl (): DzFloatProperty;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the third axis of the rotation order.
   * @since 4.9.3.17
   */
  getToolThirdAxisRotControl (): DzFloatProperty;

  /**
   * @returns The world-space rotation of the node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   */
  getToolWSRot (): DzQuat;

  /**
   * @returns The world-space rotation of the node, in the context of the current tool.
   * @since 4.8.1.13
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getToolWSRot (tm: DzTime, defaultVal?: boolean): DzQuat;

  /**
   * Get the world-space transformation data for this node at the current time, in the context of the current tool.
   * @returns A matrix representing the composed WS transform for this node.
   * @since 4.9.3.16
   */
  getToolWSTransform (): DzMatrix3;

  /**
   * Get the world-space transformation data for this node, in the context of the current tool.
   * @returns A matrix representing the composed WS transform for this node.
   * @since 4.8.1.13
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getToolWSTransform (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the x axis.
   */
  getToolXRotControl (): DzFloatProperty;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the y axis.
   */
  getToolYRotControl (): DzFloatProperty;

  /**
   * @returns The float property that tools should use to control local rotation of the node around the z axis.
   */
  getToolZRotControl (): DzFloatProperty;

  /**
   * @returns The boolean property that controls visibility of this node.
   */
  getVisibilityControl (): DzBoolProperty;

  /**
   * Calculate a world space oriented bounding box for this node.
   * @returns A box containing the current node (including an attached object) in the world-space coordinates.
   */
  getWSBoundingBox (): DzBox3;

  /**
   * Calculate a world-space oriented bounding box for this node.
   * @returns An oriented box derived from a local-space bounding box containing the current node (including an attached object) in the world-space coordinates.
   */
  getWSOrientedBox (): DzOrientedBox3;

  /**
   * @returns The world-space position of the node at the current time.
   */
  getWSPos (): DzVec3;

  /**
   * @returns The world-space position of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSPos (tm: DzTime, defaultVal?: boolean): DzVec3;

  /**
   * @returns The world-space rotation of the node at the current time.
   */
  getWSRot (): DzQuat;

  /**
   * @returns The world-space rotation of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSRot (tm: DzTime, defaultVal?: boolean): DzQuat;

  /**
   * @returns The world-space scale of the node at the current time.
   */
  getWSScale (): DzMatrix3;

  /**
   * @returns The world-space scale of the node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSScale (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * Get the world-space transformation data for this node at the current time.
   * @returns A matrix representing the composed WS transform for this node.
   */
  getWSTransform (): DzMatrix3;

  /**
   * Get the world-space transformation data for this node.
   * @returns A matrix representing the composed WS transform for this node.
   * @param tm - The scene time at which to get the the transform.
   * @param [defaultVal=false] - Use the default version of the origin, end point, and orientation instead of the current position.
   */
  getWSTransform (tm: DzTime, defaultVal?: boolean): DzMatrix3;

  /**
   * @returns The float property that controls the local x position of the node.
   */
  getXPosControl (): DzFloatProperty;

  /**
   * @returns The float property that controls local rotation of the node around the x axis.
   */
  getXRotControl (): DzFloatProperty;

  /**
   * @returns The float property that controls scaling of the node along the x axis.
   */
  getXScaleControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the local y position of the node.
   */
  getYPosControl (): DzFloatProperty;

  /**
   * @returns The float property that controls local rotation of the node around the y axis.
   */
  getYRotControl (): DzFloatProperty;

  /**
   * @returns The float property that controls scaling of the node along the y axis.
   */
  getYScaleControl (): DzFloatProperty;

  /**
   * @returns The float property that controls the local z position of the node.
   */
  getZPosControl (): DzFloatProperty;

  /**
   * @returns The float property that controls local rotation of the node around the z axis.
   */
  getZRotControl (): DzFloatProperty;

  /**
   * @returns The float property that controls scaling of the node along the z axis.
   */
  getZScaleControl (): DzFloatProperty;

  /**
   * @returns true if this node inherits scale from its parent, otherwise false.
   */
  inheritsScale (): boolean;

  /**
   * Invalidates the bounding boxes for this node, causing them to be recalculated.
   * @param [checkSkeleton=true] - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
   */
  invalidateBoundingBoxes (checkSkeleton?: boolean): void;

  /**
   * @returns true if this node is set invisible by a group node, otherwise false.
   */
  invisibleByGroup (): boolean;

  /**
   * @returns true if this node is set invisible in render by a group node, otherwise false.
   * @since 4.9.4.73
   */
  invisibleInRenderByGroup (): boolean;

  /**
   * @returns true if this node is set invisible in simulation by a group node, otherwise false.
   * @since 4.9.4.73
   */
  invisibleInSimulationByGroup (): boolean;

  /**
   * @returns true if the parent of this node, or any of its ancestors, is a DzBone and this node or any of its ancestors should redirect their viewport selection to their ancestors.
   */
  isBoneSelectingNode (): boolean;

  /**
   * @returns true if this node is considered an editor node, otherwise false.
   */
  isEditorNode (): boolean;

  /**
   * @returns true if this node should not be shown in the interface, otherwise false.
   */
  isHidden (): boolean;

  /**
   * @returns true if the node is in the scene, otherwise false.
   * @since 4.6.4.67
   */
  isInScene (): boolean;

  /**
   * Checks to see if given node is one of this node's children.
   * @returns true if the node is a child of this node in the scene hierarchy, otherwise false.
   * @param node - The node to look for in this node's hierarchy.
   */
  isNodeChild (node: DzNode): boolean;

  /**
   * Check to see if this is a root level node.
   * @returns true if this object has no parent in the scene hierarchy, otherwise false.
   */
  isRootNode (): boolean;

  /**
   * @returns true if this node is selectable via the 3D viewport, otherwise false.
   */
  isSelectable (): boolean;

  /**
   * Get the current selection state of this node.
   * @returns true if the node is selected, otherwise false.
   */
  isSelected (): boolean;

  /**
   * @returns true if this node should redirect its viewport selection to its parent, otherwise false.
   */
  isSelectionPromoted (): boolean;

  /**
   * Get the current render visibility status of this node.
   * @returns true if the node set to be visible in the render, otherwise false.
   */
  isVisibileInRender (): boolean;

  /**
   * Get the current simulation visibility status of this node.
   * @returns true if the node set to be visible in the simulation, otherwise false.
   * @since 4.9.4.25
   */
  isVisibileInSimulation (): boolean;

  /**
   * Get the current visibility status of this node.
   * @returns true if the node is visible, otherwise false.
   */
  isVisible (): boolean;

  /**
   * Marks the asset as being modified.
   * @returns true on success, otherwise false.
   * @param newUri - The new file URI for the asset.
   */
  modifyAsset (newUri: DzUri): boolean;

  /**
   * Marks the asset as being modified.
   * @returns true on success, otherwise false.
   */
  modifyAsset (): boolean;

  /**
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param child - The node child to move.
   * @param index - The index to put the node at, -1 for end of list, 0 for beginning.
   */
  moveNodeChildToIndex (child: DzNode, index: number): DzError;

  /**
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param childIndex - The index for the child to move.
   * @param newChildIndex - The index to put the node at, -1 for end of list, 0 for beginning.
   */
  moveNodeChildToIndex (childIndex: number, newChildIndex: number): DzError;

  /**
   * Removes all the children of this node.
   */
  removeAllNodeChildren (): void;

  /**
   * Removes a child from this node.
   * @param child - The node to remove from this node's list of children. A child must be removed from one parent before it can be attached to another.
   * @param [inPlace=false] - If true, the necessary transforms to unparent 'In Place' will be calculated and applied to the child.
   */
  removeNodeChild (child: DzNode, inPlace?: boolean): DzError;

  /**
   * Sets the selection state of this node.
   * @param [onOff=true] - If true, sets selection on for this node. If false, sets selection off.
   */
  select (onOff?: boolean): void;

  /**
   * Sets the end point for this node.
   * @param endPnt - The end point for the node. This is the node's end point in relation to its geometry.
   * @param [makeDefault=false] - Whether or not to set the default value as well as the current value.
   */
  setEndPoint (endPnt: DzVec3, makeDefault?: boolean): void;

  /**
   * Hide or show this node in the interface.
   * @param onOff - If true, the node will not appear in the hierarchy list. If false, the node will be displayed in the scene hierarchy.
   */
  setHidden (onOff: boolean): void;

  /**
   * Sets whether or not this node inherits the scale of its parent.
   * @param onOff - If true, scaling the parent of this node will scale this node also.
   */
  setInheritScale (onOff: boolean): void;

  /**
   * Sets whether this nodes visibility is controlled by a DzGroupNode.
   * @param yesNo - 
   */
  setInvisibleByGroup (yesNo: boolean): void;

  /**
   * Sets whether or not this node's visibility to rendering is controlled by a group node.
   * @since 4.9.4.73
   * @param yesNo - 
   */
  setInvisibleInRenderByGroup (yesNo: boolean): void;

  /**
   * Sets whether or not this node's visibility to simulation is controlled by a group node.
   * @since 4.9.4.73
   * @param yesNo - 
   */
  setInvisibleInSimulationByGroup (yesNo: boolean): void;

  /**
   * Sets local-space translation for the node at the current time.
   * @param pos - The local space translation for the node.
   */
  setLocalPos (pos: DzVec3): void;

  /**
   * Sets local-space translation for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The local space translation for the node.
   */
  setLocalPos (tm: DzTime, pos: DzVec3): void;

  /**
   * Sets local-space rotation for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param rot - The local space rotation for the node.
   */
  setLocalRot (tm: DzTime, rot: DzQuat): void;

  /**
   * Sets local-space rotation for the node at the current time.
   * @param rot - The local space rotation for the node.
   */
  setLocalRot (rot: DzQuat): void;

  /**
   * Sets local-space scale for the node at the current time.
   * @param scale - The local space scale for the node
   */
  setLocalScale (scale: DzMatrix3): void;

  /**
   * Sets local-space scale for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param scale - 
   * @param generalScale - The local space scale for the node
   */
  setLocalScale (tm: DzTime, scale: DzMatrix3, generalScale: number): void;

  /**
   * Sets local-space scale for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param scale - The local space scale for the node.
   */
  setLocalScale (tm: DzTime, scale: DzMatrix3): void;

  /**
   * Sets local-space scale for the node at the current time.
   * @param scale - 
   * @param generalScale - The local space scale for the node.
   */
  setLocalScale (scale: DzMatrix3, generalScale: number): void;

  /**
   * Calculates the local transform matrix for this node at the given time.
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   */
  setLocalTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Calculates the local transform matrix for this node at the current time.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   * @param generalScale - The general scale for the transform.
   */
  setLocalTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3, generalScale: number): void;

  /**
   * Calculates the local transform matrix for this node at the current time.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   */
  setLocalTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Calculates the local transform matrix for this node at the given time.
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   * @param generalScale - The general scale for the transform.
   */
  setLocalTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, generalScale: number): void;

  /**
   * Sets the override color to be used to draw the node while using manipulation draw styles.
   * @param color - The value for the override color.
   */
  setManipOverColor (color: Color): void;

  /**
   * Sets the object for this node.
   * @param object - The object that will be drawn by this node. The node takes ownership of this object and deletes it when it is no longer used.
   */
  setObject (object: DzObject): void;

  /**
   * Sets the orientation for the node.
   * @param orientation - The orientation for the node. This defines the space in which node rotations occur.
   * @param [makeDefault=false] - Whether or not to set the default value as well as the current value.
   */
  setOrientation (orientation: DzQuat, makeDefault?: boolean): void;

  /**
   * Sets the orientation for the node.
   * @param angles - The orientation for the node in degrees. This defines the space in which node rotations occur.
   * @param [makeDefault=false] - Whether or not to set the default value as well as the current value.
   */
  setOrientationAngles (angles: DzVec3, makeDefault?: boolean): void;

  /**
   * Sets the origin for the node.
   * @param origin - The origin for the node. This is the node's center point in relation to its geometry.
   * @param [makeDefault=false] - Whether or not to set the default value as well as the current value.
   */
  setOrigin (origin: DzVec3, makeDefault?: boolean): void;

  /**
   * Set the strength of the point at parameter.
   * @param strength - A value in the range [0.0, 1.0] that determines how closely this node aims at its point-at target.
   */
  setPointAtStrength (strength: number): void;

  /**
   * Set the target for this node to be pointed toward.
   * @param target - The node whose centerpoint will serve as the target of point-at functionality.
   */
  setPointAtTarget (target: DzNode): void;

  /**
   * Sets the presentation for this node.
   * @param pres - The new presentation for this node.
   */
  setPresentation (pres: DzPresentation): void;

  /**
   * Sets the preview box for the node.
   * @param box - The oriented box to set.
   */
  setPreviewBox (box: DzOrientedBox3): void;

  /**
   * Sets whether or not to redirect selection.
   * @param onOff - If true, the node will redirect its selection to its parent.
   */
  setPromoteSelection (onOff: boolean): void;

  /**
   * Sets the node rotation order.
   * @param order - The order that the axis rotations will be applied in for this node.
   */
  setRotationOrder (order: DzRotationOrder): void;

  /**
   * Sets whether or not this node is selectable via the 3D viewport.
   * @param onOff - If true, the node will be selectable (the default). If false, the node will not participate in the pick image.
   */
  setSelectable (onOff: boolean): void;

  /**
   * Sets the selection map to use for this node.
   * @param map - The selection map to use for this node.
   */
  setSelectionMap (map: DzSelectionMap): void;

  /**
   * Sets the local-space rotation for the node, in the context of the current tool, at the current time.
   * @param tm - The scene time at which to set the transform for the node.
   * @param rot - The local space rotation for the node.
   */
  setToolLocalRot (tm: DzTime, rot: DzQuat): void;

  /**
   * Sets the local-space rotation for the node, in the context of the current tool.
   * @param rot - The local space rotation for the node.
   */
  setToolLocalRot (rot: DzQuat): void;

  /**
   * Calculates the local transform matrix for this node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   */
  setToolLocalTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Calculates the local transform matrix for this node at the given time, in the context of the current tool.
   * @since 4.8.1.13
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   * @param generalScale - The general scale for the transform.
   */
  setToolLocalTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, generalScale: number): void;

  /**
   * Calculates the local transform matrix for this node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   * @param generalScale - The general scale for the transform.
   */
  setToolLocalTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3, generalScale: number): void;

  /**
   * Calculates the local transform matrix for this node, in the context of the current tool, at the given time.
   * @since 4.8.1.13
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The local-space position offset for this node.
   * @param rot - The local-space rotation for this node.
   * @param scale - The local-space scale for this node.
   */
  setToolLocalTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Sets world-space rotation for the node, in the context of the current tool.
   * @since 4.9.3.16
   * @param tm - The scene time at which to set the rotation for the node.
   * @param val - The World-Space rotation for the node.
   */
  setToolWSRot (tm: DzTime, val: DzQuat): void;

  /**
   * Sets world-space rotation for the node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   * @param val - The World-Space rotation for the node.
   */
  setToolWSRot (val: DzQuat): void;

  /**
   * Set world-space transform values for this node at the current time, in the context of the current tool.
   * @since 4.9.3.16
   * @param pos - The world-space position offset for this node.
   * @param rot - The world-space rotation for this node.
   * @param scale - The world-space scale for this node.
   */
  setToolWSTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Set world-space transform values for this node, in the context of the current tool.
   * @since 4.9.3.16
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The world-space position offset for this node.
   * @param rot - The world-space rotation for this node.
   * @param scale - The world-space scale for this node.
   */
  setToolWSTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Sets whether or not this node's selectability is controlled by a group node.
   * @param yesNo - 
   */
  setUnselectableByGroup (yesNo: boolean): void;

  /**
   * Sets whether or not this node is visible in the 3D viewport.
   * @param onOff - If true, the node will be visible (the default). If false, the node will not be drawn in the 3D viewport.
   */
  setVisible (onOff: boolean): void;

  /**
   * Sets whether or not this node is visible during a render.
   * @param onOff - If true, the node is visible during a render, otherwise it is not.
   */
  setVisibleInRender (onOff: boolean): void;

  /**
   * Sets whether or not this node is visible during a simulation.
   * @since 4.9.4.25
   * @param onOff - If true, the node is visible during a simulation, otherwise it is not.
   */
  setVisibleInSimulation (onOff: boolean): void;

  /**
   * Sets world-space translation for the node at the current time.
   * @param pos - The World-Space translation for the node.
   */
  setWSPos (pos: DzVec3): void;

  /**
   * Sets world-space translation for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The World-Space translation for the node.
   */
  setWSPos (tm: DzTime, pos: DzVec3): void;

  /**
   * Sets world-space rotation for the node at the current time.
   * @param val - The World-Space rotation for the node.
   */
  setWSRot (val: DzQuat): void;

  /**
   * Sets world-space rotation for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param val - The World-Space rotation for the node.
   */
  setWSRot (tm: DzTime, val: DzQuat): void;

  /**
   * Sets world-space scale for the node at the current time.
   * @param scale - The World-Space sacle for the node.
   */
  setWSScale (scale: DzMatrix3): void;

  /**
   * Sets world-space scale for the node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param scale - The World-Space scale for the node.
   */
  setWSScale (tm: DzTime, scale: DzMatrix3): void;

  /**
   * Set world-space transform values for this node at the current time.
   * @param pos - The world-space position offset for this node.
   * @param rot - The world-space rotation for this node.
   * @param scale - The world-space scale for this node.
   */
  setWSTransform (pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * Set world-space transform values for this node.
   * @param tm - The scene time at which to set the transform for the node.
   * @param pos - The world-space position offset for this node.
   * @param rot - The world-space rotation for this node.
   * @param scale - The world-space scale for this node.
   */
  setWSTransform (tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;

  /**
   * @returns true if this node is set unselectable by a group node, otherwise false.
   */
  unselectableByGroup (): boolean;

  /**
   * Called to update any cached or display data for this object.
   * @param [isRender=false] - If true, the node should prepare itself for a render quality presentation.
   */
  update (isRender?: boolean): void;

  /**
   * Update the orientation of the node.
   */
  updateOrientation (): void;

  aboutToBeRemoved: Signal<{
    /**
     * Emitted immediately before the node is removed from the scene.
     */
  (): void;
  }>;
  aboutToDelete: Signal<{
    /**
     * Emitted when the node is about to be deleted.
     * @param node - Thes node being deleted.
     */
  (node: DzNode): void;
  }>;
  added: Signal<{
    /**
     * Emitted when the node is added to the scene.
     */
  (): void;
  }>;
  assetModified: Signal<{
    /**
     * Emitted when the node has been modified.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * Emitted after the node has been saved.
     */
  (): void;
  }>;
  boundBoxInvalidated: Signal<{
    /**
     * Emitted after the bounding box for this node has been invalidated.
     */
  (): void;
  }>;
  childAdded: Signal<{
    /**
     * Emitted when a child is added to the node.
     * @param child - The child added to the node.
     */
  (child: DzNode): void;
  }>;
  childListChanged: Signal<{
    /**
     * Emitted when a child is added to or removed from the node.
     */
  (): void;
  }>;
  childListOrderChanged: Signal<{
    /**
     * Emitted after the order of this node's children has changed.
     */
  (): void;
  }>;
  childRemoved: Signal<{
    /**
     * Emitted when a child is removed from the node.
     * @param child - The child removed from the node.
     */
  (child: DzNode): void;
  }>;
  drawnDataChanged: Signal<{
    /**
     * Emitted when the visual representation of this node needs to be redrawn.
     */
  (): void;
  }>;
  hiddenChanged: Signal<{
    /**
     * Emitted when the hidden state of this node is changed.
     * @param hidden - true if the node is currently hidden in the interface, otherwise false.
     */
  (hidden: boolean): void;
  }>;
  inheritScaleChanged: Signal<{
    /**
     * Emitted when the state of this node's scale inherience has changed.
     */
  (): void;
  }>;
  materialListChanged: Signal<{
    /**
     * Emitted when the list of materials for this node has changed.
     */
  (): void;
  }>;
  materialSelectionChanged: Signal<{
    /**
     * Emitted when the list of selected materials for this node has changed.
     */
  (): void;
  }>;
  materialSelectionSetsChanged: Signal<{
    /**
     * Emitted when the material selection sets for this node has changed.
     */
  (): void;
  }>;
  objectChanged: Signal<{
    /**
     * Emitted when a different object becomes associated with this node.
     * @param node - This node.
     * @param oldObject - The prior object, or NULL if none.
     * @param newObject - The new object, or NULL if none.
     */
  (node: DzNode, oldObject: DzObject, newObject: DzObject): void;
  }>;
  parentChanged: Signal<{
    /**
     * Emitted when the parent of this node changes.
     * @param node - This node.
     * @param oldParent - The previous parent of the node.
     * @param newParent - The new parent of the node.
     */
  (node: DzNode, oldParent: DzNode, newParent: DzNode): void;
  }>;
  parentHierarchyChanged: Signal<{
    /**
     * Emitted when the parent hierarchy for this node has changed.
     * @param node - This node.
     */
  (node: DzNode): void;
  }>;
  promoteSelectionChanged: Signal<{
    /**
     * TODO: Add description.
     * @param promoteSelection - 
     */
  (promoteSelection: boolean): void;
  }>;
  removed: Signal<{
    /**
     * Emitted when the node is removed from the scene.
     */
  (): void;
  }>;
  riggingChanged: Signal<{
    /**
     * Emitted when the rotation order, orientation, center point, or end point for this node have changed.
     */
  (): void;
  }>;
  rotationOrderChanged: Signal<{
    /**
     * Emitted when the rotation order of this node changes.
     */
  (): void;
  }>;
  selectabilityChanged: Signal<{
    /**
     * Emitted when the selectability of the node has changed.
     */
  (): void;
  }>;
  selected: Signal<{
    /**
     * Eitted when the selection state of this node changes.
     * @param node - This node.
     * @param onOff - true if the node was selected, false if it was deselected.
     */
  (node: DzNode, onOff: boolean): void;
  }>;
  topologyChanged: Signal<{
    /**
     * Emitted when the topology for this node has changed.
     */
  (): void;
  }>;
  transformChanged: Signal<{
    /**
     * Emitted when transformation properties of this node change.
     */
  (): void;
  }>;
  uvsChanged: Signal<{
    /**
     * Emitted when the current uv set for this node has changed.
     */
  (): void;
  }>;
  visibilityChanged: Signal<{
    /**
     * Emitted when the visibility of the node has changed.
     */
  (): void;
  }>;
  visibilityInRenderChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  visibilityInSimulationChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzNode:
{
  prototype: DzNode;

  /**
   * Default Constructor.
   */
  new (): DzNode;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodealigner_dz
 * Implements the logic of adjusting node positions to align them.
 * @seealso Sample: Node Align
 * @attention This object is provided by the Align pane plugin. It is only available when the Align pane plugin is activated and enabled.
 * @since 4.10.0.122
 */
interface DzNodeAligner extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneX: number;

  /**
   * TODO: Add description.
   */
  readonly AlignXLefts: number;

  /**
   * TODO: Add description.
   */
  readonly AlignXCenters: number;

  /**
   * TODO: Add description.
   */
  readonly AlignXOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly AlignXRights: number;

  /**
   * TODO: Add description.
   */
  readonly StackXLefts: number;

  /**
   * TODO: Add description.
   */
  readonly StackXRights: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeXLefts: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeXCenters: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeXOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeXRights: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneY: number;

  /**
   * TODO: Add description.
   */
  readonly AlignYTops: number;

  /**
   * TODO: Add description.
   */
  readonly AlignYCenters: number;

  /**
   * TODO: Add description.
   */
  readonly AlignYOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly AlignYBottoms: number;

  /**
   * TODO: Add description.
   */
  readonly StackYTops: number;

  /**
   * TODO: Add description.
   */
  readonly StackYBottoms: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeYTops: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeYCenters: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeYOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeYBottoms: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneZ: number;

  /**
   * TODO: Add description.
   */
  readonly AlignZFronts: number;

  /**
   * TODO: Add description.
   */
  readonly AlignZCenters: number;

  /**
   * TODO: Add description.
   */
  readonly AlignZOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly AlignZBacks: number;

  /**
   * TODO: Add description.
   */
  readonly StackZFronts: number;

  /**
   * TODO: Add description.
   */
  readonly StackZBacks: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeZFronts: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeZCenters: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeZOrigins: number;

  /**
   * TODO: Add description.
   */
  readonly DistributeZBacks: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly UnitsM: number;

  /**
   * TODO: Add description.
   */
  readonly UnitsCM: number;

  /**
   * TODO: Add description.
   */
  readonly UnitsYD: number;

  /**
   * TODO: Add description.
   */
  readonly UnitsFT: number;

  /**
   * TODO: Add description.
   */
  readonly UnitsIN: number;

  /**
   * Adds a node to the list of node to be processed.
   * @returns DZ_NO_ERROR (0x00000000) if node was sucessfully added to the list, DZ_ALREADY_EXISTS_ERROR (0x00000050) if node is already in the list, and DZ_ILLEGAL_ARGUMENT_ERROR (0x00000060) if node is null.
   * @attention The order that nodes are added to the list impacts the results of the alignment operation. The first node in the list is used as the basis for any Align, Stack or Distribute operations. The last node in the list is used to establish the range for Distribute operations. All other nodes in the list are processed in their respective order within the list.
   * @param node - The node to add to the list.
   */
  addNode (node: DzNode): DzError;

  /**
   * @returns true if the current list of nodes, in conjuction with the current option configuration, can be applied, otherwise false.
   * @attention At least one alignment axis must be set to a value other than “None.” Aligning “To Grid” (UseInterval) requires at least one (1) node to be added. Aligning without using an interval requires at least two (2) nodes to be added. Distributing, with or without using an interval, requires at least three (3) nodes to be added. If any “UseInterval” option is active, the corresponding value must be greater than 0. No more than one (1) node within the hierarchy of a given skeleton can be added.
   * @seealso addNode()
   */
  canAlign (): boolean;

  /**
   * Clears the list of nodes to be processed.
   */
  clearNodes (): void;

  /**
   * Performs an alignment of nodes, based on the current options set.
   * @returns true if the alignment operation was successful, otherwise false.
   * @seealso canAlign()
   */
  doAlign (): boolean;

  /**
   * @returns The list of nodes that alignment operations will be performed on (if any), otherwise an empty list.
   */
  getNodes (): Array<unknown>;

  /**
   * @returns The align operation to perform along the X axis.
   */
  getXAlign (): number;

  /**
   * @returns The number of units along the X axis, in the specified size.
   * @param [size=UnitsCM] - The size of units to get.
   */
  getXUnits (size?: number): number;

  /**
   * @returns true if using an interval along the X axis is enabled, otherwise false.
   */
  getXUseInterval (): boolean;

  /**
   * @returns The align operation to perform along the Y axis.
   */
  getYAlign (): number;

  /**
   * @returns The number of units along the Y axis, in the specified size.
   * @param [size=UnitsCM] - The size of units to get.
   */
  getYUnits (size?: number): number;

  /**
   * @returns true if using an interval along the Y axis is enabled, otherwise false.
   */
  getYUseInterval (): boolean;

  /**
   * @returns The align operation to perform along the Z axis.
   */
  getZAlign (): number;

  /**
   * @returns The number of units along the Z axis, in the specified size.
   * @param [size=UnitsCM] - The size of units to get.
   */
  getZUnits (size?: number): number;

  /**
   * @returns true if using an interval along the Z axis is enabled, otherwise false.
   */
  getZUseInterval (): boolean;

  /**
   * Sets the align operation to perform along the X axis.
   * @param align - The align operation to perform.
   */
  setXAlign (align: number): void;

  /**
   * Sets the interval to use along the X axis.
   * @param units - The number of units to set.
   * @param [size=UnitsCM] - The size of the unit to set.
   */
  setXUnits (units: number, size?: number): void;

  /**
   * Sets whether or not to use an interval along the X axis.
   * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
   * @param onOff - If true, the interval is used.
   */
  setXUseInterval (onOff: boolean): void;

  /**
   * Sets the align operation to perform along the Y axis.
   * @param align - The align operation to perform.
   */
  setYAlign (align: number): void;

  /**
   * Sets the interval to use along the Y axis.
   * @param units - The number of units to set.
   * @param [size=UnitsCM] - The size of the unit to set.
   */
  setYUnits (units: number, size?: number): void;

  /**
   * Sets whether or not to use an interval along the Y axis.
   * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
   * @param onOff - If true, the interval is used.
   */
  setYUseInterval (onOff: boolean): void;

  /**
   * Sets the align operation to perform along the Z axis.
   * @param align - The align operation to perform.
   */
  setZAlign (align: number): void;

  /**
   * Sets the interval to use along the Z axis.
   * @param units - The number of units to set.
   * @param [size=UnitsCM] - The size of the unit to set.
   */
  setZUnits (units: number, size?: number): void;

  /**
   * Sets whether or not to use an interval along the Z axis.
   * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
   * @param onOff - If true, the interval is used.
   */
  setZUseInterval (onOff: boolean): void;

  canAlignChanged: Signal<{
    /**
     * Emitted when the state of whether or not alignment is possible has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
}

declare var DzNodeAligner:
{
  prototype: DzNodeAligner;

  /**
   * Default Constructor.
   */
  new (): DzNodeAligner;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneX: number;
  /**
   * TODO: Add description.
   */
  readonly AlignXLefts: number;
  /**
   * TODO: Add description.
   */
  readonly AlignXCenters: number;
  /**
   * TODO: Add description.
   */
  readonly AlignXOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly AlignXRights: number;
  /**
   * TODO: Add description.
   */
  readonly StackXLefts: number;
  /**
   * TODO: Add description.
   */
  readonly StackXRights: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeXLefts: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeXCenters: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeXOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeXRights: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneY: number;
  /**
   * TODO: Add description.
   */
  readonly AlignYTops: number;
  /**
   * TODO: Add description.
   */
  readonly AlignYCenters: number;
  /**
   * TODO: Add description.
   */
  readonly AlignYOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly AlignYBottoms: number;
  /**
   * TODO: Add description.
   */
  readonly StackYTops: number;
  /**
   * TODO: Add description.
   */
  readonly StackYBottoms: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeYTops: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeYCenters: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeYOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeYBottoms: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoneZ: number;
  /**
   * TODO: Add description.
   */
  readonly AlignZFronts: number;
  /**
   * TODO: Add description.
   */
  readonly AlignZCenters: number;
  /**
   * TODO: Add description.
   */
  readonly AlignZOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly AlignZBacks: number;
  /**
   * TODO: Add description.
   */
  readonly StackZFronts: number;
  /**
   * TODO: Add description.
   */
  readonly StackZBacks: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeZFronts: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeZCenters: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeZOrigins: number;
  /**
   * TODO: Add description.
   */
  readonly DistributeZBacks: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly UnitsM: number;
  /**
   * TODO: Add description.
   */
  readonly UnitsCM: number;
  /**
   * TODO: Add description.
   */
  readonly UnitsYD: number;
  /**
   * TODO: Add description.
   */
  readonly UnitsFT: number;
  /**
   * TODO: Add description.
   */
  readonly UnitsIN: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeproperty_dz
 * An animatable node property.
 * @remarks An animatable property whose value is a choice of one of the node objects in the current scene, or none. Instead of tracking a numeric value, this property maintains a pointer to another node in the scene. Use this property when you need an element to track a user-selected scene node; for example, this property could be used in a node to allow the user to select another node in the scene to follow, or it could be used by a modifier that uses a node in the scene to determine how it is applied, etc.
 */
interface DzNodeProperty extends DzProperty
{

  /**
   * Excludes the given node from becoming the value of this property.
   * @param node - The node to exclude.
   */
  exclude (node: DzNode): void;

  /**
   * @returns The default value of the property (if any), otherwise NULL.
   */
  getDefaultValue (): DzNode;

  /**
   * @returns The value of the property at the given key (if any), otherwise NULL.
   * @param i - The index of the key to get a value for.
   */
  getKeyValue (i: number): DzNode;

  /**
   * @returns The value of the property at the given time (if any), otherwise NULL.
   * @param tm - The scene time for which to get the value of the property.
   */
  getValue (tm: DzTime): DzNode;

  /**
   * @returns The value of the property (if any), otherwise NULL.
   */
  getValue (): DzNode;

  /**
   * @returns true if the given node is excluded from becoming the value of this property, otherwise false.
   * @param node - The node to check for exclusion.
   */
  isExcluded (node: DzNode): boolean;

  /**
   * Set the default value of the property.
   * @param val - The default value for this property.
   */
  setDefaultValue (val: DzNode): void;

  /**
   * Set the value of the property for the given key.
   * @param which - The index of the key to set a value for.
   * @param val - The node to associate with the given key.
   */
  setKeyValue (which: number, val: DzNode): void;

  /**
   * Set the value of the property at the given time.
   * @param tm - The scene time for which to set the value.
   * @param val - The node to associate with this property.
   */
  setValue (tm: DzTime, val: DzNode): void;

  /**
   * Set the value of the property.
   * @param val - The node to associate with this property.
   */
  setValue (val: DzNode): void;

  aboutToChange: Signal<{
    /**
     * @null 
     * Emitted immediately before the value of the property changes.
     */
  (): void;
  }>;
}

declare var DzNodeProperty:
{
  prototype: DzNodeProperty;

  /**
   * Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzNodeProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzNodeProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeselectioncombobox_dz
 * DAZScript combobox widget with a custom popup designed for choosing a DzNode.
 * @remarks Provides a DzComboBox like widget with a custom popup designed for choosing a DzNode.
 */
interface DzNodeSelectionComboBox extends DzWidget
{

  /**
   * Clears the selection of any node(s).
   * @since 4.10.0.27
   */
  clearNodeSelection (): void;

  /**
   * Gets the nodes to be shown in the popup.
   */
  getNodes (): Array<unknown>;

  /**
   * @returns The node selected in the popup.
   */
  getSelectedNode (): DzNode;

  /**
   * Hide the popup.
   */
  hidePopup (): void;

  /**
   * Sets the node from the scene to be shown in the popup.
   * @seealso setNodes()
   * @param node - The DzNode to show.
   */
  setNode (node: DzNode): void;

  /**
   * Sets the nodes from the scene to be shown in the popup.
   * @param nodes - A list of the DzNode objects to show.
   */
  setNodes (nodes: Array<unknown>): void;

  /**
   * Sets the node from the scene to be selected.
   * @param node - The DzNode to select.
   */
  setSelectedNode (node: DzNode): void;

  /**
   * Display the popup.
   */
  showPopup (): void;

  nodeSelectionChanged: Signal<{
    /**
     * Emitted when the selected DzNode changes.
     */
  (): void;
  }>;
}

declare var DzNodeSelectionComboBox:
{
  prototype: DzNodeSelectionComboBox;

  /**
   * Creates a node selection combobox as a child of the given parent widget.
   * @param parent - The widget parent for the combobox.
   * @param [nodeType=“DzNode”] - The name of the DzNode [sub]class that root nodes must inherit to be shown in the list
   * @param [allowNone=false] - Whether or not to provide a “None” option in the list
   */
  new (parent: DzWidget, nodeType?: string, allowNone?: boolean): DzNodeSelectionComboBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodesupportassetfilter_dz
 * Class for saving DSON-based Figure or Prop Support Assets.
 * @remarks An asset save filter for saving Figure or Prop Support Assets in the DSON format.
 * @seealso Sample: Save Figure/Prop Support Assets
 */
interface DzNodeSupportAssetFilter extends DzAssetFileOutFilter
{

  /**
   * @returns The node set (if any) on this save filter.
   * @attention If a node is not set on this save filter, the primary selection in the scene is used.
   */
  getSetNode (): DzNode;

  /**
   * Sets a node to save support assets for.
   * @attention If node is NULL or a node is not set on this save filter, the primary selection in the scene will be used.
   * @param node - The node to set.
   */
  setNode (node: DzNode): void;

}

declare var DzNodeSupportAssetFilter:
{
  prototype: DzNodeSupportAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzNodeSupportAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericcontroller_dz
 * Base class for controllers that operate on DzNumericProperty types.
 * @remarks This is the base class for all controllers that can control the value of a DzNumericProperty-derived object. DzNumericProperty objects can have multiple controllers, these controllers are applied in the order they appear in the controller list.
 * The application of controllers in a DzNumeric-derived property begins with the keyed (raw) value of the property at the given time, this is the value that is passed to the apply() function of the first controller. The result returned by the apply() call to the first controller is then passed into the apply() function on the second controller, and so on. The result returned by the apply() function of the last controller on the property is then returned as the final value of the property for the given time.
 * The applyInverse function is used to determine the keyed (raw) value of the property when the user enters a number for the final value of the property. Controllers which have an 'Additive' effect must reimplement this method so that the value of the property appears to respond correctly to user input. Controllers which have a 'Replace' effect need not reimplement this function, since they have no inverse because they do not use the raw value of the property in their calculation.
 */
interface DzNumericController extends DzController
{

  /**
   * This function is called to apply the controller to the numeric property that it controls.
   * @returns The final value for the property
   * This function is called to apply the controller to the numeric property that it controls. Subclasses must reimplement this function to perform the controller logic.
   * @returns The final value for the property
   * @param val - The raw value of the property
   * @param tm - The scene time at which the controller is being evaluated
   * @param local - 
   */
  apply (val: number, tm: DzTime, local: boolean): number;

  /**
   * This function is called to 'unapply' the controller to the numeric property that it controls.
   * @returns The raw value for the property
   * This function is called to 'unapply' the controller to the numeric property that it controls. Subclasses must reimplement this function to perform the inverse of the controller logic.
   * @returns The raw value for the property
   * @param val - The final value of the property
   * @param tm - The scene time at which the controller is being evaluated
   * @param local - 
   */
  applyInverse (val: number, tm: DzTime, local: boolean): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericnodeproperty_dz
 * Numeric (float) property that has an associated node pointer.
 * @remarks This property tracks both a numeric value and a node value - it is essentially a combination of a DzFloatProperty and a DzNodeProperty in a single property. The main benefit of this is to display the settings to the user as a single parameter, it also provides several conveniences for the programmer in linking the two values together. Currently, this property is used by DzNode to implement the 'Point At' parameter.
 */
interface DzNumericNodeProperty extends DzFloatProperty
{

  /**
   * @returns The node that is assigned to this property.
   */
  getNode (): DzNode;

  /**
   * @returns true if the value of this property is invalid unless a node is assigned, otherwise false.
   */
  isInvalidWithoutNode (): boolean;

  /**
   * Sets whether or not this property value is valid when no node is assigned.
   * @param onOff - If true, this property must have a node associated with it.
   */
  setMustHaveNode (onOff: boolean): void;

  /**
   * Set the node for this property.
   * @param node - The node to associate with this property.
   */
  setNode (node: DzNode): void;

  invalidWithoutNodeChanged: Signal<{
    /**
     * Emitted when this property's invalid without node state has changed.
     * @param onOff - If true, then this property is invalid without a node.
     */
  (onOff: boolean): void;
  }>;
  nodeChanged: Signal<{
    /**
     * Emitted when the node associated with this property has changed.
     * @param node - The node that was changed.
     */
  (node: DzNode): void;
  }>;
}

declare var DzNumericNodeProperty:
{
  prototype: DzNumericNodeProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzNumericNodeProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, creates an animatable property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   * @param [initVal=0.0] - The initial value of the property.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean, initVal?: number): DzNumericNodeProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericproperty_dz
 * Base class of all numeric properties.
 * @remarks TODO: Add detailed description.
 */
interface DzNumericProperty extends DzProperty
{

  /**
   * The axis that this properties value is applied to.
   */
  /**
   * Default - this property is not associated with an axis.
   */
  readonly NO_INTEREST: number;

  /**
   * Value is used by an X Axis control.
   */
  readonly X_INTEREST: number;

  /**
   * Value is used by an Y Axis control.
   */
  readonly Y_INTEREST: number;

  /**
   * Value is used by an Z Axis control.
   */
  readonly Z_INTEREST: number;

  /**
   * Value is used by the General Scale control.
   */
  readonly ALL_INTEREST: number;

  /**
   * Clear the image map for this property.
   */
  clearMap (): void;

  /**
   * TODO: Add description.
   * @param otherProp - 
   */
  copyMapFrom (otherProp: DzNumericProperty): void;

  /**
   * TODO: Add description.
   */
  doesClampChangeValue (): boolean;

  /**
   * Searches node for a property that matches the name of this property.
   * @seealso DzProperty::findMatchingProperty()
   * @param node - The node to search.
   * @param [useStrictMatching=true] - If true (default), any found property will only be considered a match if it is the same type as this property. If false, any found property will be considered a match if it inherits from DzNumericProperty.
   */
  findMatchingProperty (node: DzNode, useStrictMatching?: boolean): DzProperty;

  /**
   * @returns The default map gamma.
   * @since 4.5.2.23
   */
  getDefaultMapGamma (): number;

  /**
   * @returns The default map texture type.
   * @since 4.6.4.30
   */
  getDefaultMapTextureType (): number;

  /**
   * TODO: Add description.
   */
  getDoubleDefaultValue (): number;

  /**
   * @returns The value of the property at the given time, as a double precision number.
   * @seealso getDoubleValue()
   * setDoubleValue()
   * @param tm - The scene time at which to get the value of the property.
   */
  getDoubleValue (tm: DzTime): number;

  /**
   * @returns The value of the property at the current time, as a double precision number.
   * @seealso getDoubleValue( DzTime )
   * setDoubleValue()
   */
  getDoubleValue (): number;

  /**
   * TODO: Add description.
   */
  getFollowProperty (): DzNumericProperty;

  /**
   * TODO: Add description.
   */
  getFollowValue (): number;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getFollowValue (tm: DzTime): number;

  /**
   * @returns The property that this property is directly linked to (if any), otherwise NULL.
   * @seealso isLinked()
   * isMaster()
   * linkTo()
   * unlink()
   */
  getLinkProperty (): DzNumericProperty;

  /**
   * @returns The image map at the current time. If this property is not mappable, the returned image will be empty.
   */
  getMapValue (): DzTexture;

  /**
   * @returns The image map for the given time. If the object is not mappable, the returned image will be empty.
   * @param time - The time at which to get the map value for this property.
   */
  getMapValue (time: DzTime): DzTexture;

  /**
   * TODO: Add description.
   */
  getNDoubleValue (): DzDoubleVector;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getNDoubleValue (tm: DzTime): DzDoubleVector;

  /**
   * TODO: Add description.
   */
  getNValueCount (): number;

  /**
   * @returns The texture modifier for this property (if any), otherwise NULL.
   * @since 4.6.4.80
   */
  getTextureModifier (): DzTextureModifier;

  /**
   * @returns The texture modifier flags.
   * @since 4.6.4.82
   */
  getTextureModifierFlags (): number;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getValueAsFloatColor (tm: DzTime): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getValueAsFloatColor (): DzFloatColor;

  /**
   * TODO: Add description.
   */
  getValueAsInt2 (): DzInt2;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getValueAsInt2 (tm: DzTime): DzInt2;

  /**
   * TODO: Add description.
   */
  getValueAsVec2 (): DzVec2;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getValueAsVec2 (tm: DzTime): DzVec2;

  /**
   * TODO: Add description.
   */
  getValueAsVec3 (): DzVec3;

  /**
   * TODO: Add description.
   * @param tm - 
   */
  getValueAsVec3 (tm: DzTime): DzVec3;

  /**
   * @returns The XYZ interest for this property (if any).
   */
  getXYZInterest (): number;

  /**
   * Adds a controller to this property.
   * @param controller - The controller to insert.
   * @param [idx=-1] - The index where the controller should be inserted.
   */
  insertController (controller: DzNumericController, idx?: number): void;

  /**
   * @returns true if this property's value is clamped (for display purposes), otherwise false.
   */
  isClamped (): boolean;

  /**
   * @returns true if the value of this property is invalid unless a map is assigned, otherwise false.
   */
  isInvalidWithoutMap (): boolean;

  /**
   * @returns true if this property has a direct link to another property, otherwise false.
   * @seealso isMaster()
   * getLinkProperty()
   * linkTo()
   * unlink()
   */
  isLinked (): boolean;

  /**
   * @returns true if this property is mappable (i.e., can have an associated image map), otherwise false.
   */
  isMappable (): boolean;

  /**
   * @returns true if this property is currently mapped, otherwise false.
   */
  isMapped (): boolean;

  /**
   * @returns true if this property is the master in a direct link between two properties.
   * @seealso isLinked()
   * getLinkProperty()
   * linkTo()
   * unlink()
   */
  isMaster (): boolean;

  /**
   * @returns true if this property is modulo over min and max (i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit), otherwise false.
   */
  isModulo (): boolean;

  /**
   * Establishes a direct link between this property and the given property.
   * @Attention This is the DAZ Studio equivalent of a LinkParm in Poser.
   * @seealso unlink()
   * isMaster()
   * isLinked()
   * getLinkProperty()
   * @param master - The property to be linked with this property.
   */
  linkTo (master: DzNumericProperty): void;

  /**
   * Sets the default map gamma.
   * @since 4.5.2.23
   * @param gamma - The gamma value to set.
   */
  setDefaultMapGamma (gamma: number): void;

  /**
   * Sets the default map texture type.
   * @since 4.6.4.30
   * @param type - The map texture type to set.
   */
  setDefaultMapTextureType (type: number): void;

  /**
   * TODO: Add description.
   * @param val - 
   */
  setDoubleDefaultValue (val: number): void;

  /**
   * Sets the value for this property at the current time, or the default value if this property is not animatable, as a double precision number.
   * @seealso getDoubleValue()
   * @param val - The value to set the property to.
   */
  setDoubleValue (val: number): void;

  /**
   * Sets the value of the property at the given time, with the double precision number.
   * @seealso getDoubleValue()
   * setDoubleValue()
   * @param tm - The scene time at which to set the value of the property.
   * @param val - The value to set the property to.
   */
  setDoubleValue (tm: DzTime, val: number): void;

  /**
   * Sets whether or not the value is clamped to its min and max.
   * @param val - If true, this property is clamped.
   */
  setIsClamped (val: boolean): void;

  /**
   * Sets whether or not this property is mappable.
   * @param val - If true, this property is mappable.
   */
  setIsMappable (val: boolean): void;

  /**
   * Sets whether or not the value is modulo over min and max; i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit.
   * min = 0, max = 359, value = 365 = 5.
   * min = 0, max = 359, value = -60 = 300.
   * Has no effect if isClamped() is true.
   * @param val - If true, this value is modulo over min and max.
   */
  setIsModulo (val: boolean): void;

  /**
   * Set the image map for this property.
   * @param imgFile - The name of the file to use as an image map.
   */
  setMap (imgFile: string): void;

  /**
   * Set the image map for this property.
   * @param img - The image map for this property.
   */
  setMap (img: DzTexture): void;

  /**
   * Sets whether or not this property value is valid when no map is assigned.
   * @param val - If true, this property must have a map assigned.
   */
  setMustHaveMap (val: boolean): void;

  /**
   * Sets the texture modifier.
   * @since 4.6.4.80
   * @param txtMod - The texture modifier to set.
   */
  setTextureModifier (txtMod: DzTextureModifier): void;

  /**
   * Sets texture modifier flags for this property.
   * @since 4.6.4.82
   * @param flags - The texture modifier flags to set.
   */
  setTextureModifierFlags (flags: number): void;

  /**
   * Set the XYZ interest for this property.
   * @param interest - The new XYZ interest for this property.
   */
  setXYZInterest (interest: number): void;

  /**
   * Unlinks this property.
   */
  unlink (): void;

  clampedChanged: Signal<{
    /**
     * Emitted when the clamped state for this property has changed.
     * @param onOff - If true, then this property is clamped
     */
  (onOff: boolean): void;
  }>;
  defaultMapGammaChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  defaultMapTextureTypeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  isMappableChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  linked: Signal<{
    /**
     * Emitted when the property is linked to another property.
     */
  (): void;
  }>;
  mapChanged: Signal<{
    /**
     * Emitted when the image map for this property has changed.
     */
  (): void;
  }>;
  minMaxChanged: Signal<{
    /**
     * Emitted when the min and/or max values for this property have changed.
     */
  (): void;
  }>;
  textureModifierChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  textureModifierFlagsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  unlinked: Signal<{
    /**
     * Emitted when the property is unlinked from another property.
     */
  (): void;
  }>;
}

declare namespace DzNumericProperty
{

  /**
   * The axis that this properties value is applied to.
   */
  /**
   * Default - this property is not associated with an axis.
   */
  export const NO_INTEREST: number;
  /**
   * Value is used by an X Axis control.
   */
  export const X_INTEREST: number;
  /**
   * Value is used by an Y Axis control.
   */
  export const Y_INTEREST: number;
  /**
   * Value is used by an Z Axis control.
   */
  export const Z_INTEREST: number;
  /**
   * Value is used by the General Scale control.
   */
  export const ALL_INTEREST: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/object_dz
 * The main object class.
 * @remarks Responsible for evaluating the geometry pipeline, including caching and drawing of the world-space transformed shape. Can have multiple shapes assigned, though only one can be active at a time.
 */
interface DzObject extends DzElement
{

  /**
   * Adds a modifier to the modifier stack.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param modifier - The modifier to add to this object's modifier stack.
   * @param [index=-1] - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
   */
  addModifier (modifier: DzModifier, index?: number): DzError;

  /**
   * Add a shape to this object.
   * @param shape - The shape that will be added to this object's list of possible shapes.
   * @param [index=-1] - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
   */
  addShape (shape: shape_dz, index?: number): DzError;

  /**
   * @returns The modifier in the stack with the given name (if any), otherwise NULL.
   * @param name - The name of the modifier to get.
   */
  findModifier (name: string): DzModifier;

  /**
   * @returns The index of the modifier in the modifier stack (if any), otherwise -1.
   * @param mod - The modifier to find the index for.
   */
  findModifierIndex (mod: DzModifier): number;

  /**
   * @returns The index of the modifier in the modifier stack (if any), otherwise -1.
   * @param mod - The modifier to find the index for.
   */
  findModifierIndexFromEnd (mod: DzModifier): number;

  /**
   * TODO: Add description.
   * @param node - 
   * @param [isRender=false] - 
   */
  forceCacheUpdate (node: DzNode, isRender?: boolean): void;

  /**
   * @returns A world space bounding box for this object.
   */
  getBoundingBox (): DzBox3;

  /**
   * @returns The final world-space transformed mesh for the current shape.
   * @attention Re-evaluates the pipeline if necessary.
   */
  getCachedGeom (): vertexmesh_dz;

  /**
   * Get the current shape.
   * @returns The current shape this object is caching/drawing.
   */
  getCurrentShape (): shape_dz;

  /**
   * @returns The property that controls the current shape of this object.
   */
  getGeometryControl (): DzEnumProperty;

  /**
   * @returns A local space bounding box for this object; cached by the last call to evaluate().
   */
  getLocalBoundingBox (): DzBox3;

  /**
   * @returns A local space oriented bounding box for this object; cached by the last call to evaluate().
   */
  getLocalOrientedBox (): DzOrientedBox3;

  /**
   * @returns The modifier at the given position in the modifier stack (if any), otherwise NULL.
   * @param which - The index of the modifier in the stack to get.
   */
  getModifier (which: number): DzModifier;

  /**
   * @returns The number of modifiers in the local modifier stack for this object.
   */
  getNumModifiers (): number;

  /**
   * @returns The number of possible shapes that this object can display.
   */
  getNumShapes (): number;

  /**
   * @returns The shape at the given index (if any), otherwise NULL.
   * @param which - Index of the shape to get.
   */
  getShape (which: number): shape_dz;

  /**
   * Flags this object to reevaluate its geometry pipeline the next time the cached shape is requested.
   */
  invalidateCache (): void;

  /**
   * Moves the modifier from its source obj to this modifier stack. DZ_ILLEGAL_ARGUMENT_ERROR is returned if there is not a modifier, the modifier's element parent is not an object, or the modifier is already an element child of this object. This move is not undo-able.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param modifier - The modifier to add to this object's modifier stack.
   * @param [index=-1] - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
   */
  moveModifier (modifier: DzModifier, index?: number): DzError;

  /**
   * Moves the given shape from its source object to this object. Operation fails if the shape's element parent is not a different dzobject with this shape in its shape list.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param shape - The shape that will be added to this object's list of possible shapes.
   * @param [index=-1] - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
   */
  moveShape (shape: shape_dz, index?: number): DzError;

  /**
   * Removes all the modifiers from the modifier stack.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   */
  removeAllModifiers (): DzError;

  /**
   * Remove all shapes from this object.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   */
  removeAllShapes (): DzError;

  /**
   * Removes a modifier from the modifier stack.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param modifier - The modifier to remove from this object's modifier stack.
   */
  removeModifier (modifier: DzModifier): DzError;

  /**
   * Remove a shape from this object.
   * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
   * @param index - The index of the shape to remove from this object's list of possible shapes.
   */
  removeShape (index: number): DzError;

  aboutToAddModifier: Signal<{
    /**
     * Emitted when a modifier is about to be added to this object.
     * @param mod - The modifier that is about to be added to the object.
     */
  (mod: DzModifier): void;
  }>;
  aboutToDelete: Signal<{
    /**
     * Emitted when this object is about to be deleted.
     */
  (): void;
  }>;
  aboutToFinalize: Signal<{
    /**
     * Emitted when the vertex mesh for this object is about to be finalized.
     * @param mesh - The vertex mesh about to be finalized.
     */
  (mesh: vertexmesh_dz): void;
  }>;
  cachedGeomFinalized: Signal<{
    /**
     * Emitted when the cached geometry for this object has been finalized.
     */
  (): void;
  }>;
  cachedGeomInvalidated: Signal<{
    /**
     * Emitted when the cached geometry for this object has been invalidated.
     */
  (): void;
  }>;
  cachedGeomUpdated: Signal<{
    /**
     * Emitted when the cached geometry for this object has been updated.
     */
  (): void;
  }>;
  cachedTopologyChanged: Signal<{
    /**
     * Emitted when the cached topology for this object has changed.
     */
  (): void;
  }>;
  currentShapeSwitched: Signal<{
    /**
     * Emitted when the current shape is swapped out.
     */
  (): void;
  }>;
  drawnDataChanged: Signal<{
    /**
     * Emitted when this object needs to be redrawn.
     */
  (): void;
  }>;
  materialListChanged: Signal<{
    /**
     * Emitted when the material list for the current shape changes.
     */
  (): void;
  }>;
  materialSelectionChanged: Signal<{
    /**
     * Emitted when the material selection state for the current shape changes.
     */
  (): void;
  }>;
  materialSelectionSetsChanged: Signal<{
    /**
     * Emitted when the material selection state for the current shape changes.
     */
  (): void;
  }>;
  modifierAdded: Signal<{
    /**
     * Emitted when a modifier is added to this object.
     * @param mod - The modifier added to the object.
     */
  (mod: DzModifier): void;
  }>;
  modifierRemoved: Signal<{
    /**
     * Emitted when a modifier is removed from this object.
     * @param mod - The modifier removed from the object.
     */
  (mod: DzModifier): void;
  }>;
  modifierStackChanged: Signal<{
    /**
     * Emitted when a modifier is added to or removed from this object.
     */
  (): void;
  }>;
  shapeAdded: Signal<{
    /**
     * Emitted when a shape is added to this object.
     * @param shape - The shape added to the object.
     */
  (shape: shape_dz): void;
  }>;
  shapeRemoved: Signal<{
    /**
     * Emitted when a shape is removed from this object.
     * @param shape - The shape removed from the object.
     */
  (shape: shape_dz): void;
  }>;
  shapeTopologyChanged: Signal<{
    /**
     * Emitted when the topology of the current shape for this object has changed.
     */
  (): void;
  }>;
  uvsChanged: Signal<{
    /**
     * Emitted when the current uv set for the object has changed.
     */
  (): void;
  }>;
}

declare var DzObject:
{
  prototype: DzObject;

  /**
   * Default Constructor.
   */
  new (): DzObject;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/object_q
 * The prototype object of all DAZ Studio API objects.
 * @remarks TODO: Add detailed description.
 */
interface QObject
{

  /**
   * Holds the name of the object.
   */
  objectName: string

  /**
   * Holds the name of the object.
   */
  name: string

  /**
   * Schedules this object for deletion.
   */
  deleteLater (): void;

  /**
   * @returns The child of this object that is named name, or undefined if name cannot be found. If name is empty, it is equivalent to all names. The search is performed recursively.
   * Attention:
   * If more than one child matches name, the most direct ancestor is returned. If several direct ancestors are named name, it is undefined which one will be returned. In that case, use findChildren() instead.
   * @param [name=“”] - The name of the child object to find.
   */
  findChild (name?: string): Object;

  /**
   * @returns All children of this object that are named name, or an empty list if name cannot be found. If name is empty, it is equivalent to all names. The search is performed recursively.
   * @param [name=“”] - The name of the children objects to find.
   */
  findChildren (name?: string): Array<unknown>;

  /**
   * @returns The string representation of the object.
   */
  toString (): string;

  /**
   * @returns A string representation of the object classname.
   */
  className (): string;

  /**
   * @returns true if the object inherits classname, otherwise false.
   * @param classname - The name of the class to test for inheritance.
   */
  inherits (classname: string): boolean;

  /**
   * @returns true if the object is an instance of classname, otherwise false.
   * @param classname - The name of the class to test.
   */
  isA (classname: string): boolean;

  destroyed: Signal<{
    /**
     * @null 
     * Emitted immediately before the object is destroyed.
     * @param [obj=null] - 
     */
  (obj?: QObject): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objexporter_dz
 * Class for exporting geometry to the Wavefront Object (*.obj) format.
 * @seealso DzExportMgr::findExporterByClassName()
 * DzExportMgr::findExporter()
 * Silent OBJ Export
 */
interface DzObjExporter extends DzExporter
{

}

declare var DzObjExporter:
{
  prototype: DzObjExporter;

  /**
   * Default Constructor.
   */
  new (): DzObjExporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objimporter_dz
 * Class for importing geometry in the Wavefront Object (*.obj) format.
 * @seealso DzImportMgr::findImporterByClassName()
 * DzImportMgr::findImporter()
 * Silent OBJ Import
 */
interface DzObjImporter extends DzGeometryImporter
{

}

declare var DzObjImporter:
{
  prototype: DzObjImporter;

  /**
   * Default Constructor.
   */
  new (): DzObjImporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/offsetmanip_dz
 * A manipulator that offsets an image layer horizontally and/or vertically.
 * @remarks TODO: Add detailed description.
 */
interface DzOffsetManip extends DzImageManip
{

  /**
   * TODO: Add description.
   */
  xOffset: number

  /**
   * Holds the horizontal offset.
   */
  yOffset: number

  /**
   * Sets the offset for the image.
   * @param x - The offset for the image in x.
   * @param y - The offset for the image in y.
   */
  setOffset (x: number, y: number): void;

}

declare var DzOffsetManip:
{
  prototype: DzOffsetManip;

  /**
   * Holds the vertical offset.
   * Default Constructor
   * @param [x=0] - 
   * @param [y=0] - 
   */
  new (x?: number, y?: number): DzOffsetManip;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opacitymanip_dz
 * A manipulator that sets the alpha channel of an entire image layer to a specified value.
 * @remarks TODO: Add detailed description.
 */
interface DzOpacityManip extends DzImageManip
{

  /**
   * TODO: Add description.
   */
  opacity: number

  /**
   * @returns The opacity value for the image.
   */
  getOpacity (): number;

  /**
   * Sets the opacity for the image.
   * @param opacity - The new opacity value for the image. This should be in the range 0.0 - 1.0.
   */
  setOpacity (opacity: number): void;

}

declare var DzOpacityManip:
{
  prototype: DzOpacityManip;

  /**
   * Holds the opacity value.
   * Default Constructor
   * @param [opacity=1.0] - 
   */
  new (opacity?: number): DzOpacityManip;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opengl_dz
 * Provides management of OpenGL extensions and basic state.
 * @remarks You can access the global instance of DzOpenGL via the Global::OpenGL variable.
 */
interface DzOpenGL extends QObject
{

  /**
   * Defines the possible values for the application-wide texture quality settings.
   */
  /**
   * Lowest quality / Best performance. Texture sizes are clamped to a small size or the maximum size supported by the hardware, whichever is less.
   */
  readonly OGLLow: number;

  /**
   * Medium quality / Better performance. Texture sizes are clamped to a medium size or the maximum size supported by the hardware, whichever is less.
   */
  readonly OGLMed: number;

  /**
   * High quality / Good performance. Texture sizes are clamped to a large size or the maximum size supported by the hardware, whichever is less.
   */
  readonly OGLHigh: number;

  /**
   * Best quality / Low performance. Texture sizes are clamped to the maximum size supported by the hardware.
   */
  readonly OGLBest: number;

  /**
   * @returns true if the OpenGL, and the DAZ-supported OpenGL extensions have been initialized. The other OpenGL support funtions will not return the correct result until initialization has occurred.
   */
  isOGLInitialized (): boolean;

  /**
   * @returns the opacity value of the bounding box for active ( highlighted ) nodes.
   */
  getBoundingBoxActiveOpacity (): number;

  /**
   * @returns the length of the edges of the bounding boxes.
   */
  getBoundingBoxEdgeLength (): number;

  /**
   * @returns the opacity value of the bounding box for inactive nodes that are selected.
   */
  getBoundingBoxInactiveOpacity (): number;

  /**
   * @returns The number of bit depth of the client depth buffer.
   */
  getDepthBufferBits (): number;

  /**
   * @returns true if nodes should be drawn with a highlight
   */
  getDrawNodeHighlight (): boolean;

  /**
   * @returns The major version number of OpenGL supported on the current hardware.
   */
  getMajorVersion (): number;

  /**
   * @returns The maximim texture size supported by the client.
   */
  getMaxTextureSize (): number;

  /**
   * @returns The maximim number of textures supported by the client.
   */
  getMaxTextureUnits (): number;

  /**
   * @returns The minor version number of OpenGL supported on the current hardware.
   */
  getMinorVersion (): number;

  /**
   * @returns The number auxiliary buffers supported by the client.
   */
  getNumAuxBuffers (): number;

  /**
   * @returns The maximim number of lights supported by the client.
   */
  getNumLights (): number;

  /**
   * @returns The number of supported OpenGL extensions
   */
  getNumOGLExtensions (): number;

  /**
   * @returns The OpenGL major and minor version numbers supported on the current hardware.
   */
  getOpenGLVersion (): number;

  /**
   * @returns A pointer to the application-wide global PBuffer object
   */
  getPBuffer (): pbuffer_dz;

  /**
   * @returns The release number of OpenGL supported on the current hardware.
   */
  getReleaseNumber (): number;

  /**
   * @returns the opacity value of the wireframe for the generated edges of a subdivided mesh.
   */
  getSubDivisionWireOpacity (): number;

  /**
   * @returns The current quality setting for loading OpenGL textures
   */
  getTextureQuality (): number;

  /**
   * @returns The maximum dimension for a texture map based on the current OpenGL texture quality setting.
   */
  getTextureQualityMaxSize (): number;

  /**
   * @returns the opacity value of the wireframe for drawn triangulation of quads.
   * @since 4.9.3.142
   */
  getTriDivisionWireOpacity (): number;

  /**
   * @returns the opacity value of the wireframe for the edges of a mesh.
   */
  getWireframeOpacity (): number;

  /**
   * @returns true if the user has enabled display optimization and if its supported.
   */
  isDisplayOptimizationEnabled (): boolean;

  /**
   * @returns true if the user has enabled hardware antialiasing.
   */
  isMultisampleEnabled (): boolean;

  /**
   * @returns true if the client supports hardware antialiasing.
   */
  isMultisampleSupported (): boolean;

  /**
   * @returns true if the given OpenGL extension is supported
   * @param extension - The extension to check
   */
  isOGLExtensionSupported (extension: string): boolean;

  /**
   * Checks for support of the four following extensions: GL_ARB_shader_objects, GL_ARB_fragment_shader, GL_ARB_vertex_shader, GL_ARB_shading_language_100. All four extensions must exist for this function to return true.
   * @returns true if OpenGL Shader Language is supported
   */
  isOGLShaderLanguageSupported (): boolean;

  /**
   * @returns true if the client supports hardware shadow mapping.
   */
  isShadowingSupported (): boolean;

  /**
   * @returns true if the client supports Vertex Buffer Objects.
   */
  isVBOSupported (): boolean;

  /**
   * Sets the opacity of the bounding box for active ( highlighted ) nodes.
   * @param opacity - The opacity value to be used
   */
  setBoundingBoxActiveOpacity (opacity: number): void;

  /**
   * Sets the length of the edges of the bounding boxes.
   * @param length - The edge length to be used
   */
  setBoundingBoxEdgeLength (length: number): void;

  /**
   * Sets the opacity of the bounding box for inactive nodes that are selected.
   * @param opacity - The opacity value to be used
   */
  setBoundingBoxInactiveOpacity (opacity: number): void;

  /**
   * Sets whether or not display optimization is enabled in the OpenGL viewports
   * @param onOff - If true, display optimizations will be enabled   *         Deprecated   *         use setPrimitiveDrawMode instead
   */
  setDisplayOptimizationEnabled (onOff: boolean): void;

  /**
   * @param onOff - If true, nodes will be drawn with a highlight
   */
  setDrawNodeHighlight (onOff: boolean): void;

  /**
   * Sets whether or not multisampling is enabled in the OpenGL viewports
   * @param onOff - if true, multisampling is enabled
   */
  setMultisampleEnabled (onOff: boolean): void;

  /**
   * Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
   * @param opacity - The opacity value
   */
  setSubDivisionWireOpacity (opacity: number): void;

  /**
   * Sets the quality setting for loading OpenGL textures
   * @param quality - The quality of the texture
   */
  setTextureQuality (quality: number): void;

  /**
   * Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
   * @since 4.9.3.142
   * @param opacity - The opacity value
   */
  setTriDivisionWireOpacity (opacity: number): void;

  /**
   * Sets the opacity of the wireframe for the edges of a mesh.
   * @param opacity - The opacity value
   */
  setWireframeOpacity (opacity: number): void;

  boundingBoxActiveOpacityChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  boundingBoxEdgeLengthChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  boundingBoxInactiveOpacityChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  displayOptimizationEnabled: Signal<{
    /**
     * Emitted when display optimization is disabled or enabled.
     * @param onOff - If true, display optimization was enabled. If false, display optimization was disabled.
     */
  (onOff: boolean): void;
  }>;
  multisampleEnabled: Signal<{
    /**
     * Emitted when multisample is disabled or enabled.
     * @param onOff - If true, multipsample was enabled. If false, multisample was disabled.
     */
  (onOff: boolean): void;
  }>;
  subDivisionWireOpacityChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  subWireframeOpacityChanged: Signal<{
    /**
     * TODO: Add description.
     * @param value - 
     */
  (value: number): void;
  }>;
  textureQualityChanged: Signal<{
    /**
     * Emitted when the texture quality setting has changed.
     * @param quality - The new texture quality setting.
     */
  (quality: number): void;
  }>;
}

declare namespace DzOpenGL
{

  /**
   * Defines the possible values for the application-wide texture quality settings.
   */
  /**
   * Lowest quality / Best performance. Texture sizes are clamped to a small size or the maximum size supported by the hardware, whichever is less.
   */
  export const OGLLow: number;
  /**
   * Medium quality / Better performance. Texture sizes are clamped to a medium size or the maximum size supported by the hardware, whichever is less.
   */
  export const OGLMed: number;
  /**
   * High quality / Good performance. Texture sizes are clamped to a large size or the maximum size supported by the hardware, whichever is less.
   */
  export const OGLHigh: number;
  /**
   * Best quality / Low performance. Texture sizes are clamped to the maximum size supported by the hardware.
   */
  export const OGLBest: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/orientedbox3_dz
 * An oriented 3D box.
 * @remarks Represents a 3D box by storing two 3D vectors - an upper and lower corner for the box, and a transformation for its orientation.
 */
interface DzOrientedBox3 extends Object
{

  /**
   * The box in 'local space' (without transforms applied)
   */
  localBox: DzBox3

  /**
   * The transform matrix of the box in 3D space
   */
  transform: DzMatrix3

}

declare var DzOrientedBox3:
{
  prototype: DzOrientedBox3;

  /**
   * Constructor. Creates an uninitialized box with an identity transform - the first point included in an uninitialized box will become the min and max for the box.
   */
  new (): DzOrientedBox3;

  /**
   * Copy constructor.
   * @param box - The box to copy from
   */
  new (box: DzOrientedBox3): DzOrientedBox3;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
   * @param transform - The transformation to apply to this box
   */
  new (transform: DzMatrix3): DzOrientedBox3;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an oriented box that is the given box with the given transform.
   * @param box - The box to copy from
   * @param transform - The transformation to apply to this box
   */
  new (box: DzBox3, transform: DzMatrix3): DzOrientedBox3;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an oriented box that is the given box with the given transform.
   * @param box - The box to copy from
   * @param translation - The translation to apply to this box
   * @param rotation - The rotation to apply to this box
   * @param scale - The scale to apply to this box
   */
  new (box: DzBox3, translation: DzVec3, rotation: DzQuat, scale: DzVec3): DzOrientedBox3;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
   * @param translation - The translation to apply to this box
   * @param rotation - The rotation to apply to this box
   * @param scale - The scale to apply to this box
   */
  new (translation: DzVec3, rotation: DzQuat, scale: DzVec3): DzOrientedBox3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/palette
 * DAZScript wrapper for QPalette.
 * @remarks This is the DAZScript counterpart to the QPalette type used in the DAZ Studio SDK.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Palette extends QObject
{

  /**
   * The Palette for active windows (the window that has focus).
   */
  active: Palette

  /**
   * Used as the alternate background color in views with alternating row colors.
   */
  alternateBase: Color

  /**
   * Obsolete. Use window instead.
   */
  background: Color

  /**
   * Used as background color for text entry widgets, for example; usually white or another light color.
   */
  base: Color

  /**
   * A text color that is very different from windowText, and contrasts well with e.g. dark. Typically used for text that needs to be drawn where text or windowText would give poor contrast, such as on a pressed DzPushButton. Note that text colors can be used for things other than just words; text colors are usually used for text, but it's quite common to use the text color roles for lines, icons, etc.
   */
  brightText: Color

  /**
   * General button background color.
   */
  button: Color

  /**
   * A foreground color used with the button color.
   */
  buttonText: Color

  /**
   * Used for 3D bevel and shadow effects. Darker than button.
   */
  dark: Color

  /**
   * The Palette for disabled widgets.
   */
  disabled: Palette

  /**
   * Obsolete. Use windowText instead.
   */
  foreground: Color

  /**
   * A color to indicate a selected item or the current item.
   */
  highlight: Color

  /**
   * A text color that contrasts with highlight.
   */
  highlightedText: Color

  /**
   * The Palette for inactive windows (the other windows).
   */
  inactive: Palette

  /**
   * Used for 3D bevel and shadow effects. Lighter than button color.
   */
  light: Color

  /**
   * A text color used for unvisited hyperlinks. By default, the link color is blue.
   */
  link: Color

  /**
   * A text color used for already visited hyperlinks. By default, the link visited color is magenta.
   */
  linkVisited: Color

  /**
   * Used for 3D bevel and shadow effects. Between button and dark.
   */
  mid: Color

  /**
   * Used for 3D bevel and shadow effects. Between button and light.
   */
  midlight: Color

  /**
   * Used for 3D bevel and shadow effects. A very dark color.
   */
  shadow: Color

  /**
   * The foreground color used with base.
   */
  text: Color

  /**
   * Used as the background color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
   */
  toolTipBase: Color

  /**
   * Used as the foreground color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
   */
  toolTipText: Color

  /**
   * General background color.
   */
  window: Color

  /**
   * General foreground color.
   */
  windowText: Color

}

declare var Palette:
{
  prototype: Palette;

  /**
   * Default Constructor.
   * Creates a palette with the given color groups.
   * @param active - The Palette for the active state.
   * @param disabled - The Palette for the disabled state.
   * @param inactive - The Palette for the inactive state.
   */
  new (active: Palette, disabled: Palette, inactive: Palette): Palette;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pane_dz
 * A base class for all non-modal sets of related widgets that persist in the interface.
 * @remarks A “Pane” is the application's implementation of a persistent non-modal set of closely related widgets that can be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized by the end-user.
 * Each pane has a label that is attached to the outer perimeter of the pane; whether the label appears as a tab/button/etc. to the user depends on the “style” that they currently has applied. A pane's label should briefly describe the concept (product, service, etc.) presented to the user within the pane.
 * Actions performed by the user that are closely related to the concept of a given pane, but do not warrant a persitent widget within the pane itself, or are more advanced in nature, should be considered for placement with the pane's option menu.
 * A pane is only ever displayed to the user within a DzPaneGroup; this is what gives the pane its ability to be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized. A pane can only ever exist within one DzPaneGroup at a time.
 * Panes are singletons; there is only one instance of a given DzPane subclass. Panes are registered with DzPaneMgr and are available to access and modifiy via script. Use DzPaneMgr::findPane() to obtain a pointer to the single instance of the subclass, using its classname.
 */
interface DzPane extends QWidget
{

  /**
   * Sub classes must reimplement this function to generate a default options menu if they have one. This function is called when the pane is loaded for the first time or the interface is reset. Otherwise, the option menus are loaded from the user's interface settings file.
   * @param menu - The menu to add to.
   */
  buildOptionsMenu (menu: DzActionMenu): void;

  /**
   * @returns The label of this pane.
   */
  getLabel (): string;

  /**
   * @returns The DzActionMenu for the pane.
   * @attention This function should not be used for adding a DzAction to a pane's option menu. Doing so defeats the user's ability to customize their interface settings. Instead, adding an action should be accomplished by reimplementing DzAction::getDefaultMenuPath().
   */
  getOptionsMenu (): DzActionMenu;

  /**
   * Sub classes must reimplement this function to provide the interface manager with the ability to update the user's settings file when the pane's default menu has changed. This function should return a value of 1 or greater if the pane provides a menu. Each time the default menu changes, this number should be incremented.
   */
  getOptionsMenuVersion (): number;

  /**
   * @returns The DzPaneGroup parent that this pane belongs to.
   */
  getPaneGroup (): DzPaneGroup;

  /**
   * Hides this pane in the interface.
   */
  hidePane (): void;

  /**
   * Moves the DzPaneGroup that this pane is in, out of an undockable dialog.
   * @since 4.10.0.46
   */
  makeGroupDockable (): void;

  /**
   * Moves the DzPaneGroup that this pane resides in to a dialog.
   */
  makeGroupUndockable (): void;

  /**
   * Creates a DzPaneGroup in a dialog, and moves this pane into it.
   * @param [minSize=Size] - The minimum size for the dialog (if any). This will be expanded to at least the minimum size of the pane.
   */
  makeUndockable (minSize?: Size): void;

  /**
   * Moves this pane from its current pane group into the given pane group.
   * @param group - The group to move this pane to.
   */
  moveToGroup (group: DzPaneGroup): void;

  /**
   * Called to refresh internal pane data when scene contents, etc have changed.
   */
  refresh (): void;

  /**
   * Sub classes must reimplement this function to restore their saved settings.
   * @param settings - The settings to restore.
   */
  restoreSettings (settings: DzPaneSettings): void;

  /**
   * Sub classes must reimplement this function to save their current settings.
   * @param settings - The settings that will be saved.
   */
  saveSettings (settings: DzPaneSettings): void;

  /**
   * Sets the label for this pane.
   * @param label - The new label for this pane.
   */
  setLabel (label: string): void;

  /**
   * Shows this pane in the interface.
   */
  showPane (): void;

  /**
   * Creates an undocked DzPaneGroup and moves this pane into it.
   * @since 4.10.0.47
   * @param [pos=Point] - The position for the undocked pane group (if any).
   * @param [size=Size] - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
   */
  undock (pos?: Point, size?: Size): void;

  /**
   * Undocks the DzPaneGroup that this pane resides in.
   * @since 4.10.0.47
   * @param [pos=Point] - The position for the undocked pane group (if any).
   * @param [size=Size] - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
   */
  undockGroup (pos?: Point, size?: Size): void;

  labelChanged: Signal<{
    /**
     * Emitted when the pane's label has changed.
     * @param newLabel - The new label for the pane.
     */
  (newLabel: string): void;
  }>;
  menuChanged: Signal<{
    /**
     * Emitted when the options menu for the pane has changed.
     */
  (): void;
  }>;
  paneGroupChanged: Signal<{
    /**
     * TODO: Add description.
     * @param oldGroup - 
     * @param newGroup - 
     */
  (oldGroup: DzPaneGroup, newGroup: DzPaneGroup): void;
  }>;
  tabBarHiddenChanged: Signal<{
    /**
     * Emitted when the visibility of the pane's tab bar is changed. When the tab bar is hidden, it's options menu is not visible. If desired, pane instances can listen to this signal to know when the menu is hidden in order to provide an alternate method of accessing the menu options.
     * @param hidden - If true, the tab bar is hidden.
     */
  (hidden: boolean): void;
  }>;
  visibilityChanged: Signal<{
    /**
     * Emitted when the pane is shown or hidden.
     * @param onOff - If true, the pane is visible.
     */
  (onOff: boolean): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panegroup_dz
 * A dockable collection of interface panes.
 * @remarks The dockable tabbed pane that is used to organize panes in the DAZ Studio interface.
 */
interface DzPaneGroup extends DzDockWindow
{

  /**
   * @returns The currently showing pane.
   */
  getCurrentPane (): DzPane;

  /**
   * @returns The offset, in pixels, from the point where a drag started to the top left corner (including extra for frame, titlebar, etc.)
   */
  getDragOffset (): Point;

  /**
   * @returns The number of panes in this group.
   */
  getNumPanes (): number;

  /**
   * @returns The number of panes shown in this group.
   */
  getNumShownPanes (): number;

  /**
   * @returns The pane in this group at the given index (if any), otherwise NULL.
   * @param i - The index of the pane to get.
   */
  getPane (i: number): DzPane;

  /**
   * Hides all panes without changing their group ownership.
   */
  hideAllPanes (): void;

  /**
   * Hides the given pane without changing its group ownership.
   * @param pane - The pane to be hidden.
   */
  hidePane (pane: DzPane): void;

  /**
   * Sets whether this pane group's tab bar is hidden or not. Emits DzPane::tabBarHiddenChanged(). When the tab bar is hidden, the options menu for the current pane is not visible. If desired, DzPane instances should connect to it's DzPane::tabBarHiddenChanged() signal to be able to provide an alternate options menu when the tab bar is hidden.
   * @param hide - If true, hides the tab bar.
   */
  hideTabBar (hide: boolean): void;

  /**
   * @returns true if the group is undockable (is a child of a panegroupdlg_dz), otherwise false.
   * @since 4.10.0.46
   */
  isUndockable (): boolean;

  /**
   * Enable or disabled the given pane in the interface, if it is a member of this group.
   * @param pane - The pane to be enabled or disabled.
   * @param enabled - If true, the pane will be enabled, otherwise the pane will be disabled.
   */
  setPaneEnabled (pane: DzPane, enabled: boolean): void;

  /**
   * Makes sure the given pane is showing (if it is a member of this group).
   * @param pane - The pane to be shown.
   */
  showPane (pane: DzPane): void;

  /**
   * @returns true if this pane group's tab bar is hidden, otherwise false.
   */
  tabBarHidden (): boolean;

  emptyGroup: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panemgr_dz
 * The manager for interface panes.
 * @remarks There is only one instance of the pane manager object in DAZ Studio. You can get the pane manager by calling DzMainWindow::getPaneMgr().
 */
interface DzPaneMgr extends QWidget
{

  /**
   * TODO: Add description.
   */
  /**
   * Not docked.
   */
  readonly NO_DOCKING: number;

  /**
   * Docked on the left side.
   */
  readonly DOCK_LEFT: number;

  /**
   * Docked on the top.
   */
  readonly DOCK_TOP: number;

  /**
   * Docked on the right side.
   */
  readonly DOCK_RIGHT: number;

  /**
   * Docked on the bottom.
   */
  readonly DOCK_BOTTOM: number;

  /**
   * Adds the activity layout to the list of layouts.
   * @param layout - The layout to be added.
   */
  addActivityLayout (layout: DzActivityLayout): void;

  /**
   * Adds the given pane group dialog to the list of dialogs.
   * @param dlg - The pane group dialog to add.
   */
  addPaneGroupDlg (dlg: panegroupdlg_dz): void;

  /**
   * Removes all panes from all groups.
   */
  clearAllGroups (): void;

  /**
   * Closes all pane group dialogs.
   */
  closeAllPaneGroupDlgs (): void;

  /**
   * Creates a new activity layout and adds it to the list.
   * @returns The created activity layout.
   * @param name - The name of the activity layout.
   * @param description - The description of the activity layout.
   */
  createActivityLayout (name: string, description: string): DzActivityLayout;

  /**
   * @returns A new pane group without any panes.
   */
  createEmptyPaneGroup (): DzPaneGroup;

  /**
   * @returns The tool bar with the given name (if any), otherwise creates a tool bar with the given name.
   * @param name - The name of the toolbar to get.
   */
  createToolBar (name: string): DzToolBar;

  /**
   * Sets whether or not the activity bar is visible in the interface.
   * @param onOff - If true, enables the activity bar.
   */
  enableActivityBar (onOff: boolean): void;

  /**
   * @returns The activity layout with the given name (if any), otherwise NULL.
   * @param name - The name of the layout to find.
   */
  findActivityLayout (name: string): DzActivityLayout;

  /**
   * @returns The dock bar with the given name, otherwise NULL.
   * @param className - The class name of the dock bar to find.
   */
  findDockBar (className: string): DzDockBar;

  /**
   * @returns The dock bar with the given name (if any), otherwise NULL.
   * @param name - The name of the dock bar to find.
   */
  findDockBarByName (name: string): DzDockBar;

  /**
   * @returns The pane with the given class name (if any), otherwise NULL.
   * @param className - The class name of the pane to find.
   */
  findPane (className: string): DzPane;

  /**
   * @returns The tool bar with the given name (if any), otherwise NULL.
   * @param name - The name of the tool bar to find.
   */
  findToolBar (name: string): DzToolBar;

  /**
   * @returns The active activity layout.
   */
  getActiveActivityLayout (): DzActivityLayout;

  /**
   * @returns The index of the active activity layout.
   */
  getActiveActivityLayoutIndex (): number;

  /**
   * @returns The name of the current activity bar image.
   */
  getActivityBarImage (): string;

  /**
   * @returns A list of possible activity bar images.
   */
  getActivityBarImageList (): Array<unknown>;

  /**
   * @returns The activity layout at the given index (if valid), otherwise NULL.
   * @param which - The index of the desired activity layout.
   */
  getActivityLayout (which: number): DzActivityLayout;

  /**
   * @returns The path to the file that is the advanced layout for the application.
   */
  getAdvancedLayout (): string;

  /**
   * @returns The path to the file that is the basic layout for the application.
   */
  getBasicLayout (): string;

  /**
   * @returns The path to the file that is the default layout for the application.
   */
  getDefaultLayout (): string;

  /**
   * @returns A list of default layout names included with the application.
   */
  getDefaultLayoutNames (): Array<unknown>;

  /**
   * @returns The i'th dock bar in the application (if valid), otherwise NULL.
   * @param i - The index of the dock bar to return.
   */
  getDockBar (i: number): DzDockBar;

  /**
   * @returns The number of activity layouts currently available.
   */
  getNumActivityLayouts (): number;

  /**
   * @returns The number of dock bars in the application.
   */
  getNumDockBars (): number;

  /**
   * @returns The number of pane group dialogs.
   */
  getNumPaneGroupDlgs (): number;

  /**
   * @returns The number of pane groups currently available in the interface; includes pane groups that are not currently showing.
   */
  getNumPaneGroups (): number;

  /**
   * @returns The number of panes currently available in the interface; this includes panes that are not currently showing.
   */
  getNumPanes (): number;

  /**
   * @returns The number of tool bars in the application.
   */
  getNumToolBars (): number;

  /**
   * @returns true if the tabs for selecting a pane are oriented along the top of pane groups, otherwise false.
   */
  getOrientTabsAlongTop (): boolean;

  /**
   * @returns The pane group at the given index (if valid), otherwise NULL.
   * @param which - The index of the desired pane group.
   */
  getPaneGroup (which: number): DzPaneGroup;

  /**
   * @returns The pane group dialog at the given index (if valid), otherwise NULL.
   * @param which - The index of the desired pane group dialog.
   */
  getPaneGroupDlg (which: number): panegroupdlg_dz;

  /**
   * @returns A list of all DzPaneGroup objects.
   */
  getPaneGroupList (): Array<unknown>;

  /**
   * @returns A list of all DzPane objects.
   */
  getPaneList (): Array<unknown>;

  /**
   * @returns The path to the file that is the pro layout for the application.
   * @since 4.7.0.3
   */
  getProLayout (): string;

  /**
   * @returns The path to the file that is the layout for this session of the application.
   */
  getSessionLayout (): string;

  /**
   * @returns true if the Lesson Strip is showing, otherwise false.
   */
  getShowLessonStrip (): boolean;

  /**
   * @returns The path to the file that is the simple layout for the application.
   */
  getSimpleLayout (): string;

  /**
   * @returns The path to the file that is the standard layout for the application.
   */
  getStandardLayout (): string;

  /**
   * @returns The i'th tool bar in the application (if valid), otherwise NULL.
   * @param i - The index of the tool bar to return.
   */
  getToolBar (i: number): DzToolBar;

  /**
   * @returns true if workflow assistance is enabled, otherwise false.
   */
  getUseWorkflowAssistance (): boolean;

  /**
   * Hide all panes from view in the interface.
   */
  hideAllPanes (): void;

  /**
   * Hides all the tool bars in the application.
   */
  hideAllToolBars (): void;

  /**
   * Hide the given pane from view in the interface.
   * @param pane - 
   */
  hidePane (pane: DzPane): DzError;

  /**
   * Hide the given pane from view in the interface.
   * @param className - The name of the class to be hidden.
   */
  hidePane (className: string): DzError;

  /**
   * Hide a pane group in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
   * @param which - The index of the pane group to hide.
   */
  hidePaneGroup (which: number): DzError;

  /**
   * Hide a pane group in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
   * @param group - The pane group to hide.
   */
  hidePaneGroup (group: DzPaneGroup): DzError;

  /**
   * @returns true if the activity bar appears in the interface, otherwise false.
   */
  isActivityBarEnabled (): boolean;

  /**
   * Loads the next image from the directory and sets it for the activity bar.
   */
  loadNextActivityBarImage (): void;

  /**
   * Moves a group to a new dock location.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of moving the pane group.
   * @param group - The group to move.
   * @param [dock=NO_DOCKING] - The dock location to move the group to.
   */
  movePaneGroup (group: DzPaneGroup, dock?: number): DzError;

  /**
   * Moves a group to a new dock location.
   * Note:
   * This method currently does nothing and returns DZ_NO_ERROR.
   * @param group - 
   * @param dock - 
   * @param index - 
   * @param [newLine=false] - 
   */
  movePaneGroup (group: DzPaneGroup, dock: number, index: number, newLine?: boolean): DzError;

  /**
   * Removes the given layout.
   * @returns true if the layout existed and was removed, otherwise false.
   * @param name - The name of the activity layout to be removed.
   */
  removeActivityLayout (name: string): boolean;

  /**
   * Removes the given layout.
   * @returns true if the layout existed and was removed, otherwise false.
   * @param which - The index of the layout to remove.
   */
  removeActivityLayout (which: number): boolean;

  /**
   * Removes all the current layouts.
   */
  removeAllActivityLayouts (): void;

  /**
   * Removes all tool bars from the application.
   */
  removeAllToolBars (): void;

  /**
   * Removes the given pane group.
   * @param group - The group to be removed.
   */
  removePaneGroup (group: DzPaneGroup): void;

  /**
   * Removes the given pane group dialog from the list of dialogs.
   * @param dlg - The pane group dialog to remove.
   */
  removePaneGroupDlg (dlg: panegroupdlg_dz): void;

  /**
   * Removes a tool bar from the application.
   * @param name - The name of the tool bar to remove.
   */
  removeToolBar (name: string): void;

  /**
   * Restores the activity layout from the given file.
   * @param filename - The name of the file to be read.
   * @param executeScript - Whether or not the companion layout script should be executed.
   */
  restoreLayout (filename: string, executeScript: boolean): DzError;

  /**
   * Deprecated
   * Use DzPaneMgr::restoreLayout( String, Boolean ) instead.
   * @param filename - 
   */
  restoreLayout (filename: string): DzError;

  /**
   * Saves the current activity layout to the given file.
   * @param filename - The name of the file to be saved.
   * @param [description=“”] - The description for this layout.
   */
  saveLayout (filename: string, description?: string): DzError;

  /**
   * Selects the lesson at the given path.
   * @returns true if the lesson is found and selected, otherwise false.
   * @param path - 
   */
  selectLesson (path: string): boolean;

  /**
   * Sets the active activity layout.
   * @param which - The index of the activity to make active.
   */
  setActiveActivityLayout (which: number): void;

  /**
   * Sets the active layout.
   * @param layout - The layout to make active.
   */
  setActiveActivityLayout (layout: DzActivityLayout): void;

  /**
   * Sets the image for the activity bar.
   * @param img - The name of the image to use in the activity bar; this should be one of the strings returned by getActivityImageList().
   */
  setActivityBarImage (img: string): void;

  /**
   * Sets whether or not the position of tabs for selecting a pane are oriented along the top of the pane groups.
   * @param onOff - If true, the tabs will be displayed along the top of pane groups. If fasle, the tabs will be displayed along the sides of pane groups.
   */
  setOrientTabsAlongTop (onOff: boolean): void;

  /**
   * Enables or disables a given pane in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
   * @param pane - The pane to be enabled or disabled.
   * @param enabled - If true, the pane will be enabled.
   */
  setPaneEnabled (pane: DzPane, enabled: boolean): DzError;

  /**
   * Enables or disables a given pane in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
   * @param className - The pane class to be enabled or disabled.
   * @param enabled - If true, the pane will be enabled.
   */
  setPaneEnabled (className: string, enabled: boolean): DzError;

  /**
   * Sets the file that will be loaded and saved as the user's layout for the session.
   * @param filename - The name of the file to be saved.
   */
  setSessionLayout (filename: string): DzError;

  /**
   * Sets the visibility of the Lesson Strip.
   * @param onOff - If true, the lesson strip is shown.
   */
  setShowLessonStrip (onOff: boolean): void;

  /**
   * Sets whether or not workflow assistance will be enabled.
   * @param onOff - If true, workflow assitance will be enabled.
   */
  setUseWorkflowAssistance (onOff: boolean): void;

  /**
   * Make all panes visible in the interface.
   */
  showAllPanes (): void;

  /**
   * Make the given pane visible in the interface.
   * @param pane - The pane to be shown.
   */
  showPane (pane: DzPane): DzError;

  /**
   * Make the given pane visible in the interface.
   * @param className - The name of the pane class to show.
   */
  showPane (className: string): DzError;

  /**
   * Show a pane group in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
   * @param group - The pane group to show.
   */
  showPaneGroup (group: DzPaneGroup): DzError;

  /**
   * Show a pane group in the interface.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
   * @param which - The index of the pane group to show.
   */
  showPaneGroup (which: number): DzError;

  /**
   * Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
   * @param className - The name of the pane to remove.
   * @param [x=0] - The x position to move to.
   * @param [y=0] - The y position to move to.
   */
  tearOffPane (className: string, x?: number, y?: number): DzError;

  /**
   * Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
   * @param index - The index of the pane to remove.
   * @param [x=0] - The x position to move to.
   * @param [y=0] - The y position to move to.
   */
  tearOffPane (index: number, x?: number, y?: number): DzError;

  /**
   * Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
   * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
   * @param pane - The pane to be removed.
   * @param [x=0] - The x position to move to.
   * @param [y=0] - The y position to move to.
   */
  tearOffPane (pane: DzPane, x?: number, y?: number): DzError;

  /**
   * Toggle the given pane's visibility in the interface.
   * @param index - The index of the pane to be toggled.
   */
  togglePane (index: number): DzError;

  /**
   * Toggle the given pane's visibility in the interface.
   * @param className - 
   */
  togglePane (className: string): DzError;

  /**
   * Toggle the given pane's visibility in the interface.
   * @param pane - The pane whose visibility needs to be toggled.
   */
  togglePane (pane: DzPane): DzError;

  activeLayoutAboutToChange: Signal<{
    /**
     * Called when the active layout is about to change.
     * @param newLayoutIdx - The index of the new layout.
     */
  (newLayoutIdx: number): void;
  }>;
  activeLayoutChanged: Signal<{
    /**
     * Called when the active layout changes.
     * Emitted when the active layout has changed.
     * @param which - The index of the new active layout.
     */
  (which: number): void;
  }>;
  activityBarEnabled: Signal<{
    /**
     * Called when the activity bar enabled status changes.
     * Emitted when the activity bar is enabled or disabled.
     * @param onOff - If true the activity bar is enabled.
     */
  (onOff: boolean): void;
  }>;
  layoutListChanged: Signal<{
    /**
     * Emitted when the list of available layouts has changed.
     */
  (): void;
  }>;
  layoutRestored: Signal<{
    /**
     * Called when a layout has been restored.
     * Emitted when the layout is restored from a file.
     * @param filename - The name of the file to be restored. Enumerations
     */
  (filename: string): void;
  }>;
  orientTabsAlongTopChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  toolbarListChanged: Signal<{
    /**
     * Emitted when the list of available toolbars has changed.
     */
  (): void;
  }>;
  workflowAssistanceEnableStateChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  workflowAssistanceModeChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare namespace DzPaneMgr
{

  /**
   * TODO: Add description.
   */
  /**
   * Not docked.
   */
  export const NO_DOCKING: number;
  /**
   * Docked on the left side.
   */
  export const DOCK_LEFT: number;
  /**
   * Docked on the top.
   */
  export const DOCK_TOP: number;
  /**
   * Docked on the right side.
   */
  export const DOCK_RIGHT: number;
  /**
   * Docked on the bottom.
   */
  export const DOCK_BOTTOM: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panesettings_dz
 * Settings class for interface panes.
 * @remarks TODO: Add detailed description.
 */
interface DzPaneSettings extends DzSettings
{

}

declare var DzPaneSettings:
{
  prototype: DzPaneSettings;

  /**
   * Default Constructor
   */
  new (): DzPaneSettings;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/parentproductcontainer_dz
 * lass for containing parent product assets.
 * @remarks This class is used to contain all assets related to a parent product.
 */
interface DzParentProductContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * Attempts to update the child containers of this container.
   * @returns true if the update was successful, otherwise false.
   */
  updateChildren (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pathcombobox_dz
 * DAZScript combobox widget with a custom popup designed for choosing a path.
 * @remarks A DzPathComboBox provides a DzComboBox like widget with a popup that is designed for choosing a path.
 */
interface DzPathComboBox extends DzWidget
{

  /**
   * @returns returns selected paths.
   */
  getSelectionPath: Array<unknown>

  /**
   * Clear selection
   */
  clearSelection (): void;

  /**
   * @returns current type
   */
  currentType (): DzTypeAssetContainer;

  /**
   * @returns current type
   */
  currentType (): string;

  /**
   * TODO: Add description.
   */
  getRoot (): DzTypeAssetContainer;

  /**
   * Sets empty text
   * @param text - 
   */
  setEmptyText (text: string): void;

  /**
   * sets the current selection
   * @param idPath - 
   */
  setSelection (idPath: Array<unknown>): void;

  /**
   * @returns current type
   * @param idPath - 
   */
  setTopLevelType (idPath: Array<unknown>): void;

  /**
   * Sets paths for the combobox.
   * @param list - 
   */
  setTypes (list: Array<unknown>): void;

  pathSelectionChanged: Signal<{
    /**
     * TODO: Add description.
     * @param path - 
     */
  (path: string): void;
  }>;
  viewAboutToShow: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}

declare var DzPathComboBox:
{
  prototype: DzPathComboBox;

  /**
   * Instantiates DzPathComboBox
   * Creates a path combobox as a child of the given parent widget.
   * @param parent - The widget parent for the path combobox.
   * @param [useMarkableView=false] - Whether or not to use a view with check boxes.
   */
  new (parent: DzWidget, useMarkableView?: boolean): DzPathComboBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/persistentmenu_dz
 * Abstract base class of all persistant menus.
 * @remarks Persistant menus are registered with the DzActionMgr singleton and are available to access and modifiy via script.
 */
interface DzPersistentMenu extends QObject
{

  /**
   * Clear the active widget for this persistent menu.
   */
  clearActiveWgt (): void;

  /**
   * @returns The DzActionMenu that belongs to this persistent menu. If one does not exist, it is created.
   * @since 4.6.0.76
   */
  getActionMenu (): DzActionMenu;

  /**
   * @returns The widget that launched this persistent menu (if any), otherwise null.
   */
  getActiveWgt (): QWidget;

  /**
   * Sets the active widget for this persistent menu.
   * @param wgt - The widget that launches the persistent menu.
   */
  setActiveWgt (wgt: QWidget): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pixmap
 * DAZScript wrapper for QPixmap.
 * @remarks This is the DAZScript counterpart to the QPixmap type used in the DAZ Studio SDK.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Pixmap extends QObject
{

  /**
   * The color depth of the pixmap (Read-Only)
   */
  depth: number

  /**
   * The height of the pixmap in pixels (Read-Only)
   */
  height: number

  /**
   * The enclosing rectangle of the pixmap in pixels (Read-Only)
   */
  rect: Rect

  /**
   * The size of the pixmap (Read-Only)
   */
  size: Size

  /**
   * The width of the pixmap in pixels (Read-Only)
   */
  width: number

  /**
   * Fills the pixmap with color.
   * @param color - The color to set all the pixels in the pixmap.
   */
  fill (color: Color): void;

  /**
   * @seealso toImage()
   * @since 4.9.3.105
   * @param image - The image to convert.
   */
  fromImage (image: Image): void;

  /**
   * Gets whether or not the pixmap is Null.
   * @returns true if this is a Null (empty) pixmap, false if the pixmap has data.
   */
  isNull (): boolean;

  /**
   * Loads data into the pixmap from a file.
   * @param filename - The name of the file to load into the pixmap.
   */
  load (filename: string): void;

  /**
   * Loads data into the pixmap from a byte array using the specified format.
   * @returns true if the data was loaded, otherwise false. (since 4.10.0.88)
   * @param data - The binary data to load into the pixmap.
   * @param [format=“”] - The file format of the bytes in data; i.e. “PNG”.
   */
  loadFromData (data: ByteArray, format?: string): boolean;

  /**
   * Resizes the pixmap.
   * @param width - The new width for the pixmap.
   * @param height - The new height for the pixmap.
   */
  resize (width: number, height: number): void;

  /**
   * Resizes the pixmap.
   * @param size - The new size for the pixmap.
   */
  resize (size: Size): void;

  /**
   * Saves the pixmap to a file.
   * @param filename - The name of the file to save the pixmap to.
   */
  save (filename: string): void;

  /**
   * @returns The pixmap converted to an image, or null if the conversion fails.
   * @seealso fromImage()
   * @since 4.9.3.105
   */
  toImage (): Image;

}

declare var Pixmap:
{
  prototype: Pixmap;

  /**
   * Default Constructor.
   */
  new (): Pixmap;

  /**
   * Copy Constructor.
   * @param pixmap - The Pixmap to copy.
   */
  new (pixmap: Pixmap): Pixmap;

  /**
   * @param filename - The name of the file to load the pixmap's data from.
   */
  new (filename: string): Pixmap;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/plugin_dz
 * Class that defines a DAZ Studio plug-in.
 * @remarks This class provides startup and shutdown functionality for DAZ Studio plug-ins and maintains the list of class types exported by the plug-in.
 */
interface DzPlugin extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Loaded: number;

  /**
   * TODO: Add description.
   */
  readonly RequiresRestart: number;

  /**
   * TODO: Add description.
   */
  readonly ManuallyDisabled: number;

  /**
   * TODO: Add description.
   */
  readonly EvaluationInvalid: number;

  /**
   * TODO: Add description.
   */
  readonly Failed: number;

  /**
   * @returns The author of the plug-in.
   */
  getAuthor (): string;

  /**
   * @returns The author's description of the plug-in.
   */
  getDescription (): string;

  /**
   * @returns The evaluation information of the plug-in in string form.
   */
  getEvaluationInformation (): string;

  /**
   * @returns The absolute file path to the plug-in; set by DzApp when the plug-in is loaded.
   */
  getFilename (): string;

  /**
   * @returns true if the plug-in should load on application start, otherwise false.
   */
  getLoadOnStart (): boolean;

  /**
   * @returns The name of the plug-in.
   */
  getName (): string;

  /**
   * @returns A list of prefixes that can be used to serialize this plugin (if any), otherwise an empty list.
   * @since 4.11.0.35
   */
  getPrefixes (): Array<unknown>;

  /**
   * @returns The load state of the plug-in.
   */
  getStatus (): number;

  /**
   * @returns Additional information about the plug-in load state.
   */
  getStatusInformation (): string;

  /**
   * @returns The string representation of the plug-in load state.
   */
  getStatusString (): string;

  /**
   * @returns The version number of the plug-in.
   */
  getVersion (): DzVersion;

  /**
   * @returns The version number of the plug-in in string form.
   */
  getVersionString (): string;

  /**
   * @returns true if the plug-in is activated, otherwise false. A plug-in is considered activated if it has either been registered or it is within an evaluation period.
   * @seealso isRegistered()
   */
  isActivated (): boolean;

  /**
   * @returns true if the plug-in has been registered, othwerwise false. A plug-in is considered registered if a valid serial number for the plug-in has been applied, or if the plug-in does not use serial number registration. A plug-in that is within an evaluation period is not considered registered.
   * @seealso isActivated()
   */
  isRegistered (): boolean;

  /**
   * @returns true if the serial number is valid for the plug-in, otherwise false.
   * @param serialNumber - The serial number to validate.
   * @param saveIfValid - If true, the serial number will be saved if it is found to be valid.
   */
  validateSerialNumber (serialNumber: string, saveIfValid: boolean): boolean;

}

declare namespace DzPlugin
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const Loaded: number;
  /**
   * TODO: Add description.
   */
  export const RequiresRestart: number;
  /**
   * TODO: Add description.
   */
  export const ManuallyDisabled: number;
  /**
   * TODO: Add description.
   */
  export const EvaluationInvalid: number;
  /**
   * TODO: Add description.
   */
  export const Failed: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pluginmgr_dz
 * The manager for plugins.
 * @remarks There is only one instance of the plugin manager object in DAZ Studio. You can get the plugin manager by calling DzApp::getPluginMgr().
 */
interface DzPluginMgr extends QObject
{

  /**
   * Shows the “About Installed Plugins” dialog.
   */
  doAboutPluginsDlg (): void;

  /**
   * @returns The plug-in of the given type (if any), otherwise NULL.
   * @param pluginName - The name of the desired plugin.
   */
  findPlugin (pluginName: string): DzPlugin;

  /**
   * @returns The number of plug-ins currently loaded by DAZ Studio.
   */
  getNumPlugins (): number;

  /**
   * @returns The plug-in at the given index in the list (if valid), otherwise NULL.
   * @param which - The index of the plug-in to get.
   */
  getPlugin (which: number): DzPlugin;

  /**
   * @returns true if the configuration file was saved, otherwise false.
   * @since 4.11.0.35
   */
  saveConfiguration (): boolean;

  /**
   * Sets whether or not the plug-in should load when the application starts.
   * @since 4.11.0.35
   * @param plugin - The plugin to set whether or not to load on startup.
   * @param onOff - If true, the plugin should load on startup. If false, the plugin should not load on startup.
   */
  setPluginLoadOnStartup (plugin: DzPlugin, onOff: boolean): void;

  pluginAdded: Signal<{
    /**
     * TODO: Add description.
     * @param plugin - 
     */
  (plugin: DzPlugin): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/point
 * DAZScript wrapper for QPoint.
 * @remarks This is the DAZScript counterpart to the QPoint type used in the DAZ Studio SDK. A Point object is a two dimensional representation of a x (horizontal) and y (vertical) position.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Point extends QObject
{

  /**
   * Holds the point's x position.
   * @example
   * var pntTemp = new Point( 10, 20 );
   * print( oPoint.x ); //10
   */
  x: number

  /**
   * Holds the point's y position.
   * @example
   * var pntTemp = new Point( 10, 20 );
   * print( oPoint.y ); //20
   */
  y: number

  /**
   * @returns The position of the cursor in global screen coordinates.
   * @example
   * var pntCursor = (new Point).cursorPos();
   * @since 4.11.0.35
   */
  cursorPos (): Point;

}

declare var Point:
{
  prototype: Point;

  /**
   * Default constructor.
   * @example
   * var pntTemp = new Point();
   */
  new (): Point;

  /**
   * @example
   * var pntTemp1 = new Point( 10, 20 );
   * var pntTemp2 = new Point( oPoint );
   * @param pnt - The point to copy.
   */
  new (pnt: Point): Point;

  /**
   * @example
   * var pntTemp = new Point( 10, 20 );
   * @param x - The x coordinate for the point.
   * @param y - The y coordinate for the point.
   */
  new (x: number, y: number): Point;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pointlight_dz
 * A light that emits in all directions from a single point.
 * @remarks TODO: Add detailed description.
 */
interface DzPointLight extends DzDistantLight
{

  /**
   * @returns The amount of decay.
   * @since 4.9.3.145
   */
  getDecay (): number;

  /**
   * @returns The property that controls the decay.
   */
  getDecayControl (): DzFloatProperty;

  /**
   * @returns true if the sphere will be displayed when the node is not selected, otherwise false.
   * @since 4.9.3.145
   */
  getDisplayPersistence (): boolean;

  /**
   * @returns The property that controls the display persistence.
   * @since 4.9.3.145
   */
  getDisplayPersistenceControl (): DzBoolProperty;

  /**
   * @returns The distance at which the illumination from this light falls off.
   * @since 4.8.0.9
   * @param lightPercent - 
   */
  getFalloffDistance (lightPercent: number): number;

  /**
   * @returns The path to the IES Light Profile (if any), or an empty string.
   * @since 4.8.0.18
   */
  getLightProfile (): string;

  /**
   * @returns The property that controls the IES profile of the light.
   * @since 4.8.0.18
   */
  getLightProfileControl (): DzFileProperty;

  /**
   * @returns true if the light contributes to the scene, otherwise false.
   */
  getLightVisibility (): boolean;

  /**
   * @returns The opacity of the display sphere.
   * @since 4.9.3.145
   */
  getSphereOpacity (): number;

  /**
   * @returns The property that controls the opacity of the sphere.
   * @since 4.9.3.145
   */
  getSphereOpacityControl (): DzFloatProperty;

  /**
   * Sets the amount of decay.
   * @since 4.9.3.145
   * @param decay - The amount of decay to set.
   */
  setDecay (decay: number): void;

  /**
   * Sets the persistance of the display sphere.
   * @since 4.9.3.145
   * @param persistence - If true, the sphere will be displayed when the node is not selected. If false, the sphere will not be displayed when the node is not selected.
   */
  setDisplayPersistence (persistence: boolean): void;

  /**
   * Sets the path of the IES light profile.
   * @since 4.9.3.145
   * @param profilePath - The path of the IES profile to set.
   */
  setLightProfile (profilePath: string): void;

  /**
   * Sets the opacity of the display sphere.
   * @since 4.9.3.145
   * @param opacity - The opacity to set.
   */
  setSphereOpacity (opacity: number): void;

}

declare var DzPointLight:
{
  prototype: DzPointLight;

  /**
   * Default Constructor. Creates a new point light.
   */
  new (): DzPointLight;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/popupmenu_dz
 * DAZScript wrapper for a popup QMenu.
 * @remarks A DzPopupMenu provides a popup menu.
 */
interface DzPopupMenu extends DzWidget
{

  /**
   * This property holds whether the display of check marks on menu items is enabled. When true, the display of check marks on menu items is enabled. Checking is always enabled when in Windows-style.
   */
  checkable: boolean

  /**
   * This property holds whether the menu supports being torn off. When true, the menu contains a special tear-off item (often shown as a dashed line at the top of the menu) that creates a copy of the menu when it is triggered.
   * This “torn-off” copy lives in a separate window. It contains the same menu items as the original menu, with the exception of the tear-off handle.
   */
  tearOff: boolean

  /**
   * Changes the text of the menu item id to text. If the item has an icon, the icon remains unchanged.
   * @param id - 
   * @param text - 
   */
  changeItem (id: number, text: string): void;

  /**
   * TODO: Add description.
   * @param id - 
   * @param pixmap - 
   */
  changeItem (id: number, pixmap: Pixmap): void;

  /**
   * Removes all menu items.
   */
  clear (): void;

  /**
   * TODO: Add description.
   * @param id - 
   * @param receiver - 
   * @param member - 
   */
  connectItem (id: number, receiver: Object, member: string): boolean;

  /**
   * TODO: Add description.
   * @param id - 
   * @param receiver - 
   * @param member - 
   */
  disconnectItem (id: number, receiver: Object, member: string): boolean;

  /**
   * Executes this popup synchronously. In most situations you'll want to specify the position yourself, for example at the current mouse position.
   */
  exec (): number;

  /**
   * Executes this popup synchronously. Opens the popup menu so that the item number indexAtPoint will be at the specified global position pos.
   * @param pos - 
   * @param indexAtPoint - 
   */
  exec (pos: Point, indexAtPoint: number): number;

  /**
   * @returns The identifier of the menu item at position index in the internal list, or -1 if index is out of range.
   * @param index - 
   */
  idAt (index: number): number;

  /**
   * @returns The the id of the item at pos, or -1 if there is no item there or if it is a separator.
   * @param pos - 
   */
  idAt (pos: Point): number;

  /**
   * Inserts submenu popup, labeled text, with an optional id, and an optional index position.
   * @param text - 
   * @param popup - 
   * @param [id=-1] - 
   * @param [index=-1] - 
   */
  insertItem (text: string, popup: DzPopupMenu, id?: number, index?: number): number;

  /**
   * Inserts a menu item with the Pixmap pixmap, with an optional id, and an optional index position.
   * @param pixmap - 
   * @param [id=-1] - 
   * @param [index=-1] - 
   */
  insertItem (pixmap: Pixmap, id?: number, index?: number): number;

  /**
   * Inserts submenu popup with the Pixmap pixmap, with an optional id, and an optional index position.
   * @param pixmap - 
   * @param popup - 
   * @param [id=-1] - 
   * @param [index=-1] - 
   */
  insertItem (pixmap: Pixmap, popup: DzPopupMenu, id?: number, index?: number): number;

  /**
   * Inserts a menu item labeled text, with an optional id, and an optional index position.
   * @param text - 
   * @param [id=-1] - 
   * @param [index=-1] - 
   */
  insertItem (text: string, id?: number, index?: number): number;

  /**
   * Inserts a separator at position index, and returns the menu identifier number allocated to it. The separator becomes the last menu item if index is negative.
   * @param [index=-1] - 
   */
  insertSeparator (index?: number): number;

  /**
   * @returns true if the menu item with the id id has been checked, otherwise false.
   * @param id - 
   */
  isItemChecked (id: number): boolean;

  /**
   * @returns true if the item with identifier id is enabled, otherwise false.
   * @param id - 
   */
  isItemEnabled (id: number): boolean;

  /**
   * @returns true if the menu item with the id id is visible, otherwise false.
   * @param id - 
   */
  isItemVisible (id: number): boolean;

  /**
   * @returns The parameter of the activation signal of item id.
   * @param id - 
   */
  itemParameter (id: number): number;

  /**
   * @returns The pixmap that has been set for menu item id, or null if no pixmap has been set.
   * @param id - 
   */
  pixmap (id: number): Pixmap;

  /**
   * Displays the popup menu so that the item number indexAtPoint will be at the specified global position pos.
   * @param pos - 
   * @param indexAtPoint - 
   */
  popup (pos: Point, indexAtPoint: number): void;

  /**
   * Removes the menu item that has the identifier id.
   * @param id - 
   */
  removeItem (id: number): void;

  /**
   * Removes the menu item at position index.
   * @param index - 
   */
  removeItemAt (index: number): void;

  /**
   * Sets the currently active item to id and repaints as necessary.
   * @param id - 
   */
  setActiveItem (id: number): void;

  /**
   * If check is true, checks the menu item with id id, otherwise unchecks the menu item with id id. Calls DzPopupMenu::setCheckable( true ) if necessary.
   * @param id - 
   * @param check - 
   */
  setItemChecked (id: number, check: boolean): void;

  /**
   * If enable is true, enables the menu item with identifier id, otherwise disables the menu item with identifier id.
   * @param id - 
   * @param enable - 
   */
  setItemEnabled (id: number, enable: boolean): void;

  /**
   * Sets the parameter of the activation signal of item id to param.
   * @param id - 
   * @param param - 
   */
  setItemParameter (id: number, param: number): boolean;

  /**
   * If visible is true, shows the menu item with id id, otherwise hides the menu item with id id.
   * @param id - 
   * @param visible - 
   */
  setItemVisible (id: number, visible: boolean): void;

  /**
   * Sets text as What's This help for the menu item with identifier id.
   * @param id - 
   * @param text - 
   */
  setWhatsThis (id: number, text: string): void;

  /**
   * @returns The text that has been set for menu item id, or an empty string if no text has been set.
   * @param id - 
   */
  text (id: number): string;

  /**
   * @returns The What's This help text for the item with identifier id or an empty string if no text has yet been defined.
   * @param id - 
   */
  whatsThis (id: number): string;

  aboutToHide: Signal<{
    /**
     * This signal is emitted just before the popup menu is hidden after it has been displayed.
     */
  (): void;
  }>;
  aboutToShow: Signal<{
    /**
     * This signal is emitted just before the popup menu is displayed. You can connect it to any slot that sets up the menu contents (e.g. to ensure that the right items are enabled).
     */
  (): void;
  }>;
  activated: Signal<{
    /**
     * This signal is emitted when a menu item is selected.
     * @param id - The id of the selected item.
     */
  (id: number): void;
  }>;
  highlighted: Signal<{
    /**
     * Emitted when a menu item is highlighted.
     * @param id - The id of the highlighted item.
     */
  (id: number): void;
  }>;
}

declare var DzPopupMenu:
{
  prototype: DzPopupMenu;

  /**
   * Creates a popup menu as a child of the given parent widget.
   * @param parent - The widget parent for the popup menu.
   */
  new (parent: DzWidget): DzPopupMenu;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/poseassetfilter_dz
 * Class for saving DSON-based Pose Presets.
 * @remarks An asset save filter for saving a Pose Preset in the DSON format.
 * @seealso Sample: Save a Pose Preset
 */
interface DzPoseAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzPoseAssetFilter:
{
  prototype: DzPoseAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzPoseAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/presentation_dz
 * Represents the presentation for an asset.
 * @seealso DzProperty
 */
interface DzPresentation extends DzBase
{

  /**
   * The auto fit base that this asset is.
   */
  autoFitBase: string

  /**
   * A color hint to be used in conjunction with colorB to define a 2 color linear gradient used by UI elements displayed to the user.
   */
  colorA: Color

  /**
   * A color hint to be used in conjunction with colorA to define a 2 color linear gradient used by UI elements displayed to the user.
   */
  colorB: Color

  /**
   * A human readable, end-user facing, description of the item that the presentation is attached to.
   */
  description: string

  /**
   * The relative path (uri) corresponding to a large image. For a DzFloatProperty that applies a DzMorph, this image is used for display as a “Card” (vertical slider). If iconSmall is not defined, the path defined here is also used (scaled) for the horizontal slider.
   */
  iconLarge: string

  /**
   * The relative path (uri) corresponding to a small image. For a DzFloatProperty that applies a DzMorph, this image is used for display in a horizontal slider. If this is not defined and a value is defined for iconLarge, its value will be used and the image will be scaled down.
   */
  iconSmall: string

  /**
   * A human readable label for the presentation.
   */
  label: string

  /**
   * The preferred base this item tries to follow. If this is does not match the autoFitBase of the conform target, auto-fit will try to convert the content.
   */
  preferredBase: string

  /**
   * A hint to the intended purpose of what the presentation is attached to. For a DzFloatProperty that applies a DzMorph intended to adjust the shape of the underlying structure of an object (e.g. “Nose Height” or “Eye Width”), this would be “Modifier/Shape”. For a DzFloatProperty intended to be used for posing a DzBone of a figure, or to adjust a DzMorph that makes non-structural this would be “Modifier/Pose”.
   */
  type: string

}

declare var DzPresentation:
{
  prototype: DzPresentation;

  /**
   * Default Constructor.
   */
  new (): DzPresentation;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/process_dz
 * A class for starting/communicating with external programs.
 * @remarks See the render to rib sample (line #440+), to see this class in action.
 */
interface DzProcess extends QObject
{

  /**
   * Defines the communication channels connected to the process.
   */
  Stdin: Communication

  /**
   * Defines the communication channels connected to the process.
   */
  Stdout: Communication

  /**
   * Defines the communication channels connected to the process.
   */
  Stderr: Communication

  /**
   * Defines the communication channels connected to the process.
   */
  DupStderr: Communication

  /**
   * Holds an Array of strings. The first being the program to execute, the rest being the command line arguments.
   */
  arguments: Array<unknown>

  /**
   * Holds the communication for the process.
   */
  communication: Communication

  /**
   * Holds the exit status of the program when it has finished. 0 if the process is still running. (Read Only)
   */
  exitStatus: number

  /**
   * Holds whether or not the process has exited normally. (Read Only)
   */
  normalExit: boolean

  /**
   * Holds whether or not the process is currently running. (Read Only)
   */
  running: boolean

  /**
   * Holds the working directory for the process.
   */
  workingDirectory: string

  /**
   * @returns true if it is possible to read an entire line of text from standard error, otherwise false.
   */
  canReadLineStderr (): boolean;

  /**
   * @returns true if it is possible to read an entire line of text from standard output, otherwise false.
   */
  canReadLineStdout (): boolean;

  /**
   * Closes the process' standard input and deletes any pending data that hasn't been written to standard input.
   */
  closeStdin (): void;

  /**
   * Terminates the process.
   * @attention This is not a safe way to end a process, as the process will not be able to perform any cleanup. tryTerminate() is safer, but process' can ignore it.
   */
  kill (): void;

  /**
   * Attempts to run the process, writing buffer to the process' standard input. Standard input is closed if all of the data in buffer is written to it. If envis specified, the values in the Array [of strings] are interpreted as environment settings in the form VARIABLE=VALUE, and the process is started with these environment settings. If envis not specifiied, the process is started with the same environment settings as the starting process.
   * @returns true if the process was able to start, otherwise false.
   * @param buffer - 
   * @param [env=0] - 
   */
  launch (buffer: string, env?: Array<unknown>): boolean;

  /**
   * @returns A line of text from standard error, minus any trailing newline or carriage return characters if canReadLineStderr() is true, otherwise an empty string.
   */
  readLineStderr (): string;

  /**
   * @returns A line of text from standard output, minus any trailing newline or carriage return characters if canReadLineStdout() is true, otherwise an empty string.
   */
  readLineStdout (): string;

  /**
   * Reads the data that the process has written to standard error. When new data is written, the readyReadStderr() signal is emitted.
   * @returns The data written to standard error, or an empty string if there is no such data.
   * @attention This method does not wait for there to be something to read.
   */
  readStderr (): string;

  /**
   * Reads the data that the process has written to standard output. When new data is written, the readyReadStdout() signal is emitted.
   * @returns The data written to standard output, or an empty string if there is no such data.
   * @attention This method does not wait for there to be something to read.
   */
  readStdout (): string;

  /**
   * Attempts to run the process for the program and arguments specified with the arguments property or as specified in the constructor. If envis specified, the values in the Array [of strings] are interpreted as environment settings in the form VARIABLE=VALUE, and the process is started with these environment settings. If envis not specifiied, the process is started with the same environment settings as the starting process.
   * @returns true if the process was able to start, otherwise false.
   * @param [env=0] - 
   */
  start (env?: Array<unknown>): boolean;

  /**
   * Attempts to terminate the process.
   * @attention Process' can ignore this, if they choose to. If you want to be certain that the process is terminated, use kill() instead.
   */
  tryTerminate (): void;

  /**
   * Writes buffer to standard input. The process may, or may not, read the data. The wroteToStdin() signal is emitted once all data in buffer has been written to the process.
   * @param buffer - 
   */
  writeToStdin (buffer: string): void;

  launchFinished: Signal<{
    /**
     * Emitted when the process is started with launch(). If starting the process is successful, this signal is emitted after the data passed in has been written to standard input. If starting the process fails, this signal is emitted immediately.
     */
  (): void;
  }>;
  processExited: Signal<{
    /**
     * Emitted when the process has exited.
     */
  (): void;
  }>;
  readyReadStderr: Signal<{
    /**
     * Emitted when the process has written data to standard error.
     */
  (): void;
  }>;
  readyReadStdout: Signal<{
    /**
     * Emitted when the process has written data to standard output.
     */
  (): void;
  }>;
  wroteToStdin: Signal<{
    /**
     * Emitted if the data sent to standard input (via writeToStdin()) was actually written to the process.
     */
  (): void;
  }>;
}

declare var DzProcess:
{
  prototype: DzProcess;

  /**
   * Default Constructor.
   * Creates a DzProcess object without specifying the program or arguments. This does NOT start start the process.
   */
  new (): DzProcess;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * Creates a DzProcess object specifying the program and any arguments. The first element of args is the program to execute, the rest are the command line arguments. This does NOT start start the process.
   * @param args - 
   */
  new (args: Array<unknown>): DzProcess;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * Creates a DzProcess object specifying only the program, without any arguments. This does NOT start start the process.
   * @param arg0 - 
   */
  new (arg0: string): DzProcess;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productassetcontainer_dz
 * A container for a collection of assets presented as a single entity.
 * @remarks The “Product” container type represents a collection of assets (and supporting files/metadata) that are presented as a single entity to the end-user. Each product is assigned a Globally Unique Idendtifier (GUID) that is used to identify that entity within the content ecosystem. Once a GUID has been assigned to a product (at creation), it does not (and should not) change.
 * While nearly all of the information that defines a product can be replicated into another, for logistical reasons a GUID can only be associated with one “Store” (source) at any single moment in its lifetime. This means that if more than one content package containing metadata that defines a given GUID is installed by an end-user, the last package installed will define the product in the database.
 * By default, all newly created assets are assigned to a “LOCAL USER” product. This product is represented by a GUID consisting entirely of zeros; i.e., “00000000-0000-0000-0000-000000000000”
 * The “LOCAL USER” product is associated with the “LOCAL USER” store (source); this cannot be modified.
 * @seealso DzAssetMgr.findProductByGuid()
 * DzAssetMgr.findProductByStoreToken()
 * DzAssetMgr.createProduct()
 * DzAssetMgr.createProductFromContainer()
 * DzAssetMgr.createProductFromAssets()
 * DzAssetMgr.createStore()
 * DzAsset
 */
interface DzProductAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * The different types of metadata for the product.
   */
  /**
   * Metadata that is created, owned and maintained by the user.
   */
  readonly User: number;

  /**
   * Metadata that is created, owned and maintained by the vendor (originating source).
   */
  readonly Vendor: number;

  /**
   * Metadata that is created, owned and maintained by the vendor (originating source) and/or the user.
   */
  readonly UserAndVendor: number;

  /**
   * Holds the list of artist names associated with this product.
   * @since 4.9.0.2
   */
  artistNames: Array<unknown>

  /**
   * Holds the date this product was installed. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
   * @since 4.9.0.2
   */
  dateInstalled: Date

  /**
   * Holds the date this product was last updated. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
   * @since 4.9.0.2
   */
  dateLastUpdated: Date

  /**
   * Holds the date this product was purchased. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
   * @since 4.9.0.2
   */
  datePurchased: Date

  /**
   * Holds the date this product was released. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
   * @since 4.9.0.2
   */
  dateReleased: Date

  /**
   * Holds the vendor description of this product.
   */
  description: string

  /**
   * Holds the group identifier for the product. 0 = default, < 0 = app defined, > 0 = user defined.
   * @since 4.9.0.11
   */
  groupId: number

  /**
   * Holds the Globally Unique Identifier (GUID) associated with this product. (Read Only)
   * @since 4.8.1.95
   */
  guid: string

  /**
   * Holds whether this product has metadata provided by the cloud. (Read Only)
   * @since 4.9.0.2
   */
  hasCloudMetadata: boolean

  /**
   * Holds whether this product should be hidden in product views.
   * @since 4.9.0.2
   */
  hidden: boolean

  /**
   * Holds the path of the icon for this product. (Read Only)
   * @since 4.11.0.193
   */
  iconPath: string

  /**
   * Holds whether this product can be installed from the cloud. (Read Only)
   * @since 4.9.0.10
   */
  isCloudInstallable: boolean

  /**
   * Holds whether this product is installed from the cloud. (Read Only)
   * @since 4.9.0.2
   */
  isCloudInstalled: boolean

  /**
   * Holds whether a cloud operation is currently occurring for this product. (Read Only)
   * @since 4.9.0.2
   */
  isCloudOperationInProgress: boolean

  /**
   * Holds whether this product is managed by the cloud. (Read Only)
   * @since 4.9.0.2
   */
  isCloudOwned: boolean

  /**
   * Holds whether this product is currently downloading from the cloud. (Read Only)
   * @since 4.9.0.2
   */
  isDownloadingFromCloud: boolean

  /**
   * Holds whether this product is installed. (Read Only)
   * @since 4.9.0.2
   */
  isInstalled: boolean

  /**
   * Holds whether this product is the special product that holds locally created assets. (Read Only)
   * @since 4.9.0.18
   */
  isLocalUser: boolean

  /**
   * Holds whether this product's store is the special store for locally created products. (Read Only)
   * @since 4.11.0.193
   */
  isLocalUserStore: boolean

  /**
   * Holds whether the metadata for this product is valid. (Read Only)
   * @since 4.9.0.2
   * @returns true if the metadata is valid, otherwise false.
   * @since 4.9.0.2
   */
  isMetadataValid: boolean

  /**
   * Holds whether this product is owned by a vendor or by the user. (Read Only)
   */
  isVendor: boolean

  /**
   * Holds whether this product needs to be installed from the cloud. (Read Only)
   * @since 4.9.0.10
   */
  needsCloudInstall: boolean

  /**
   * Holds whether this product needs to be updated from the cloud. (Read Only)
   * @since 4.9.0.2
   */
  needsCloudUpdate: boolean

  /**
   * Holds the name of the store for this product. (Read Only)
   * @since 4.9.0.2
   */
  store: string

  /**
   * Holds the title/name of this product.
   * @since 4.9.0.2
   */
  title: string

  /**
   * Holds the token (i.e. SKU) for this product. (Read Only)
   * @since 4.9.0.2
   */
  token: string

  /**
   * @returns The default store icon size.
   * @since 4.9.3.110
   */
  getDefaultStoreIconSize (): Size;

  /**
   * Cancels any pending cloud operation on the product, if any.
   * @since 4.9.0.21
   */
  cancelFromCloud (): void;

  /**
   * Sets the product as belonging to the default group identifier; 0.
   * @since 4.9.0.11
   */
  clearGroup (): void;

  /**
   * @returns A list of the category paths associated with this product.
   * @since 4.9.0.54
   * @param [metaType=DzProductAssetContainer.UserAndVendor] - The type of categories to get.
   * @param [installedAssets=true] - If true, only the categories of installed assets are included in the list, otherwise the categories of all assets regardless of installed state are included.
   */
  getCategories (metaType?: number, installedAssets?: boolean): Array<unknown>;

  /**
   * @returns The current icon size.
   */
  getIconSize (): Size;

  /**
   * @returns The image that is used to draw the icon for this product.
   * @since 4.11.0.193
   */
  getImage (): Image;

  /**
   * @returns The metadata for this product, in an XML string.
   * @since 4.9.0.11
   * @param [metaType=DzProductAssetContainer.UserAndVendor] - The type of metadata to get.
   */
  getMetadataXML (metaType?: number): string;

  /**
   * @returns The relative file path of the XML metadata file for this product.
   * @since 4.9.0.2
   * @param [userData=false] - If true, the basename of the file will reflect the user rather than the store.
   */
  getMetadataXMLPath (userData?: boolean): string;

  /**
   * @returns The relative path that this product installs too.
   * @since 4.9.0.46
   */
  getRealtiveInstallPath (): string;

  /**
   * @returns The list of files in this product that are not user facing.
   * @since 4.9.0.2
   * @param [forceRefresh=false] - If true, ignores any previously cached list of support files and causes the database to be queried explicitly.
   */
  getSupportFiles (forceRefresh?: boolean): Array<unknown>;

  /**
   * @returns The URL associated with this product.
   */
  getURL (): string;

  /**
   * Installs a product from the cloud if it is not currently installed. The user will be prompted to authenticate if necessary.
   * @since 4.9.0.2
   */
  installFromCloud (): void;

  /**
   * @returns true if the product is belongs to group, otherwise false.
   * @attention 0 = default, < 0 = app defined, > 0 = user defined
   * @since 4.9.0.11
   * @param group - 
   */
  isGroup (group: number): boolean;

  /**
   * Loads the default icon for this product.
   * @returns true if the icon was loaded, otherwise false.
   */
  loadDefaultIcon (): boolean;

  /**
   * Causes the product image to be loaded.
   * @returns true if the product image is loaded, otherwise false.
   */
  loadProductImage (): boolean;

  /**
   * Pushes the metadata information into the database.
   * @returns true if the metadata was successfully pushed to the database, otherwise false.
   * @attention This method retrieves data from the database immediately prior to updating the title, artist names, and description using locally set values and pushing the data back into the database.
   * @since 4.9.0.2
   */
  pushMetadata (): boolean;

  /**
   * Sets the icon size for this product container.
   * @param size - The new icon size.
   */
  setIconSize (size: Size): void;

  /**
   * Sets the image that will be used to draw the icon for this product.
   * @seealso getDefaultStoreIconSize()
   * @since 4.11.0.193
   * @param img - The new image for this product.
   */
  setImage (img: Image): void;

  /**
   * Sets the URL for this asset container
   * @param url - The URL to use for this container
   */
  setURL (url: string): void;

  /**
   * Uninstalls the product if it is currently installed.
   * @since 4.9.0.2
   */
  uninstall (): void;

  /**
   * Uninstalls the product if it is currently installed.
   * @since 4.9.0.2
   */
  uninstallFromCloud (): void;

  /**
   * Updates the product if no other operations are currently being performed on it. The user will be prompted to authenticate if necessary.
   * @since 4.9.0.2
   */
  updateFromCloud (): void;

  /**
   * Updates the metadata for this product. The user will be prompted to authenticate if necessary.
   * @since 4.9.0.32
   * @param [force=false] - If true, any cached data will be discarded and force a connection to be made.
   */
  updateMetaDataFromCloud (force?: boolean): void;

}

declare namespace DzProductAssetContainer
{

  /**
   * The different types of metadata for the product.
   */
  /**
   * Metadata that is created, owned and maintained by the user.
   */
  export const User: number;
  /**
   * Metadata that is created, owned and maintained by the vendor (originating source).
   */
  export const Vendor: number;
  /**
   * Metadata that is created, owned and maintained by the vendor (originating source) and/or the user.
   */
  export const UserAndVendor: number;

  /**
   * @returns The default store icon size.
   * @since 4.9.3.110
   */
  export function getDefaultStoreIconSize (): Size;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productholdercontainer_dz
 * A container type for collecting product search results.
 * @remarks This container type does not directly support assets. The primary purpose of this container type is to collect results returned by a database query for products.
 * @seealso DzAssetMgr::searchForProducts()
 */
interface DzProductHolderContainer extends DzTopLevelAssetContainer, DzRefCountedItem
{

  /**
   * Attempts to insert the given container as a child to this container.
   * @returns true if the child was successfully added, otherwise false.
   * @param container - The container to insert as a child.
   */
  insertChildProductContainer (container: DzProductAssetContainer): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertiesassetfilter_dz
 * Class for saving DSON-based Properties Presets.
 * @remarks An asset save filter for saving a Properties Preset in the DSON format.
 * @seealso Sample: Save a Properties Preset
 */
interface DzPropertiesAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzPropertiesAssetFilter:
{
  prototype: DzPropertiesAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzPropertiesAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/property_dz
 * Base class for all property types.
 * @remarks This is the base class for all properties that are owned or controlled by Elements. Properties can be keyable or not.
 * @seealso DzElement
 */
interface DzProperty extends DzBase
{

  /**
   * TODO: Add description.
   */
  /**
   * Best for saving/loading; includes raw value; sets without adjusting.
   */
  readonly Standard: number;

  /**
   * Include the default value.
   */
  readonly IncludeDefault: number;

  /**
   * Includes the value instead of the raw value.
   */
  readonly CurrentValue: number;

  /**
   * Best for setting.
   */
  readonly AdjustValue: number;

  /**
   * Excludes images.
   */
  readonly SkipImages: number;

  /**
   * Holds the author of the file for this property. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * Holds the revision version of the asset file for this property. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * Holds the asset id for this property.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * Holds the modified date of the asset file for this property. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * Holds the URI of the asset source for this property; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * Holds the asset URI for this property. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  /**
   * Holds whether or not the current value changed emits on scene clear.
   */
  emitValueChangedOnSceneClear: boolean

  /**
   * Adds a value to a settings.
   * @since 4.7.1.72
   * @param tm - The scene time to add the value for.
   * @param settings - The settings to add the data to.
   * @param [flags=Standard] - The flags for controlling the operation.
   */
  addValueToSettings (tm: DzTime, settings: DzSettings, flags?: number): void;

  /**
   * Adds a value to a settings.
   * @since 4.7.1.72
   * @param settings - The settings to add the data to.
   * @param [flags=Standard] - The flags for controlling the operation.
   */
  addValueToSettings (settings: DzSettings, flags?: number): void;

  /**
   * Creates an undo item for the property.
   */
  beginEdit (): void;

  /**
   * @returns A name path URI repersenting this property, relative to the root node.
   * @since 4.9.2.20
   * @param [rootNode=undefined] - The node the path should be relative too. If null (default) the skeleton will be used when parented to a skeleton, otherwise the property's own node will be used if it is not part of a skeleton hierarchy.
   */
  buildNameUriToRoot (rootNode?: DzNode): DzUri;

  /**
   * @returns true if it is legal to animate this property, otherwise false.
   */
  canAnimate (): boolean;

  /**
   * @returns true if the property can automatically follow a property on a following figure, otherwise false.
   */
  canAutoFollow (): boolean;

  /**
   * Finish the edit operation but cancel any changes.
   */
  cancelEdit (): void;

  /**
   * Clears the region associated with this property.
   * @param [preservePath=true] - If true (default), this property's path will not be affected, otherwise the region's path will be removed from this property's path.
   */
  clearRegion (preservePath?: boolean): void;

  /**
   * Copies the value(s) of the given property into this property.
   * @param prop - 
   */
  copyFrom (prop: DzProperty): void;

  /**
   * Copies the value(s) of the property to a 'clipboard' so that they may be saved and applied (pasted) to another property; or to the same property.
   * @returns The 'clipboard' which holds a copy of the current property's value(s). These values are a snapshot of the current state of the property, and will remain unchanged even if the property is changed or deleted.
   * @attention The caller is responsible for deleting this object.
   */
  copyToClipboard (): propertyclipboard_dz;

  /**
   * Creates a new property that forwards all edits of its values to the property it is an alias of.
   * @returns The created property alias.
   */
  createAlias (): DzProperty;

  /**
   * @returns true if the current value of the property is the same as the default value, otherwise false.
   * @seealso currentValueIsDefinitionValue()
   */
  currentValueIsDefaultValue (): boolean;

  /**
   * @returns true if the current value of the property is the same as the value in the file definition, otherwise false.
   * @seealso currentValueIsDefaultValue()
   */
  currentValueIsDefinitionValue (): boolean;

  /**
   * Deletes all keys on this property.
   */
  deleteAllKeys (): void;

  /**
   * Clears key values within the given range, including the endpoints.
   * @returns The number of keys actually deleted.
   * @param interval - 
   */
  deleteKeys (interval: DzTimeRange): number;

  /**
   * Deletes all keys within a specified range.
   * @returns The number of keys deleted.
   * @attention You are responsible to ensure the key indices are within the valid range.
   * @param start - The key index to start from.
   * @param end - The key index to end at.
   */
  deleteKeys (start: number, end: number): number;

  /**
   * Deletes all selected keys.
   * @returns The number of keys actually removed.
   */
  deleteSelectedKeys (): number;

  /**
   * Searches node for a property that matches the name of this property.
   * @seealso DzNumericProperty::findMatchingProperty()
   * @param node - The node to search.
   */
  findMatchingProperty (node: DzNode): DzProperty;

  /**
   * Finalizes the undo item and pushes it on to the undo stack.
   */
  finishEdit (): void;

  /**
   * @returns The alias to this property at index (if valid), otherwise NULL.
   * @param index - The index of the alias to this property to get.
   */
  getAlias (index: number): DzProperty;

  /**
   * @returns The property that this property is an alias of, or NULL if none (default).
   */
  getAliasTarget (): DzProperty;

  /**
   * Populates the given settings object with the attributes of this property.
   * @param settings - 
   */
  getAttributes (settings: DzPropertySettings): void;

  /**
   * @returns The auto-follow target URI for this property.
   * @seealso setAutoFollowTargetUri()
   * @since 4.9.2.19
   */
  getAutoFollowTargetUri (): DzUri;

  /**
   * @returns The i'th controller on this property.
   * @param idx - The index of the controller on this property to get.
   */
  getController (idx: number): DzController;

  /**
   * @returns A list of the controllers on this property.
   */
  getControllerList (): Array<unknown>;

  /**
   * @returns The property group that this property belongs to (if any), otherwise NULL.
   */
  getGroup (): DzPropertyGroup;

  /**
   * @returns The index of controllers that are slaved to this property (if any), otherwise -1.
   * @param cntrl - 
   */
  getIndexOfSlaveControllers (cntrl: DzController): number;

  /**
   * @returns The total range of keys on this property.
   */
  getKeyRange (): DzTimeRange;

  /**
   * @returns The time of the i'th key within the current key range.
   * @param i - The index of the key time within the current key range.
   */
  getKeyTime (i: number): DzTime;

  /**
   * @returns The user-defined label for this property.
   */
  getLabel (): string;

  /**
   * @returns The number of aliases to this property that exist.
   */
  getNumAliases (): number;

  /**
   * @returns The number of controllers for this property
   */
  getNumControllers (): number;

  /**
   * @returns The total number of keys on this property.
   */
  getNumKeys (): number;

  /**
   * @returns The number of keys that exist within the given range, including endpoints.
   * @param range - The range to get the number of keys in.
   */
  getNumKeys (range: DzTimeRange): number;

  /**
   * @returns The number of currently selected keys on this property.
   */
  getNumSelectedKeys (): number;

  /**
   * @returns The number of controllers that are slaved to this property.
   */
  getNumSlaveControllers (): number;

  /**
   * @returns The current owner of this property.
   */
  getOwner (): DzElement;

  /**
   * @returns The slash ('/') delimited hierarchical path of the group this property is assigned to.
   */
  getPath (): string;

  /**
   * @returns The presentation for this property (if any), otherwise NULL.
   */
  getPresentation (): DzPresentation;

  /**
   * @returns The geometry region for this property (if any), otherwise NULL.
   */
  getRegion (): geometryregion_dz;

  /**
   * @returns A range that encompasses all currently selected keys on this property.
   */
  getSelectedKeyRange (): DzTimeRange;

  /**
   * @returns The i'th controller that is slaved to this property.
   * @param idx - 
   */
  getSlaveController (idx: number): DzController;

  /**
   * @returns A list of the controllers that are slaved to this property.
   */
  getSlaveControllerList (): Array<unknown>;

  /**
   * @returns The classname of the widget to use for displaying this property to the user.
   * @param [styled=true] - If true, the returned classname should be the styled version (i.e., DS 4 vs DS 3). If false, the returned classname should be the base version.
   */
  getWidgetClass (styled?: boolean): string;

  /**
   * @returns The name of the styled widget class, otherwise the name of the standard widget class; this will be an empty string if the corresponding value has not been set.
   * @seealso hasWidgetClassOverride()
   * setWidgetClassOverride()
   * @since 4.6.4.88
   * @param [styled=true] - If true, the return value will be the name of the styled widget class.
   */
  getWidgetClassOverride (styled?: boolean): string;

  /**
   * @returns true if this property has controllers, otherwise false.
   */
  hasControllers (): boolean;

  /**
   * @returns true if this property has key data, otherwise false.
   */
  hasKeys (): boolean;

  /**
   * @returns true if this property has controllers that are slaved to it, otherwise false.
   */
  hasSlaveControllers (): boolean;

  /**
   * @returns true if an override for the widget class has been specified, otherwise false.
   * @seealso setWidgetClassOverride()
   * @since 4.6.4.88
   * @param [styled=true] - If true, the return value will be based on whether or not an override for the styled widget class has been specified.
   */
  hasWidgetClassOverride (styled?: boolean): boolean;

  /**
   * @returns true if this property is an alias to another property, otherwise false (default).
   */
  isAlias (): boolean;

  /**
   * @returns true if this property and prop can be combined in the UI, otherwise false.
   * @param prop - The property in question.
   */
  isCombinable (prop: DzProperty): boolean;

  /**
   * @returns true if this property should [temporarily] auto-follow, otherwise false.
   * @seealso canAutoFollow()
   * setCanAutoFollow()
   * DzSkeleton::getFollowModeControl() and DzSkeleton::fmAutoFollow
   * @since 4.8.0.23
   */
  isDynamicallyAutoFollow (): boolean;

  /**
   * @returns true if this property should [temporarily] not be shown in the interface, otherwise false.
   */
  isDynamicallyHidden (): boolean;

  /**
   * @returns true if the property is being edited, otherwise false.
   */
  isEditing (): boolean;

  /**
   * @returns true if the property is a favorite, otherwise false.
   */
  isFavorite (): boolean;

  /**
   * @returns true if the property is a global favorite, otherwise false.
   */
  isGlobalFavorite (): boolean;

  /**
   * @returns true if this property should not be shown in the interface, otherwise false.
   */
  isHidden (): boolean;

  /**
   * @returns true if the key at the given index is selected, otherwise false.
   * @param i - The index of the key in question.
   */
  isKeySelected (i: number): boolean;

  /**
   * @returns true if this property is locked, otherwise false.
   */
  isLocked (): boolean;

  /**
   * @returns true if the property will cause manipulation updates of the object in the viewport (default), otherwise false.
   */
  isManipulator (): boolean;

  /**
   * @returns true if the property is new, otherwise false.
   */
  isNew (): boolean;

  /**
   * @returns true if this property can be retrieved/set as a scalar numeric value, otherwise false.
   */
  isNumeric (): boolean;

  /**
   * @returns true if the property is currently overriding its controllers, otherwise false.
   */
  isOverridingControllers (): boolean;

  /**
   * @returns true if this property is private, otherwise false.
   */
  isPrivateProperty (): boolean;

  /**
   * @returns true if this property is for rigging, otherwise false.
   */
  isRigProperty (): boolean;

  /**
   * @returns true if the property is selected, otherwise false.
   */
  isSelected (): boolean;

  /**
   * @returns true if this property can be deleted by the user, otherwise false.
   */
  isUserProperty (): boolean;

  /**
   * Locks/Unlocks this property. When locked, a property will not accept new key values or changes to current key values.
   * @param onOff - If true, the property will be locked. If false, the property will be unlocked.
   */
  lock (onOff: boolean): void;

  /**
   * Marks the asset as being modified.
   * @returns true if the asset was successfully marked as being modified, otherwise false.
   * @param newUri - The URI for the asset.
   */
  modifyAsset (newUri: DzUri): boolean;

  /**
   * Marks the asset as being modified.
   * @returns true if the asset was successfully marked as being modified, otherwise false.
   */
  modifyAsset (): boolean;

  /**
   * Moves the controller at curIdx to newIdx
   * @returns true if the move was successful, otherwise false.
   * @param curIdx - The index of the controller to move. If < 0 or >= DzProperty::getNumControllers() this method will return false.
   * @param newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty::getNumControllers(), the controller will be moved to the end of the list.
   */
  moveControllerToIndex (curIdx: number, newIdx: number): boolean;

  /**
   * Moves the controller ctrl to location newIdx
   * @returns true if the move was successful, otherwise false.
   * @param ctrl - The controller to remove.
   * @param newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty::getNumControllers(), the controller will be moved to the end of the list.
   */
  moveControllerToIndex (ctrl: DzController, newIdx: number): boolean;

  /**
   * Creates a copy of this property. The property will not have controllers, an owner, be in a region, or be linked.
   * @returns A duplicate of this property (if successful), otherwise null.
   */
  propertyDuplicate (): DzProperty;

  /**
   * @returns true if the raw value of the property is the same as the value in the file definition, otherwise false.
   * @seealso currentValueIsDefinitionValue()
   * @since 4.9.2.1
   */
  rawValueIsDefinitionValue (): boolean;

  /**
   * Removes all controllers from this property.
   */
  removeAllControllers (): void;

  /**
   * Removes the given controller from this property.
   * @param ctrl - The controller to remove.
   */
  removeController (ctrl: DzController): void;

  /**
   * Removes the controller at the given index from this property.
   * @param idx - The index of the controller to remove.
   */
  removeController (idx: number): void;

  /**
   * Removes the controller that references the given property.
   * @param prop - The property to remove the controller for.
   */
  removeController (prop: DzProperty): void;

  /**
   * Select or deselect all keys.
   * @returns The number of keys whose state was changed.
   * @param [onOff=true] - If true, the keys will be selected. If false, the keys will be deselected.
   */
  selectAllKeys (onOff?: boolean): number;

  /**
   * Selects/deselects the i'th key.
   * @param i - The index of the key to select/deselect.
   * @param [onOff=true] - If true, the key will be selected. If false, the key will be deselected.
   */
  selectKey (i: number, onOff?: boolean): void;

  /**
   * Sets the selection state of any keys in the given range.
   * @returns The number of keys whose selection state changed.
   * @param range - The range of keys to select/deselect.
   * @param onOff - If true, the keys will be selected. If false, the keys will be deselected.
   */
  selectKeys (range: DzTimeRange, onOff: boolean): number;

  /**
   * Sets attributes for this property. “UserProperty” and “RigProperty” attributes are not copied from the settings unless a bool setting of “ForceSetUser” and/or “ForceSetRig” is set on the property settings object respectively.
   * @param settings - The settings to use to set attributes.
   */
  setAttributes (settings: DzPropertySettings): void;

  /**
   * Sets a path to locate the property on the follow target to follow.
   * @seealso canAutoFollow()
   * setCanAutoFollow()
   * @since 4.9.2.19
   * @param path - The URI for the property to automatically follow. The node path is assumed to be relative to the target skeleton.
   */
  setAutoFollowTargetUri (path: DzUri): void;

  /**
   * Sets whether this property is animatable.
   * @attention This method should only called to set initial values on a property that has been created using the default constructor.
   * @param yesNo - If true, the property is set to be animatable.
   */
  setCanAnimate (yesNo: boolean): void;

  /**
   * Sets whether or not the property can automatically follow properties on a following figure.
   * @attention When associated with a figure that is a follow target, this value determines whether or not this property will be projected onto the follower (if this property is the control for an auto-follow modifier, e.g., DzMorph). When associated with a figure that is a follower, this value determines whether or not the name of this property (or the name of a modifier that owns this property) will be used to find a match in the follow target and if found add the found property's value (minus its default value) to this property's value (as possible depending on any constrains/controllers).
   * @param onOff - If true, the property will be considered during auto-follow.
   */
  setCanAutoFollow (onOff: boolean): void;

  /**
   * Sets whether or not this property should [temporarily] auto-follow.
   * @attention The dynamically auto-follow state is not saved.
   * @since 4.8.0.23
   * @param yesNo - If true, the property dynamically auto-follows.
   */
  setDynamicallyAutoFollow (yesNo: boolean): void;

  /**
   * Sets whether or not this property should be [temporarily] hidden in the interfacee.
   * @attention The dynamically hidden state is not saved.
   * @since 4.8.0.23
   * @param yesNo - If true, the property is dynamically hidden.
   */
  setDynamicallyHidden (yesNo: boolean): void;

  /**
   * Sets whether or not this property is hidden in the interface.
   * @param yesNo - If true, the property is hidden.
   */
  setHidden (yesNo: boolean): void;

  /**
   * Sets whether or not the property is a favorite.
   * @param onOff - If true, the property will be set as a favorite.
   */
  setIsFavorite (onOff: boolean): void;

  /**
   * Sets whether or not the property is a global favorite.
   * @param onOff - If true, the property will be set as a global favorite.
   */
  setIsGlobalFavorite (onOff: boolean): void;

  /**
   * Sets whether or not the property is one that will cause manipulation updates of the object in the viewport.
   * @param onOff - If true, the property will be set as a manipulator.
   */
  setIsManipulator (onOff: boolean): void;

  /**
   * Sets whether this property is a rigging property.
   * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
   * @param yesNo - If true, the property is set to be a rigging-property.
   */
  setIsRigProperty (yesNo: boolean): void;

  /**
   * Sets whether this property is a user property (i.e., can be deleted by the user).
   * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
   * @param yesNo - If true, the property is set to be a user-property.
   */
  setIsUserProperty (yesNo: boolean): void;

  /**
   * Sets the label that the user sees in the interface for this property.
   * @param label - The label to set; should be unique among all the other properties of this property's owner.
   */
  setLabel (label: string): void;

  /**
   * Sets whether or not the property is marked new.
   * @param onOff - If true, this property will be marked new.
   */
  setNew (onOff: boolean): void;

  /**
   * Sets whether or not this property will override its controllers.
   * @param onOff - If true, this property will override its controllers.
   */
  setOverrideControllers (onOff: boolean): void;

  /**
   * Sets the group that this property belongs to.
   * @param path - The slash ('/') delimited hierarchical path of the group to assign this property to.
   */
  setPath (path: string): void;

  /**
   * @param pres - The presentation to set on this property.
   */
  setPresentation (pres: DzPresentation): void;

  /**
   * @param reg - The geoemtry region to set.
   */
  setRegion (reg: geometryregion_dz): void;

  /**
   * Sets whether or not the property is selected.
   * @param onOff - If true, the property will be set as selected.
   */
  setSelected (onOff: boolean): void;

  /**
   * Sets the value using settings.
   * @since 4.7.1.72
   * @param settings - The settings with the data to set.
   * @param [flags=Standard] - The flags for controlling the operation.
   */
  setValueFromSettings (settings: DzSettings, flags?: number): void;

  /**
   * Sets the value using settings.
   * @since 4.7.1.72
   * @param tm - The scene time to set the value at.
   * @param settings - The settings with the data to set.
   * @param [flags=Standard] - The flags for controlling the operation.
   */
  setValueFromSettings (tm: DzTime, settings: DzSettings, flags?: number): void;

  /**
   * Sets the name of the widget class to override the default widget class for this property.
   * @returns DZ_NO_ERROR if no error occurs, otherwise an appropriate error code.
   * @seealso getWidgetClassOverride()
   * hasWidgetClassOverride()
   * @since 4.6.4.88
   * @param styledWgtClassName - The name of the styled widget class.
   * @param wgtClassName - The name of the standard widget class.
   */
  setWidgetClassOverride (styledWgtClassName: string, wgtClassName: string): DzError;

  aliasListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetModified: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  autoFollowTargetUriChanged: Signal<{
    /**
     * TODO: Add description.
     * @param path - 
     */
  (path: DzUri): void;
  }>;
  canAnimateChanged: Signal<{
    /**
     * Emitted when animation for this property is enabled or disabled.
     * @param enabled - If true, animation was enabled for the property, otherwise animation was disabled.
     */
  (enabled: boolean): void;
  }>;
  canAutoFollowChanged: Signal<{
    /**
     * TODO: Add description.
     * @param canAutoFollow - 
     */
  (canAutoFollow: boolean): void;
  }>;
  controllerListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  currentValueChanged: Signal<{
    /**
     * Emitted when the value of this property at the current time has changed. If the current time changes and this property has animation data, this signal is emitted as appropriate. Subclasses of DzProperty should call emitCurrentValueChanged() when the value has changed.
     */
  (): void;
  }>;
  dynamicallyAutoFollowChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  dynamicallyHiddenChanged: Signal<{
    /**
     * TODO: Add description.
     * @param hidden - 
     */
  (hidden: boolean): void;
  }>;
  editFinished: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  groupChanged: Signal<{
    /**
     * Emitted when the group this property is in changed.
     * @param group - The group this property was added to.
     */
  (group: DzPropertyGroup): void;
  }>;
  hiddenChanged: Signal<{
    /**
     * Emitted when the hidden state of this property is changed.
     * @param hidden - true if the property is currently hidden in the interface, otherwise false.
     */
  (hidden: boolean): void;
  }>;
  isFavoriteChanged: Signal<{
    /**
     * Emitted when this property is set or unset as a favorite.
     * @param onOff - If true, the property is now a favorite, otherwise the property is no longer a favorite.
     */
  (onOff: boolean): void;
  }>;
  isGlobalFavoriteChanged: Signal<{
    /**
     * Emitted when this property is set or unset as a global favorite.
     * @param onOff - If true, the property is now a global favorite, otherwise the property is no longer a global favorite.
     */
  (onOff: boolean): void;
  }>;
  isManipulatorChanged: Signal<{
    /**
     * Emitted when this property is set or unset as a manipulator.
     * @param isManip - If true, the property is now a manipulator, otherwise the property is no longer a manipulator.
     */
  (isManip: boolean): void;
  }>;
  isUserPropertyChanged: Signal<{
    /**
     * Emitted when this property is set or unset as a user property.
     * @param isUserProp - If true, the property is now a user property, otherwise the property is no longer a user property.
     */
  (isUserProp: boolean): void;
  }>;
  keySelectionChanged: Signal<{
    /**
     * Emitted when the selection state of this property's keys has changed.
     * @param range - The range in which selection changed.
     */
  (range: DzTimeRange): void;
  }>;
  labelChanged: Signal<{
    /**
     * Emitted when the label of this property is changed.
     * @param newLabel - The new label of this property.
     */
  (newLabel: string): void;
  }>;
  lockStateChanged: Signal<{
    /**
     * Emitted when the lock state of this property has changed.
     */
  (): void;
  }>;
  newStateChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  overridingControllersChanged: Signal<{
    /**
     * Emitted when the state for whether this property overrides its controllers changed.
     * @param overriding - true if the property is currently overriding controllers, otherwise false.
     */
  (overriding: boolean): void;
  }>;
  presentationIconChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  propertyDeleted: Signal<{
    /**
     * Emitted when this property is destroyed.
     * @param prop - The deleted property; this property.
     */
  (prop: DzProperty): void;
  }>;
  regionChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  removed: Signal<{
    /**
     * Emitted when this property is removed.
     */
  (): void;
  }>;
  selectionStateChanged: Signal<{
    /**
     * Emitted when this property is selected or deselected.
     */
  (): void;
  }>;
  slaveControllerListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  valueChanged: Signal<{
    /**
     * Emitted when the value of this property is changed.
     * @param range - The range over which the property has changed.
     */
  (range: DzTimeRange): void;
  }>;
}

declare namespace DzProperty
{

  /**
   * TODO: Add description.
   */
  /**
   * Best for saving/loading; includes raw value; sets without adjusting.
   */
  export const Standard: number;
  /**
   * Include the default value.
   */
  export const IncludeDefault: number;
  /**
   * Includes the value instead of the raw value.
   */
  export const CurrentValue: number;
  /**
   * Best for setting.
   */
  export const AdjustValue: number;
  /**
   * Excludes images.
   */
  export const SkipImages: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygroup_dz
 * Represents a grouping of properties.
 * @remarks DzPropertyGroup objects are all owned and managed by DzElement objects. Do not create property groups yourself - they are automatically created as needed when you assign individual properties to a group. To iterate through the property groups for an element, use DzElement::getPropertyGroups() to get the property group tree that the element's properties are grouped in.
 * // Create a new property
 * oProperty = new DzFloatProperty( "MyDeformer Control", true, false );
 *  
 * // Set the path of the property - this moves the property to the group corresponding
 * // to the given path, creating groups if necessary.
 * oProperty.setPath( "/Defomers/MyDeformerGroup" );
 * @seealso DzPropertyGroupTree
 */
interface DzPropertyGroup extends DzBase
{

  /**
   * @returns The name of the default group.
   * @since 4.7.1.66
   */
  getDefaultGroupName (): string;

  /**
   * @returns The child with the given name (if any), otherwise NULL.
   * @param name - The name of the property group to look for.
   */
  findChild (name: string): DzPropertyGroup;

  /**
   * @returns The property in this group with the given name (if any), otherwise null.
   * @since 4.7.1.34
   * @param propName - The name of the property to find.
   * @param [traverse=false] - If true, the siblings of this group will be checked.
   * @param [recurse=false] - If true, the children of this group will be checked.
   */
  findProperty (propName: string, traverse?: boolean, recurse?: boolean): DzProperty;

  /**
   * @returns The property in this group with the given label (if any), otherwise null.
   * @since 4.9.3.11
   * @param propLabel - The label of the property to find.
   * @param [traverse=false] - If true, the siblings of this group will be checked.
   * @param [recurse=false] - If true, the children of this group will be checked.
   */
  findPropertyByLabel (propLabel: string, traverse?: boolean, recurse?: boolean): DzProperty;

  /**
   * @returns The sibling with the given name (if any), otherwise NULL.
   * @param name - The name of the sibling to look for.
   */
  findSibling (name: string): DzPropertyGroup;

  /**
   * Provided for convenience and DAZ Script access.
   * @returns A list of all property group paths begining with this group.
   */
  getAllPaths (): Array<unknown>;

  /**
   * @returns A list of all properties in this group.
   * @since 4.9.4.101
   */
  getAllProperties (): Array<unknown>;

  /**
   * @returns true if the group is collapsed, otherwise false.
   */
  getCollapsed (): boolean;

  /**
   * @returns The first child group, if any.
   */
  getFirstChild (): DzPropertyGroup;

  /**
   * @returns The next sibling to this group (if any), otherwise NULL.
   */
  getNextSibling (): DzPropertyGroup;

  /**
   * @returns The number of properties in this group.
   */
  getNumProperties (): number;

  /**
   * @returns The current parent of this group.
   */
  getParent (): DzPropertyGroup;

  /**
   * @returns The path of this group.
   */
  getPath (): string;

  /**
   * @returns The previous sibling (if any), otherwise NULL.
   * @since 4.7.1.66
   */
  getPreviousSibling (): DzPropertyGroup;

  /**
   * @returns The i'th property in this group.
   * @param i - The index of the property to return.
   */
  getProperty (i: number): DzProperty;

  /**
   * @returns The region associated with this property group (if any), otherwise NULL.
   */
  getRegion (): geometryregion_dz;

  /**
   * @returns The property group tree that this group belongs to.
   */
  getTree (): DzPropertyGroupTree;

  /**
   * @returns The index of prop in the group, or -1 if prop is not in the group
   * @param prop - 
   */
  indexOfProperty (prop: DzProperty): number;

  /**
   * @returns true if this group is associated with a geometryregion_dz, otherwise false.
   */
  isRegion (): boolean;

  /**
   * Moves prop to a new location within the group.
   * @returns true if the move was successful, otherwise false.
   * @param prop - The property to move. This property must be in this group to be successful.
   * @param newIndex - The location to move prop to. If newIndex is not a valid index, prop is moved to the end of the list.
   */
  movePropertyToIndex (prop: DzProperty, newIndex: number): boolean;

  /**
   * Sets whether or not the group is displayed as collapsed in the interface.
   * @param onOff - If true, the group is collapsed. If false, the group is expanded.
   */
  setCollapsed (onOff: boolean): void;

  /**
   * Sets the label of prop to a unique version of itself.
   * @param prop - 
   */
  setUniquePropertyLabel (prop: DzProperty): void;

  /**
   * Alpha-numerically sorts the property groups, and the properties in them.
   */
  sort (): void;

  addedChild: Signal<{
    /**
     * Emitted when a child has been added to the group.
     * @param newChild - The newly added group.
     */
  (newChild: DzPropertyGroup): void;
  }>;
  childListChanged: Signal<{
    /**
     * Emitted when the child list of the group has changed.
     */
  (): void;
  }>;
  parentChanged: Signal<{
    /**
     * Emitted when the parent of the group has changed.
     * @param newParent - The new parent of the group.
     */
  (newParent: DzPropertyGroup): void;
  }>;
  propertyVisiblityChanged: Signal<{
    /**
     * Emitted when the visibility of a property in the group has changed.
     * @param grp - The group containing the property.
     * @param prop - The property that changed.
     */
  (grp: DzPropertyGroup, prop: DzProperty): void;
  }>;
  removedChild: Signal<{
    /**
     * Emitted when a child has been removed from the group.
     * @param child - The group that has been removed.
     */
  (child: DzPropertyGroup): void;
  }>;
  treeChanged: Signal<{
    /**
     * Emitted when the tree has changed.
     */
  (): void;
  }>;
}

declare namespace DzPropertyGroup
{

  /**
   * @returns The name of the default group.
   * @since 4.7.1.66
   */
  export function getDefaultGroupName (): string;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygrouptree_dz
 * Represents the root of a property group tree.
 * @seealso DzElement
 */
interface DzPropertyGroupTree extends DzBase
{

  /**
   * @returns The child with the given path (if any), otherwise NULL.
   * @param name - The name of the property group to look for.
   */
  findChild (name: string): DzPropertyGroup;

  /**
   * Attempts to find a property with a given name.
   * @returns The found property (if any), otherwise NULL.
   * @since 4.7.1.43
   * @param name - The name of the property to find.
   */
  findProperty (name: string): DzProperty;

  /**
   * @returns A list of all property group paths in this tree.
   */
  getAllPaths (): Array<unknown>;

  /**
   * @returns A list of all properties in this tree.
   * @since 4.9.4.101
   */
  getAllProperties (): Array<DzProperty>;

  /**
   * @returns The default property group for the tree; i.e., “General”
   */
  getDefaultGroup (): DzPropertyGroup;

  /**
   * @returns The first child group (if any), otherwise NULL.
   */
  getFirstChild (): DzPropertyGroup;

  /**
   * @returns The element that this property group tree belongs to.
   */
  getOwner (): DzElement;

  /**
   * @returns true if this property group tree is private, otherwise false.
   */
  isPrivate (): boolean;

  /**
   * Sets whether or not this property group tree is private.
   * @param onoff - 
   */
  setIsPrivate (onoff: boolean): void;

  /**
   * Alpha-numerically sorts the property groups, keeping “General” at the top.
   */
  sortGroups (): void;

  childListChanged: Signal<{
    /**
     * Emitted when the child list of the group has changed.
     * TODO: Add description.
     */
  (): void;
  }>;
  propertyVisiblityChanged: Signal<{
    /**
     * Emitted when the visibility of a property in the tree has changed.
     * @param grp - The group containing the property.
     * @param prop - The property that changed.
     */
  (grp: DzPropertyGroup, prop: DzProperty): void;
  }>;
  treeChanged: Signal<{
    /**
     * Emitted when the tree has changed.
     * TODO: Add description.
     */
  (): void;
  }>;
  treeSorted: Signal<{
    /**
     * Emitted when the tree is sorted.
     * TODO: Add description.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertyselectioncombobox_dz
 * DAZScript combobox widget with a custom popup designed for choosing a DzProperty.
 * @remarks Provides a DzComboBox like widget with a custom popup designed for choosing a DzProperty.
 */
interface DzPropertySelectionComboBox extends DzWidget
{

  /**
   * Clears the selection of any properties.
   * @since 4.10.0.27
   */
  clearPropertySelection (): void;

  /**
   * Gets the properties to be excluded in the popup.
   */
  getExcludeList (): Array<unknown>;

  /**
   * Gets the nodes to be shown in the popup.
   */
  getNodes (): Array<unknown>;

  /**
   * @returns The selected property.
   */
  getSelectedProperty (): DzProperty;

  /**
   * Hide the popup.
   */
  hidePopup (): void;

  /**
   * Sets whether or not the popup should display rigging properties, regardless of their existence in the exclude list.
   * @param onOff - 
   */
  setEditMode (onOff: boolean): void;

  /**
   * Sets the properties to be excluded in the popup.
   * @param properties - 
   */
  setExcludeList (properties: Array<unknown>): void;

  /**
   * Sets whether or not the popup should filter non-morph properties from the list.
   * @param onOff - 
   */
  setMorphOnly (onOff: boolean): void;

  /**
   * Sets the node from the scene to be shown in the popup.
   * @seealso setNodes()
   * @param node - The DzNode to show properties for.
   */
  setNode (node: DzNode): void;

  /**
   * Sets the nodes from the scene to be shown in the popup.
   * @seealso setNode()
   * @param nodes - A list of the DzNode objects to show properties for.
   */
  setNodes (nodes: Array<unknown>): void;

  /**
   * Sets whether or not the popup should filter non-numeric properties from the list.
   * @param onOff - 
   */
  setNumericOnly (onOff: boolean): void;

  /**
   * Sets the height of the popup to height.
   * @param height - 
   */
  setPopUpHeight (height: number): void;

  /**
   * Sets the minimum width of the popup to width.
   * @param width - 
   */
  setPopUpMinWidth (width: number): void;

  /**
   * Sets whether or not the popup should filter non-private properties from the list.
   * @since 4.10.0.23
   * @param onOff - 
   */
  setPrivateOnly (onOff: boolean): void;

  /**
   * Sets whether or not the popup should filter non-public properties from the list.
   * @since 4.10.0.23
   * @param onOff - 
   */
  setPublicOnly (onOff: boolean): void;

  /**
   * Sets the property to be selected.
   * @param prop - property to select.
   */
  setSelectedProperty (prop: DzProperty): void;

  /**
   * Sets whether or not the popup should display hidden properties.
   * @param onOff - 
   */
  setShowHidden (onOff: boolean): void;

  /**
   * Sets whether or not the popup should filter non-transform properties from the list.
   * @since 4.10.0.23
   * @param onOff - 
   */
  setTransformOnly (onOff: boolean): void;

  /**
   * Display the popup.
   */
  showPopup (): void;

  propertySelectionChanged: Signal<{
    /**
     * Emitted when the selected DzProperty changes.
     */
  (): void;
  }>;
}

declare var DzPropertySelectionComboBox:
{
  prototype: DzPropertySelectionComboBox;

  /**
   * Creates a property selection combobox as a child of the given parent widget.
   * @param parent - The widget parent for the combobox.
   */
  new (parent: DzWidget): DzPropertySelectionComboBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertysettings_dz
 * Base class for all property options. Property classes should use this to pass the options supported by the class.
 * @remarks TODO: Add detailed description.
 */
interface DzPropertySettings extends DzSettings
{

}

declare var DzPropertySettings:
{
  prototype: DzPropertySettings;

  /**
   * Default Constructor - creates an empty set of options
   */
  new (): DzPropertySettings;

  /**
   * Copy constructor.
   * @param settings - The settings object to copy data from.
   */
  new (settings: DzSettings): DzPropertySettings;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/puppeteerassetfilter_dz
 * Class for saving DSON-based Puppeteer Presets.
 * @remarks An asset save filter for saving a Puppeteer Preset in the DSON format.
 * @seealso Sample: Save a Puppeteer Preset
 */
interface DzPuppeteerAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzPuppeteerAssetFilter:
{
  prototype: DzPuppeteerAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzPuppeteerAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pushbutton_dz
 * DAZScript wrapper for QPushButton.
 * @remarks TODO: Add detailed description.
 */
interface DzPushButton extends DzButton
{

  /**
   * The styles that the button can be drawn in.
   * @since 4.6.4.76
   */
  /**
   * Deprecated
   */
  readonly Off: number;

  /**
   * Deprecated
   */
  readonly NoChange: number;

  /**
   * Deprecated
   */
  readonly On: number;

  /**
   * Deprecated
   */
  readonly SingleShot: number;

  /**
   * Deprecated
   */
  readonly Toggle: number;

  /**
   * Deprecated
   */
  readonly Tristate: number;

  /**
   * TODO: Add description.
   */
  readonly BCommand: number;

  /**
   * The button is drawn as a typical Push Button.
   */
  readonly BTool: number;

  /**
   * The button is drawn as a typical Tool Button.
   */
  readonly BDefault: number;

  /**
   * The button is drawn as a Default Push Button.
   */
  readonly BBasic: number;

  /**
   * The button is drawn with the style's Button Bevel.
   */
  readonly BNoFrame: number;

  /**
   * The button is drawn without a frame. The button is drawn with a custom style.
   */
  readonly BCustom: number;

  /**
   * Holds whether or not the button has the auto-default feature and responds to the [Enter] key when it has the focus; true by default for buttons that have a DzDialog parent, otherwise false.
   */
  autoDefault: boolean

  /**
   * Holds whether or not the border is disabled; false by default.
   */
  buttonStyle: number

  /**
   * Holds the style that the button is drawn in.
   * @since 4.6.4.76
   */
  buttonTextFormat: number

  /**
   * TODO: Add description.
   */
  default: boolean

  /**
   * Holds the elide mode to be used for the text on this button.
   * @since 4.6.4.76
   */
  displayDownArrow: boolean

  /**
   * Holds the name of the pixel metric used to define the size of the icon on this button (if any).
   * @since 4.6.4.76
   */
  downArrowMetric: string

  /**
   * Holds the name of the primitive element used to draw this button.
   * @since 4.6.4.76
   * DzWidget::TextElideMode : elideMode
   * Holds the name of the text style used to draw the label on this button.
   * @since 4.6.4.76
   */
  downArrowPrimitive: string

  /**
   * Holds whether or not the button is the default button; false by default.
   */
  flat: boolean

  /**
   * Holds whether or not to display the arrow for this button.
   * @since 4.6.4.76
   */
  iconMetric: string

  /**
   * Holds the format that the button text is drawn in; DzWidget::AlignmentFlags and DzWidget::TextFlags OR'd together for the button label.
   * @since 4.6.4.76
   */
  primitive: string

  /**
   * Holds the name of the pixel metric used to define the size of the arrow on this button (if any).
   * @since 4.6.4.76
   */
  sizedFromIcon: boolean

  /**
   * Holds the name of the primitive element used to draw the arrow on this button (if any).
   * @since 4.6.4.76
   */
  textStyle: string

  /**
   * Sets whether or not the button is a toggle button.
   * @param yesNo - 
   */
  setCheckable (yesNo: boolean): void;

  /**
   * Deprecated
   * Use setCheckable() instead.
   * @param yesNo - 
   */
  setToggleButton (yesNo: boolean): void;

  buttonStyleChanged: Signal<{
    /**
     * Emitted when buttonStyle on this button has changed.
     * @since 4.6.4.76
     * @param style - The new button style.
     */
  (style: number): void;
  }>;
  buttonTextFormatChanged: Signal<{
    /**
     * Emitted when buttonTextFormat on this button has changed.
     * @since 4.6.4.76
     * @param format - The new text format.
     */
  (format: number): void;
  }>;
  displayDownArrowChanged: Signal<{
    /**
     * Emitted when displayDownArrow on this button has changed.
     * @since 4.6.4.76
     * @param displayArrow - The new state.
     */
  (displayArrow: boolean): void;
  }>;
  downArrowMetricChanged: Signal<{
    /**
     * Emitted when downArrowMetric on this button has changed.
     * @since 4.6.4.76
     * @param name - The name of the new down arrow metric.
     */
  (name: string): void;
  }>;
  downArrowPrimitiveChanged: Signal<{
    /**
     * Emitted when downArrowPrimitive on this button has changed.
     * @since 4.6.4.76
     * @param name - The name of the new primitive.
     */
  (name: string): void;
  }>;
  elideModeChanged: Signal<{
    /**
     * Emitted when elideMode on this button has changed.
     * @since 4.6.4.76
     * @param mode - The new elide mode.
     */
  (mode: number): void;
  }>;
  iconMetricChanged: Signal<{
    /**
     * Emitted when iconMetric on this button has changed.
     * @since 4.6.4.76
     * @param name - The name of the new icon metric.
     */
  (name: string): void;
  }>;
  primitiveChanged: Signal<{
    /**
     * Emitted when primitive on this button has changed.
     * @since 4.6.4.76
     * @param name - The name of the new primitive.
     */
  (name: string): void;
  }>;
  sizedFromIconChanged: Signal<{
    /**
     * Emitted when sizedFromIcon on this button has changed.
     * @since 4.11.0.38
     * @param onOff - The new state.
     */
  (onOff: boolean): void;
  }>;
  textStyleChanged: Signal<{
    /**
     * Emitted when textStyle on this button has changed.
     * @since 4.6.4.76
     * @param name - The name of the new text style.
     */
  (name: string): void;
  }>;
}

declare var DzPushButton:
{
  prototype: DzPushButton;

  /**
   * Holds whether or not the button will be sized based on the size of its icon (if any). If true, this overrides iconMetric.
   * @since 4.11.0.38
   * Creates a push button as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzPushButton;

  /**
   * The styles that the button can be drawn in.
   * @since 4.6.4.76
   */
  /**
   * Deprecated
   */
  readonly Off: number;
  /**
   * Deprecated
   */
  readonly NoChange: number;
  /**
   * Deprecated
   */
  readonly On: number;
  /**
   * Deprecated
   */
  readonly SingleShot: number;
  /**
   * Deprecated
   */
  readonly Toggle: number;
  /**
   * Deprecated
   */
  readonly Tristate: number;
  /**
   * TODO: Add description.
   */
  readonly BCommand: number;
  /**
   * The button is drawn as a typical Push Button.
   */
  readonly BTool: number;
  /**
   * The button is drawn as a typical Tool Button.
   */
  readonly BDefault: number;
  /**
   * The button is drawn as a Default Push Button.
   */
  readonly BBasic: number;
  /**
   * The button is drawn with the style's Button Bevel.
   */
  readonly BNoFrame: number;
  /**
   * The button is drawn without a frame. The button is drawn with a custom style.
   */
  readonly BCustom: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pz3importer_dz
 * Class for importing Poser Files.
 * @remarks Class for importing files in Poser formats; .pz3, *.pz2, *.cr2, *.lt2, *.cm2, *.pp2, *.fc2, *.hd2, *.hr2, *.mc6, .pzz, *.p2z, *.crz, *.ltz, *.cmz, *.ppz, *.fcz, *.hdz, *.hrz, *.mcz
 * @seealso DzImportMgr::findImporterByClassName()
 * DzImportMgr::findImporter()
 */
interface DzPZ3Importer extends DzImporter
{

}

declare var DzPZ3Importer:
{
  prototype: DzPZ3Importer;

  /**
   * Default Constructor.
   */
  new (): DzPZ3Importer;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/quat_dz
 * A quaternion rotation class.
 * @remarks TODO: Add detailed description.
 */
interface DzQuat extends Object
{

  /**
   * Holds the w value of this quaternion.
   */
  w: number

  /**
   * Holds the x value of this quaternion.
   */
  x: number

  /**
   * Holds the y value of this quaternion.
   */
  y: number

  /**
   * Holds the z value of this quaternion.
   */
  z: number

  /**
   * @returns true if this quaternion is considered equal to quat, otherwise false.
   * @since 4.9.3.121
   * @param quat - The quaternion to be compared.
   * @param [tolerance=1e-05] - The maximum allowable deviation.
   */
  equals (quat: DzQuat, tolerance?: number): boolean;

  /**
   * @returns * The angle of rotation for this quaternion (in radians).
   * @since 4.10.0.110
   */
  getAngleOfRotation (): number;

  /**
   * @returns The axis of rotation for this quaternion.
   * @since 4.10.0.110
   */
  getAxisOfRotation (): DzVec3;

  /**
   * @returns The Euler angles representing this rotation given the rotation order (axis0, axis1, axis2).
   * @param axis1 - 
   * @param axis2 - 
   * @param axis3 - 
   */
  getValue (axis1: number, axis2: number, axis3: number): DzVec3;

  /**
   * @returns The X axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
   */
  getXAxis (): DzVec3;

  /**
   * @returns The Y axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
   */
  getYAxis (): DzVec3;

  /**
   * @returns The Z axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
   */
  getZAxis (): DzVec3;

  /**
   * @returns The inverse of the rotation.
   */
  inverse (): DzQuat;

  /**
   * Changes a rotation to be its inverse.
   */
  invert (): void;

  /**
   * @returns true if the quaternion is an identity rotation.
   */
  isIdentity (): boolean;

  /**
   * Makes sure that this rotation lies on the same side of the hypersphere as the one given. If not, it is altered to do so.
   * @param quat - 
   */
  makeClosest (quat: DzQuat): void;

  /**
   * Sets the quaternion to the identity quaternion. Zero this rotation.
   */
  makeIdentity (): void;

  /**
   * @returns The result of post-multiplying this quaternion by the given quaternion.
   * @param quat - 
   */
  multiply (quat: DzQuat): DzQuat;

  /**
   * Multiplies the given vector by the matrix of this rotation. Vector is forced to unit length.
   * @returns The result of multiplying the given vector through the rotation, as a unit vector.
   * @param vec - 
   */
  multVec (vec: DzVec3): DzVec3;

  /**
   * Normalizes a rotation quaternion to unit 4D length
   */
  normalize (): void;

  /**
   * Keep the axis the same. Multiply the angle of rotation by the amount 'scaleFactor'
   * @param val - 
   */
  scaleAngle (val: number): void;

  /**
   * Sets the value to a rotation of radians around one of the primary axes (axis == 0:x, 1:y, 2:z)
   * @param axis - 
   * @param radians - 
   */
  setValue (axis: number, radians: number): void;

  /**
   * Sets the quaternion to an Euler rotation of angles around each axis given the rotation order (axis1, axis2, axis3) where axis == 1:x, 2:y, 3:z.
   * @param axis1 - 
   * @param axis2 - 
   * @param axis3 - 
   * @param angles - 
   */
  setValue (axis1: number, axis2: number, axis3: number, angles: DzVec3): void;

  /**
   * Sets the value based on the angle and axis of rotation.
   * @param axis - 
   * @param radians - 
   */
  setValue (axis: DzVec3, radians: number): void;

  /**
   * Sets the values of this quaternion.
   * @param x - The x component.
   * @param y - The y component.
   * @param z - The z component.
   * @param w - The w component.
   * @param [normalize=true] - If true, normalizes the set values.(since 4.9.3.121)
   */
  setValue (x: number, y: number, z: number, w: number, normalize?: boolean): void;

  /**
   * Preforms spherical linear interpolation between two quaternions.
   * @returns As t goes from 0 to 1, the value goes from rot0 to rot1.
   * @since 4.9.3.121
   * @param rot0 - The from rotation.
   * @param rot1 - The to rotation.
   * @param t - The value to interpolate.
   */
  slerp (rot0: DzQuat, rot1: DzQuat, t: number): DzQuat;

}

declare var DzQuat:
{
  prototype: DzQuat;

  /**
   * Default Constructor. Creates an identity quaternion.
   */
  new (): DzQuat;

  /**
   * Copy Constructor.
   * @param quat - 
   */
  new (quat: DzQuat): DzQuat;

  /**
   * Initialize with a rotation matrix.
   * @param mtx - 
   */
  new (mtx: DzMatrix3): DzQuat;

  /**
   * Initialize with a rotation matrix.
   * @param mtx - 
   */
  new (mtx: DzMatrix4): DzQuat;

  /**
   * Initialize with an Euler angle rotation.
   * @param order - 
   * @param angles - 
   */
  new (order: DzRotationOrder, angles: DzVec3): DzQuat;

  /**
   * Initialize with a rotation around an axis of the given angle (in radians).
   * @param axis - 
   * @param radians - 
   */
  new (axis: DzVec3, radians: number): DzQuat;

  /**
   * Initialize with 4-component quaternion.
   * @param x - 
   * @param y - 
   * @param z - 
   * @param w - 
   * @param [normalize=true] - 
   */
  new (x: number, y: number, z: number, w: number, normalize?: boolean): DzQuat;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/radiobutton_dz
 * DAZScript wrapper for QRadioButton.
 * @remarks DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. “many of many”). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. “one of many”).
 * The easiest way to implement a “one of many” type choice is to create radio buttons as children of a DzButtonGroup.
 * @example
 * // Create a new dialog
 * var wDlg = new DzDialog;
 * wDlg.caption = "DzRadioButton Example";
 *  
 * // Create a layout for the dialog
 * var wLyt = new DzVBoxLayout( wDlg );
 * wLyt.autoAdd = true;
 *  
 * // Create a button group for the options
 * var wOptBG = new DzVButtonGroup( wDlg );
 * wOptBG.columns = 1;
 *  
 * // Create the options
 * var wOpt1Btn = new DzRadioButton( wOptBG );
 * wOpt1Btn.text = "Option 1";
 * wOpt1Btn.checked = true;
 * var wOpt2Btn = new DzRadioButton( wOptBG );
 * wOpt2Btn.text = "Option 2";
 * var wOpt3Btn = new DzRadioButton( wOptBG );
 * wOpt3Btn.text = "Option 3";
 *  
 * // Launch the dialog
 * wDlg.exec();
 */
interface DzRadioButton extends DzButton
{

  /**
   * Whether the button is checked
   */
  checked: boolean

}

declare var DzRadioButton:
{
  prototype: DzRadioButton;

  /**
   * Creates a radio button as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzRadioButton;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rect
 * AZScript wrapper for QRect.
 * @remarks This is the DAZScript counterpart to the QRect type used in the DAZ Studio SDK. A Rect object is a two dimensional representation of a rectangle.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Rect extends QObject
{

  /**
   * Holds the rectangle's bottom.
   */
  bottom: number

  /**
   * Holds the rectangle's center.
   */
  center: Point

  /**
   * Holds the rectangle's height.
   */
  height: number

  /**
   * Holds the rectangle's left.
   */
  left: number

  /**
   * Holds the rectangle's right.
   */
  right: number

  /**
   * Holds the rectangle's top.
   */
  top: number

  /**
   * Holds the rectangle's width.
   */
  width: number

  /**
   * Holds the rectangle's x position.
   */
  x: number

  /**
   * Holds the rectangle's y position.
   */
  y: number

  /**
   * @returns true if this rectangle contains the given rectangle, otherwise false.
   * @param rect - The rectangle to test against this rectangle.
   */
  contains (rect: Rect): boolean;

  /**
   * @returns The intersection of this rectangle with the given rectangle, or an empty rectangle if the two do not intersect.
   * @param rect - The rectangle to intersect with this rectangle.
   */
  intersection (rect: Rect): Rect;

  /**
   * @returns true if this rectangle intersects with the given rectangle, otherwise false.
   * @param rect - The rectangle to test against this rectangle.
   */
  intersects (rect: Rect): boolean;

  /**
   * @returns true if the rectangle is empty, i.e the width and height of the rectangle are negative, otherwise false.
   */
  isEmpty (): boolean;

  /**
   * @returns true if the width and height of the rectangle are 0, otherwise false.
   */
  isNull (): boolean;

  /**
   * Moves the rectangle so its bottom property is equal to pos.
   * @param pos - The new bottom boundary of the triangle.
   */
  moveBottom (pos: number): void;

  /**
   * Translates the rectangle by dx and dy, the width and height remain unchanged.
   * @param dx - The distance in x to move the rectangle.
   * @param dy - The distance in y to move the rectangle.
   */
  moveBy (dx: number, dy: number): void;

  /**
   * Moves the rectangle so its left property is equal to pos.
   * @param pos - The new left boundary of the triangle.
   */
  moveLeft (pos: number): void;

  /**
   * Moves the rectangle so its right property is equal to pos.
   * @param pos - The new right boundary of the triangle.
   */
  moveRight (pos: number): void;

  /**
   * Moves the rectangle so its top property is equal to pos.
   * @param pos - The new top boundary of the triangle.
   */
  moveTop (pos: number): void;

  /**
   * Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
   */
  normalize (): void;

  /**
   * Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
   */
  normalize (): void;

  /**
   * @returns The union of this rectangle with the given rectangle, i.e. a rectangle that contains both rectangles.
   * @param rect - The rectangle to add to this rectangle.
   */
  union (rect: Rect): Rect;

}

declare var Rect:
{
  prototype: Rect;

  /**
   * Default Constructor.
   */
  new (): Rect;

  /**
   * @param rect - The rectangle to copy.
   */
  new (rect: Rect): Rect;

  /**
   * @param xVal - The x coordinate of the rectangle.
   * @param yVal - The y coordinate of the rectangle.
   * @param wVal - The width of the rectangle.
   * @param hVal - The height of the rectangle.
   */
  new (xVal: number, yVal: number, wVal: number, hVal: number): Rect;
}
/* Unknown API */ declare type DzRefCountedItem = any;
interface RegExp
{
    /**
     * Provides an array of all the captured strings from the previous match. undefined if there was no match. (Read Only)
     */
    capturedTexts: Array<unknown>
    /**
     * true if the expression is empty, otherwise false. (Read Only)
     */
    empty: boolean
    /**
     * Holds the length of the last matched string. -1 if there was no match. (Read Only)
     */
    matchedLength: number
    /**
     * true if the expression is syntactically valid, otherwise false. (Read Only)
     */
    valid: boolean
    /**
     * @returns The capture at the given index of the pattern in the previously matched text.
     * @param which - The index of the capture to return.
     */
    cap (which: number): string;
    /**
     * @returns true if text exactly matches this expression's pattern, otherwise false.
     * @param text - The String to search with the expression pattern.
     */
    exactMatch (text: string): boolean;
    /**
     * @returns The position of the capture at the given index of the pattern in the previously matched text.
     * @param which - The index of the capture to return.
     */
    pos (which: number): number;
    /**
     * @returns The [zero-based] index of the first occurrence of this expression's pattern in text, starting at the beginning of text. If no match is made -1 is returned.
     * @param text - The String to search with the expression pattern.
     */
    search (text: string): number;
    /**
     * @returns The [zero-based] index of the first occurrence of this expression's pattern in text, starting at the end of text. If no match is made -1 is returned.
     * @param text - The String to search with the expression pattern.
     */
    searchRev (text: string): number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderer_dz
 * Base class for all offline renderers.
 * @remarks Implements a standard RenderMan interface for the scene to render itself through an offline renderer.
 */
interface DzRenderer extends DzBase
{

  /**
   * Compiles the shader at the given path, if necessary, and returns the path to the compiled shader.
   * @returns The path to the compiled shader.
   * @param shaderPath - The path to the shader source to compile
   */
  compileShader (shaderPath: string): string;

  /**
   * Render a custom set of items.
   * @returns true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
   * @param handler - Settings and handler for the render.
   * @param camera - Camera to render from.
   * @param lights - List of lights for the render.
   * @param nodes - List of items to be rendered.
   * @param opt - Options for this render.
   */
  customRender (handler: DzRenderHandler, camera: DzCamera, lights: Array<unknown>, nodes: Array<unknown>, opt: DzRenderOptions): boolean;

  /**
   * @returns The DzNode that is currently being rendered.
   */
  getCurrentNode (): DzNode;

  /**
   * @returns The handler used for Interactive Progressive Rendering (IPR) on this renderer (if any). NULL if this renderer does not support IPR.
   */
  getIPRRenderHandler (): iprrenderhandler_dz;

  /**
   * @returns The name of this renderer.
   */
  getName (): string;

  /**
   * @returns The renderer mode (feature set) for this renderer.
   */
  getRendererMode (): DzRendererMode;

  /**
   * @returns The path to the utility that compiles shaders for the renderer.
   */
  getShaderCompilerPath (): string;

  /**
   * @returns The file extension that this renderer uses for compiled shaders
   */
  getShaderExtension (): string;

  /**
   * Given a shader name (e.g. “metal”), this method returns the file name for it by appending the shader extension for the renderer (e.g. “metal.sdl”).
   * @param shaderName - 
   */
  getShaderFileName (shaderName: string): string;

  /**
   * Gets the parameter information for the given shader. The passed shader name should be the path to the compiled shader.
   * @param shaderPath - 
   */
  getShaderInfo (shaderPath: string): DzShaderDescription;

  /**
   * Given a shader name (e.g. “metal”), looks in all the shader directories attempting to find the file for it. If withExtension is true, the shader path including the extension for the renderer is returned. Otherwise, it returns the full shader path without the extension appended. If it fails to find the shader, it returns an empty string.
   * @param shaderName - 
   * @param [withExtension=true] - 
   */
  getShaderPath (shaderName: string, withExtension?: boolean): string;

  /**
   * @returns A list of paths which are used to search for shaders while rendering.
   * @seealso getShaderPath()
   */
  getShaderSearchPaths (): Array<unknown>;

  /**
   * @returns The path to the utility that converts textures for the renderer.
   */
  getTextureUtilityPath (): string;

  /**
   * @returns true if the application is currently rendering, otherwise false.
   */
  isRendering (): boolean;

  /**
   * Stops the render.
   */
  killRender (): void;

  /**
   * Called by the framework to prepare/convert an image into a format that this renderer can understand/use when rendering. In derived classes, the function should result in a new image file being generated along with a path that the renderer can use to refer to the file. If the image could not be converted or is not usable by this renderer, the returned string should be empty.
   * @seealso imagePrepared()
   * @param img - The DzTexture object for which the image is being prepared.
   * @param filename - The path to the original image file that needs to be processed.
   */
  prepareImage (img: DzTexture, filename: string): void;

  /**
   * Processes the given shader name into a form the renderer can use (i.e. appending file extensions, finding absolute paths, etc.).
   * @param shaderName - 
   */
  processShaderName (shaderName: string): string;

  /**
   * Render the current scene.
   * @returns true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
   * @param handler - Settings and handler for the render.
   * @param camera - Camera to render the scene from.
   * @param opt - Options for this render.
   */
  render (handler: DzRenderHandler, camera: DzCamera, opt: DzRenderOptions): boolean;

  /**
   * Converts a .bake file into an image file.
   * @param opt - Shader baker options.
   * @param wait - If true, this method is exited only when the conversion has ended. If false the method returns immediately after starting conversion; the baker's saveFileFinished() slot will be invoked after the conversion finishes.
   */
  saveBakeImage (opt: DzBakerOptions, wait: boolean): void;

  /**
   * Sets the handler used for Interactive Progressive Rendering (IPR) on this renderer.
   * @param handler - The render handler to set.
   */
  setIPRRenderHandler (handler: iprrenderhandler_dz): void;

  /**
   * Stops an active baking operation, if possible.
   */
  stopBaking (): void;

  /**
   * Performs texture conversion.
   * @returns true if the conversion succeeds, false if the conversion is cancelled or in case of error.
   * @param handler - The render handler to use for the conversion.
   * @param camera - The camera to use for the conversion.
   * @param opt - The options to use in the conversion.
   */
  textureConvert (handler: DzRenderHandler, camera: DzCamera, opt: DzTextureConvertorOptions): boolean;

  aboutToRender: Signal<{
    /**
     * Emitted when just before the renderer begins rendering
     * @param renderer - A pointer to this renderer
     */
  (renderer: DzRenderer): void;
  }>;
  imagePrepared: Signal<{
    /**
     * Emitted when the image preparation for img is finished. Derived classes need to make sure to emit this signal at the appropriate times.
     * @param img - A pointer to the DzTexture object for which image preparation is complete.
     * @param filename - The path to the prepared image file to be associated with img.
     */
  (img: DzTexture, filename: string): void;
  }>;
  IPRRenderHandlerChanged: Signal<{
    /**
     * TODO: Add description.
     * @param renderer - 
     * @param handler - 
     */
  (renderer: DzRenderer, handler: iprrenderhandler_dz): void;
  }>;
  rendererModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param renderer - 
     */
  (renderer: DzRenderer): void;
  }>;
  renderFinished: Signal<{
    /**
     * Emitted when just after the renderer finishes rendering
     * @param renderer - A pointer to this renderer
     */
  (renderer: DzRenderer): void;
  }>;
  shapeRenderBeginning: Signal<{
    /**
     * TODO: Add description.
     * @param shape - 
     */
  (shape: shape_dz): void;
  }>;
  shapeRenderFinished: Signal<{
    /**
     * TODO: Add description.
     * @param shape - 
     */
  (shape: shape_dz): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderermode_dz
 * A base class for defining the set of features that a given mode of a given render engine provides; feature sets.
 * @remarks Many render engines provide a single mode of operation; i.e. the engine is either biased or it is physically based. However, as the development of a render engine evolves, it may provide more than one mode of operation, and each mode may provide a different set of features.
 */
interface DzRendererMode extends QObject
{

  /**
   * @returns true if any features are enabled for the mode; otherwise false.
   */
  hasFeatures (): boolean;

  /**
   * @returns true if the mode for the renderer is biased; otherwise false.
   */
  isBiased (): boolean;

  /**
   * @returns true if the mode for the renderer is physically based; otherwise false.
   */
  isPhysicallyBased (): boolean;

  /**
   * @returns true if the mode for the renderer is RenderMan compliant; otherwise false.
   */
  isRenderManCompliant (): boolean;

  /**
   * @returns A list of the languages supported by the mode of the renderer.
   */
  supportedLaunguages (): Array<unknown>;

  /**
   * @returns true if the render supports advance camera options
   * @since 4.9.3.121
   */
  supportsAdvancedCamera (): boolean;

  /**
   * @returns true if the mode for the renderer supports camera aperture blades
   * @since 4.9.3.121
   */
  supportsCameraBlades (): boolean;

  /**
   * @returns true if the mode for the renderer supports the Catmark subdivision limit surface; otherwise false.
   */
  usesCatmarkLimitSurface (): boolean;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderhandler_dz
 * Base class for all render handlers.
 * @remarks Render handler classes are responsible for the settings of a render, as well as collecting the final image data passed back from the renderer.
 * @seealso DzRenderer::render(), DzRenderer::customRender(), Dz3DViewport::hardwareRender(), Dz3DViewport::renderThumbnail(), pbufferview_dz::hardwareRender(), pbufferview_dz::renderThumbnail()
 */
interface DzRenderHandler extends QObject
{

  /**
   * @returns The background color
   */
  getBackColor (): Color;

  /**
   * @returns The area of the view to render, if the whole view is not to be rendered
   */
  getCropWindow (): Rect;

  /**
   * @returns The number of frames to be rendered
   */
  getNumFrames (): number;

  /**
   * @returns The width & height of the rendered image
   */
  getSize (): Size;

  /**
   * @returns The scene time at which rendering will begin
   */
  getStartingTime (): DzTime;

  /**
   * @returns true if only a portion of the view will be rendered
   */
  getUseCropWindow (): boolean;

  /**
   * Set background color for the render
   * @param color - 
   */
  setBackColor (color: Color): void;

  /**
   * Set the portion of the view to be rendered, if the whole view is not to be rendered
   * @param window - 
   */
  setCropWindow (window: Rect): void;

  /**
   * Set the render to be limited to a portion of the view, or the whole view
   * @param onOff - 
   */
  setUseCropWindow (onOff: boolean): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendermgr_dz
 * Render manager.
 * @remarks The manager that is responsible for rendering.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp::getRenderMgr().
 */
interface DzRenderMgr extends DzBase
{

  /**
   * Possible render priorities that are used to order various operations when rendering. Most notably, DzNodes and DzMaterials are processed according to their priority when rendering.
   */
  /**
   * The lowest priority.
   */
  readonly RENDER_PRIORITY_LOWEST: number;

  /**
   * A low priority.
   */
  readonly RENDER_PRIORITY_LOW: number;

  /**
   * A below normal priority.
   */
  readonly RENDER_PRIORITY_BELOW_NORMAL: number;

  /**
   * The normal priority.
   */
  readonly RENDER_PRIORITY_NORMAL: number;

  /**
   * An above normal priority.
   */
  readonly RENDER_PRIORITY_ABOVE_NORMAL: number;

  /**
   * A high priority.
   */
  readonly RENDER_PRIORITY_HIGH: number;

  /**
   * The highest priority.
   */
  readonly RENDER_PRIORITY_HIGHEST: number;

  /**
   * @returns The suffix used for files generated as icons for renders to help improve performance and responsiveness.
   */
  getIconSuffix (): string;

  /**
   * @returns The name of the XML file that holds metadata for imageName.
   * @param imageName - The path of the rendered file to get the metadata file for.
   * @param basenameOnly - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
   */
  getMetaXmlFileName (imageName: string, basenameOnly: boolean): string;

  /**
   * @returns The base filename of the file for imageName.
   * @param imageName - The path of the rendered file to get a base filename for.
   * @param basenameOnly - If true, only the basename of the file is returned, otherwise the basename is preceded by the path.
   */
  getRenderBaseFileName (imageName: string, basenameOnly: boolean): string;

  /**
   * @returns The name of the icon file for imageName.
   * @param imageName - The path of the rendered file to get the icon file for.
   * @param basenameOnly - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
   */
  getRenderIconFileName (imageName: string, basenameOnly: boolean): string;

  /**
   * Adds a directory to the list of known render directories.
   * @param directory - The path of the directory to add.
   * @param [saveSetting=true] - If true, saves the setting immediately. If false, waits until the application exits to save the setting.
   */
  addRenderDirectory (directory: string, saveSetting?: boolean): void;

  /**
   * Interactively and progressively renders the scene with the given render settings, using the given handler from the given camera.
   * @returns true if the render was performed successfully, otherwise false.
   * @param camera - The camera to use for the render.
   * @param renderHandler - The render handler to use for the render.
   * @param [opt=null] - The render settings to use for the render. If NULL, the current user render settings are used.
   */
  doIPRRender (camera: DzCamera, renderHandler: DzRenderHandler, opt?: DzRenderOptions): boolean;

  /**
   * Renders the scene with the given render settings. If no render settings are specified, then the current application render settings are used.
   * @param [opt=null] - The render settings to use for the render. If NULL, the current user render settings are used.
   */
  doRender (opt?: DzRenderOptions): boolean;

  /**
   * @returns The renderer with the given class name (if any), otherwise null.
   * @param className - 
   */
  findRenderer (className: string): DzRenderer;

  /**
   * @returns The active renderer for the application. This will be NULL if no renderers are available.
   */
  getActiveRenderer (): DzRenderer;

  /**
   * @returns A list where the first item is the base path and any additional items represent the relative portion of the path.
   * @param absPath - The absolute path to split into its base and relative parts.
   */
  getBaseAndRelativePath (absPath: string): Array<unknown>;

  /**
   * @returns The path to the last successfully saved render, otherwise an empty string.
   */
  getLastSavedRenderPath (): string;

  /**
   * @returns The number of render directories.
   */
  getNumRenderDirectories (): number;

  /**
   * @returns The number of renderers available in the application.
   */
  getNumRenderers (): number;

  /**
   * TODO: Add description.
   */
  getOptionHelper (): DzElement;

  /**
   * @returns The given render directory.
   * @param which - The index of the render directory to be returned.
   */
  getRenderDirectoryPath (which: number): string;

  /**
   * TODO: Add description.
   */
  getRenderElementObjects (): Array<unknown>;

  /**
   * @returns If which is within the range [0, getNumRenderers() - 1], the renderer at the given index, otherwise null.
   * @param which - 
   */
  getRenderer (which: number): DzRenderer;

  /**
   * @returns A list of renderers available in the application.
   */
  getRendererList (): Array<unknown>;

  /**
   * @returns The default render options object. This object stores the user's currently selected rendering options.
   */
  getRenderOptions (): DzRenderOptions;

  /**
   * @returns true if there is a render that can be saved, otherwise false.
   */
  hasRender (): boolean;

  /**
   * @returns true if the application is currently rendering, otherwise false.
   */
  isRendering (): boolean;

  /**
   * TODO: Add description.
   */
  rebuildRenderElements (): void;

  /**
   * Removes all render directories.
   */
  removeAllRenderDirectories (): void;

  /**
   * Removes a directory from the list of known render directories.
   * @returns true if the directory was found in the list, otherwise false.
   * @param directory - The name of the render directory to remove.
   */
  removeRenderDirectory (directory: string): boolean;

  /**
   * TODO: Add description.
   */
  restoreDefaultRenderOptions (): void;

  /**
   * Displays a dialog for saving the last render, and saves the image(s)/movie if the user does not cancel.
   * @returns The path to the file selected and successfully saved, otherwise an empty string.
   */
  saveLastRender (): string;

  /**
   * Sets the active renderer for the application.
   * @param renderer - The renderer to make active.
   */
  setActiveRenderer (renderer: DzRenderer): void;

  /**
   * Displays the render options dialog to the user. This only works if the application is being run with the interface on, if the interface is off, this function does nothing.
   */
  showRenderDialog (): void;

  /**
   * TODO: Add description.
   */
  shutdown (): void;

  /**
   * TODO: Add description.
   */
  stopIPRRender (): void;

  activeRendererChanged: Signal<{
    /**
     * Emitted when the active render engine has changed.
     * @param renderer - The new active render engine.
     */
  (renderer: DzRenderer): void;
  }>;
  activeRendererIPRRenderHandlerChanged: Signal<{
    /**
     * TODO: Add description.
     * @param renderer - 
     * @param handler - 
     */
  (renderer: DzRenderer, handler: iprrenderhandler_dz): void;
  }>;
  doIPRRenderStop: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  hasRenderChanged: Signal<{
    /**
     * Emitted when the value returned by DzRenderMgr::hasRender() has changed, signaling a new render operation. This signifies whether or not a call to saveLastRender() will be valid.
     * @param state - 
     */
  (state: boolean): void;
  }>;
  IPRRenderStarted: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  IPRRenderStopped: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  renderDirectoryListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  renderElementsListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  rendererAdded: Signal<{
    /**
     * Emitted when a new render engine is added to the manager. This only occurs at startup as plug-ins are being loaded.
     * @param renderer - The new render engine that was added to the manager.
     */
  (renderer: DzRenderer): void;
  }>;
  rendererIPRRenderHandlerChanged: Signal<{
    /**
     * TODO: Add description.
     * @param renderer - 
     * @param handler - 
     */
  (renderer: DzRenderer, handler: iprrenderhandler_dz): void;
  }>;
  rendererModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param renderer - 
     */
  (renderer: DzRenderer): void;
  }>;
  renderFinished: Signal<{
    /**
     * Emitted just after a rendering operation is finished. This is only emitted when a render operation is performed by calling DzRenderMgr::doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
     * @seealso DzRenderMgr::renderStarting()
     * DzScene::renderFinished()
     * @param succeeded - true if the render was successful, false if the render failed or was cancelled by the user.
     */
  (succeeded: boolean): void;
  }>;
  renderFolderChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  renderOptionDefaultsRestored: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  renderStarting: Signal<{
    /**
     * Emitted just before a rendering operation begins. This is only emitted when a render operation is performed by calling DzRenderMgr::doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
     * @seealso DzRenderMgr::renderFinished()
     * DzScene::aboutToRender()
     */
  (): void;
  }>;
}

declare namespace DzRenderMgr
{

  /**
   * Possible render priorities that are used to order various operations when rendering. Most notably, DzNodes and DzMaterials are processed according to their priority when rendering.
   */
  /**
   * The lowest priority.
   */
  export const RENDER_PRIORITY_LOWEST: number;
  /**
   * A low priority.
   */
  export const RENDER_PRIORITY_LOW: number;
  /**
   * A below normal priority.
   */
  export const RENDER_PRIORITY_BELOW_NORMAL: number;
  /**
   * The normal priority.
   */
  export const RENDER_PRIORITY_NORMAL: number;
  /**
   * An above normal priority.
   */
  export const RENDER_PRIORITY_ABOVE_NORMAL: number;
  /**
   * A high priority.
   */
  export const RENDER_PRIORITY_HIGH: number;
  /**
   * The highest priority.
   */
  export const RENDER_PRIORITY_HIGHEST: number;

  /**
   * @returns The suffix used for files generated as icons for renders to help improve performance and responsiveness.
   */
  export function getIconSuffix (): string;

  /**
   * @returns The name of the XML file that holds metadata for imageName.
   * @param imageName - The path of the rendered file to get the metadata file for.
   * @param basenameOnly - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
   */
  export function getMetaXmlFileName (imageName: string, basenameOnly: boolean): string;

  /**
   * @returns The base filename of the file for imageName.
   * @param imageName - The path of the rendered file to get a base filename for.
   * @param basenameOnly - If true, only the basename of the file is returned, otherwise the basename is preceded by the path.
   */
  export function getRenderBaseFileName (imageName: string, basenameOnly: boolean): string;

  /**
   * @returns The name of the icon file for imageName.
   * @param imageName - The path of the rendered file to get the icon file for.
   * @param basenameOnly - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
   */
  export function getRenderIconFileName (imageName: string, basenameOnly: boolean): string;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderoptions_dz
 * This class manages the inclusion/exclusion of render options.
 * @remarks The RenderOptions class is responsible for the inclusion/exclusion of certain aspects of a render.
 */
interface DzRenderOptions extends QObject
{

  /**
   * States for gamma correction.
   */
  /**
   * Gamma correction off.
   */
  readonly GCOff: number;

  /**
   * Gamma correction on.
   */
  readonly GCOn: number;

  /**
   * The types of pixel filters available for RenderMan renders.
   */
  /**
   * The Box filter.
   */
  readonly Box: number;

  /**
   * The triangle filter.
   */
  readonly Triangle: number;

  /**
   * The Catmull-Rom filter.
   */
  readonly CatmullRom: number;

  /**
   * The Gaussian filter.
   */
  readonly Gaussian: number;

  /**
   * The Sinc filter.
   */
  readonly Sinc: number;

  /**
   * Types of Render Destinations
   */
  /**
   * Renders the image in the active viewport.
   */
  readonly ActiveView: number;

  /**
   * Renders the image in a new window.
   */
  readonly NewWindow: number;

  /**
   * Renders the image directly to a file.
   */
  readonly DirectToFile: number;

  /**
   * The Types of Movies that can be rendered
   */
  /**
   * A video file created/compressed by system specific video API's.
   */
  readonly MovieFile: number;

  /**
   * A series of image files, one for each frame in the movie.
   */
  readonly ImageSeries: number;

  /**
   * The style of the render
   */
  /**
   * The shaders/materials for the objects will be used to render.
   */
  readonly Normal: number;

  /**
   * The entire scene will be rendered with a cartoon style shader.
   */
  readonly Cartoon: number;

  /**
   * Types of Render Operations
   */
  /**
   * Performs a 'Screen Shot' render, grabbing a frame from the interactive OpenGL viewport.
   */
  readonly ScreenShot: number;

  /**
   * Performs a 'Fast Time' render, using OpenGL to create a render quality image.
   */
  readonly HardwareAssisted: number;

  /**
   * Perfomrs an 'Offline' render with the current RenderMan renderer.
   */
  readonly Software: number;

  /**
   * Holds the currently set aspect ratio (w / h). (Read Only)
   */
  aspect: number

  /**
   * Holds the currently set aspect ratio height. (Read Only)
   */
  aspectHeight: number

  /**
   * Holds the currently set aspect ratio width. (Read Only)
   */
  aspectWidth: number

  /**
   * Holds whether or not to render polygons as double sided.
   */
  doubleSided: boolean

  /**
   * Holds the scene time of the last frame to render.
   */
  endTime: DzTime

  /**
   * Holds the gain value.
   */
  gain: number

  /**
   * Holds the gamma value.
   */
  gamma: number

  /**
   * Holds whether or not gamma correction is enabled.
   */
  gammaCorrection: number

  /**
   * Holds the size of the image to render.
   */
  imageSize: Size

  /**
   * Holds whether or not to constrain the pixel dimensions of the render to the aspect ratio.
   */
  isAspectConstrained: boolean

  /**
   * Holds whether or not to render only the current frame.
   */
  isCurrentFrameRender: boolean

  /**
   * Holds the filename of the last image rendered. (Read Only)
   */
  lastRenderImgFilename: string

  /**
   * Holds the filename of the last movie rendered. (Read Only)
   */
  lastRenderMovFilename: string

  /**
   * Holds the base filename of the image series rendered. (Read Only)
   */
  lastRenderSerFilename: string

  /**
   * Holds the time offset for blurring.
   */
  motionBlurOffset: number

  /**
   * Holds the amount of time between frames to blur across (0.0 - 1.0).
   */
  motionBlurPct: number

  /**
   * Holds the number of samples for motion blur.
   */
  motionBlurSamples: number

  /**
   * Holds the number of passes for rendering in OpenGL.
   */
  openGLPasses: number

  /**
   * Holds the pixel filter to use.
   */
  pixelFilter: number

  /**
   * Holds the raytrace depth.
   */
  rayTraceDepth: number

  /**
   * Holds the filename to save individual images to.
   */
  renderImgFilename: string

  /**
   * Holds the target for rendering individual images.
   */
  renderImgToId: number

  /**
   * Holds the filename to save movies to.
   */
  renderMovFilename: string

  /**
   * Holds the target for rendering animations.
   */
  renderMovToId: number

  /**
   * Holds the base filename to use when saving image series.
   */
  renderSerFilename: string

  /**
   * Holds the style of the render.
   */
  renderStyle: number

  /**
   * Holds the type of the render.
   */
  renderType: number

  /**
   * Holds whether or not to use the aspect and size of the current viewport for the render.
   */
  renderViewport: boolean

  /**
   * Holds the shading rate.
   */
  shadingRate: number

  /**
   * Holds the number of samples when rendering shadows.
   */
  shadowSamples: number

  /**
   * Holds whether or not to show a preview.
   */
  showPreview: boolean

  /**
   * Holds the scene time of the first frame to render.
   */
  startTime: DzTime

  /**
   * Holds whether or not to use shaders when rendering in OpenGL.
   */
  useGLSL: boolean

  /**
   * Holds whether or not to use motion blur.
   */
  useMotionBlur: boolean

  /**
   * Holds the width of the pixel filter in x.
   */
  xFilterWidth: number

  /**
   * Holds the number of samples per pixel in x.
   */
  xPixelSamples: number

  /**
   * Holds the width of the pixel filter in y.
   */
  yFilterWidth: number

  /**
   * Holds the number of samples per pixel in y.
   */
  yPixelSamples: number

  /**
   * Writes render options via the settings manager.
   */
  applyChanges (): void;

  /**
   * Copies the settings from another render options object.
   * @since 4.9.3.57
   * @param opt - 
   */
  copyFrom (opt: DzRenderOptions): void;

  /**
   * @returns If gamma correction is enabled, a linearized version of color. If gamma correction is off, color is returned unchanged.
   * @param color - The color to gamma correct.
   */
  gammaCorrectColor (color: DzFloatColor): DzFloatColor;

  /**
   * Sets values for render options found in the stored settings.
   */
  resetOptions (): void;

  /**
   * Restores the applications default settings and replaces the stored values.
   */
  restoreDefaultSettings (): void;

  /**
   * Set current aspect width for this render. Represented as widthRatio : heightRatio.
   * @param widthRatio - 
   * @param heightRatio - 
   */
  setAspectRatio (widthRatio: number, heightRatio: number): void;

  /**
   * Sets all options to the default values, but does not affect values of stored/remembered settings. Also, no “changed” signals are emitted when calling this method.
   */
  setToDefaults (): void;

  aspectChanged: Signal<{
    /**
     * Emitted when the aspect for the render has changed, or the viewport render status has changed.
     * @param val - 
     */
  (val: number): void;
    /**
     * Emitted when the aspect for the render has changed, or the viewport render status has changed.
     * @param w - 
     * @param h - 
     */
  (w: number, h: number): void;
  }>;
  aspectConstrainChanged: Signal<{
    /**
     * Emitted when the constrain aspect ratio setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  defaultsRestored: Signal<{
    /**
     * Emitted when the default options have been restored.
     */
  (): void;
  }>;
  doubleSidedChanged: Signal<{
    /**
     * Emitted when the double sided setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  endTimeChanged: Signal<{
    /**
     * Emitted when the end time has changed.
     * @param time - 
     */
  (time: DzTime): void;
  }>;
  gainChanged: Signal<{
    /**
     * Emitted when the gain value has changed.
     * @param gain - 
     */
  (gain: number): void;
  }>;
  gammaChanged: Signal<{
    /**
     * Emitted when the gamma value has changed.
     * @param gamma - 
     */
  (gamma: number): void;
  }>;
  gammaCorrectionChanged: Signal<{
    /**
     * Emitted when gamma correction state has changed.
     * @param gc - 
     */
  (gc: number): void;
  }>;
  imageSizeChanged: Signal<{
    /**
     * Emitted when the image size has changed.
     * @param size - 
     */
  (size: Size): void;
  }>;
  motionBlurOffsetChanged: Signal<{
    /**
     * Emitted when the motion blur offset has changed.
     * @param offset - 
     */
  (offset: number): void;
  }>;
  motionBlurPctChanged: Signal<{
    /**
     * Emitted when the motion blur percentage has changed.
     * @param pct - 
     */
  (pct: number): void;
  }>;
  motionBlurSamplesChanged: Signal<{
    /**
     * Emitted when the motion blur samples has changed.
     * @param samples - 
     */
  (samples: number): void;
  }>;
  openGLPassesChanged: Signal<{
    /**
     * Emitted when the number of OpenGL passes has changed.
     * @param passes - 
     */
  (passes: number): void;
  }>;
  pixelFilterChanged: Signal<{
    /**
     * Emitted when the pixel filter has changed.
     * @param filter - 
     */
  (filter: number): void;
  }>;
  rayTraceDepthChanged: Signal<{
    /**
     * Emitted when the ray trace depth has changed.
     * @param depth - 
     */
  (depth: number): void;
  }>;
  renderCurrentFrameChanged: Signal<{
    /**
     * Emitted when the render current frame setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  renderImgFilenameChanged: Signal<{
    /**
     * Emitted when the image filename for the render has changed.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  renderImgTargetChanged: Signal<{
    /**
     * Emitted when the image target type for the render has changed.
     * @param id - 
     */
  (id: number): void;
  }>;
  renderMovFilenameChanged: Signal<{
    /**
     * Emitted when the movie filename for the render has changed.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  renderMovTargetChanged: Signal<{
    /**
     * Emitted when the movie target type for the render has changed.
     * @param id - 
     */
  (id: number): void;
  }>;
  renderSerFilenameChanged: Signal<{
    /**
     * Emitted when the image series filename for the render has changed.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  renderStyleChanged: Signal<{
    /**
     * Emitted when the render type has changed.
     * @param style - 
     */
  (style: number): void;
  }>;
  renderTypeChanged: Signal<{
    /**
     * Emitted when the render type has changed.
     * @param type - 
     */
  (type: number): void;
  }>;
  renderViewportChanged: Signal<{
    /**
     * Emitted when the render to viewport setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  settingsChanged: Signal<{
    /**
     * Emitted when any of the settings has changed.
     */
  (): void;
  }>;
  shadingRateChanged: Signal<{
    /**
     * Emitted when the shading rate has changed.
     * @param rate - 
     */
  (rate: number): void;
  }>;
  shadowSamplesChanged: Signal<{
    /**
     * Emitted when the number of shadow samples has changed.
     * @param samples - 
     */
  (samples: number): void;
  }>;
  showPreviewChanged: Signal<{
    /**
     * Emitted when the show preview setting has changed.
     * @param onoff - 
     */
  (onoff: boolean): void;
  }>;
  startTimeChanged: Signal<{
    /**
     * Emitted when the start time has changed.
     * @param time - 
     */
  (time: DzTime): void;
  }>;
  useGLSLChanged: Signal<{
    /**
     * Emitted when the use GLSL setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  useMotionBlurChanged: Signal<{
    /**
     * Emitted when the motion blur setting has changed.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  xFilterWidthChanged: Signal<{
    /**
     * Emitted when the X-axis filter width has changed.
     * @param width - 
     */
  (width: number): void;
  }>;
  xPixelSamplesChanged: Signal<{
    /**
     * Emitted when the number of X-axis pixel samples has changed.
     * @param samples - 
     */
  (samples: number): void;
  }>;
  yFilterWidthChanged: Signal<{
    /**
     * Emitted when the Y-axis filter width has changed.
     * @param width - 
     */
  (width: number): void;
  }>;
  yPixelSamplesChanged: Signal<{
    /**
     * Emitted when the number of Y-axis pixel samples has changed.
     * @param samples - 
     */
  (samples: number): void;
  }>;
}

declare var DzRenderOptions:
{
  prototype: DzRenderOptions;

  /**
   * Default Constructor. Initializes render options.
   * @since 4.9.3.57
   */
  new (): DzRenderOptions;

  /**
   * States for gamma correction.
   */
  /**
   * Gamma correction off.
   */
  readonly GCOff: number;
  /**
   * Gamma correction on.
   */
  readonly GCOn: number;

  /**
   * The types of pixel filters available for RenderMan renders.
   */
  /**
   * The Box filter.
   */
  readonly Box: number;
  /**
   * The triangle filter.
   */
  readonly Triangle: number;
  /**
   * The Catmull-Rom filter.
   */
  readonly CatmullRom: number;
  /**
   * The Gaussian filter.
   */
  readonly Gaussian: number;
  /**
   * The Sinc filter.
   */
  readonly Sinc: number;

  /**
   * Types of Render Destinations
   */
  /**
   * Renders the image in the active viewport.
   */
  readonly ActiveView: number;
  /**
   * Renders the image in a new window.
   */
  readonly NewWindow: number;
  /**
   * Renders the image directly to a file.
   */
  readonly DirectToFile: number;

  /**
   * The Types of Movies that can be rendered
   */
  /**
   * A video file created/compressed by system specific video API's.
   */
  readonly MovieFile: number;
  /**
   * A series of image files, one for each frame in the movie.
   */
  readonly ImageSeries: number;

  /**
   * The style of the render
   */
  /**
   * The shaders/materials for the objects will be used to render.
   */
  readonly Normal: number;
  /**
   * The entire scene will be rendered with a cartoon style shader.
   */
  readonly Cartoon: number;

  /**
   * Types of Render Operations
   */
  /**
   * Performs a 'Screen Shot' render, grabbing a frame from the interactive OpenGL viewport.
   */
  readonly ScreenShot: number;
  /**
   * Performs a 'Fast Time' render, using OpenGL to create a render quality image.
   */
  readonly HardwareAssisted: number;
  /**
   * Perfomrs an 'Offline' render with the current RenderMan renderer.
   */
  readonly Software: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendersettingsassetfilter_dz
 * Class for saving DSON-based Render Settings Presets.
 * @remarks An asset save filter for saving a Render Settings Preset in the DSON format.
 * @seealso Sample: Save a Render Settings Preset
 */
interface DzRenderSettingsAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzRenderSettingsAssetFilter:
{
  prototype: DzRenderSettingsAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzRenderSettingsAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotatemanip_dz
 * @remarks A manipulator that rotates an image layer in 90 degree increments.
 */
interface DzRotateManip extends DzImageManip
{

  /**
   * The enumerated values of possible rotations to be performed.
   */
  /**
   * No rotation is performed.
   */
  readonly RotNone: number;

  /**
   * A 90 degree (clockwise) rotation is performed.
   */
  readonly Rot90: number;

  /**
   * A 180 degree rotation is performed.
   */
  readonly Rot180: number;

  /**
   * A 270 degree (clockwise) rotation is performed.
   */
  readonly Rot270: number;

  /**
   * TODO: Add description.
   */
  degrees: number

  /**
   * @returns The number of degrees the image will be rotated. Currently, the only possible values are 0, 90, 180, 270.
   */
  getDegrees (): number;

  /**
   * @returns The type of rotation for the image.
   */
  getRotation (): number;

  /**
   * Sets the amount of rotation for the image.
   * @param deg - The number of degrees to rotate the image. Currently, the only supported values are 0, 90, 180, 270. All other values are ignored.
   */
  setDegrees (deg: number): void;

  /**
   * Sets the type of rotation for the image.
   * @param rot - The rotation to apply to the image.
   */
  setRotation (rot: number): void;

}

declare var DzRotateManip:
{
  prototype: DzRotateManip;

  /**
   * Holds the amount of rotation, in degrees.
   * Default Constructor
   * @param [rot=DzRotateManip.Rotation.RotNone] - 
   */
  new (rot?: number): DzRotateManip;

  /**
   * The enumerated values of possible rotations to be performed.
   */
  /**
   * No rotation is performed.
   */
  readonly RotNone: number;
  /**
   * A 90 degree (clockwise) rotation is performed.
   */
  readonly Rot90: number;
  /**
   * A 180 degree rotation is performed.
   */
  readonly Rot180: number;
  /**
   * A 270 degree (clockwise) rotation is performed.
   */
  readonly Rot270: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotationorder_dz
 * A class representing a rotation order.
 * @remarks TODO: Add detailed description.
 */
interface DzRotationOrder extends Object
{

  /**
   * The index of the first axis of rotation. ( x = 0, y = 1, z = 2 )
   */
  firstAxis: number

  /**
   * The enumerated representation of the order of rotation; XYZ = 0, XZY, YXZ, YZX, ZXY, ZYX.
   */
  order: number

  /**
   * The index of the second axis of rotation. ( x = 0, y = 1, z = 2 )
   */
  secondAxis: number

  /**
   * The index of the third axis of rotation. ( x = 0, y = 1, z = 2 )
   */
  thirdAxis: number

  /**
   * Sets the order of rotation by the given axes.
   * @param firstAxis - 
   * @param secondAxis - 
   * @param thirdAxis - 
   */
  setOrder (firstAxis: number, secondAxis: number, thirdAxis: number): void;

}

declare var DzRotationOrder:
{
  prototype: DzRotationOrder;

  /**
   * Default Constructor. Creates a new rotation order and sets it to XYZ by default.
   */
  new (): DzRotationOrder;

  /**
   * Copy Constructor.
   * @param order - 
   */
  new (order: DzRotationOrder): DzRotationOrder;

  /**
   * Creates a new rotation order with the given axis order
   * @param firstAxis - 
   * @param secondAxis - 
   * @param thirdAxis - 
   */
  new (firstAxis: number, secondAxis: number, thirdAxis: number): DzRotationOrder;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates a new rotation order with the given enumerated representation.
   * @since 4.6.4.98
   * @param order - 
   */
  new (order: number): DzRotationOrder;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rslshader_dz
 * Custom scriptable class for RenderMan Shader Language (RSL) Shader types.
 * @remarks This class provides the ability to define RSL shaders for the elements that can use them (DzShaderMaterial, DzShaderLight, DzShaderCamera).
 * Optimizations:
 * Two methods in this class that should not be overlooked are setActiveInShadowPass() and setOnlyInShadowPass(), as they can have a significant impact on render times.
 * In the context of Surface shaders, the data members set by these methods are used to identify whether the shader participates during the shadow [map] pass - the pass for each contributing light in the scene that indicates the use of Deep Shadow Maps for shadows. This affords developers a couple of key benifits:
 * One key benifit is the ability to use a single Displacement shader in both the shadow pass as well as the beauty pass. Not only does this alleviate the duplication of code, but by utilizing a Displacement shader for any bump/diplacement operations, rendering times become much faster than performing the same operations in a Surface shader. This is due to the frequency that the shader code is executed. Displacement shaders are evaluated once, at the begining of a pass, and a caching mechanism for the displaced geometry is used as the render progresses. When the same code is placed in a Surface shader, the bump/displacment calculations are performed at every evaluation of the surface.
 * Another key benifit is the ability to use a highly optimized Surface shader during the shadow [map] pass, which can have a significant impact on the time required to generate a shadow map - and thus complete the render.
 * In the context of Light shaders, the data members set by these methods are used to identify whether this shader participates when the DzLight.ShadowType indicates shadowing is used. This affords developers the benifit of being able to use Light shaders that are optimized for either condition.
 * Property Naming:
 * Standard Shader and Materials Presets make an effort to copy as much as possible from one element to the next via DzElement.copyFrom(). In order for this to occur, the properties must match in both name and type. Provided below are the names and types used by DzDefaultMaterial, DzLight, DzDistantLight, DzSpotLight and DzPointLight in the event that you would like use properties that will work with the copyFrom() method.
 * - Default Material:
 * - Default Lights:
 * - Default Camera:
 * - Name
 * - Type
 * - Name
 * - Type
 * - Diffuse Color
 * - DzColorProperty
 * - Negative Bump
 * - DzFloatProperty
 * - Diffuse Strength
 * - DzFloatProperty
 * - Positive Bump
 * - DzFloatProperty
 * - Glossiness
 * - DzFloatProperty
 * - Displacement Strength
 * - DzFloatProperty
 * - Specular Color
 * - DzColorProperty
 * - Minimum Displacement
 * - DzFloatProperty
 * - Specular Strength
 * - DzFloatProperty
 * - Maximum Displacement
 * - DzFloatProperty
 * - Multiply Specular
 * - Through Opacity
 * - DzBoolProperty
 * - Reflection Color
 * - DzColorProperty
 * - Ambient Color
 * - DzColorProperty
 * - Reflection Strength
 * - DzFloatProperty
 * - Ambient Strength
 * - DzFloatProperty
 * - Refraction Color
 * - DzColorProperty
 * - Opacity Strength
 * - DzFloatProperty
 * - Refraction Strength
 * - DzFloatProperty
 * - Bump Strength
 * - DzFloatProperty
 * - Index of Refraction
 * - DzFloatProperty
 * - Name
 * - Type
 * - Color
 * - DzColorProperty
 * - Intensity
 * - DzFloatProperty
 * - Shadow Type
 * - DzEnumProperty
 * - Shadow Bias
 * - DzFloatProperty
 * - Shadow Softness
 * - DzFloatProperty
 * - Illumination
 * - DzEnumProperty
 * - Spread Angle
 * - DzFloatProperty
 * - Name
 * - Type
 * - Focal Length
 * - DzFloatProperty
 * - DOF
 * - DzBoolProperty
 * - Depth of Field
 * - DzFloatProperty
 * - Aperature
 * - DzFloatProperty
 * Samples:
 * rispec_constant_shader_definition - The definition file for the standard RenderMan Constant Surface Shader, that builds the properties displayed to users in the Surfaces tab (Advanced sub tab).
 * ./samples/shader swapping/
 * @seealso + rispec_constant_shader_preset - A [heavily commented] Shader Preset that applies a material definition script (below) for the standard RenderMan Constant Surface Shader.
 * + rispec_constant_material_definition - The definition file for the above, that builds the shader objects used by the render for the current material.
 * + rispec_constant_surface_shader - The RSL source for the standard RenderMan Constant Surface Shader.
 * + s_standard_render_time_script - The render-time script that sets various RiAttributes dependant on the values of properties provided to the user.
 * Recommended Reading:
 * The RenderMan Interface Specification (RISpec) - Pixar Animation Studios
 * Advanced RenderMan: Creating CGI for Motion Pictures - (ISBN:1558606181) - Tony Apodaca and Larry Gritz 1999
 * RenderMan Companion: A Programmer's Guide to Realistic Computer Graphics - (ISBN:0201508680) - Steve Upstill 1989
 * Texturing & Modeling: A Procedural Approach (3rd Edition) - (ISBN:1558608486) - David S. Ebert, F. Kenton Musgrave, Darwyn Peachey, Ken Perlin, and Steve Worley 1998
 * 3Delight Documentation - The 3Delight Team
 */
interface DzRSLShader extends DzBase, DzRefCountedItem
{

  /**
   * Enumerated values for RSL shader types.
   * @attention The enumerated values provided are a mechanism designed to allow the appropriate RI call to be made. These values do not guarantee support by the active renderer. It is strongly recommended that you become familiar with the target renderer and its capabilities; i.e. 3Delight does not support Exterior volumes, and some renderers may not support Area Light sources or Imagers.
   * @seealso setShaderType
   */
  /**
   * Null
   */
  readonly None: number;

  /**
   * Uses the RiSurfaceV API call when passed to the renderer.
   */
  readonly Surface: number;

  /**
   * Uses the RiLightSourceV API call when passed to the renderer.
   */
  readonly Light: number;

  /**
   * Uses the RiAreaLightSourceV API call when passed to the renderer.
   */
  readonly LightArea: number;

  /**
   * Uses the RiAtmosphereV API call when passed to the renderer.
   */
  readonly VolumeAtmosphere: number;

  /**
   * Uses the RiInteriorV API call when passed to the renderer.
   */
  readonly VolumeInterior: number;

  /**
   * Uses the RiExteriorV API call when passed to the renderer.
   */
  readonly VolumeExterior: number;

  /**
   * Uses the RiDisplacementV API call when passed to the renderer.
   */
  readonly Displacement: number;

  /**
   * Uses the RiImagerV API call when passed to the renderer.
   */
  readonly Imager: number;

  /**
   * Adds a mappable numeric property to this shader object. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
   * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
   * @param prop - The property of which the value is passed to the shader for the param argument.
   * @param token - The name of the argument to the shader that the value of prop is passed to.
   * @param mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
   */
  addMappableProperty (prop: DzNumericProperty, token: string, mapToken: string): boolean;

  /**
   * Adds a mappable numeric property to this shader object (intended for situations where the property itself is passed as an attribute via the render-time script, or simply for display purposes, but the associated map should be passed as an arg to the shader). If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
   * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
   * @param prop - The property of which the map path is passed to the shader for the mapParam argument.
   * @param mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
   */
  addMapProperty (prop: DzNumericProperty, mapToken: string): boolean;

  /**
   * Adds a standard property to the list of properties used by this shader object, and adds the property to this shader object's owner if it does not already exist. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. DzImageProperty instances are passed as string type variables (the value of which is the absolute path of the image file).
   * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
   * @param prop - The property of which the value is passed to the shader for the param argument.
   * @param token - The name of the argument to the shader that the value of prop is passed to.
   */
  addShaderProperty (prop: DzProperty, token: string): boolean;

  /**
   * @returns The name of the argument to the shader that the map value of prop is passed to, if prop is mappable. Returns an empty string if prop is not found, or not mappable.
   * @param prop - 
   */
  findMapTokenByProperty (prop: DzNumericProperty): string;

  /**
   * @returns The property named name if name is found, otherwise NULL.
   * @param name - 
   */
  findProperty (name: string): DzProperty;

  /**
   * @returns The property that passes a value to the shader via token, if token is found. Undefined by default.
   * @param token - 
   */
  findPropertyByToken (token: string): DzProperty;

  /**
   * @returns The name of the argument to the shader that the value of prop is passed to. Returns an empty string if prop is not found.
   * @param prop - 
   */
  findTokenByProperty (prop: DzProperty): string;

  /**
   * @returns The path to the definition script for this shader object.
   */
  getDefinitionFile (): string;

  /**
   * @returns The number of properties currently used by this shader object.
   */
  getNumProperties (): number;

  /**
   * @returns The owner (DzShaderMaterial, DzShaderLight, DzShaderCamera) of this object.
   */
  getOwner (): DzElement;

  /**
   * Get a property from this shader's property list.
   * @returns If which is within range, the property at the given index, otherwise NULL.
   * @since 4.9.0.46
   * @param which - Index of the property to return.
   */
  getProperty (which: number): DzProperty;

  /**
   * @returns A list of all the properties on this shader.
   * @since 4.9.0.46
   */
  getPropertyList (): Array<unknown>;

  /**
   * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that is executed at render-time.
   */
  getRenderTimeFile (): string;

  /**
   * @returns The path to the RSL shader (sans-extension) for this shader object.
   */
  getShaderFile (): string;

  /**
   * @returns The RSL shader type for this object.
   */
  getShaderType (): number;

  /**
   * @returns true if this shader participates in the bake pass, otherwise false.
   */
  isActiveInBakePass (): boolean;

  /**
   * @returns true if this shader participates in the beauty pass, otherwise false.
   */
  isActiveInBeautyPass (): boolean;

  /**
   * @returns true if this shader participates in the shadow pass, otherwise false.
   */
  isActiveInShadowPass (): boolean;

  /**
   * @returns true if this shader ONLY participates in the shadow pass, otherwise false. Same as isActiveInShadowPass() && !isActiveInBeautyPass().
   */
  isOnlyInShadowPass (): boolean;

  /**
   * Removes the given property, if it can be found.
   * @returns true on success, otherwise false.
   * @param prop - The property to remove from the shader.
   */
  removeProperty (prop: DzProperty): boolean;

  /**
   * Removes the property named name, if it can be found.
   * @returns true on success, otherwise false.
   * @param name - The name of the property to remove from the shader.
   */
  removeProperty (name: string): boolean;

  /**
   * Sets whether this shader object participates in the baking pass; false by default. If this is set to true, the shader must have a string input variable named “BakeFileName” and another string input variable named “BakeType”.
   * “BakeFileName” will not be set unless it is a baking pass. When set, it will contain the name of the file to bake into.
   * “BakeType” will be set to one of three values: “Illumination”, “Shader”, or “IllumShader”. They indicate as follows:
   * Illumination
   * Bake only the illumination seen by the surface.
   * Shader
   * Bake the shader without any illuminations. (Assume all points are lit uniformly at 100%).
   * IllumShader
   * Bake the shader and illumination contributions.
   * Note:
   * Only one of the RSL shaders on a material should have this set to true.
   * @param yesNo - 
   */
  setActiveInBakePass (yesNo: boolean): void;

  /**
   * Sets whether this shader object participates in the beauty/final pass; true by default.
   * @seealso setOnlyInShadowPass()
   * @param yesNo - 
   */
  setActiveInBeautyPass (yesNo: boolean): void;

  /**
   * Sets whether this shader object participates in the shadow pass; false by default.
   * @seealso setOnlyInShadowPass()
   * @param yesNo - 
   */
  setActiveInShadowPass (yesNo: boolean): void;

  /**
   * Sets the relative path of the (DAZ Script) file that builds this shader object's property list.
   * @returns true if definitionFile is valid, otherwise false.
   * @attention definitionFile is executed the moment the call to this method is made. A global variable named Shader - referring to the current DzRSLShader being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
   * @seealso rispec_constant_material_definition
   * @param definitionFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that creates this shader object's property list.
   * @param [doOverride=false] - Whether or not to override the setting of the definition file if it has already been set.
   * @param [runScript=true] - Whether or not to run the definition script upon setting it.
   */
  setDefinitionFile (definitionFile: string, doOverride?: boolean, runScript?: boolean): boolean;

  /**
   * Sets whether this shader object ONLY participates in the shadow pass; false by default. This is the same as calling setActiveInBeautyPass( false ) and setActiveInShadowPass( true ).
   * @seealso setActiveInShadowPass()
   * setActiveInBeautyPass()
   * @param yesNo - 
   */
  setOnlyInShadowPass (yesNo: boolean): void;

  /**
   * Sets the relative path of the (DAZ Script) file that will be executed at render-time. This script can set attributes as well as shader parameters for the element, and implement custom logic for special effects.
   * @returns true if renderTimeFile is valid, otherwise false.
   * @attention When renderTimeFile is executed, a global variable named Shader - referring to the current DzRSLShader being rendered - exists for the duration of renderTimeFile. Referencing this variable from outside renderTimeFile will result in an error. See the Render Time Functions for a list of special functions only available to this script.
   * @seealso rispec_constant_material_definition
   * @param renderTimeFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that sets any attributes or shader parameters at render time.
   */
  setRenderTimeFile (renderTimeFile: string): boolean;

  /**
   * Sets the shader file that this shader object calls when rendered.
   * @returns true if shaderFile plus the shader extension for the active renderer exists, otherwise false.
   * @attention Shaders built for use with DAZ Studio do not require any arguments in the main function. Surfaces, for instance, make use of the Standard Shading Attributes “Color” and “Opacity” and are set via the “Diffuse Color” and “Opacity Strength” properties, respectively. These properties are created by the DzShaderMaterial constructor. The values of these attributes are accessible in the shader via the Predefined Surface Shader Variables “Cs” and “Os”, respectively.
   * For Volume shaders the render option “standardatmosphere” is set to 0. See 3Delight documentations for more information on this option and its effect on volume shaders.
   * @seealso rispec_constant_material_definition, rispec_constant_surface_shader
   * @param shaderFile - The relative path, from DzApp.getShadersPath(), to the shader that this shader object calls when rendered. The filename is expected to be sans-extension; e.g., “dzplastic”, not “dzplastic.sl” or “dzplastic.sdl”.
   */
  setShaderFile (shaderFile: string): boolean;

  /**
   * Sets the type for this shader object.
   * @example
   * var oShadObj = new DzRSLShader;
   * oShadObj.setShaderType( DzRSLShader.Surface );
   * @param shaderType - The type of shader to set.
   */
  setShaderType (shaderType: number): boolean;

  /**
   * @returns The color as a DzVec3 gamma corrected if gamma correction is on and in the range of 0-1 for r, g, b. Alpha is ignored.
   * @param color - The color to gamma correct.
   */
  gammaCorrectColor (color: Color): DzVec3;

  /**
   * Adds a RiAttribute call with a float value.
   * @example
   * Shader.setFloatAttrib( "user", "float myFloat", 1.0 );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param val - The float value to set.
   */
  setFloatAttrib (attrib: string, token: string, val: number): void;

  /**
   * Adds a RiAttribute call with an integer value.
   * @example
   * Shader.setIntegerAttrib( "user", "integer myInteger", 1 );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param val - The integer value to set.
   */
  setIntegerAttrib (attrib: string, token: string, val: number): void;

  /**
   * Adds a RiAttribute call with a color value.
   * @example
   * var color = new Color( 210, 210, 210 );
   * Shader.setColorAttrib( "user", "color myColor", color.red, color.green, color.blue );
   * //Shader.setColorAttrib( "user", "color myColor", color.red, color.green, color.blue, false );
   * @attention If isFloat is false (the default), the values of r, g and b are assumed to be in the [0,255] range and will be converted to the [0,1] range prior to being passed on to the renderer. This allows for the values of the individual components to be driven beyond their normal range in cases where such an ability is needed, as with some subsurface scattering techniques.
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param r - The value for the red color component.
   * @param g - The value for the green color component.
   * @param b - The value for the blue color component.
   * @param [isFloat=false] - A flag for indicating whether or not the values passed to r, g and b are floating point numbers (in the 0-1 range).
   */
  setColorAttrib (attrib: string, token: string, r: number, g: number, b: number, isFloat?: boolean): void;

  /**
   * Adds a RiAttribute call with a string value.
   * @example
   * Shader.setStringAttrib( "user", "string myString", "foo.bar" );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param val - The string value to set.
   */
  setStringAttrib (attrib: string, token: string, val: string): void;

  /**
   * Adds a RiAttribute call with a point value.
   * @example
   * Shader.setPointAttrib( "user", "point myPoint", new DzVec3( 1, 1, 1 ) );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param vec - The point value (x, y, z) to set.
   */
  setPointAttrib (attrib: string, token: string, vec: DzVec3): void;

  /**
   * Adds a RiAttribute call with a vector value.
   * @example
   * Shader.setVectorAttrib( "user", "vector myVector", new DzVec3( 1, 1, 1 ) );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param vec - The vector value (x, y, z) to set.
   */
  setVectorAttrib (attrib: string, token: string, vec: DzVec3): void;

  /**
   * Adds a RiAttribute call with a normal value.
   * @example
   * Shader.setNormalAttrib( "user", "normal myNormal", new DzVec3( 1, 1, 1 ) );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param vec - The normal value (x, y, z) to set.
   */
  setNormalAttrib (attrib: string, token: string, vec: DzVec3): void;

  /**
   * Adds a RiAttribute call with a matrix value.
   * @example
   * Shader.setMatrixAttrib( "user", "matrix myMatrix", new DzMatrix4() );
   * @param attrib - The name of the attribute to set.
   * @param token - The name of the token to set.
   * @param mtx - The matrix value to set.
   */
  setMatrixAttrib (attrib: string, token: string, mtx: DzMatrix4): void;

  /**
   * Sets the value of a float token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param val - The float value to set.
   */
  setFloatToken (token: string, val: number): void;

  /**
   * Sets the value of an integer token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param val - The integer value to set.
   */
  setIntegerToken (token: string, val: number): void;

  /**
   * Sets the value of a color token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param val - The color value to set.
   */
  setColorToken (token: string, val: Color): void;

  /**
   * Sets the value of a string token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param val - The string value to set.
   */
  setStringToken (token: string, val: string): void;

  /**
   * Sets the value of a point token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param vec - The point value (x, y, z) to set.
   */
  setPointToken (token: string, vec: DzVec3): void;

  /**
   * Sets the value of a vector token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param vec - The vector value (x, y, z) to set.
   */
  setVectorToken (token: string, vec: DzVec3): void;

  /**
   * Sets the value of a normal token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param vec - The normal value (x, y, z) to set.
   */
  setNormalToken (token: string, vec: DzVec3): void;

  /**
   * Sets the value of a matrix token in the list of tokens passed to the shader.
   * @param token - The name of the token to set.
   * @param mtx - The matrix value to set.
   */
  setMatrixToken (token: string, mtx: DzMatrix4): void;

  /**
   * Convert six images representing six viewing directions into an environment map in the format required by the renderer.
   * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
   * var oRenderMgr = App.getRenderMgr();
   * var oOptions = oRenderMgr.getRenderOptions();
   * ...
   * oOptions.Gaussian;
   * ...
   * @param px - The path of the image as viewed from the positive x direction.
   * @param nx - The path of the image as viewed from the negative x direction.
   * @param py - The path of the image as viewed from the positive y direction.
   * @param ny - The path of the image as viewed from the negative y direction.
   * @param pz - The path of the image as viewed from the positive z direction.
   * @param nz - The path of the image as viewed from the negative x direction.
   * @param tex - The path of the resultant image.
   * @param fov - The full horizontal field of view used to generate the input images.
   * @param filter - The pre-defined filter to use.
   * @param swidth - The filter width multiplier for the s direction.
   * @param twidth - The filter width multiplier for the t direction.
   * @param tokens - A list of additional String] tokens to set.
   * @param params - A list of the corresponding basic type to set for each token.
   */
  makeCubeFaceEnvironment (px: string, nx: string, py: string, ny: string, pz: string, nz: string, tex: string, fov: number, filter: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Convert an image representing a latitude-longitude map into an environment map in the format required by the renderer.
   * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
   * 	var oRenderMgr = App.getRenderMgr();
   * 	var oOptions = oRenderMgr.getRenderOptions();
   * 	...
   * 	oOptions.Gaussian;
   * 	...
   * @param pic - The path of the source image.
   * @param tex - The path of the resultant image.
   * @param filter - The pre-defined filter to use.
   * @param swidth - The filter width multiplier for the s direction.
   * @param twidth - The filter width multiplier for the t direction.
   * @param tokens - A list of additional String] tokens to set.
   * @param params - A list of the corresponding basic type to set for each token.
   */
  makeLatLongEnvironment (pic: string, tex: string, filter: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Convert a depth image into a shadow map in the format required by the renderer.
   * @param pic - The path of the source image.
   * @param tex - The path of the resultant image.
   * @param tokens - A list of additional String] tokens to set.
   * @param params - A list of the corresponding basic type to set for each token.
   */
  makeShadow (pic: string, tex: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Convert an image map into a map in the format required by the renderer.
   * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
   * var oRenderMgr = App.getRenderMgr();
   * var oOptions = oRenderMgr.getRenderOptions();
   * ...
   * oOptions.Gaussian;
   * ...
   * @param pic - The path of the source image.
   * @param tex - The path of the resultant image.
   * @param swrap - The wrapping behavior of s coordinate.
   * @param twrap - The wrapping behavior of t coordinate.
   * @param filter - The pre-defined filter to use.
   * @param swidth - The filter width multiplier for the s direction.
   * @param twidth - The filter width multiplier for the t direction.
   * @param tokens - A list of additional String] tokens to set.
   * @param params - A list of the corresponding basic type to set for each token.
   */
  makeTexture (pic: string, tex: string, swrap: string, twrap: string, filter: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Convert a bump map into a map in the format required by the renderer.
   * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
   * var oRenderMgr = App.getRenderMgr();
   * var oOptions = oRenderMgr.getRenderOptions();
   * ...
   * oOptions.Gaussian;
   * ...
   * @param pic - The path of the source image.
   * @param tex - The path of the resultant image.
   * @param swrap - The wrapping behavior of s coordinate.
   * @param twrap - The wrapping behavior of t coordinate.
   * @param filter - The pre-defined filter to use.
   * @param swidth - The filter width multiplier for the s direction.
   * @param twidth - The filter width multiplier for the t direction.
   * @param tokens - A list of additional String] tokens to set.
   * @param params - A list of the corresponding basic type to set for each token.
   */
  makeBump (pic: string, tex: string, swrap: string, twrap: string, filter: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Adds a RiSpec RiTransformBegin() call.
   * @attention Each call to this method must be matched with a call to addTransformEnd() or addScheduledTransformEnd().
   * @since 4.10.0.108
   */
  addTransformBegin (): void;

  /**
   * Adds a RiSpec RiTransformEnd() call.
   * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
   * @since 4.10.0.108
   */
  addTransformEnd (): void;

  /**
   * Adds a RiSpec RiTransformEnd() call after the owner.
   * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
   * var oOwner = Shader.getOwner();
   * if( oOwner.inherits("DzShaderLight") && !oOwner.usesLocalShaderSpace() ){
   * 	Shader.addTransformBegin();
   * 	Shader.addIdentity();
   *  
   * 	var mtxTransform = new DzMatrix4( 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1 );
   * 	Shader.addTransform( mtxTransform );
   *  
   * 	var vecPos = !oOwner.isDirectional() ? oOwner.getWSPos() : new DzVec3( 0, 0, -200 );
   * 	var quatRot = oOwner.getWSRot();
   * 	var vecAxis = quatRot.getAxisOfRotation();
   * 	var nRadiansToDegrees = 180 / Math.PI;
   * 	var nAngle = quatRot.getAngleOfRotation() * nRadiansToDegrees;
   *  
   * 	Shader.addTranslate( vecPos.x, vecPos.y, vecPos.z );
   * 	Shader.addRotate( -nAngle, vecAxis.x, vecAxis.y, vecAxis.z );
   * 	Shader.addCoordinateSystem( "3DLEnvSpace" );
   * 	Shader.addScheduledTransformEnd();
   * }
   * @since 4.10.0.108
   */
  addScheduledTransformEnd (): void;

  /**
   * Adds a RiSpec RiConcatTransform() call.
   * @since 4.10.0.108
   * @param transform - The transform to concatenate.
   */
  addConcatTransform (transform: DzMatrix4): void;

  /**
   * Adds a RiSpec RiCoordinateSystem() call.
   * @since 4.10.0.108
   * @param space - The name for the coordinate system.
   */
  addCoordinateSystem (space: string): void;

  /**
   * Adds a RiSpec RiCoordSysTransform() call.
   * @since 4.10.0.108
   * @param space - The name for the coordinate system.
   */
  addCoordSysTransform (space: string): void;

  /**
   * Adds a RiSpec RiIdentity() call.
   * @since 4.10.0.108
   */
  addIdentity (): void;

  /**
   * Adds a RiSpec RiRotate() call.
   * @since 4.10.0.108
   * @param angle - TODO
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  addRotate (angle: number, dx: number, dy: number, dz: number): void;

  /**
   * Adds a RiSpec RiScale() call.
   * @since 4.10.0.108
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  addScale (dx: number, dy: number, dz: number): void;

  /**
   * Adds a RiSpec DDiScopedCoordinateSystem() call.
   * @since 4.10.0.108
   * @param space - The name for the coordinate system.
   */
  addScopedCoordinateSystem (space: string): void;

  /**
   * Adds a RiSpec RiSkew() call.
   * @since 4.10.0.108
   * @param angle - TODO
   * @param dx1 - TODO
   * @param dy1 - TODO
   * @param dz1 - TODO
   * @param dx2 - TODO
   * @param dy2 - TODO
   * @param dz2 - TODO
   */
  addSkew (angle: number, dx1: number, dy1: number, dz1: number, dx2: number, dy2: number, dz2: number): void;

  /**
   * Adds a RiSpec RiTransform() call.
   * @since 4.10.0.108
   * @param transform - The transform to set.
   */
  addTransform (transform: DzMatrix4): void;

  /**
   * Adds a RiSpec RiTranslate() call.
   * @since 4.10.0.108
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  addTranslate (dx: number, dy: number, dz: number): void;

  propertyAdded: Signal<{
    /**
     * Transmitted when a property is added to this element.
     * @param prop - The property added.
     */
  (prop: DzProperty): void;
  }>;
  propertyListChanged: Signal<{
    /**
     * Transmitted when a property is added to or removed from this element.
     */
  (): void;
  }>;
  propertyRemoved: Signal<{
    /**
     * Transmitted when a property is removed from this element.
     * @param prop - The property removed.
     */
  (prop: DzProperty): void;
  }>;
}

declare var DzRSLShader:
{
  prototype: DzRSLShader;

  /**
   * Default Constructor.
   * @attention Caution should be taken when instantiating this class. Until addShader(…) is called by DzShaderMaterial, DzShaderLight or DzShaderCamera, the object has no owner - which if you are not careful can lead to a memory leak. It is strongly suggested that the statement in the script immediately following that which instantiates this class add the object to the intended owner.
   */
  new (): DzRSLShader;

  /**
   * Enumerated values for RSL shader types.
   * @attention The enumerated values provided are a mechanism designed to allow the appropriate RI call to be made. These values do not guarantee support by the active renderer. It is strongly recommended that you become familiar with the target renderer and its capabilities; i.e. 3Delight does not support Exterior volumes, and some renderers may not support Area Light sources or Imagers.
   * @seealso setShaderType
   */
  /**
   * Null
   */
  readonly None: number;
  /**
   * Uses the RiSurfaceV API call when passed to the renderer.
   */
  readonly Surface: number;
  /**
   * Uses the RiLightSourceV API call when passed to the renderer.
   */
  readonly Light: number;
  /**
   * Uses the RiAreaLightSourceV API call when passed to the renderer.
   */
  readonly LightArea: number;
  /**
   * Uses the RiAtmosphereV API call when passed to the renderer.
   */
  readonly VolumeAtmosphere: number;
  /**
   * Uses the RiInteriorV API call when passed to the renderer.
   */
  readonly VolumeInterior: number;
  /**
   * Uses the RiExteriorV API call when passed to the renderer.
   */
  readonly VolumeExterior: number;
  /**
   * Uses the RiDisplacementV API call when passed to the renderer.
   */
  readonly Displacement: number;
  /**
   * Uses the RiImagerV API call when passed to the renderer.
   */
  readonly Imager: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefilter_dz
 * Base class for all classes that save DAZ Script-based scene settings.
 * @remarks Save filter classes save out a subset of scene settings in a DAZ Script format such as poses, light sets, camera sets, etc.
 */
interface DzSaveFilter extends DzFileIO
{

  /**
   * Save mode for saving the script to file. Values correspond with DzScript.ScriptFileMode.
   */
  /**
   * If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  readonly UseExtension: number;

  /**
   * Plain text file - no Unicode support
   */
  readonly TextScriptFile: number;

  /**
   * Binary DAZ file format - supports Unicode characters
   */
  readonly DAZScriptFile: number;

  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  readonly EncDAZScriptFile: number;

  /**
   * @returns The name of the filter.
   */
  getDescription (): string;

  /**
   * TODO: Add description.
   */
  getLoadSavePath (): string;

  /**
   * TODO: Add description.
   * @param path - 
   */
  setLoadSavePath (path: string): void;

  /**
   * Saves to a file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @example
   * Export a DAZ Script based Pose Preset.
   * var oSaveFilterMgr = App.getSaveFilterMgr();
   * var nSaveFilter = oSaveFilterMgr.findFilter( "DzPoseFilter" );
   * var oSaveFilter = oSaveFilterMgr.getFilter( nSaveFilter );
   * if( oSaveFilter ){
   * 	oSaveFilter.writeFile( "c:/test", oSaveFilter.TextScriptFile );
   * }
   * @param filename - Name of the file to export to.
   * @param mode - The type of file to save.
   */
  writeFile (filename: string, mode: number): DzError;

  /**
   * Saves to a file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @example
   * Export a DAZ Script based Pose Preset, without displaying the Save Options dialog.
   * var oSaveFilterMgr = App.getSaveFilterMgr();
   * var nSaveFilter = oSaveFilterMgr.findFilter( "DzPoseFilter" );
   * var oSaveFilter = oSaveFilterMgr.getFilter( nSaveFilter );
   * if( oSaveFilter ){
   * 	var oSettings = new DzFileIOSettings();
   * 	//oSaveFilter.getDefaultOptions( oSettings );
   * 	oSaveFilter.getOptions( oSettings, false, "c:/test" );
   * 	oSaveFilter.writeFile( "c:/test", oSaveFilter.TextScriptFile, oSettings );
   * }
   * @param filename - Name of the file to export to.
   * @param mode - The type of file to save.
   * @param options - The options for the save filter.
   */
  writeFile (filename: string, mode: number, options: DzFileIOSettings): DzError;

}

declare namespace DzSaveFilter
{

  /**
   * Save mode for saving the script to file. Values correspond with DzScript.ScriptFileMode.
   */
  /**
   * If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  export const UseExtension: number;
  /**
   * Plain text file - no Unicode support
   */
  export const TextScriptFile: number;
  /**
   * Binary DAZ file format - supports Unicode characters
   */
  export const DAZScriptFile: number;
  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  export const EncDAZScriptFile: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefiltermgr_dz
 * Manager of all scene setting save filter classes.
 * @remarks There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp::getSaveFilterMgr().
 * @example
 * Getting the class names of all DzSaveFilter objects
 * var oSaveFilterMgr = App.getSaveFilterMgr();
 * var nSaveFilters = oSaveFilterMgr.getNumFilters();
 * var oSaveFilter = undefined;
 * for( var i = 0; i < nSaveFilters; i +=1 ){
 * 	oSaveFilter = oSaveFilterMgr.getFilter( i );
 * 	print( oSaveFilter.className() );
 * }
 */
interface DzSaveFilterMgr extends QObject
{

  /**
   * Save mode for saving the script to file. Values correspond with DzScript.ScriptFileMode.
   */
  /**
   * If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  readonly UseExtension: number;

  /**
   * Plain text file - no Unicode support
   */
  readonly TextScriptFile: number;

  /**
   * Binary DAZ file format - supports Unicode characters
   */
  readonly DAZScriptFile: number;

  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  readonly EncDAZScriptFile: number;

  /**
   * @returns The index of the save filter with the given class name.
   * @param className - The class name of the save filter to find.
   */
  findFilter (className: string): number;

  /**
   * @returns A new instance of the i'th exporter in the list.
   * @param i - The index of the save filter to get.
   */
  getFilter (i: number): DzSaveFilter;

  /**
   * @returns The name of the i'th filter.
   * @param i - The index of the save filter to get the name of.
   */
  getFilterName (i: number): string;

  /**
   * @returns The number of save filters currently supported.
   */
  getNumFilters (): number;

  /**
   * Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
   * @returns DZ_NO_ERROR if the file export was successful.
   * @param filterIndex - The index of the save filter class to use.
   * @param [dir=“”] - The directory to start the file dialog in, if empty, the current load/save directory is used.
   */
  doSave (filterIndex: number, dir?: string): DzError;

  /**
   * @returns Last directory that files were saved to.
   */
  getSavePath (): string;

  /**
   * Save the scene contents to a file with the given save filter.
   * @returns DZ_NO_ERROR if the file export was successfull.
   * @param mode - The file mode for saving the script
   * @param fileName - The name of the file to export to.
   * @param [filterName=“”] - Optional argument. Class name of the filter to use, or no argument to show a choose filter dialog.
   */
  writeFile (mode: number, fileName: string, filterName?: string): DzError;

}

declare namespace DzSaveFilterMgr
{

  /**
   * Save mode for saving the script to file. Values correspond with DzScript.ScriptFileMode.
   */
  /**
   * If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  export const UseExtension: number;
  /**
   * Plain text file - no Unicode support
   */
  export const TextScriptFile: number;
  /**
   * Binary DAZ file format - supports Unicode characters
   */
  export const DAZScriptFile: number;
  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  export const EncDAZScriptFile: number;

  /**
   * @returns The index of the save filter with the given class name.
   * @param className - The class name of the save filter to find.
   */
  export function findFilter (className: string): number;

  /**
   * @returns A new instance of the i'th exporter in the list.
   * @param i - The index of the save filter to get.
   */
  export function getFilter (i: number): DzSaveFilter;

  /**
   * @returns The name of the i'th filter.
   * @param i - The index of the save filter to get the name of.
   */
  export function getFilterName (i: number): string;

  /**
   * @returns The number of save filters currently supported.
   */
  export function getNumFilters (): number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scalemanip_dz
 * A manipulator that scales an image layer horizontally and/or vertically.
 * @remarks TODO: Add detailed description.
 */
interface DzScaleManip extends DzImageManip
{

  /**
   * Holds the scaling of the image across its width.
   */
  heightScale: number

  /**
   * TODO: Add description.
   */
  widthScale: number

  /**
   * Sets the scale for the image.
   * @param w - The scaling of the image across its width. 1.0 is equivalent to 100%.
   * @param h - The scaling of the image across its height. 1.0 is equivalent to 100%.
   */
  setScale (w: number, h: number): void;

}

declare var DzScaleManip:
{
  prototype: DzScaleManip;

  /**
   * Holds the scaling of the image across its height.
   * Default Constructor
   * @param [w=1.0] - The scaling of the image across its width. 1.0 is equivalent to 100%.
   * @param [h=1.0] - The scaling of the image across its height. 1.0 is equivalent to 100%.
   */
  new (w?: number, h?: number): DzScaleManip;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scene_dz
 * The main scene container.
 * @remarks There is only one of these objects in the application. It is the communication hub between the core code and the interface, so it tracks all nodes, skeletons, lights, cameras, etc. that become part of the scene. This object is directly available using the Global::Scene variable.
 */
interface DzScene extends DzBase
{

  /**
   * Enumerated open methods.
   */
  /**
   * DefaultMethod - If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
   */
  readonly DefaultMethod: number;

  /**
   * OpenNew - Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
   */
  readonly OpenNew: number;

  /**
   * MergeFile - Merges the file with any pre-existing elements in the scene.
   */
  readonly MergeFile: number;

  /**
   * Enumerated flags for determining what to include when calculating the scene bounding box.
   */
  /**
   * Only visible items with geometry that cast shadows will be included.
   */
  readonly DzObjectsOnly: number;

  /**
   * Include lights in the bounding box.
   */
  readonly DzIncludeLightsFlag: number;

  /**
   * Include cameras in the bounding box.
   */
  readonly DzIncludeCamerasFlag: number;

  /**
   * Include items that do not cast shadows in the bounding box.
   */
  readonly DzIncludeNonShadowersFlag: number;

  /**
   * Include items that are not visible in the bounding box.
   */
  readonly DzIncludeNonVisibleFlag: number;

  /**
   * Include all nodes in the bounding box.
   */
  readonly DzIncludeAllFlag: number;

  /**
   * The asset id for the current scene.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The asset URI for the current scene. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  /**
   * @returns label with the “(#)” suffix removed (if any), otherwise label.
   * @param label - The string to remove the “(#)” suffix from.
   */
  stripLabelNumber (label: string): string;

  /**
   * Adds a scene data item to the scene.
   * @returns DZ_NO_ERROR on success, or an error code if it failed.
   * @param item - The data item to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
   */
  addDataItem (item: DzSceneData): DzError;

  /**
   * Adds a node to the scene if it is not already in the scene.
   * @param node - The node to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
   */
  addNode (node: DzNode): boolean;

  /**
   * Adds a world-space modifier to the scene's modifier stack.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param modifier - The world-space modifier to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
   * @param [index=-1] - The location in the list that where the modifier will be inserted. If index is less than 0, the modifier is appended to the end of the stack.
   */
  addWSModifier (modifier: wsmodifier_dz, index?: number): DzError;

  /**
   * Starts a time-editing operation. All changes to scene time, play range, and animation range that occur between this call and a call to finishTimeEdit() will be wrapped into a single undo item.
   * Every call to beginTimeEdit() should be matched with a call to finishTimeEdit().
   */
  beginTimeEdit (): void;

  /**
   * Resets the scene to its initial, clean state. All data is deleted and the undo stack is cleared.
   */
  clear (): void;

  /**
   * Attempts to find a camera with the given name in the scene.
   * @returns The first camera in the scene with the given name (if any), otherwise NULL.
   * @param name - The name of the camera to find.
   */
  findCamera (name: string): DzCamera;

  /**
   * Attempts to find a camera with the given label in the scene.
   * @returns The first camera in the scene with the given label (if any), otherwise NULL.
   * @param label - The label of the camera to find.
   */
  findCameraByLabel (label: string): DzCamera;

  /**
   * @returns The scene data item with the given name (if any), otherwise NULL.
   * @param name - 
   */
  findDataItem (name: string): DzSceneData;

  /**
   * Attempts to find a light with the given name in the scene.
   * @returns The first light in the scene with the given name (if any), otherwise NULL.
   * @param name - The name of the light to find.
   */
  findLight (name: string): DzLight;

  /**
   * Attempts to find a light with the given label in the scene.
   * @returns The first light in the scene with the given label (if any), otherwise NULL.
   * @param label - The label of the light to find.
   */
  findLightByLabel (label: string): DzLight;

  /**
   * @returns The material with the matching element id (if any), otherwise NULL.
   * @seealso DzElement
   * @param id - The number used to uniquely identify the material in the scene.
   */
  findMaterialByElementID (id: number): DzMaterial;

  /**
   * @returns The modifier with the matching element id (if any), otherwise NULL.
   * @seealso DzElement
   * @param id - The number used to uniquely identify the modifier in the scene.
   */
  findModifierByElementID (id: number): DzModifier;

  /**
   * Attempts to find a node with the given name in the scene.
   * @returns The first node in the scene with the given name (if any), otherwise NULL.
   * @param name - The name of the node to find.
   */
  findNode (name: string): DzNode;

  /**
   * @returns The node with the matching element id (if any), otherwise NULL.
   * @seealso DzElement
   * @param id - The number used to uniquely identify the node in the scene.
   */
  findNodeByElementID (id: number): DzNode;

  /**
   * Attempts to find a node with the given label in the scene.
   * @returns The first node in the scene with the given label (if any), otherwise NULL.
   * @param label - The label of the node to find.
   */
  findNodeByLabel (label: string): DzNode;

  /**
   * @returns The index of the node in the list, or -1 if not found.
   * @param node - The node to search for in the nodes list.
   */
  findNodeIndex (node: DzNode): number;

  /**
   * @returns The object with the matching element id (if any), otherwise NULL.
   * @seealso DzElement
   * @param id - The number used to uniquely identify the object in the scene.
   */
  findObjectByElementID (id: number): DzObject;

  /**
   * @returns The shape with the matching element id (if any), otherwise NULL.
   * @seealso DzElement
   * @param id - The number used to uniquely identify the shape in the scene.
   */
  findShapeByElementID (id: number): shape_dz;

  /**
   * Attempts to find a skeleton with the given name in the scene.
   * @returns The first skeleton in the scene with the given name (if any), otherwise NULL.
   * @param name - The name of the skeleton to find.
   */
  findSkeleton (name: string): DzSkeleton;

  /**
   * Attempts to find a skeleton with the given label in the scene.
   * @returns The first skeleton in the scene with the given label, otherwise NULL.
   * @param label - The label of the skeleton to find.
   */
  findSkeletonByLabel (label: string): DzSkeleton;

  /**
   * @returns The index of the skeleton in the list, or -1 if not found.
   * @param skelton - The skeleton to search for in the nodes list.
   */
  findSkeletonIndex (skelton: DzSkeleton): number;

  /**
   * Ends a time editing operation started with a call to beginTimeEdit().
   */
  finishTimeEdit (): void;

  /**
   * @returns The current animation range.
   * @seealso setAnimRange()
   */
  getAnimRange (): DzTimeRange;

  /**
   * @returns The current asset load path of this scene.
   */
  getAssetLoadPath (): string;

  /**
   * @returns An editable copy of the current audio clip for the scene. This will be NULL if there is no audio for the scene.
   * @seealso setAudio()
   */
  getAudio (): DzAudioClip;

  /**
   * @returns The frame number on which the audio should start playing.
   */
  getAudioStartFrame (): number;

  /**
   * @returns The author of the current scene (if any), otherwise NULL.
   * @since 4.8.1.19
   */
  getAuthor (): DzAuthor;

  /**
   * @returns The current backdrop object for the scene.
   * @seealso setBackdrop()
   */
  getBackdrop (): DzBackdrop;

  /**
   * Calculate the bounding box for the current scene.
   * @returns A world-space bounding box that encompasses all items in the scene (that match the criteria of the given flags).
   * @param [flags=DzIncludeAllFlag] - A set of flags that specify which types of nodes should be included.
   */
  getBoundingBox (flags?: number): DzBox3;

  /**
   * @returns The camera at the given index (if valid), otherwise NULL.
   * @param index - The index of the camera to return.
   */
  getCamera (index: number): DzCamera;

  /**
   * @returns A list containing all cameras in the scene.
   */
  getCameraList (): Array<unknown>;

  /**
   * @returns The data item for the scene at the given index (if valid), otherwise NULL.
   * @param index - The index of the data item to return.
   */
  getDataItem (index: number): DzSceneData;

  /**
   * @returns A list of the data items attached to the scene.
   */
  getDataItemList (): Array<unknown>;

  /**
   * @returns The filename that this scene was last saved to or read from (if any), otherwise an empty string.
   */
  getFilename (): string;

  /**
   * @returns The current time as a frame number based on the current time step.
   * @seealso getFrame()
   */
  getFrame (): number;

  /**
   * @returns The currently highlighted node in the scene.
   */
  getHighlightNode (): DzNode;

  /**
   * @returns The light at the given index (if valid), otherwise NULL.
   * @param index - The index of the light to return.
   */
  getLight (index: number): DzLight;

  /**
   * @returns A list containing all lights in the scene.
   */
  getLightList (): Array<unknown>;

  /**
   * @returns The node at the given index (if valid), otherwise NULL.
   * @param index - The index of the node to return.
   */
  getNode (index: number): DzNode;

  /**
   * @returns A list of all nodes in the scene.
   */
  getNodeList (): Array<DzNode>;

  /**
   * @returns The number of cameras in the scene.
   */
  getNumCameras (): number;

  /**
   * @returns The number of data items attached to the scene
   */
  getNumDataItems (): number;

  /**
   * @returns The number of lights in the scene.
   */
  getNumLights (): number;

  /**
   * @returns The number of nodes in the scene.
   */
  getNumNodes (): number;

  /**
   * @returns The number of currently selected cameras.
   */
  getNumSelectedCameras (): number;

  /**
   * @returns The number of currently selected lights.
   */
  getNumSelectedLights (): number;

  /**
   * @returns The number of currently selected nodes.
   */
  getNumSelectedNodes (): number;

  /**
   * @returns The number of currently selected skeletons.
   */
  getNumSelectedSkeletons (): number;

  /**
   * @returns The number of selected time ranges.
   */
  getNumSelectedTimeRanges (): number;

  /**
   * @returns The number of skeletons in the scene.
   */
  getNumSkeletons (): number;

  /**
   * @returns The number of storable_dz items in the scene.
   */
  getNumStorablesInScene (): number;

  /**
   * @returns The number of world-space modifiers in the scene.
   */
  getNumWSModifiers (): number;

  /**
   * @returns The current play range.
   * @seealso setPlayRange()
   */
  getPlayRange (): DzTimeRange;

  /**
   * @returns true if light preview is enabled, otherwise false.
   */
  getPreviewLights (): boolean;

  /**
   * @returns The primary selected node in the scene, or NULL if there is no currently selected node. The primary selected node is the last node that was selected, or can be set via function calls.
   */
  getPrimarySelection (): DzNode;

  /**
   * @returns The camera at index in the list of selected cameras (if valid), otherwise NULL.
   * @param index - The index of the selected camera to return.
   */
  getSelectedCamera (index: number): DzCamera;

  /**
   * @returns A list containing all selected cameras in the scene.
   */
  getSelectedCameraList (): Array<unknown>;

  /**
   * @returns The light at index in the list of selected lights (if valid), otherwise NULL.
   * @param index - The index of the selected light to return.
   */
  getSelectedLight (index: number): DzLight;

  /**
   * @returns A list containing all selected lights in the scene.
   */
  getSelectedLightList (): Array<unknown>;

  /**
   * @returns The node at index in the list of selected nodes (if valid), otherwise NULL.
   * @param index - The index of the selected node to return.
   */
  getSelectedNode (index: number): DzNode;

  /**
   * @returns A list containing all selected nodes in the scene.
   */
  getSelectedNodeList (): Array<DzNode>;

  /**
   * @returns The skeleton at index in the list of selected skeletons (if valid), otherwise NULL.
   * @param index - The index of the selected skeleton to return.
   */
  getSelectedSkeleton (index: number): DzSkeleton;

  /**
   * @returns A list containing all selected skeletons in the scene.
   */
  getSelectedSkeletonList (): Array<unknown>;

  /**
   * @returns The skeleton at the given index (if valid), otherwise NULL.
   * @param index - The index of the skeleton to return.
   */
  getSkeleton (index: number): DzSkeleton;

  /**
   * @returns A list containing all skeletons in the scene.
   */
  getSkeletonList (): Array<unknown>;

  /**
   * @returns A list containing all lights in the scene sorted by render priority.
   */
  getSortedLightList (): Array<unknown>;

  /**
   * @returns The current scene time as a DzTime.
   * @seealso setTime()
   */
  getTime (): DzTime;

  /**
   * @returns The time step the animation is incremented by at each frame.
   * @seealso setTimeStep()
   */
  getTimeStep (): DzTime;

  /**
   * @returns label if the value provided is already unique, otherwise label with a suffix that causes it to be unique.
   * @attention Bones and hidden nodes that are parented to nodes within a skeleton's hierarchy are not taken into account when ensuring uniquenesses.
   * @param label - The base label; see stripLabelNumber().
   * @param [node=null] - The top-level node that the label is intended for; may be null; this node will be ignored when validating uniquenesses.
   */
  getUniqueTopLevelLabel (label: string, node?: DzNode): string;

  /**
   * @returns The world-space modifier at the given index (if valid), otherwise NULL.
   * @param index - The index of the world-space modifier to return.
   */
  getWSModifier (index: number): wsmodifier_dz;

  /**
   * @returns A list containing all world-space modifiers in the scene.
   */
  getWSModifierList (): Array<unknown>;

  /**
   * Invalidates the scene, flagging it as needing to be redrawn.
   */
  invalidate (): void;

  /**
   * TODO: Add description.
   */
  invalidateLightSorting (): void;

  /**
   * @returns true if the scene is currently in a clearing operation, otherwise false.
   */
  isClearing (): boolean;

  /**
   * @returns true if the scene is currently in a loading from a .daz native scene.
   */
  isDAZLoading (): boolean;

  /**
   * @returns true if the scene is currently in a loading operation, otherwise false.
   */
  isLoading (): boolean;

  /**
   * @returns true if the looping of playback is enabled, otherwise false.
   */
  isLoopingEnabled (): boolean;

  /**
   * @returns true if the animation is currently playing, otherwise false.
   */
  isPlaying (): boolean;

  /**
   * Attempts to load a native file from the given filename.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - The name of the file to load.
   * @param method - The method for combining the file contents with the current scene contents.
   */
  loadScene (filename: string, method: number): DzError;

  /**
   * Sets looping of playback on/off.
   * @param onOff - If true, playback of animation will continue until the user stops it, looping back to the first frame each time the end of the animation is reached. If false, playback of the animation will stop when the end of the animation is reached.
   */
  loopPlayback (onOff: boolean): void;

  /**
   * Indicate that the scene has changed since the last save.
   */
  markChanged (): void;

  /**
   * @returns true if the scene needs to be saved, otherwise false.
   */
  needsSave (): boolean;

  /**
   * Pauses playback of the current animation.
   */
  pause (): void;

  /**
   * Start playback of the current play range.
   * @param [realtime=true] - If true, frames will be dropped or paused as needed to keep the animation playing in realtime. Otherwise, the animation is played frame by frame as it can be drawn.
   */
  play (realtime?: boolean): void;

  /**
   * Removes all cameras from the scene.
   */
  removeAllCameras (): void;

  /**
   * Removes all lights from the scene.
   */
  removeAllLights (): void;

  /**
   * Removes the scene data item from the scene.
   * @returns DZ_NO_ERROR if the item was successfully removed, otherwise an error code.
   * @param item - The data item to remove from the scene.
   */
  removeDataItem (item: DzSceneData): DzError;

  /**
   * Removes the given node from the scene.
   * @returns true if the node was in the scene and was successfully removed, otherwise false.
   * @param node - The node to remove from the scene.
   */
  removeNode (node: DzNode): boolean;

  /**
   * Removes all nodes that have items in their hierarchy that are currently selected.
   */
  removeSelected (): void;

  /**
   * Removes the modifier from the scene's modifier stack if it exists.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param modifier - The world-space modifier to remove from the scene.
   */
  removeWSModifier (modifier: wsmodifier_dz): DzError;

  /**
   * Deprecated
   * Save of .daz is deprecated in favor of duf/dsf. Developers are encouraged to support backwards compatibility, but new functionality need not support .daz. See the projects under the saving folder for examples.
   * Saves the entire scene.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param [filename=“”] - The file to save the scene to. If empty, the scene will be saved to the filename that it was last saved to, if any. If no prior file name exists, DZ_ILLEGAL_ARGUMENT_ERROR is returned. If a filename is passed, it becomes the save filename that will be used for future saves. If the file cannot be opened or saved, DZ_OPERATION_FAILED_ERROR is returned.
   */
  saveScene (filename?: string): DzError;

  /**
   * Saves a thumbnail-size OpenGL render of the current viewport to the given file name.
   * @param filename - The filename to save the thumbnail to. This should have an extension that is supported by the image manager.
   */
  saveThumbnail (filename: string): void;

  /**
   * Sets the selection state for all nodes in the scene.
   * @param onOff - If true all nodes in the scene will be selected. If false, all nodes will be deselected.
   */
  selectAllNodes (onOff: boolean): void;

  /**
   * Sets the selection state for all skeletons in the scene.
   * @param onOff - If true all skeletons in the scene will be selected. If false, all skeletons will be deselected.
   */
  selectAllSkeletons (onOff: boolean): void;

  /**
   * Selects/Deselects all time range.
   * @param onOff - If true, all ranges are selected. If false, all ranges are deselected.
   */
  selectAllTime (onOff: boolean): void;

  /**
   * Sets the animation range for the scene.
   * @seealso getAnimRange()
   * @param range - The time range to set for the entire animation.
   */
  setAnimRange (range: DzTimeRange): void;

  /**
   * Sets the asset load path of this scene.
   * @param absolutePath - The absolute path to set.
   */
  setAssetLoadPath (absolutePath: string): void;

  /**
   * Sets the current audio object and the frame on which it should start playing.
   * @seealso getAudio()
   * @param audio - The new audio clip for the scene. Pass in NULL to clear the current audio clip.
   * @param [startFrame=0] - The frame at which the audio should begin playing.
   */
  setAudio (audio: DzAudioClip, startFrame?: number): void;

  /**
   * Sets the backdrop object.
   * @seealso getBackdrop()
   * @param backdrop - The new backdrop for the scene. The scene takes ownership of this object and deletes it when it is no longer needed.
   */
  setBackdrop (backdrop: DzBackdrop): void;

  /**
   * Set the scene time to the given frame based on current time step.
   * @seealso getFrame()
   * @param frame - The frame to set as the current scene time.
   */
  setFrame (frame: number): void;

  /**
   * Sets the currently highlighted node. This is typically called from DzViewTool-derived classes.
   * @param node - The node that will become the currently highlighted node.
   */
  setHighlightNode (node: DzNode): void;

  /**
   * Sets the play range for the scene.
   * @seealso getPlayRange()
   * @param range - The time range to set for animation playback.
   */
  setPlayRange (range: DzTimeRange): void;

  /**
   * Sets whether or not light preview is enabled or disabled.
   * @param onoff - If true, the light preview is enabled.
   */
  setPreviewLights (onoff: boolean): void;

  /**
   * Sets the node to use as the primary selection.
   * @returns true if the node was made the new primary selection, otherwise false.
   * @param node - The selected node that should be flagged as the primary selection. The node must already be selected.
   */
  setPrimarySelection (node: DzNode): boolean;

  /**
   * Set the scene time to the given time.
   * @seealso getTime()
   * @param time - The time to set as the current scene time.
   */
  setTime (time: DzTime): void;

  /**
   * Sets the Frame rate for the scene.
   * @seealso getTimeStep()
   * @param time - The number of time ticks per frame.
   */
  setTimeStep (time: DzTime): void;

  /**
   * Step time forward/back by number of frames.
   * @param [nFrames=1] - The number of frames to step from the current position.
   * @param [forward=true] - If true, current frame count is increased nFrames. If false, current frame count is decreased.
   */
  stepTime (nFrames?: number, forward?: boolean): void;

  /**
   * Recursively updates all nodes in the scene.
   */
  update (): void;

  aboutToRemoveNode: Signal<{
    /**
     * Transmitted immediately before a node is removed from the scene.
     * @param node - The node to be removed from the scene.
     */
  (node: DzNode): void;
  }>;
  aboutToRender: Signal<{
    /**
     * Emitted just before the scene is rendered.
     * @param r - The renderer that will be rendering the scene.
     */
  (r: DzRenderer): void;
  }>;
  animRangeChanged: Signal<{
    /**
     * Transmitted after the scene play range is changed.
     * @param range - The new animation range of the scene.
     */
  (range: DzTimeRange): void;
  }>;
  assetModified: Signal<{
    /**
     * Transmitted just after the scene has been modified.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * Transmitted just after the scene has been saved.
     */
  (): void;
  }>;
  backdropChanged: Signal<{
    /**
     * Transmitted just after the backdrop has changed.
     */
  (): void;
  }>;
  cameraAdded: Signal<{
    /**
     * Transmitted when cameras are added to the scene.
     * @param node - The camera added to the scene.
     */
  (node: DzCamera): void;
  }>;
  cameraListChanged: Signal<{
    /**
     * Transmitted when cameras are added to or removed from the scene.
     */
  (): void;
  }>;
  cameraRemoved: Signal<{
    /**
     * Transmitted when cameras are removed from the scene.
     * @param node - The camera removed from the scene.
     */
  (node: DzCamera): void;
  }>;
  cameraSelectionListChanged: Signal<{
    /**
     * Transmitted after the camera selection list changes.
     */
  (): void;
  }>;
  currentTimeChanged: Signal<{
    /**
     * Transmitted after the scene time is changed.
     * @param oldTime - The last time the scene was at.
     * @param newTime - The new time of the scene.
     */
  (oldTime: DzTime, newTime: DzTime): void;
  }>;
  drawnDataChanged: Signal<{
    /**
     * Transmitted if the scene has changed and needs to be redrawn.
     */
  (): void;
  }>;
  highlightNodeChanged: Signal<{
    /**
     * Transmitted when the highlight node changes.
     * @param node - The new highlight node of the scene.
     */
  (node: DzNode): void;
  }>;
  lightAdded: Signal<{
    /**
     * Transmitted when lights are added to the scene.
     * @param node - The light added to the scene.
     */
  (node: DzLight): void;
  }>;
  lightListChanged: Signal<{
    /**
     * Transmitted when lights are added to or removed from the scene.
     */
  (): void;
  }>;
  lightRemoved: Signal<{
    /**
     * Transmitted when lights are removed from the scene.
     * @param node - The light removed from the scene.
     */
  (node: DzLight): void;
  }>;
  lightSelectionListChanged: Signal<{
    /**
     * Transmitted after the light selection list changes.
     */
  (): void;
  }>;
  loopPlaybackChanged: Signal<{
    /**
     * Transmitted when the enabled state of playback looping changes.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  materialListChanged: Signal<{
    /**
     * Emitted when the material list of a node in the scene has changed.
     */
  (): void;
  }>;
  materialSelectionChanged: Signal<{
    /**
     * Emitted when the material selection in the scene has changed.
     */
  (): void;
  }>;
  nodeAdded: Signal<{
    /**
     * Transmitted when nodes are added to the scene.
     * @param node - The node added to the scene.
     */
  (node: DzNode): void;
  }>;
  nodeListChanged: Signal<{
    /**
     * Transmitted when nodes are added to or removed from the scene.
     */
  (): void;
  }>;
  nodeRemoved: Signal<{
    /**
     * Transmitted when nodes are removed from the scene.
     * @param node - The node removed from the scene.
     */
  (node: DzNode): void;
  }>;
  nodeSelectionListChanged: Signal<{
    /**
     * Transmitted after the node selection list changes.
     */
  (): void;
  }>;
  playbackFinished: Signal<{
    /**
     * Transmitted when playback of the scene stops.
     */
  (): void;
  }>;
  playbackStarted: Signal<{
    /**
     * Transmitted when playback of the scene begins.
     */
  (): void;
  }>;
  playRangeChanged: Signal<{
    /**
     * Transmitted after the scene play range is changed.
     * @param range - The new play range of the scene.
     */
  (range: DzTimeRange): void;
  }>;
  primarySelectionChanged: Signal<{
    /**
     * Transmitted when the primary node selection changes.
     * @param node - The new primary selection of the scene.
     */
  (node: DzNode): void;
  }>;
  renderFinished: Signal<{
    /**
     * Emitted just after the scene is rendered.
     * @param r - The renderer that rendered the scene.
     */
  (r: DzRenderer): void;
  }>;
  sceneCleared: Signal<{
    /**
     * Transmitted after the scene gets cleared.
     */
  (): void;
  }>;
  sceneClearStarting: Signal<{
    /**
     * Emitted just before the scene is cleared.
     */
  (): void;
  }>;
  sceneFilenameChanged: Signal<{
    /**
     * Transmitted when the name of the current scene file has changed.
     * @param newName - The new name of the scene file.
     */
  (newName: string): void;
  }>;
  sceneLoaded: Signal<{
    /**
     * Transmitted after loading a scene file. This may not always be emitted after every sceneLoadStarting() signal if there were errors during file loading.
     */
  (): void;
  }>;
  sceneLoadStarting: Signal<{
    /**
     * Transmitted just before loading a scene.
     */
  (): void;
  }>;
  sceneSaved: Signal<{
    /**
     * Transmitted after saving a scene file. This may not always be emitted after every sceneSaveStarting() signal if there were errors during file saving.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  sceneSaveStarting: Signal<{
    /**
     * Transmitted just before saving a scene.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  sceneTopologyChanged: Signal<{
    /**
     * Transmitted just after the scene topology has changed.
     */
  (): void;
  }>;
  skeletonAdded: Signal<{
    /**
     * Transmitted when skeletons are added to the scene.
     * @param node - The skeleton added to the scene.
     */
  (node: DzSkeleton): void;
  }>;
  skeletonListChanged: Signal<{
    /**
     * Transmitted when skeletons are added to or removed from the scene.
     */
  (): void;
  }>;
  skeletonRemoved: Signal<{
    /**
     * Transmitted when skeletons are removed from the scene.
     * @param node - The skeleton removed from the scene.
     */
  (node: DzSkeleton): void;
  }>;
  skeletonSelectionListChanged: Signal<{
    /**
     * Transmitted after the skeleton selection list changes.
     */
  (): void;
  }>;
  timeChanged: Signal<{
    /**
     * Transmitted after the scene time is changed.
     * @param time - The new time of the scene.
     */
  (time: DzTime): void;
  }>;
  timeChanging: Signal<{
    /**
     * Transmitted when time is about to change.
     * @param newTime - The new time of the scene.
     */
  (newTime: DzTime): void;
  }>;
  timeSelectionChanged: Signal<{
    /**
     * Transmitted after the scene time selection is changed.
     */
  (): void;
  }>;
  timeStepChanged: Signal<{
    /**
     * Transmitted after the scene time step is changed.
     * @param time - The new time step of the scene.
     */
  (time: DzTime): void;
  }>;
  wsModifierAdded: Signal<{
    /**
     * Transmitted when world-space modifiers are added to the scene.
     * @param modifier - The modifier added to the scene.
     */
  (modifier: wsmodifier_dz): void;
  }>;
  wsModifierRemoved: Signal<{
    /**
     * Transmitted when world-space modifiers are removed from the scene.
     * @param modifier - The modifier removed from the scene.
     */
  (modifier: wsmodifier_dz): void;
  }>;
  wsModifierStackChanged: Signal<{
    /**
     * Transmitted when world-space modifiers are added to or removed from the scene.
     */
  (): void;
  }>;
}

declare namespace DzScene
{

  /**
   * Enumerated open methods.
   */
  /**
   * DefaultMethod - If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
   */
  export const DefaultMethod: number;
  /**
   * OpenNew - Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
   */
  export const OpenNew: number;
  /**
   * MergeFile - Merges the file with any pre-existing elements in the scene.
   */
  export const MergeFile: number;

  /**
   * Enumerated flags for determining what to include when calculating the scene bounding box.
   */
  /**
   * Only visible items with geometry that cast shadows will be included.
   */
  export const DzObjectsOnly: number;
  /**
   * Include lights in the bounding box.
   */
  export const DzIncludeLightsFlag: number;
  /**
   * Include cameras in the bounding box.
   */
  export const DzIncludeCamerasFlag: number;
  /**
   * Include items that do not cast shadows in the bounding box.
   */
  export const DzIncludeNonShadowersFlag: number;
  /**
   * Include items that are not visible in the bounding box.
   */
  export const DzIncludeNonVisibleFlag: number;
  /**
   * Include all nodes in the bounding box.
   */
  export const DzIncludeAllFlag: number;

  /**
   * @returns label with the “(#)” suffix removed (if any), otherwise label.
   * @param label - The string to remove the “(#)” suffix from.
   */
  export function stripLabelNumber (label: string): string;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sceneassetfilter_dz
 * Class for saving DSON-based Scene.
 * @remarks An asset save filter for saving a Scene in the DSON format.
 * @seealso Sample: Save a Scene
 */
interface DzSceneAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzSceneAssetFilter:
{
  prototype: DzSceneAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzSceneAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenedata_dz
 * DzCustomData implementation that can be associated with the DzScene object.
 * @seealso DzScene.addDataItem()
 * DzScene.removeDataItem()
 * DzScene.findDataItem()
 * DzScene.getNumDataItems()
 * DzScene.getDataItem()
 * DzScene.getDataItemList()
 */
interface DzSceneData extends DzCustomData
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenehelper_dz
 * Convenience object to make working with DzNode and DzProperty objects easier.
 * @remarks TODO: Add detailed description.
 */
interface DzSceneHelper extends QObject
{

  /**
   * @returns An list of the collected unique nodes.
   * @param selectedOnly - Whether or not to limit the nodes to only those that are selected.
   * @param boneTopSelected - Whether or not to climb the lineage of any DzBone encountered, and instead collect the top-most selected.
   * @param boneSkeleton - Whether or not to collect the DzSkeleton when a DzBone is encountered; overrides boneTopSelected.
   */
  collectNodes (selectedOnly: boolean, boneTopSelected: boolean, boneSkeleton: boolean): Array<unknown>;

  /**
   * @returns The ERC link created, or NULL.
   * @seealso findControlProperty()
   * DzERCLink::setType()
   * @param bone - 
   * @param propertyName - The name of the DzNumericProperty to be controlled.
   * @param controlBone - 
   * @param controllerName - The name of the DzNumericProperty used to control.
   * @param type - The type of calculation this link performs.
   * @param scalar - The value of the multiplier for the link.
   * @param addend - The DzNode with the DzNumericProperty to be controlled.
   */
  createLink (bone: DzNode, propertyName: string, controlBone: DzNode, controllerName: string, type: number, scalar: number, addend: number): DzERCLink;

  /**
   * @returns The morph created, or NULL if the morph could not be created.
   * @seealso morphdeltas_dz::addDelta()
   * @param bone - 
   * @param name - The name of the DzMorph to create.
   * @param deltas - A two dimensional Array, an array of 4 element arrays, where the first element of each array is the index of the vertex to set delta values for, the second element is the X-axis value for the delta, the third element is the Y-axis value for the delta, and the fourth element is the Z-axis value for the delta.
   * @param overwrite - The DzNode with the DzObject to create the DzMorph on.
   */
  createMorph (bone: DzNode, name: string, deltas: Array<unknown>, overwrite: boolean): DzMorph;

  /**
   * @returns The first control property of the property with the given internal name, or NULL.
   * @seealso findPropertyInGroup()
   * @param propertyName - The name of the property to find the control property for.
   * @param node - The node to find propertyName on.
   * @param recurse - If node is a DzSkeleton and propertyName cannot be found using findPropertyInGroup(), determines whether to attempt locating propertyName on one of the DzBone owned by the skeleton.
   * @param [nameLabelMatch=false] - Whether the name and label of the property must match propertyName.
   */
  findControlProperty (propertyName: string, node: DzNode, recurse: boolean, nameLabelMatch?: boolean): DzProperty;

  /**
   * @returns The first property with the given internal name, or NULL.
   * @param propertyName - The name of the property to find.
   * @param group - The DzPropertyGroup to find propertyName in.
   * @param traverse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup siblings of group.
   * @param recurse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup children of group.
   * @param [nameLabelMatch=false] - Whether the name and label of the property must match propertyName.
   */
  findPropertyInGroup (propertyName: string, group: DzPropertyGroup, traverse: boolean, recurse: boolean, nameLabelMatch?: boolean): DzProperty;

  /**
   * @returns The first property with the given internal name, or NULL.
   * @param propName - The name of the property to find.
   * @param node - The node to search.
   */
  findPropertyOnNode (propName: string, node: DzNode): DzProperty;

  /**
   * @returns The first property with the given internal name, or NULL.
   * @param internalName - The internal name of the property to find.
   * @param node - The node to search.
   */
  findPropertyOnNodeByInternalName (internalName: string, node: DzNode): DzProperty;

  /**
   * @returns The first property with the given label, or NULL.
   * @param label - 
   * @param node - The label of the property to find.
   */
  findPropertyOnNodeByLabel (label: string, node: DzNode): DzProperty;

  /**
   * @returns The DzNode associated with the display of prop.
   * @since 4.6.3.45
   * @param prop - The property in question.
   */
  getDisplayNode (prop: DzProperty): DzNode;

  /**
   * @returns The ERC controller for controlledProp that has the same property as controllingProp. If either parameter is null, or controlledProp does not have a controller that has the same property as controllingProp, NULL.
   * @param controlledProp - The property whose controller will be returned.
   * @param controllingProp - The property to determine which controller is returned.
   */
  getErcController (controlledProp: DzProperty, controllingProp: DzProperty): DzERCLink;

  /**
   * @returns The internal name of prop (or its alias target), or “Unknown”.
   * @param prop - The property in question.
   */
  getInternalName (prop: DzProperty): string;

  /**
   * @returns The label of prop, or an empty string.
   * @param prop - The property in question.
   */
  getLabel (prop: DzProperty): string;

  /**
   * Gets the maximum value for prop.
   * @returns If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the max value of prop.
   * @param prop - The property to get the max value for.
   */
  getMax (prop: DzProperty): number;

  /**
   * Gets the minimum value for prop.
   * @returns If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the min value of prop.
   * @param prop - The property to get the min value for.
   */
  getMin (prop: DzProperty): number;

  /**
   * @returns The DzNode associated with prop.
   * @param prop - The property in question.
   */
  getNode (prop: DzProperty): DzNode;

  /**
   * @returns The name of the DzNode associated with prop, or “Unknown” if it has no associated DzNode.
   * @param prop - The property in question.
   */
  getNodeName (prop: DzProperty): string;

  /**
   * @returns A string representation of the property type of prop; “Transform”, “General”, “Morph”, “DFormer”, “Poser Joint” or “Unknown”.
   * @param prop - The property in question.
   */
  getNodeType (prop: DzProperty): string;

  /**
   * @returns All private properties associated with the DzNode that prop is associated with.
   * @since 4.6.3.45
   * @param prop - The property to get the DzNode from.
   */
  getPrivatePropertiesOnNode (prop: DzProperty): Array<unknown>;

  /**
   * @returns All private properties associated with node.
   * @since 4.6.3.45
   * @param node - The node to get the properties from.
   */
  getPrivatePropertiesOnNode (node: DzNode): Array<unknown>;

  /**
   * @returns The properties that are on elem.
   * @since 4.6.3.45
   * @param elem - The DzElement to get the list of properties from.
   */
  getPropertiesOnElement (elem: DzElement): Array<unknown>;

  /**
   * @returns All properties associated with the node.
   * @since 4.6.3.45
   * @param node - The node to get the properties from.
   * @param [includeModifiers=true] - Whether or not to include the properties of DzModifiers.
   */
  getPropertiesOnNode (node: DzNode, includeModifiers?: boolean): Array<unknown>;

  /**
   * @returns All properties associated with the DzNode that prop is associated with.
   * @since 4.6.3.45
   * @param prop - The property to get the DzNode from.
   * @param [includeModifiers=true] - Whether or not to include the properties of DzModifiers.
   */
  getPropertiesOnNode (prop: DzProperty, includeModifiers?: boolean): Array<unknown>;

  /**
   * @returns All region properties associated with node.
   * @since 4.6.3.45
   * @param node - The node to get the properties from.
   */
  getRegionPropertiesOnNode (node: DzNode): Array<unknown>;

  /**
   * @returns All region properties associated with region.
   * @since 4.6.3.45
   * @param region - The geometryregion_dz to get the properties from.
   */
  getRegionPropertiesRecurse (region: geometryregion_dz): Array<unknown>;

  /**
   * @returns The unique name for the morph.
   * @param node - The DzNode with the DzObject that has the DzMorph.
   * @param name - The name to make unique.
   */
  getUniqueMorphName (node: DzNode, name: string): string;

  /**
   * @returns true if the the helper can remove prop, otherwise false.
   * @since 4.6.3.45
   * @param prop - The property to check whether the helper can remove.
   */
  helperCanRemove (prop: DzProperty): boolean;

  /**
   * @returns true if the helper successfully removed the property, otherwise false.
   * @since 4.6.3.45
   * @param prop - The property to remove.
   */
  helperRemoveProperty (prop: DzProperty): boolean;

  /**
   * @returns true if prop inherits DzNumericProperty and its raw and default values are the same, otherwise false.
   * @param prop - The property in question.
   */
  isAtDefaultValue (prop: DzProperty): boolean;

  /**
   * @returns true if prop is controlled by a transform property, otherwise false.
   * @since 4.9.4.86
   * @param prop - The property in question.
   * @param [recurse=true] - If true (default), the controller hierarchy is recursed.
   */
  isControlledByTransform (prop: DzProperty, recurse?: boolean): boolean;

  /**
   * @returns The given property (or its alias target) if it's owner is a dformmodifier_dz, otherwise NULL.
   * @param prop - The property in question.
   */
  isDFormModProperty (prop: DzProperty): DzProperty;

  /**
   * @returns The given property (or its alias target) if it's owner is a legacyjoint_dz, otherwise NULL.
   * @param prop - The property in question.
   */
  isLegacyJointProperty (prop: DzProperty): DzProperty;

  /**
   * @returns true if the given property (or its alias target) is a legacy property (internal name begins with PBMCC or PBMDC), otherwise false.
   * @param prop - The property in question.
   */
  isLegacyProperty (prop: DzProperty): boolean;

  /**
   * @returns The given property (or its alias target) if it's owner is a DzModifier, otherwise NULL.
   * @param prop - The property in question.
   */
  isModifierProperty (prop: DzProperty): DzProperty;

  /**
   * @returns The given property (or its alias target) if it's owner is a DzMorph, otherwise NULL.
   * @param prop - The property in question.
   */
  isMorphProperty (prop: DzProperty): DzProperty;

  /**
   * @returns The given property (or its alias target) if it's owner is a DzNode, otherwise NULL.
   * @param prop - The property in question.
   */
  isNodeProperty (prop: DzProperty): DzProperty;

  /**
   * @returns true if the given property is a transform property, otherwise false.
   * @since 4.9.4.86
   * @param prop - The property in question.
   */
  isTransform (prop: DzProperty): boolean;

  /**
   * @returns The given property (or its alias target) if it is a transform property, otherwise NULL.
   * @param prop - The property in question.
   */
  isTransformProperty (prop: DzProperty): DzProperty;

  /**
   * Attempts to rename prop to name. If the property is a morph property or a DForm modifier property then the modifier is renamed to name. If any other property associated with the node that this property is associated with has the same internal name as name, this method returns false.
   * @returns true if the rename was successful, otherwise false.
   * @param prop - The property to change.
   * @param name - The new internal name for the property.
   */
  setInternalName (prop: DzProperty, name: string): boolean;

  /**
   * Sets the maximum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
   * @param prop - The property whose maximum value is to be set.
   * @param max - The value to set. If prop inherits DzIntProperty, max is truncated (not rounded).
   */
  setMax (prop: DzProperty, max: number): void;

  /**
   * Sets the minimum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
   * @param prop - The property whose minimum value is to be set.
   * @param min - The value to set. If prop inherits DzIntProperty, min is truncated (not rounded).
   */
  setMin (prop: DzProperty, min: number): void;

  /**
   * Essentially behaves the same as calling both DzSceneHelper::setMin() and DzSceneHelper::setMax().
   * @param prop - The property to set min and max values for.
   * @param min - The new min value for the given property.
   * @param max - The new max value for the given property.
   */
  setMinMax (prop: DzProperty, min: number, max: number): void;

  /**
   * Sets the DzPropertyGoup path (and appropriate DzGeoemtryRegion) for the given property.
   * @param prop - The property to change the path of.
   * @param inPath - The new path for the given property.
   */
  setPropertyPath (prop: DzProperty, inPath: string): void;

  /**
   * Sets the name of node to a unique version of name.
   * @param node - The node to set the unique name of.
   * @param name - The name to make unique.
   */
  setUniqueName (node: DzNode, name: string): void;

}

declare var DzSceneHelper:
{
  prototype: DzSceneHelper;

  /**
   * Default Constructor
   */
  new (): DzSceneHelper;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesubsetassetfilter_dz
 * Class for saving DSON-based Scene Subset.
 * @remarks An asset save filter for saving a Scene Subset in the DSON format.
 * @seealso Sample: Save a Scene Subset
 */
interface DzSceneSubsetAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzSceneSubsetAssetFilter:
{
  prototype: DzSceneSubsetAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzSceneSubsetAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesupportassetfilter_dz
 * Class for saving DSON-based Scene Support Assets.
 * @remarks An asset save filter for saving Figure/Prop Assets, or Dynamic Cloth Assets, for each object in the scene, in the DSON format.
 * @seealso Sample: Save Scene Support Assets
 * DzNodeSupportAssetFilter
 * DzDynamicClothSupportAssetFilter
 */
interface DzSceneSupportAssetFilter extends DzSceneAssetFilter
{

}

declare var DzSceneSupportAssetFilter:
{
  prototype: DzSceneSupportAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzSceneSupportAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/script_dz
 * Encapsulates a DAZ Script script.
 * @remarks TODO: Add detailed description.
 */
interface DzScript extends DzBase
{

  /**
   * Save mode for saving the script to file.
   */
  /**
   * If the file extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  readonly UseExtension: number;

  /**
   * Plain text file - no Unicode support
   */
  readonly TextScriptFile: number;

  /**
   * Binary DAZ file format - supports Unicode characters
   */
  readonly DAZScriptFile: number;

  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  readonly EncDAZScriptFile: number;

  /**
   * Script language of the file.
   */
  /**
   * Unknown language.
   */
  readonly Unknown: number;

  /**
   * DAZ Script 1 (QSA) language.
   */
  readonly DAZScript1: number;

  /**
   * DAZ Script 2 (QtScript) language.
   */
  readonly DAZScript2: number;

  /**
   * @param filter - The filter to add the binary extensions to
   */
  addScriptBinaryExtensionsAsMultipleFilters (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the binary extensions to
   */
  addScriptBinaryExtensionsToFilter (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the open extensions to
   */
  addScriptOpenExtensionsAsMultipleFilters (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the open extensions to
   */
  addScriptOpenExtensionsToFilter (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the save extensions to
   */
  addScriptSaveExtensionsAsMultipleFilters (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the save extensions to
   */
  addScriptSaveExtensionsToFilter (filter: DzFileFilter): void;

  /**
   * @param filter - The filter to add the plain text extensions to
   * @param [includeDeprecated=false] - Whether or not to include the deprecated extension(s)
   */
  addScriptTextExtensionsAsMultipleFilters (filter: DzFileFilter, includeDeprecated?: boolean): void;

  /**
   * @param filter - The filter to add the plain text extensions to
   * @param [includeDeprecated=false] - Whether or not to include the deprecated extension(s)
   */
  addScriptTextExtensionsToFilter (filter: DzFileFilter, includeDeprecated?: boolean): void;

  /**
   * This function is provided as a quick method of evaluating DAZ Script statements without needing to create a DAZ Script object.
   * @returns The value returned from the script's execution.
   * @param code - The text string to evaluate as a script
   * @param [context=undefined] - The QObject instance (if any) that will provide the script's context.
   */
  evaluate (code: string, context?: QObject): Object;

  /**
   * @returns A list of the script file extensions supported by the application.
   */
  getScriptExtensions (): Array<unknown>;

  /**
   * @returns The path of the file, with extension, of the script found. Otherwise, an empty String.
   * @param filenameWithoutExtension - The path to the file, minus the '.' and the extension
   */
  getScriptFile (filenameWithoutExtension: string): string;

  /**
   * @returns true if extension is a supported binary script extension
   * @param ext - 
   */
  isScriptBinaryExtension (ext: string): boolean;

  /**
   * @returns true if filename ends with a supported binary script extension
   * @param filename - 
   */
  isScriptBinaryFile (filename: string): boolean;

  /**
   * @returns true if extension is a supported script extension
   * @param ext - 
   */
  isScriptExtension (ext: string): boolean;

  /**
   * @returns true if filename ends with a supported script extension
   * @param filename - 
   */
  isScriptFile (filename: string): boolean;

  /**
   * @returns true if extension is a supported [ascii] plain text script extension
   * @param ext - 
   */
  isScriptTextExtension (ext: string): boolean;

  /**
   * @returns true if filename ends with a supported [ascii] plain text script extension
   * @param filename - 
   */
  isScriptTextFile (filename: string): boolean;

  /**
   * Takes a string that may contain special characters and returns a converted version that would be legal as a variable name in script. If the string contains no special characters, the result will be identical to the input.
   * @param str - 
   */
  legalizeName (str: string): string;

  /**
   * Appends the given code to the end of the current script.
   * @param code - The text to append to the current script.
   */
  addCode (code: string): void;

  /**
   * Appends the given string and a newline character to the script.
   * @param line - The text to add to the script.
   * @param [indentLevel=0] - The number of tab characters to insert in front of the line.
   */
  addLine (line: string, indentLevel?: number): void;

  /**
   * Appends the given code to the end of the current script.
   * @param code - The text to append to the current script.
   * @param [indentLevel=0] - The number of tab characters to insert in front of each line.
   */
  addLines (code: string, indentLevel?: number): void;

  /**
   * Calls a function in the script.
   * @returns true if the function was called successfully, false if there was an error.
   * @attention The entire script is evaluated before the function call is made.
   * @param func - The name of the function to call.
   * @param args - A list of arguments to pass to the function.
   */
  call (func: string, args: Array<unknown>): boolean;

  /**
   * Checks the syntax of the script for errors using the current interpreter.
   * @returns true if the syntax is valid, otherwise false.
   */
  checkSyntax (): boolean;

  /**
   * Clears any code in the current script, and clears the encryption state if the script was read from an encrypted file.
   */
  clear (): void;

  /**
   * Converts the script to DAZ Script 2 syntax.
   */
  convertToDAZScript2 (): boolean;

  /**
   * @returns The line number that the last error occurred on.
   */
  errorLine (): number;

  /**
   * @returns The last error message gathered from a call to execute(). An empty string if no error has been encountered for this script.
   */
  errorMessage (): string;

  /**
   * Execute the script.
   * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
   * @returns true if the script was executed successfully, false if there was an error.
   */
  execute (): boolean;

  /**
   * Execute the script with an argument list.
   * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
   * @returns true if the script was executed successfully, false if there was an error.
   * @param args - The list of arguments to pass to the script.
   */
  execute (args: Array<unknown>): boolean;

  /**
   * @returns The author of this script if it was loaded from a file that provides authorship information.
   */
  getAuthor (): DzAuthor;

  /**
   * @returns The code of the current script.
   */
  getCode (): string;

  /**
   * @returns The name and path of the file associated with this script. An empty string is returned if this script is not associated with a file.
   */
  getFilename (): string;

  /**
   * @returns true if the last execution was successful, otherwise false.
   */
  getLastStatus (): boolean;

  /**
   * @returns An enumerated value indicating the scripting language of the script.
   */
  getScriptLanguage (): number;

  /**
   * @returns A string describing the kind of script that this script is
   */
  getScriptType (): string;

  /**
   * @returns The version of DAZ Studio that this script was saved from. The current version if the script was not loaded from a file.
   */
  getScriptVersion (): DzVersion;

  /**
   * @returns true if the same context is used between uses of call(); otherwise false (default).
   * @seealso DzScriptContext
   */
  getShouldReuseInterpreter (): boolean;

  /**
   * @returns true if the script is empty; otherwise false.
   */
  isEmpty (): boolean;

  /**
   * @returns true if the contents of the script are encrypted (i.e. read from an encrypted file); otherwise false.
   * @attention If the script is encrypted, getCode() returns '[Content Encrypted]', addLine(), addCode(), and setCode() have no effect, saveToFile() saves nothing and will return false. Calling clear() will clear the encryption state and the code from the script.
   */
  isEncrypted (): boolean;

  /**
   * Loads the script from a file.
   * @returns true if the script was successfully loaded, otherwise false.
   * @param filename - The path to the script file to load.
   * @param [convert=true] - Whether to convert the file to DAZ Script 2.
   */
  loadFromFile (filename: string, convert?: boolean): boolean;

  /**
   * Sets the script to be encrypted.
   * @attention This process is not reversible!!! Once a script has been encrypted its original text cannot be extracted. Encrypted scripts can not be edited or modified.
   */
  makeEncrypted (): void;

  /**
   * @returns The result of the last script execution.
   */
  result (): Object;

  /**
   * Save the script to a file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - The filename of the file to save to
   * @param [mode=DzScript.ScriptFileMode.UseExtension] - The type of file to save.
   * @param [filetype="DAZ Script"] - The filetype that is saved as part of the file information.
   */
  saveToFile (filename: string, mode?: number, filetype?: string): DzError;

  /**
   * Replaces the existing code of the script with code.
   * @param code - The new text for the script.
   */
  setCode (code: string): void;

  /**
   * Sets whether the same context is used between uses of call().
   * @attention Use of this function clears the context, regardless of whether onOff is set to true or false.
   * @seealso DzScriptContext
   * @param onoff - If true, the same context is used between calls. If false a new context is used for each call.
   */
  setReuseInterpreter (onoff: boolean): void;

  /**
   * @returns The stack trace for the last time an error was reported during a call to execute(). An empty list if no error has been encountered.
   */
  stackTrace (): Array<unknown>;

  /**
   * Access to whether or not the script was converted from the enumerated value specified.
   * @returns true if the script was converted
   * @param [language=DzScript.DAZScript1] - 
   */
  wasConverted (language?: number): boolean;

}

declare var DzScript:
{
  prototype: DzScript;

  /**
   * Constructor.
   * @param [name=“”] - The name of the script
   */
  new (name?: string): DzScript;

  /**
   * Copy Constructor
   * @param script - The script to copy.
   */
  new (script: DzScript): DzScript;

  /**
   * Save mode for saving the script to file.
   */
  /**
   * If the file extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
   */
  readonly UseExtension: number;
  /**
   * Plain text file - no Unicode support
   */
  readonly TextScriptFile: number;
  /**
   * Binary DAZ file format - supports Unicode characters
   */
  readonly DAZScriptFile: number;
  /**
   * Encrypted Binary DAZ file format - supports Unicode characters
   */
  readonly EncDAZScriptFile: number;

  /**
   * Script language of the file.
   */
  /**
   * Unknown language.
   */
  readonly Unknown: number;
  /**
   * DAZ Script 1 (QSA) language.
   */
  readonly DAZScript1: number;
  /**
   * DAZ Script 2 (QtScript) language.
   */
  readonly DAZScript2: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptcontext_dz
 * Encapsulates a DAZ Script script context.
 * @remarks All DzScripts are executed in the context of a DzScriptContext instance - therefore, all the properties and methods on DzScriptContext are accessible to a script as global functions and variables. It will usually not be necessary for a script to create or use this class directly.
 */
interface DzScriptContext extends DzBase
{

  /**
   * Accept and finish a hold on the undo stack started by calling beginUndo().
   * @seealso Global::acceptUndo()
   * @param caption - 
   */
  acceptUndo (caption: string): void;

  /**
   * @returns true if there is an active background progress operation in the application, otherwise false.
   * @seealso Global::backgroundProgressIsActive()
   */
  backgroundProgressIsActive (): boolean;

  /**
   * @returns true if the user canceled the current background progress operation in the application, otherwise false.
   * @seealso Global::backgroundProgressIsCancelled()
   */
  backgroundProgressIsCancelled (): boolean;

  /**
   * Captures a view of scene seletion.
   * @seealso Global::beginNodeSelectionHold()
   * @since 4.9.4.109
   */
  beginNodeSelectionHold (): void;

  /**
   * Starts a hold on the undo stack.
   * @seealso Global::beginUndo()
   */
  beginUndo (): void;

  /**
   * Cancel a hold on the undo stack started by calling beginUndo().
   * @seealso Global::cancelUndo()
   */
  cancelUndo (): void;

  /**
   * Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
   * @seealso Global::clearBusyCursor()
   */
  clearBusyCursor (): void;

  /**
   * Clears all selection holds without restoring the selection.
   * @seealso Global::clearNodeSelectionHolds()
   * @since 4.9.4.109
   */
  clearNodeSelectionHolds (): void;

  /**
   * Clears the override cursor stack.
   * @seealso Global::clearOverrideCursor()
   * @since 4.6.4.30
   */
  clearOverrideCursor (): void;

  /**
   * Clears the undo stack.
   * @seealso Global::clearUndoStack(), DzUndoStack::clearAll()
   */
  clearUndoStack (): void;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use DzApp::modifierKeyState() instead.
   * @seealso Global::ctrlPressed()
   */
  ctrlPressed (): boolean;

  /**
   * Removes a scene node selection hold on scene selection without restoring the selection.
   * @seealso Global::dropNodeSelectionHold()
   * @since 4.9.4.109
   */
  dropNodeSelectionHold (): void;

  /**
   * Drops a hold on the undo stack started by calling beginUndo().
   * @seealso Global::dropUndo()
   */
  dropUndo (): void;

  /**
   * Ends the current background progress operation in the application from script.
   * @seealso Global::finishBackgroundProgress()
   */
  finishBackgroundProgress (): void;

  /**
   * Ends the current progress operation in the application from script.
   * @seealso Global::finishProgress()
   */
  finishProgress (): void;

  /**
   * @returns The list of arguments for the current script execution.
   * @seealso Global::getArguments()
   */
  getArguments (): Array<unknown>;

  /**
   * This function provides access to the desktop widget.
   * @returns The desktop widget.
   * @seealso Global::getDesktop()
   */
  getDesktop (): QDesktopWidget;

  /**
   * This function converts an error code into a string message.
   * @returns A user-readable message that describes the error represented by the error code.
   * @seealso Global::getErrorMessage()
   * @param errCode - 
   */
  getErrorMessage (errCode: number): string;

  /**
   * @returns The QObject parent of obj.
   * @param obj - 
   */
  getObjectParent (obj: QObject): QObject;

  /**
   * @returns The author of the current script (if any), otheriwse and empty string.
   * @seealso Global::getScriptAuthor()
   */
  getScriptAuthor (): DzAuthor;

  /**
   * @returns The file name of the current script (if any), otherwise an empty string.
   * @seealso Global::getScriptFileName()
   */
  getScriptFileName (): string;

  /**
   * @returns The file type that this script was saved out as.
   * @seealso Global::getScriptType()
   */
  getScriptType (): string;

  /**
   * @returns The version of the current script (if any).
   * @seealso Global::getScriptVersionString()
   */
  getScriptVersionString (): string;

  /**
   * This function allows a script to test if two QObject-derived variables point to the same instance.
   * @returns true if the pointers point to the same object, otherwise false.
   * @seealso Global::pointersAreEqual()
   * @param ptr1 - 
   * @param ptr2 - 
   */
  pointersAreEqual (ptr1: QObject, ptr2: QObject): boolean;

  /**
   * Pauses execution of the script and allows the GUI thread time to process events.
   * @seealso Global::processEvents()
   */
  processEvents (): void;

  /**
   * @returns true if there is an active progress operation in the application, otherwise false.
   * @seealso Global::progressIsActive()
   */
  progressIsActive (): boolean;

  /**
   * @returns true if the user cancelled the current progress operation in the application, otherwise false.
   * @seealso Global::progressIsCancelled()
   */
  progressIsCancelled (): boolean;

  /**
   * Restores the scene selection to the view at last call to beginNodeSelectionHold().
   * @seealso Global::restoreNodeSelectionHold()
   * @since 4.9.4.109
   */
  restoreNodeSelectionHold (): void;

  /**
   * Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
   * @seealso Global::setBusyCursor()
   */
  setBusyCursor (): void;

  /**
   * Deprecated
   * Provided for backward compatibility only. Use DzApp::modifierKeyState() instead.
   * @seealso Global::shiftPressed()
   */
  shiftPressed (): boolean;

  /**
   * Pauses the script for the specified number of milliseconds without blocking the application event loop.
   * @seealso Global::sleep()
   * @since 4.8.0.45
   * @param milliseconds - 
   */
  sleep (milliseconds: number): void;

  /**
   * Starts a background progress operation in the application from script.
   * @seealso Global::startBackgroundProgress()
   * @param info - 
   * @param [totalSteps=0] - 
   * @param [isCancellable=false] - 
   */
  startBackgroundProgress (info: string, totalSteps?: number, isCancellable?: boolean): void;

  /**
   * Starts a progress operation in the application from script.
   * @seealso Global::startProgress()
   * @param info - 
   * @param [totalSteps=0] - 
   * @param [isCancellable=false] - 
   * @param [showTimeElapsed=false] - 
   */
  startProgress (info: string, totalSteps?: number, isCancellable?: boolean, showTimeElapsed?: boolean): void;

  /**
   * Steps the current background progress operation in the application from script.
   * @seealso Global::stepBackgroundProgress()
   * @param [numSteps=1] - 
   */
  stepBackgroundProgress (numSteps?: number): void;

  /**
   * Steps the current progress operation in the application from script.
   * @seealso Global::stepProgress()
   * @param [numSteps=1] - 
   */
  stepProgress (numSteps?: number): void;

  /**
   * Updates the background current progress operation in the application from script.
   * @seealso Global::updateBackgroundProgress()
   * @param position - 
   */
  updateBackgroundProgress (position: number): void;

  /**
   * Updates the current progress operation in the application from script.
   * @seealso Global::updateProgress()
   * @param position - 
   */
  updateProgress (position: number): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptedrenderer_dz
 * Custom scriptable 3Delight renderer.
 * @remarks Implements a scriptable RenderMan interface for the scene to render itself through the 3Delight renderer.
 * @seealso DzRenderMgr::findRenderer()
 * DzDelightRenderer
 * Sample: Rendering : Scripted Renderer Settings
 * Sample: Rendering : Scripted Renderer Save Preset
 * Sample: Rendering : Scripted Renderer Load
 * Sample: Rendering : Scripted Renderer Pass
 * @attention This class is only available as a component of DAZ Studio Advanced Edition.
 */
interface DzScriptedRenderer extends DzRenderer
{

  /**
   * Builds an environment space transform that can be used by shaders to account for differences between the application and the 3Delight render engine.
   * @since 4.10.0.55
   */
  buildEnvironmentSpaceTransform (): void;

  /**
   * Sets up the camera for the pass.
   * @param camera - The camera to use.
   * @param width - The width of the render.
   * @param height - The height of the render.
   */
  cameraProject (camera: DzCamera, width: number, height: number): void;

  /**
   * @returns true if the renderer should use the call to RiSurface, RiDisplace, RiLight, or RiAreaLight, otherwise false.
   */
  continueAfterPreProcess (): boolean;

  /**
   * Creates a light in the stream.
   * @param light - The light to create.
   * @param shadowMap - The shadow map for the light.
   */
  createLight (light: DzLight, shadowMap: string): void;

  /**
   * Deletes a list of files.
   * @param files - A list of the file paths to delete.
   */
  deleteFiles (files: Array<unknown>): void;

  /**
   * Causes the renderer to call the same display as the standard 3Delight renderer.
   */
  doDefaultDisplay (): void;

  /**
   * @returns The list of names for the generated shadow maps.
   * @param options - The render options for the shadow maps.
   * @param camera - The camera to generate the shadow map for.
   * @param dir - The directory to generate the shadow maps in.
   * @param reuse - If true and a shadow map exists by the the same label of a light exists, the shadow map is reused instead of being generated.
   */
  doDefaultShadowPass (options: DzRenderOptions, camera: DzCamera, dir: string, reuse: boolean): Array<unknown>;

  /**
   * @returns The name of the generated shadow map.
   * @param options - The render options for the shadow maps.
   * @param camera - The camera to use for the shadow pass.
   * @param light - The light to generate shadow map for.
   * @param dir - The directory to generate the shadow map in.
   * @param reuse - If true and a shadow map already exists, it is reused.
   */
  doDefaultShadowPass (options: DzRenderOptions, camera: DzCamera, light: DzLight, dir: string, reuse: boolean): string;

  /**
   * Cleans up after doDefaultShadowPassPrep().
   * @attention This call must be proceeded by a call to doDefaultShadowPassPrep().
   * @param options - The render options for the pass.
   * @param camera - The camera for the shadow pass.
   * @param light - The light the shadow map was generated for.
   */
  doDefaultShadowPassEnd (options: DzRenderOptions, camera: DzCamera, light: DzLight): void;

  /**
   * @returns The name of the shadow map for the light.
   * @attention This call must be followed by a call to doDefaultShadowPassEnd().
   * @param options - The render options for the pass.
   * @param camera - The camera for the shadow pass.
   * @param light - The light to generate shadow map for.
   * @param dir - The directory to put the shadow map in.
   * @param reuse - If true and the map already exists, it is reused.
   */
  doDefaultShadowPassPrep (options: DzRenderOptions, camera: DzCamera, light: DzLight, dir: string, reuse: boolean): string;

  /**
   * Script implementation of the RiSpec RiShutter() function.
   * @param opts - The render options for the shutter; whether or not motion blur is enabled and the amount of blur if enabled.
   */
  doShutter (opts: DzRenderOptions): void;

  /**
   * Sets up the camera for the pass, ensuring all render-able objects are in view.
   * @param camera - The camera to use.
   * @param width - The width of the render.
   * @param height - The height of the render.
   */
  fullSceneCameraProject (camera: DzCamera, width: number, height: number): void;

  /**
   * @returns The default search path for shaders and DSO shadeops, as a string in the format expected by 3Delight (which is mostly a list of paths separated by semicolons). The getShaderSearchPaths() method is called to get the list of paths to use.
   */
  getDefaultShaderSearchPath (): string;

  /**
   * @returns The path to the script that is run in order to define the renderer.
   */
  getDefinitionFile (): string;

  /**
   * @returns The path to the script that is run in the Displacement pre-process step.
   */
  getDisplacementPreProcessScript (): string;

  /**
   * @returns The current render handler (if any), otherwise NULL.
   * @attention This call is only valid during a render.
   */
  getHandler (): DzRenderHandler;

  /**
   * @returns The light in the render list at index (if valid), otherwise NULL.
   * @param index - The index of the light to get.
   */
  getLight (index: number): DzLight;

  /**
   * @returns The number of lights to render.
   */
  getLightCount (): number;

  /**
   * @returns The path to the script that is run in the Light pre-process step.
   */
  getLightPreProcessScript (): string;

  /**
   * @returns The list of lights to render.
   */
  getLightsToRender (): Array<unknown>;

  /**
   * @returns The node in the render list at index (if valid), otherwise NULL.
   * @param index - The index of the node to get.
   */
  getNode (index: number): DzNode;

  /**
   * @returns The number of nodes to render.
   */
  getNodeCount (): number;

  /**
   * @returns The list of nodes to render.
   */
  getNodesToRender (): Array<unknown>;

  /**
   * @returns The number of light handles.
   * @attention These handles are used in the riIlluminate() call to turn lights on/off.
   */
  getNumIlluminateHandels (): number;

  /**
   * @returns The element that holds the properties for this scripted render pass.
   * @attention When applying a new pass to the renderer, the properties on this element should be cleared and the properties to use during the render pass should be added.
   */
  getPropertyHolder (): DzElement;

  /**
   * @returns The path of the script that controls the rendering process.
   */
  getRenderScript (): string;

  /**
   * @returns The path to the script that is run in the Surface pre-process step.
   */
  getSurfacePreProcessScript (): string;

  /**
   * Prepares motion samples for all nodes to render.
   */
  prepareMotionSamples (): void;

  /**
   * Prepares motion samples for a list of nodes.
   * @param nodes - The list of nodes to prepare motion samples for.
   */
  prepareMotionSamples (nodes: Array<unknown>): void;

  /**
   * Prepares motion samples for node.
   * @param node - The node to prepare motion samples for.
   */
  prepareNodeMotionSamples (node: DzNode): void;

  /**
   * Removes a light from the render list.
   * @param index - The index of the light to remove.
   */
  removeLight (index: number): void;

  /**
   * Removes a node from the render list.
   * @param index - The index of the node to remove.
   */
  removeNode (index: number): void;

  /**
   * Renders the backdrop for the scene.
   * @param backdrop - The backdrop for the scene.
   * @param width - The width of the render.
   * @param height - The height of the render.
   */
  renderBackDrop (backdrop: DzBackdrop, width: number, height: number): void;

  /**
   * Adds a node to the list of nodes to be rendered.
   * @param node - The node to render.
   */
  renderNode (node: DzNode): void;

  /**
   * Adds a node to the list of nodes to be rendered.
   * @param nodes - The list of nodes to render.
   */
  renderNodes (nodes: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiAreaLightSource() function.
   * @returns The light handle index for this light source
   * @param name - The name of the light shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riAreaLightSource (name: string, tokens: Array<unknown>, params: Array<unknown>): number;

  /**
   * Script implementation of the RiSpec RiAtmosphere() function.
   * @param name - The name of the volume shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riAtmosphere (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiAttribute() function.
   * @param name - TODO
   * @param tokens - TODO
   * @param params - TODO
   */
  riAttribute (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiAttributeBegin() function.
   */
  riAttributeBegin (): void;

  /**
   * Script implementation of the RiSpec RiAttributeEnd() function.
   */
  riAttributeEnd (): void;

  /**
   * Script implementation of the RiSpec RiBegin() function.
   * @param ribPath - TODO
   */
  riBegin (ribPath: string): void;

  /**
   * Script implementation of the RiSpec RiCamera() function.
   * @param camera - The name of the camera.
   * @param tokens - A list of token names passed to the camera.
   * @param params - A list of corresponding values for tokens.
   */
  riCamera (camera: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiClipping() function.
   * @param hither - TODO
   * @param yon - TODO
   */
  riClipping (hither: number, yon: number): void;

  /**
   * Script implementation of the RiSpec RiClipping() function.
   * @param x - TODO
   * @param y - TODO
   * @param z - TODO
   * @param nx - TODO
   * @param ny - TODO
   * @param nz - TODO
   */
  riClippingPlane (x: number, y: number, z: number, nx: number, ny: number, nz: number): void;

  /**
   * Script implementation of the RiSpec RiColor() function.
   * @param Cs - The color to set.
   */
  riColor (Cs: Color): void;

  /**
   * Script implementation of the RiSpec RiConcatTransform() function.
   * @param transform - The transform to concatenate.
   */
  riConcatTransform (transform: DzMatrix4): void;

  /**
   * Script implementation of the RiSpec RiCoordinateSystem() function.
   * @param space - The name for the coordinate system.
   */
  riCoordinateSystem (space: string): void;

  /**
   * Script implementation of the RiSpec RiCoordSysTransform() function.
   * @param space - The name for the coordinate system.
   */
  riCoordSysTransform (space: string): void;

  /**
   * Script implementation of the RiSpec RiCropWindow() function.
   * @param xmin - TODO
   * @param xmax - TODO
   * @param ymin - TODO
   * @param ymax - TODO
   */
  riCropWindow (xmin: number, xmax: number, ymin: number, ymax: number): void;

  /**
   * Script implementation of the RiSpec RiDeclare() function.
   * @param name - TODO
   * @param declaration - TODO
   */
  riDeclare (name: string, declaration: string): void;

  /**
   * Script implementation of the RiSpec RiDepthOfField() function.
   * @param fstop - TODO
   * @param focallength - TODO
   * @param focaldistance - TODO
   */
  riDepthOfField (fstop: number, focallength: number, focaldistance: number): void;

  /**
   * Script implementation of the RiSpec RiDetailRange() function.
   * @param minvis - TODO
   * @param lowtran - TODO
   * @param uptran - TODO
   * @param maxvis - TODO
   */
  riDetailRange (minvis: number, lowtran: number, uptran: number, maxvis: number): void;

  /**
   * Script implementation of the RiSpec RiDisplacement() function.
   * @param name - The name of the displacement shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riDisplacement (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiDisplay() function.
   * @param name - The name of the display.
   * @param type - The type of the display.
   * @param mode - The mode of the display.
   * @param tokens - A list of token names passed to the display.
   * @param params - A list of corresponding values for tokens.
   */
  riDisplay (name: string, type: string, mode: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiDisplayChannel() function.
   * @param channel - 
   * @param tokens - A list of token names passed to the channel.
   * @param params - The name of the channel.
   */
  riDisplayChannel (channel: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiElse() function.
   */
  riElse (): void;

  /**
   * Script implementation of the RiSpec RiElseIf() function.
   * @param expression - The expression for the condition.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riElseIf (expression: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Attempts to finish the render.
   * @param message - The message to display in the progress dialog.
   */
  riEndWorld (message: string): void;

  /**
   * Script implementation of the RiSpec RiExposure() function.
   * @param gain - The gain value to set.
   * @param gamma - The gamma value to set.
   */
  riExposure (gain: number, gamma: number): void;

  /**
   * Script implementation of the RiSpec RiExterior() function.
   * @param name - The name of the volume shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riExterior (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiFormat() function.
   * @param xres - The horizontal resolution of the image.
   * @param yres - The vertical resolution of the image.
   * @param aspect - The ratio of the width to the height of a single pixel.
   */
  riFormat (xres: number, yres: number, aspect: number): void;

  /**
   * Script implementation of the RiSpec RiFrameAspectRatio() function.
   * @param aspect - The ratio of the width to the height of the desired image.
   */
  riFrameAspectRatio (aspect: number): void;

  /**
   * Script implementation of the RiSpec RiGeometricApproximation() function.
   * @param type - TODO
   * @param value - TODO
   */
  riGeometricApproximation (type: string, value: number): void;

  /**
   * Script implementation of the RiSpec RiHider() function.
   * @param type - The type of the hider.
   * @param tokens - A list of token names passed to the hider.
   * @param params - A list of corresponding values for tokens.
   */
  riHider (type: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiIdentity() function.
   */
  riIdentity (): void;

  /**
   * Script implementation of the RiSpec RiIfBegin() function.
   * @param expression - The expression for the condition.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riIfBegin (expression: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiIfEnd() function.
   */
  riIfEnd (): void;

  /**
   * Script implementation of the RiSpec RiIlluminate() function.
   * @param light - The index of the light in the list.
   * @param onOff - If true, adds the light to the list. If false, removes the light from the list.
   */
  riIlluminate (light: number, onOff: boolean): void;

  /**
   * Script implementation of the RiSpec RiImager() function.
   * @param name - The name of the imager shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riImager (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiInterior() function.
   * @param name - The name of the volume shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riInterior (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiLightSource() function.
   * @returns The light handle index for this light source
   * @param name - The name of the light shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riLightSource (name: string, tokens: Array<unknown>, params: Array<unknown>): number;

  /**
   * Script implementation of the RiSpec RiMakeBump() function.
   * @param pic - TODO
   * @param tex - TODO
   * @param swrap - TODO
   * @param twrap - TODO
   * @param filterType - TODO
   * @param swidth - TODO
   * @param twidth - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riMakeBump (pic: string, tex: string, swrap: string, twrap: string, filterType: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiMakeCubeFaceEnvironment() function.
   * @param px - TODO
   * @param nx - TODO
   * @param py - TODO
   * @param ny - TODO
   * @param pz - TODO
   * @param nz - TODO
   * @param tex - TODO
   * @param fov - TODO
   * @param filterType - TODO
   * @param swidth - TODO
   * @param twidth - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riMakeCubeFaceEnvironment (px: string, nx: string, py: string, ny: string, pz: string, nz: string, tex: string, fov: number, filterType: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiMakeLatLongEnvironment() function.
   * @param pic - TODO
   * @param tex - TODO
   * @param filterType - TODO
   * @param swidth - TODO
   * @param twidth - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riMakeLatLongEnvironment (pic: string, tex: string, filterType: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiMakeShadow() function.
   * @param pic - TODO
   * @param tex - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riMakeShadow (pic: string, tex: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiMakeTexture() function.
   * @param pic - TODO
   * @param tex - TODO
   * @param swrap - TODO
   * @param twrap - TODO
   * @param filterType - TODO
   * @param swidth - TODO
   * @param twidth - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riMakeTexture (pic: string, tex: string, swrap: string, twrap: string, filterType: number, swidth: number, twidth: number, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiMatte() function.
   * @param onoff - TODO
   */
  riMatte (onoff: boolean): void;

  /**
   * Script implementation of the RiSpec RiMultiplyShadingRate() function.
   * @param ratemultiplier - TODO
   */
  riMultiplyShadingRate (ratemultiplier: number): void;

  /**
   * Script implementation of the RiSpec RiOpacity() function.
   * @param Os - TODO
   */
  riOpacity (Os: Color): void;

  /**
   * Script implementation of the RiSpec RiOption() function.
   * @param name - 
   * @param tokens - A list of token names passed to the option.
   * @param params - The name of the option.
   */
  riOption (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiOrientation() function.
   * @param orientation - TODO
   */
  riOrientation (orientation: string): void;

  /**
   * Script implementation of the RiSpec RiPerspective() function.
   * @param fov - The full horizontal field of view angle.
   */
  riPerspective (fov: number): void;

  /**
   * Script implementation of the RiSpec RiPixelFilter() function.
   * @param filterType - TODO
   * @param xwidth - TODO
   * @param ywidth - TODO
   */
  riPixelFilter (filterType: number, xwidth: number, ywidth: number): void;

  /**
   * Script implementation of the RiSpec RiPixelSamples() function.
   * @param xsamples - TODO
   * @param ysamples - TODO
   */
  riPixelSamples (xsamples: number, ysamples: number): void;

  /**
   * Script implementation of the RiSpec RiPixelVariance() function.
   * @param variation - TODO
   */
  riPixelVariance (variation: number): void;

  /**
   * Script implementation of the RiSpec RiProjection() function.
   * @param name - The name of the projection.
   * @param tokens - A list of token names passed to the projection.
   * @param params - A list of corresponding values for tokens.
   */
  riProjection (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiWQuantize() function.
   * @param type - TODO
   * @param one - TODO
   * @param qmin - TODO
   * @param qmax - TODO
   * @param ampl - TODO
   */
  riQuantize (type: string, one: number, qmin: number, qmax: number, ampl: number): void;

  /**
   * Script implementation of the RiSpec RiRelativeDetail() function.
   * @param relativedetail - TODO
   */
  riRelativeDetail (relativedetail: number): void;

  /**
   * Script implementation of the RiSpec RiReverseOrientation() function.
   */
  riReverseOrientation (): void;

  /**
   * Script implementation of the RiSpec RiRotate() function.
   * @param angle - TODO
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  riRotate (angle: number, dx: number, dy: number, dz: number): void;

  /**
   * Script implementation of the RiSpec RiScale() function.
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  riScale (dx: number, dy: number, dz: number): void;

  /**
   * Script implementation of the RiSpec DDiScopedCoordinateSystem() function.
   * @param space - The name for the coordinate system.
   */
  riScopedCoordinateSystem (space: string): void;

  /**
   * Script implementation of the RiSpec RiScreenWindow() function.
   * @param left - TODO
   * @param right - TODO
   * @param bot - TODO
   * @param top - TODO
   */
  riScreenWindow (left: number, right: number, bot: number, top: number): void;

  /**
   * Script implementation of the RiSpec RiShader() function.
   * @param name - The name of the shader.
   * @param handle - TODO
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riShader (name: string, handle: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiShadingInterpolation() function.
   * @param type - TODO
   */
  riShadingInterpolation (type: string): void;

  /**
   * Script implementation of the RiSpec RiShadingRate() function.
   * @param size - TODO
   */
  riShadingRate (size: number): void;

  /**
   * Script implementation of the RiSpec RiShutter() function.
   * @param smin - TODO
   * @param smax - TODO
   */
  riShutter (smin: number, smax: number): void;

  /**
   * Script implementation of the RiSpec RiSides() function.
   * @param nsides - TODO
   */
  riSides (nsides: number): void;

  /**
   * Script implementation of the RiSpec RiSkew() function.
   * @param angle - TODO
   * @param dx1 - TODO
   * @param dy1 - TODO
   * @param dz1 - TODO
   * @param dx2 - TODO
   * @param dy2 - TODO
   * @param dz2 - TODO
   */
  riSkew (angle: number, dx1: number, dy1: number, dz1: number, dx2: number, dy2: number, dz2: number): void;

  /**
   * Script implementation of the RiSpec RiSurface() function.
   * @param name - The name of the surface shader.
   * @param tokens - A list of token names passed to the shader.
   * @param params - A list of corresponding values for tokens.
   */
  riSurface (name: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Script implementation of the RiSpec RiTransform() function.
   * @param transform - The transform to set.
   */
  riTransform (transform: DzMatrix4): void;

  /**
   * Script implementation of the RiSpec RiTransformBegin() function.
   */
  riTransformBegin (): void;

  /**
   * Script implementation of the RiSpec RiTransformEnd() function.
   */
  riTransformEnd (): void;

  /**
   * Script implementation of the RiSpec RiTranslate() function.
   * @param dx - TODO
   * @param dy - TODO
   * @param dz - TODO
   */
  riTranslate (dx: number, dy: number, dz: number): void;

  /**
   * Script implementation of the RiSpec RiWorldBegin() function.
   */
  riWorldBegin (): void;

  /**
   * Sets the background color.
   * @param color - The color to set.
   */
  setBackgroundColor (color: Color): void;

  /**
   * Sets the path of the script to be run when the script definition is called.
   * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
   * @param filename - The path of the script.
   */
  setCleanUpScript (filename: string): void;

  /**
   * Sets whether or not the Ri call that launches a pre-process script should execute.
   * @param shouldContinue - If true, the ri* call will be executed. If false, the ri* call will not be executed.
   */
  setContinueAfterPreProcess (shouldContinue: boolean): void;

  /**
   * Sets the crop window from the handler for the render.
   * @param handler - The render handler to set.
   */
  setCropWindow (handler: DzRenderHandler): void;

  /**
   * Sets the path of the script to run in order to define the renderer. Causes the renderer to be cleared, the cleanup script (if any) to be run and then the render script, clean up script, surface pre-process script, light pre-process script and displacement pre-process script to be cleared.
   * @attention filename is executed the moment the call to this method is made. A global transient variable named Renderer that referrs to the current DzRenderer, exists for the duration of filename. Referencing this variable from outside filename will result in an error.
   * @param definitionFile - The path of the script to run.
   */
  setDefinitionFile (definitionFile: string): void;

  /**
   * Sets the path of the script to be run before a material displacement is processed.
   * @attention Global transient variables named Renderer that refers to the current DzRenderer, DisplacementName that refers to the name of the current displacement, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
   * @param filename - The path of the script.
   */
  setDisplacementPreProcessScript (filename: string): void;

  /**
   * Set whether or not this is a shadow pass.
   * @param onOff - If true, this pass will be marked as a shadow pass.
   */
  setIsShadowPass (onOff: boolean): void;

  /**
   * Sets the path of the script to be run before riLightSource() and riAreaLightSource() are processed.
   * @attention Global transient variables named Renderer that refers to the current DzRenderer, and LightName that refers to the name of the current DzLight, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
   * @param filename - The path of the script.
   */
  setLightPreProcessScript (filename: string): void;

  /**
   * Sets the path of the script that controls the rendering process.
   * @attention filename is executed the moment the call to this method is made. Global transient variables named Renderer that refers to the current DzRenderer, Camera that refers to the current DzCamera, BackDrop that refers to the current DzBackDrop, and RenderOptions that refers to the current DzRenderOptions, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
   * @param filename - The path of the script.
   */
  setRenderScript (filename: string): void;

  /**
   * Sets the path of the script to be run before riSurface is processed.
   * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
   * @param filename - The path of the script.
   */
  setSurfacePreProcessScript (filename: string): void;

  defintionFileChanged: Signal<{
    /**
     * Emitted when the definition file has changed.
     */
  (): void;
  }>;
}

declare var DzScriptedRenderer:
{
  prototype: DzScriptedRenderer;

  /**
   * Default Constructor.
   */
  new (): DzScriptedRenderer;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollarea_dz
 * DAZScript wrapper for QScrollArea.
 * @remarks A DzScrollArea provides a scrolling view of another widget.
 * DzWidget::AlignmentFlags : alignment
 * Holds the alignment of the widget.
 */
interface DzScrollArea extends DzWidget
{

  /**
   * Holds the size of the viewport as if the scroll bars had no valid scrolling range. (Read Only)
   * @since 4.9.3.93
   */
  maximumViewportSize: Size

  /**
   * Holds whether the scroll area should resize the view widget.
   */
  widgetResizable: boolean

  /**
   * Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
   * @param x - The x coordinate.
   * @param y - The y coordinate.
   * @param [xmargin=50] - The margin in the horizontal direction.
   * @param [ymargin=50] - The margin in the vertical direction.
   */
  ensureVisible (x: number, y: number, xmargin?: number, ymargin?: number): void;

  /**
   * Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
   * @param childWidget - The child to scroll to.
   * @param [xmargin=50] - The margin in the horizontal direction.
   * @param [ymargin=50] - The margin in the vertical direction.
   */
  ensureWidgetVisible (childWidget: DzWidget, xmargin?: number, ymargin?: number): void;

  /**
   * Hides the frame around the scroll area.
   */
  hideFrame (): void;

  /**
   * Sets whether or not to display the horizontal scrollbar.
   * @param onOff - If true, the horizontal scrollbar is always displayed. If false, the horizontal scrollbar is never displayed.
   */
  setHorizontalScrollbarDisplay (onOff: boolean): void;

  /**
   * Sets whether or not to display the vertical scrollbar.
   * @param onOff - If true, the vertical scrollbar is always displayed. If false, the vertical scrollbar is never displayed.
   */
  setVerticalScrollbarDisplay (onOff: boolean): void;

  /**
   * Sets the contents of the scroll area to a widget.
   * @param widget - The widget to set as a child of the scroll area; this widget will be destroyed when the scroll area is deleted or when a new widget is set.
   */
  setWidget (widget: DzWidget): void;

}

declare var DzScrollArea:
{
  prototype: DzScrollArea;

  /**
   * Creates a scroll area as a child of the given parent widget.
   * @param parent - The widget parent for the scroll area.
   */
  new (parent: DzWidget): DzScrollArea;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollview_dz
 * DAZScript wrapper for Q3ScrollView.
 * @remarks A DzScrollView provides a scrolling area with on-demand scroll bars.
 * Deprecated
 * Exists only to keep old code working. Do not use in new code. Use DzScrollArea where possible instead.
 */
interface DzScrollView extends DzWidget
{

}

declare var DzScrollView:
{
  prototype: DzScrollView;

  /**
   * Creates a scroll view as a child of the given parent widget.
   * @param parent - The widget parent for the scroll view.
   */
  new (parent: DzWidget): DzScrollView;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/searchcontainer_dz
 * A top level asset container for holding search results…
 * @remarks TODO: Add detailed description.
 */
interface DzSearchContainer extends DzTopLevelAssetContainer, DzRefCountedItem
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/selectionmap_dz
 * Provides a mapping between face groups and nodes associated with a mesh.
 * @remarks This class provides a mapping between the names of the facegroup_dz objects associated with a facetmesh_dz and the DzNode objects that are likewise associated with that mesh. This mapping plays a part in the mechanism that allows a user to click on different areas of the mesh in the viewport and have that translate to the selection of a node.
 */
interface DzSelectionMap extends DzBase
{

  /**
   * Adds a new face group/node mapping to the selection map.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param faceGroupName - The name of the face group that will map to the given node.
   * @param node - The node that will be selected when the face group is clicked on in the viewport.
   * @param [replaceIfExists=false] - If true, checks to see if the face group is already mapped, and replaces the mapped node with the given node. If false, the operation will fail if the face group is already mapped.
   */
  addPair (faceGroupName: string, node: DzNode, replaceIfExists?: boolean): DzError;

  /**
   * Clears all pairs in the map.
   */
  clearAll (): void;

  /**
   * Clears the missing groups based on the face groups on mesh.
   * @param mesh - The reference mesh.
   */
  clearMissingGroups (mesh: facetmesh_dz): void;

  /**
   * Searches for the first group for a node.
   * @returns The name of the group for node.
   * @param node - The node to find the group for.
   */
  findGroupForNode (node: DzNode): string;

  /**
   * Searches for the first node for a group.
   * @returns null if it fails, else the found node for group.
   * @param groupName - The name of the group to find.
   */
  findNodeForGroup (groupName: string): DzNode;

  /**
   * Searches for the first pair.
   * @returns The list of indices mapping to the node, empty list if no mapping for the node exists.
   * @param node - The node to find the mapping for.
   */
  findPair (node: DzNode): number;

  /**
   * Searches for the first pair.
   * @returns The index of the mapping for the face group, or -1 if no mapping for the face group exists.
   * @param groupName - The name of the face group to find the mapping for.
   */
  findPair (groupName: string): number;

  /**
   * @returns The number of face group/node mappings in the selection map.
   */
  getNumPairs (): number;

  /**
   * @returns The name of the face group for the mapping.
   * @param index - The index of the face group/node mapping to look up.
   */
  getPairGroup (index: number): string;

  /**
   * @returns The node for the mapping.
   * @param index - The index of the face group/node mapping to look up.
   */
  getPairNode (index: number): DzNode;

  /**
   * Removes a face group/node mapping from the selection map.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param index - The index of the mapping to remove.
   */
  removePair (index: number): DzError;

  mapModified: Signal<{
    /**
     * Emitted when the map changes.
     */
  (): void;
  }>;
  visibilityChanged: Signal<{
    /**
     * Emitted when the visibility of the node in a given pair changes.
     */
  (): void;
  }>;
}

declare var DzSelectionMap:
{
  prototype: DzSelectionMap;

  /**
   * Default Constructor.
   */
  new (): DzSelectionMap;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settings_dz
 * Class for storing and passing simple sets of settings.
 * @remarks TODO: Add detailed description.
 */
interface DzSettings extends QObject
{

  /**
   * Enumerated types of the values stored in the DzSettings class.
   */
  /**
   * A string value.
   */
  readonly StringValue: number;

  /**
   * An integer (whole number) value.
   */
  readonly IntValue: number;

  /**
   * A boolean (true/false) value.
   */
  readonly BoolValue: number;

  /**
   * A floating-point (decimal) value.
   */
  readonly FloatValue: number;

  /**
   * A nested settings value.
   */
  readonly SettingsValue: number;

  /**
   * Clears all values from this settings object.
   */
  clear (): void;

  /**
   * Copies the setting with the given index to the specified settings object.
   * @param which - The index of the setting to copy.
   * @param copyTo - The settings object to copy the setting to.
   */
  copySetting (which: number, copyTo: DzSettings): void;

  /**
   * Copies the setting with the given index to the specified settings object.
   * @param key - The key of the setting to copy.
   * @param copyTo - The settings object to copy the setting to.
   */
  copySetting (key: string, copyTo: DzSettings): void;

  /**
   * Populates this settings object with the data encoded in a string.
   * @returns true if the data was read successfully, otherwise false.
   * XML Syntax
   * If settings consists of XML syntax, it is expected to contain an element tagged “Settings” at the root level; all other root level elements are ignored. This “Settings” element is expect to encapsulate child “Setting” tagged elements; all other child elements will be ignored. These “Setting” elements are expected to define “Key” and “Type” attributes. The “Key” attribute defines the named setting, and will depend on what this settings object is used for. The “Type” attribute should define a value of “Bool”, “Int”, “Float”, “String” or “SubSetting”; any non-recognized value will be interpreted as “String”. The text (or child elements in the case of “SubSetting”) of a “Setting” element defines the value of that setting.
   * @example
   * var sSettings = [
   * 		'<Settings>',
   * 		' <Setting Type="Bool" Key="testBool">yes</Setting>',
   * 		' <Setting Type="Int" Key="testInt">123</Setting>',
   * 		' <Setting Type="Float" Key="testFloat">123.123</Setting>',
   * 		' <Setting Type="String" Key="testString">one two three</Setting>',
   * 		' <Setting Type="SubSetting" Key="testSettings">',
   * 		'  <Setting Type="Bool" Key="testBool">no</Setting>',
   * 		'  <Setting Type="Int" Key="testInt">456</Setting>',
   * 		'  <Setting Type="Float" Key="testFloat">456.456</Setting>',
   * 		'  <Setting Type="String" Key="testString">four five six</Setting>',
   * 		' </Setting>',
   * 		'</Settings>'
   * 	].join( "\n" );
   *  
   * var oSettings = new DzSettings();
   * if( oSettings.fromString( sSettings ) ){
   * 	print( "Read of XML encoded data was successful." );
   *  
   * 	print( oSettings.getIntValue( "testInt" ) ); //123
   *  
   * 	var oSubSettings = oSettings.getSettingsValue( "testSettings" );
   * 	print( oSubSettings.getStringValue( "testString" ) ); //four five six
   * } else {
   * 	print( "Could not read XML encoded data." );
   * }
   * JSON Syntax
   * (since 4.8.1.23)
   * If settings consists of JSON syntax, it is expected to contain an anonymous Object at the root level. This object is expected to define named members that will depend on the purpose of the settings object. These members serve as the keys for the values to be set. The value of a given member determines the type of setting that will be set.
   * The JSON format supports a single Number type, so a specific structure is used to produce a predictable result. Members that define a numeric value will set a float value on the settings object by default. Setting an integer value on the object is accomplished by defining a member as an Array of 2 values, where the first value is the string “i” and the second value is the integer value to be set. For the sake of continuity, the same structure can be used to indicate a float by substituting “i” with “f”.
   * Nested settings objects can be specified by defining a member as an Object that follows the structure of the root object.
   * For reasons of backward compatibility, the value of any member can be an object so long as that object contains a member named “type” whose value is one of “string”, “bool”, “int”, “float” or “setting”, and it also contains a member named “value” with the appropriate value.
   * @example
   * var oData = {
   * 	"testBool" : true,
   * 	"testInt" : [ "i", 123 ],
   * 	"testFloat" : 123.123,
   * 	"testString" : "one two three",
   * 	"testSettings" : {
   * 		"type" : "settings",
   * 		"value" : {
   * 			"testBool" : false,
   * 			"testInt" : [ "i", 456 ],
   * 			"testFloat" : 456.456,
   * 			"testString" : "four five six"
   * 		}
   * 	}
   * };
   * //...
   * var oData = {
   * 	"testBool" : true,
   * 	"testInt" : [ "i", 123 ],
   * 	"testFloat" : 123.123,
   * 	"testString" : "one two three",
   * 	"testSettings" : {
   * 		"testBool" : false,
   * 		"testInt" : [ "i", 456 ],
   * 		"testFloat" : 456.456,
   * 		"testString" : "four five six"
   * 	}
   * };
   * //...
   * var oData = {
   * 	"testBool" : true,
   * 	"testInt" : {
   * 		"type" : "int",
   * 		"value" : 123
   * 	},
   * 	"testFloat" : 123.123,
   * 	"testString" : "one two three",
   * 	"testSettings" : {
   * 		"testBool" : false,
   * 		"testInt" : [ "i", 456 ],
   * 		"testFloat" : 456.456,
   * 		"testString" : "four five six"
   * 	}
   * };
   * //...
   * //...
   * var oSettings = new DzSettings();
   * if( oSettings.fromString( JSON.stringify( oData ) ) ){
   * 	print( "Read of JSON encoded data was successful." );
   *  
   * 	print( oSettings.getIntValue( "testInt" ) ); //123
   *  
   * 	var oSubSettings = oSettings.getSettingsValue( "testSettings" );
   * 	print( oSubSettings.getStringValue( "testString" ) ); //four five six
   * } else {
   * 	print( "Could not read JSON encoded data." );
   * }
   * @seealso toString() and toJsonString()
   * @param settings - The encoded string to load the data from.
   */
  fromString (settings: string): boolean;

  /**
   * Gets a boolean value from the settings.
   * @returns The value of the setting.
   * @param key - The key for the value to get.
   * @param [def=false] - The value to return if the key does not exist.
   */
  getBoolValue (key: string, def?: boolean): boolean;

  /**
   * @returns The value of the setting.
   * @param key - The key for the value to get.
   * @param [def=0.0] - The value to return if the key does not exist.
   */
  getFloatValue (key: string, def?: number): number;

  /**
   * Gets an integer value from the settings.
   * @returns The value of the setting.
   * @param key - The key for the value to get.
   * @param [def=0] - The value to return if the key does not exist.
   */
  getIntValue (key: string, def?: number): number;

  /**
   * @returns The key for the setting at the given index (if valid), otherwise an empty string.
   * @param which - The index of the value to get the key for.
   */
  getKey (which: number): string;

  /**
   * @returns The number of values stored in the settings.
   */
  getNumValues (): number;

  /**
   * @returns The index of the setting with the given key (if any), otherwise NULL.
   * @attention The returned index is only valid while this object remains unchanged. Once a value is added or removed, this index may become invalid.
   * @param key - The key of the value to find.
   */
  getSettingIndex (key: string): number;

  /**
   * @returns The setting if key is found and is a SettingsValue, otherwise NULL.
   * @param key - The key for the value to get.
   */
  getSettingsValue (key: string): DzSettings;

  /**
   * Gets a string value from the settings.
   * @returns The value of the setting.
   * @param key - The key for the value to get.
   * @param [def=“”] - The value to return if the key does not exist.
   */
  getStringValue (key: string, def?: string): string;

  /**
   * @returns The value of the setting at the given index in string form (if valid), otherwise an empty string.
   * @param which - The index of the value to get.
   */
  getValue (which: number): string;

  /**
   * @returns The type of the setting at the given index (if valid), otherwise StringValue.
   * @param which - The index of the value to get the type of.
   */
  getValueType (which: number): number;

  /**
   * @returns The index of the key (if any), otherwise -1.
   * @param key - The name of the key to find.
   */
  hasKey (key: string): number;

  /**
   * Removes a value.
   * @param key - The key for the value to remove.
   */
  removeValue (key: string): void;

  /**
   * Replaces the settings of this object with the settings of the specified object.
   * @param settings - The object with the settings to replace this one with.
   */
  replaceWithSettings (settings: DzSettings): void;

  /**
   * Adds a boolean value.
   * @param key - The key for the value to set.
   * @param value - The boolean value for the setting.
   */
  setBoolValue (key: string, value: boolean): void;

  /**
   * Adds a float value.
   * @param key - The key for the value to set.
   * @param value - The floating point value for the setting.
   */
  setFloatValue (key: string, value: number): void;

  /**
   * Adds an integer value.
   * @param key - The key for the value to set.
   * @param value - The integer value for the setting.
   */
  setIntValue (key: string, value: number): void;

  /**
   * Adds a nested settings value.
   * @returns The created settings object (if any), otherwise NULL.
   * @param key - The key for the value to set.
   * @param settings - The sub-setting value to add; a local copy is made.
   */
  setSettingsValue (key: string, settings: DzSettings): DzSettings;

  /**
   * Adds a nested (empty) settings value.
   * @returns An empty settings object with the given key.
   * @param key - The key for the value to set.
   */
  setSettingsValue (key: string): DzSettings;

  /**
   * Adds a string value.
   * @param key - The key for the value to set.
   * @param value - The string value for the setting.
   */
  setStringValue (key: string, value: string): void;

  /**
   * @returns A JSON object representation of the data.
   * @example
   * var oSettings = new DzSettings();
   * oSettings.setBoolValue( "testBool", true );
   * oSettings.setIntValue( "testInt", 123 );
   * oSettings.setFloatValue( "testFloat", 123.123 );
   * oSettings.setStringValue( "testString", "one two three" );
   *  
   * var oSubSettings = new DzSettings();
   * oSubSettings.setBoolValue( "testBool", false );
   * oSubSettings.setIntValue( "testInt", 456 );
   * oSubSettings.setFloatValue( "testFloat", 456.456 );
   * oSubSettings.setStringValue( "testString", "four five six" );
   *  
   * oSettings.setSettingsValue( "testSettings", oSubSettings );
   *  
   * var oJsonSettings = oSettings.toJson();
   * print( JSON.stringify( oJsonSettings ) );
   *  
   * print( oJsonSettings["testString"] ); //one two three
   *  
   * var oJsonSubSettings = oJsonSettings["testSettings"]["value"];
   * print( oJsonSubSettings["testString"] ); //four five six
   * @seealso toJsonString()
   * @since 4.8.1.23
   */
  toJson (): Object;

  /**
   * @returns A JSON encoded string representation of the data.
   * @example
   * var oSettings = new DzSettings();
   * oSettings.setBoolValue( "testBool", true );
   * oSettings.setIntValue( "testInt", 123 );
   * oSettings.setFloatValue( "testFloat", 123.123 );
   * oSettings.setStringValue( "testString", "one two three" );
   *  
   * var oSubSettings = new DzSettings();
   * oSubSettings.setBoolValue( "testBool", false );
   * oSubSettings.setIntValue( "testInt", 456 );
   * oSubSettings.setFloatValue( "testFloat", 456.456 );
   * oSubSettings.setStringValue( "testString", "four five six" );
   *  
   * oSettings.setSettingsValue( "testSettings", oSubSettings );
   *  
   * print( oSettings.toJsonString() );
   * @seealso toJson()
   * @since 4.8.1.23
   */
  toJsonString (): string;

  /**
   * Appends lines of code to a script object that will reconstruct this DzSettings object.
   * @param varName - The identifier for the variable in the script that holds the settings object.
   * @param script - The script object to generate the settings lines in.
   * @param indent - The indention level for the generated lines.
   * @param [define=false] - If true, prepends a variable definition statement to the lines generated in script. If false, it is the caller's responsibility to ensure that varName is already defined in script and holds a valid DzSettings object.
   */
  toScript (varName: string, script: DzScript, indent: number, define?: boolean): void;

  /**
   * @returns An XML encoded string representation of the data.
   * @example
   * var oSettings = new DzSettings();
   * oSettings.setBoolValue( "testBool", true );
   * oSettings.setIntValue( "testInt", 123 );
   * oSettings.setFloatValue( "testFloat", 123.123 );
   * oSettings.setStringValue( "testString", "one two three" );
   *  
   * var oSubSettings = new DzSettings();
   * oSubSettings.setBoolValue( "testBool", false );
   * oSubSettings.setIntValue( "testInt", 456 );
   * oSubSettings.setFloatValue( "testFloat", 456.456 );
   * oSubSettings.setStringValue( "testString", "four five six" );
   *  
   * oSettings.setSettingsValue( "testSettings", oSubSettings );
   *  
   * print( oSettings.toString() );
   */
  toString (): string;

}

declare var DzSettings:
{
  prototype: DzSettings;

  /**
   * Default constructor.
   */
  new (): DzSettings;

  /**
   * Copy constructor.
   * @param settings - The settings object to copy data from.
   */
  new (settings: DzSettings): DzSettings;

  /**
   * Enumerated types of the values stored in the DzSettings class.
   */
  /**
   * A string value.
   */
  readonly StringValue: number;
  /**
   * An integer (whole number) value.
   */
  readonly IntValue: number;
  /**
   * A boolean (true/false) value.
   */
  readonly BoolValue: number;
  /**
   * A floating-point (decimal) value.
   */
  readonly FloatValue: number;
  /**
   * A nested settings value.
   */
  readonly SettingsValue: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settingshelper_dz
 * Convenience object to make working with DzAppSettings even easier.
 * @remarks Choosing the appropriate key type and pushing/popping keys (paths) is handled by the object.
 */
interface DzSettingsHelper extends QObject
{

  /**
   * Retrieves a value from the subkey at the given key.
   * @returns The object that represents the value at the specified path/name
   * @example
   * var oSettingsHelper = new DzSettingsHelper();
   * var bResult = oSettingsHelper.get( "MyCompany/MyToolName", "MyKey", false );
   * print( bResult );
   * @param path - The path of the key to retrieve the named value from; similar to a folder in the file system
   * @param name - The name of the value to retrieve; the “key” in a key/value pair
   * @param value - The default value to return if the name is not found; the “value” in a key/value pair
   */
  get (path: string, name: string, value: Object): Object;

  /**
   * Retrieves whether a value exists at the given key.
   * @returns true if path/key exists, otherwise false.
   * @example
   * var oSettingsHelper = new DzSettingsHelper();
   * var bResult = oSettingsHelper.hasValue( "MyCompany/MyToolName", "MyKey" );
   * print( bResult );
   * @param path - The path of the key to check for its existence; similar to a folder in the file system
   * @param name - The name of the value to check for its existence; the “key” in a key/value pair
   */
  hasValue (path: string, name: string): boolean;

  /**
   * Removes a named value at the given path.
   * @returns true if path/key exists, otherwise false.
   * @example
   * var oSettingsHelper = new DzSettingsHelper();
   * var bResult = oSettingsHelper.removeValue( "MyCompany/MyToolName", "MyKey" );
   * print( bResult );
   * @since 4.9.0.38
   * @param path - The path of the key to remove; similar to a folder in the file system
   * @param name - The name of the value to remove; the “key” in a key/value pair
   */
  removeValue (path: string, name: string): boolean;

  /**
   * Records a named value to the path specified.
   * @example
   * var oSettingsHelper = new DzSettingsHelper();
   * oSettingsHelper.set( "MyCompany/MyToolName", "MyKey", true );
   * @param path - The path of the key to place the named value at; similar to a folder in the file system
   * @param name - The name of the value to record; the “key” in a key/value pair
   * @param value - The value to record; i.e. a Number, String, Boolean or Color; the “value” in a key/value pair
   */
  set (path: string, name: string, value: Object): void;

}

declare var DzSettingsHelper:
{
  prototype: DzSettingsHelper;

  /**
   * Default Constructor
   */
  new (): DzSettingsHelper;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderassetfilter_dz
 * Class for saving DSON-based Shader Presets.
 * @remarks An asset save filter for saving a Shader Preset in the DSON format.
 * @seealso Sample: Save a Shader Preset
 */
interface DzShaderAssetFilter extends DzAssetFileOutFilter
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadercamera_dz
 * Custom scriptable class for cameras using RenderMan Shader Language (RSL) Shaders.
 * @remarks This class provides a DzBasicCamera derived object with creator-defined properties that will be passed to the RSL Shader at render-time. Properties intended to be used to pass values as arguments to a shader attached to the camera must be added using DzRSLShader. Properties for the camera that will be used by the render-time scripts to set attributes must be added via DzElement::addProperty().
 */
interface DzShaderCamera extends DzBasicCamera
{

  /**
   * Adds shader to this camera's internal list of shaders and sets shader 's owner to this camera.
   * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
   * @param shader - 
   */
  addShader (shader: DzRSLShader): boolean;

  /**
   * @returns The internal name of the camera. This is not the same as the QObject::name property.
   */
  getCameraName (): string;

  /**
   * @returns The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this camera's property list.
   */
  getDefinitionFile (): string;

  /**
   * @returns The number of DzRSLShaders on this camera.
   */
  getNumShaders (): number;

  /**
   * @returns The relative path [from DzApp::getScriptsPath()] to the DAZ Script that is executed at render-time.
   */
  getRenderTimeFile (): string;

  /**
   * @returns The DzRSLShader at index or NULL if no shader exists at that index.
   * @param index - 
   */
  getShader (index: number): DzRSLShader;

  /**
   * Removes shader from this camera's internal list of shaders.
   * @returns true if shader is successfully removed from the list, otherwise false.
   * @param shader - 
   */
  removeShader (shader: DzRSLShader): boolean;

  /**
   * Sets the internal name of the camera; this is not the same as the QObject::name property. By default, this is “Custom”.
   * @param name - 
   */
  setCameraName (name: string): void;

  /**
   * Sets the relative path of the [DAZ Script] file that builds this camera's property list.
   * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Camera - referring to the current DzShaderCamera, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
   * @param definitionFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this camera's property list
   * @param [doOverride=false] - 
   * @param [runScript=true] - 
   */
  setDefinitionFile (definitionFile: string, doOverride?: boolean, runScript?: boolean): void;

  /**
   * Sets the relative path of the [DAZ Script] file that will be executed at render-time. This script can declare variables, set displays, hiders, and/or options as well as shader parameters for the element, and implement custom logic for special effects.
   * @returns true if renderTimeFile is valid, otherwise false.
   * @attention When renderTimeFile is executed, a global variable named Camera - referring to the current DzShaderCamera - exists for the duration of renderTimeFile. Referencing this variable from outside filename will result in an error. See the Render Time Functions for a list of special functions only available to this script.
   * @param renderTimeFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that executes at render time.
   */
  setRenderTimeFile (renderTimeFile: string): boolean;

  /**
   * Sets the global graphic state by adding a series of RiDeclare calls before RiWorldBegin.
   * @example
   * var aTokens = [ "Nn", "Pp", "Cc", "Ff" ];
   * var aParams = [ "varying normal", "varying point", "varying color", "varying float" ];
   * Camera.declare( aTokens, aParams );
   * @param tokens - An Array of the String] token names to set
   * @param types - An Array of the corresponding String] type to set for each token
   */
  declare (tokens: Array<unknown>, types: Array<unknown>): void;

  /**
   * Sets the global graphic state by adding a RiDisplayV call before RiWorldBegin.
   * @example
   * NEED EXAMPLE
   * @param name - The name of the file or framebuffer to set, depending on type
   * @param type - The type of display to set; i.e. file, tiff, etc
   * @param mode - The mode to set; i.e. rgb, rgba, etc
   * @param tokens - An Array of the String] tokens to set
   * @param params - An Array of the corresponding basic type to set for each token
   */
  setDisplay (name: string, type: string, mode: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Sets the global graphic state by adding a RiHiderV call before RiWorldBegin.
   * @example
   * NEED EXAMPLE
   * @param type - The type of hider to set; i.e. hidden, raytrace, photonmap, etc
   * @param tokens - An Array of the String] tokens to set
   * @param params - An Array of the corresponding basic type to set for each token
   */
  setHider (type: string, tokens: Array<unknown>, params: Array<unknown>): void;

  /**
   * Sets the global graphic state by adding a RiOptionV call before RiWorldBegin.
   * @example
   * NEED EXAMPLE
   * @param option - The name of the option to set
   * @param tokens - An Array of the String] tokens to set
   * @param params - An Array of the corresponding basic type to set for each token
   */
  setOption (option: string, tokens: Array<unknown>, params: Array<unknown>): void;

}

declare var DzShaderCamera:
{
  prototype: DzShaderCamera;

  /**
   * Default Constructor.
   */
  new (): DzShaderCamera;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @seealso 
   * @param definitionFile - The relative [to DzApp::getScriptsPath()] path to the script file that creates this camera's property list.
   * @param renderTimeFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that executes at render time.
   */
  new (definitionFile: string, renderTimeFile: string): DzShaderCamera;

  /**
   */
  new (): DzShaderCamera;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @seealso 
   * @param definitionFile - The relative [to DzApp::getScriptsPath()] path to the script file that creates this camera's property list.
   */
  new (definitionFile: string): DzShaderCamera;

  /**
   */
  new (): DzShaderCamera;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderdescription_dz
 * Describes the properties of a RenderMan shader.
 * @remarks DzShaderDescription contains information about a RenderMan shader - this includes the type of the shader, and a list of its parameters.
 */
interface DzShaderDescription extends QObject
{

  /**
   * Enumerated types of RenderMan shaders.
   */
  /**
   * Surface shader.
   */
  readonly SurfaceShader: number;

  /**
   * Light Shader.
   */
  readonly LightShader: number;

  /**
   * Displacement Shader.
   */
  readonly DisplacementShader: number;

  /**
   * Volume Shader.
   */
  readonly VolumeShader: number;

  /**
   * Image Shader.
   */
  readonly ImageShader: number;

  /**
   * The type of the shader
   */
  type: number

  /**
   * @returns The number of parameters in the shader.
   */
  getNumParameters (): number;

  /**
   * @returns The i'th parameter in the shader.
   * @param i - 
   */
  getParameter (i: number): DzShaderParameter;

}

declare namespace DzShaderDescription
{

  /**
   * Enumerated types of RenderMan shaders.
   */
  /**
   * Surface shader.
   */
  export const SurfaceShader: number;
  /**
   * Light Shader.
   */
  export const LightShader: number;
  /**
   * Displacement Shader.
   */
  export const DisplacementShader: number;
  /**
   * Volume Shader.
   */
  export const VolumeShader: number;
  /**
   * Image Shader.
   */
  export const ImageShader: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderlight_dz
 * Custom scriptable class for lights using RenderMan Shader Language (RSL) Shaders.
 * @remarks This class provides a DzLight derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the light only has two properties - Color and Intensity. The values of these properties are not sent to the shader by default, nor are any attributes set representing the value of these properties. Unless put to use via DzRSLShader, these properties are purely for OpenGL purposes. These properties are not mappable by default, but can be made so by using DzRSLShader::addMapProperty() or DzRSLShader::addMappableProperty(). All other properties for the light must be added using DzRSLShader in order to be used to pass values as arguments to the shader. Properties for the light that will be used by the render-time scripts to set attributes must be added via DzElement::addProperty().
 */
interface DzShaderLight extends DzLight
{

  /**
   * Enumerated values for the light type
   * @seealso setLightType
   */
  /**
   * Null - Only in the scene to provide access to properties.
   */
  readonly NullLight: number;

  /**
   * Emits global light.
   */
  readonly AmbientLight: number;

  /**
   * Emits light in all directions.
   */
  readonly PointLight: number;

  /**
   * Emits parallel light.
   */
  readonly DistantLight: number;

  /**
   * Emits light in a pattern.
   */
  readonly SpotLight: number;

  /**
   * Adds shader to this light's internal list of shaders and sets shader 's owner to this light.
   * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
   * @param shader - 
   */
  addShader (shader: DzRSLShader): boolean;

  /**
   * @returns The property that controls the color of this light.
   */
  getColorControl (): DzColorProperty;

  /**
   * @returns The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this light's property list.
   */
  getDefinitionFile (): string;

  /**
   * @returns The value of the property that controls the intensity of this light.
   */
  getIntensity (): number;

  /**
   * @returns The property that controls the intensity of this light.
   */
  getIntensityControl (): DzFloatProperty;

  /**
   * @returns The internal name of the light. This is not the same as the QObject::name property.
   */
  getLightName (): string;

  /**
   * @returns The type of the light.
   */
  getLightType (): number;

  /**
   * @returns The number of DzRSLShaders on this light.
   */
  getNumShaders (): number;

  /**
   * @returns The DzRSLShader at index or NULL if no shader exists at that index.
   * @param index - 
   */
  getShader (index: number): DzRSLShader;

  /**
   * @returns The path to the generated shadow map for this light.
   */
  getShadowMapPath (): string;

  /**
   * Removes shader from this light's internal list of shaders.
   * @returns true if shader is successfully removed from the list, otherwise false.
   * @param shader - 
   */
  removeShader (shader: DzRSLShader): boolean;

  /**
   * Sets the relative path of the [DAZ Script] file that builds this light's property list.
   * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Light - referring to the current DzShaderLight being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
   * @param definitionFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this light's property list
   * @param [doOverride=false] - 
   * @param [runScript=true] - 
   */
  setDefinitionFile (definitionFile: string, doOverride?: boolean, runScript?: boolean): void;

  /**
   * Sets the internal name of the light; this is not the same as the QObject::name property. By default, this is “Custom”.
   * @param name - 
   */
  setLightName (name: string): void;

  /**
   * Sets the type of a light. A light's type determines the OpenGL representation.
   * @param type - 
   */
  setLightType (type: number): void;

  /**
   * Sets a flag so that transforms are applied to the coordinate space that the light is in, greatly simplifying shader math.
   * @param onOff - 
   */
  setUseLocalShaderSpace (onOff: boolean): void;

  /**
   * @returns Whether transforms are applied to the coordinate space that the light is in. false by default
   */
  usesLocalShaderSpace (): boolean;

}

declare var DzShaderLight:
{
  prototype: DzShaderLight;

  /**
   * Default Constructor.
   */
  new (): DzShaderLight;

  /**
   * @seealso 
   * @param definitionFile - The relative [from DzApp::getScriptsPath()] path to the script file that creates this light's property list.
   * @param type - The enumerated type for the light. This controls certain aspects of the light, for instance whether or not the user can view through the light, the icon displayed in the Scene pane, the avatar representing the light in the viewport.
   */
  new (definitionFile: string, type: number): DzShaderLight;

  /**
   */
  new (): DzShaderLight;

  /**
   * Enumerated values for the light type
   * @seealso setLightType
   */
  /**
   * Null - Only in the scene to provide access to properties.
   */
  readonly NullLight: number;
  /**
   * Emits global light.
   */
  readonly AmbientLight: number;
  /**
   * Emits light in all directions.
   */
  readonly PointLight: number;
  /**
   * Emits parallel light.
   */
  readonly DistantLight: number;
  /**
   * Emits light in a pattern.
   */
  readonly SpotLight: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadermaterial_dz
 * Custom scriptable class for materials using RenderMan Shader Language (RSL) Shaders.
 * @remarks This class provides a DzMaterial derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the material only has two properties - Diffuse Color (Cs) and Opacity Strength (Os) - which are not passed as tokens to the shader, rather they are attributes sent directly to the renderer, via RiColor() and RiOpacity() respectively. These properties are not mappable by default, but can be made so by using DzRSLShader::addMapProperty(). All other properties for the material must be added using DzRSLShader::addShaderProperty() and DzRSLShader::addMappableProperty() in order to be used to pass values as arguments to the shader. Properties for the material that will be used by the render-time scripts to set attributes must be added via DzElement::addProperty().
 * Samples:
 * rispec_constant_shader_preset - A [heavily commented] Shader Preset that applies a material definition script (below) for the standard RenderMan Constant Surface Shader.
 * @seealso - rispec_constant_shader_definition - The definition file for the standard RenderMan Constant Surface Shader, that builds the properties displayed to users in the Surfaces tab (Advanced sub tab).
 * - rispec_constant_material_definition - The definition file for the above, that builds the shader objects used by the render for the current material.
 * - rispec_constant_surface_shader - The RSL source for the standard RenderMan Constant Surface Shader.
 * - s_standard_render_time_script - The render-time script that sets various RiAttributes dependant on the values of properties provided to the user.
 */
interface DzShaderMaterial extends DzMaterial, DzRefCountedItem
{

  /**
   * Adds shader to this material's internal list of shaders and sets shader 's owner to this material.
   * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
   * @param shader - 
   */
  addShader (shader: DzRSLShader): boolean;

  /**
   * @returns The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this material's property list.
   */
  getDefinitionFile (): string;

  /**
   * @returns The Diffuse Color property of this material
   */
  getDiffuseProperty (): DzColorProperty;

  /**
   * @returns The number of DzRSLShaders on this material
   */
  getNumShaders (): number;

  /**
   * @returns The Opacity property of this material
   */
  getOpacityProperty (): DzFloatProperty;

  /**
   * @returns The DzRSLShader at index or NULL if no shader exists at that index.
   * @param index - 
   */
  getShader (index: number): DzRSLShader;

  /**
   * Removes shader from this material's internal list of shaders.
   * @returns true if shader is successfully removed from the list, otherwise false.
   * @param shader - 
   */
  removeShader (shader: DzRSLShader): boolean;

  /**
   * Sets the relative path of the [DAZ Script] file that defines this material.
   * @example
   * In a nested folder [./scripts/support/DAZ/shaderDefinitions/surface]
   * // Set the definition file for the DzShaderMaterial (relative to the scripts folder)
   * oMaterial.setDefinitionFile( "support/DAZ/shaderDefinitions/surface/dzglossy.dsb" );
   * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Material - refering to the current DzShaderMaterial being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
   * @param definitionFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that defines this material
   * @param [doOverride=false] - Whether or not to override the setting of the definition file if it has already been set
   * @param [runScript=true] - Whether or not to run the definition script upon setting it
   */
  setDefinitionFile (definitionFile: string, doOverride?: boolean, runScript?: boolean): void;

  /**
   * Sets the name of the material type that will be returned by getMaterialName(). By default, this is “Custom”
   * @example
   * // Set the name of the material
   * // (the label displayed to the user in the Surfaces pane when the surface is selected)
   * Material.setMaterialName( "DAZ Studio Glossy Plastic" );
   * @param name - The name to assign to this material
   */
  setMaterialName (name: string): void;

  /**
   * Sets whether this material needs the Tangent Space Params: varying vector dPds and varying float dPdsM. dPds is the tangent vector along the surface. dPdsM is the handedness of the bitangent vector on the surface. The bitangent can be reconstructed using:
   * vector B = normalize (((normalize(N) ^ normalize(dPds))*dPdsM);
   * This should be turned off/on in the script handed to DzRSLShader::setRenderTimeFile(). It is not persistent between sessions. It is false by default.
   * @example
   * // Turn on the TangentSpaeParams, from within in a surface DzRSLShader's rendertime file:
   * var Material = Shader.getOwner();
   * Material.setNeedsTangentSpaceParams( true );
   * @param onoff - Whether or not this material needs the Tangent Space Params
   */
  setNeedsTangentSpaceParams (onoff: boolean): void;

}

declare var DzShaderMaterial:
{
  prototype: DzShaderMaterial;

  /**
   * Default Constructor.
   */
  new (): DzShaderMaterial;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @seealso 
   * @param mat - The DzShaderMaterial to copy
   * @param [duplicateMissingProps=true] - Whether or not to duplicate missing properties
   */
  new (mat: DzShaderMaterial, duplicateMissingProps?: boolean): DzShaderMaterial;

  /**
   */
  new (): DzShaderMaterial;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @seealso 
   * @param definitionFile - The relative path [from DzApp::getScriptsPath()] to the DAZ Script that creates this material's property list.
   */
  new (definitionFile: string): DzShaderMaterial;

  /**
   */
  new (): DzShaderMaterial;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderparameter_dz
 * Describes a single parameter for a RenderMan shader.
 * @remarks TODO: Add detailed description.
 */
interface DzShaderParameter extends QObject
{

  /**
   * Enumerated types of shader parameters.
   */
  /**
   * Unknown Parameter type.
   */
  readonly UnknownType: number;

  /**
   * Point type parameter.
   */
  readonly PointType: number;

  /**
   * Normal type parameter.
   */
  readonly NormalType: number;

  /**
   * Vector type parameter.
   */
  readonly VectorType: number;

  /**
   * Color type parameter.
   */
  readonly ColorType: number;

  /**
   * Scalar type parameter.
   */
  readonly ScalarType: number;

  /**
   * String type parameter.
   */
  readonly StringType: number;

  /**
   * Matrix type parameter.
   */
  readonly MatrixType: number;

  /**
   * The type of the parameter
   */
  type: number

}

declare namespace DzShaderParameter
{

  /**
   * Enumerated types of shader parameters.
   */
  /**
   * Unknown Parameter type.
   */
  export const UnknownType: number;
  /**
   * Point type parameter.
   */
  export const PointType: number;
  /**
   * Normal type parameter.
   */
  export const NormalType: number;
  /**
   * Vector type parameter.
   */
  export const VectorType: number;
  /**
   * Color type parameter.
   */
  export const ColorType: number;
  /**
   * Scalar type parameter.
   */
  export const ScalarType: number;
  /**
   * String type parameter.
   */
  export const StringType: number;
  /**
   * Matrix type parameter.
   */
  export const MatrixType: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadersupportassetfilter_dz
 * Class for saving a DSON-based Shader Definition Support Asset.
 * @remarks An asset save filter for saving a Shader Definition Support Asset in the DSON format.
 * @seealso Sample: Save a Shader Definition Support Asset
 */
interface DzShaderSupportAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzShaderSupportAssetFilter:
{
  prototype: DzShaderSupportAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzShaderSupportAssetFilter;
}

/**
 * from dzshape.h
 */
interface DzShape extends DzElement
{

  /**
   * dzshape.h
   * 
   * @param node - 
   */
  getCurrentShapeForNode (node: DzNode): DzShape;

  /**
   * dzshape.h
   */
  getGeometry (): DzGeometry;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaperiggingadjuster_dz
 * Implements the logic of adjusting bone positions and orientations of the selected figure, based on the current shape.
 * @seealso Sample: Adjust Rigging to Shape
 * @attention This object is provided by the Joint Editor Tool plugin. It is only available when the Joint Editor Tool plugin is activated and enabled.
 * @since 4.9.3.93
 */
interface DzShapeRiggingAdjuster extends QObject
{

  /**
   * Performs the rigging adjustment based on the current shape.
   * @returns true if the adjustment was successful, false if the adjustment could not be completed.
   */
  doAdjustments (): boolean;

  /**
   * Sets whether or not center points of bones being ajusted are allowed to be modified.
   * @param yesNo - If true (default), the center points of bones are permitted to be modified.
   */
  setAdjustCenterPoints (yesNo: boolean): void;

  /**
   * Sets whether or not end points of bones being ajusted are allowed to be modified.
   * @param yesNo - If true (default), the end points of bones are permitted to be modified.
   */
  setAdjustEndPoints (yesNo: boolean): void;

  /**
   * Sets whether or not the orientations of bones being ajusted are allowed to be modified.
   * @param yesNo - If true, the orientations of bones are permitted to be modified.
   */
  setAdjustOrientation (yesNo: boolean): void;

  /**
   * Sets the list of bones to exclude when adjusting.
   * @param boneNames - The list of bone names to exclude.
   */
  setExcludedBones (boneNames: Array<unknown>): void;

  /**
   * Sets the list of facet groups to exclude when calculating adjustments to make.
   * @param groupNames - The list of facet group names to exclude.
   */
  setExcludedFacetGroups (groupNames: Array<unknown>): void;

  /**
   * Sets the target asset to be the geometry contained by the given node.
   * @param figure - The figure to adjust the rigging on.
   */
  setFigure (figure: figure_dz): void;

}

declare var DzShapeRiggingAdjuster:
{
  prototype: DzShapeRiggingAdjuster;

  /**
   * Default Constructor. Creates a shape rigging adjuster that can be used to adjust bone positions and orientations of the selected figure, based on the current shape.
   */
  new (): DzShapeRiggingAdjuster;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shapingassetfilter_dz
 * Class for saving DSON-based Shaping Presets.
 * @remarks An asset save filter for saving a Shaping Preset in the DSON format.
 * @seealso Sample: Save a Shaping Preset
 */
interface DzShapingAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzShapingAssetFilter:
{
  prototype: DzShapingAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzShapingAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementdata_dz
 * DzCustomData implementation that can be associated with an individual DzElement instance.
 * @remarks TODO: Add detailed description.
 */
interface DzSimpleElementData extends DzElementData
{

  /**
   * @returns The settings owned by this element data item.
   */
  getSettings (): DzSettings;

}

declare var DzSimpleElementData:
{
  prototype: DzSimpleElementData;

  /**
   * Default constructor.
   * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
   * @param [persistent=false] - If true, the data item will be saved with the element to the native file format.
   */
  new (name: string, persistent?: boolean): DzSimpleElementData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementscriptdata_dz
 * DzCustomData implementation that can be associated with an individual DzElement instance.
 * @remarks Implements a custom data item that causes a specified script to be executed after the element that owns the data item has been loaded into the scene.
 * A global transient variable named DataItem, which refers to the DzSimpleElementScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the element.
 * @attention The differences between this implementation and DzElementPostLoadFileData are that this implementation must reference the file path of a script and has an associated DzSettings that can be used to configure the script.
 */
interface DzSimpleElementScriptData extends DzSimpleElementData
{

  /**
   * @returns The file path of the script for this data item (if any), otherwise an empty string.
   */
  getScriptFilePath (): string;

  /**
   * Sets the file path of the script for this data item.
   * @param script - The file path of the script.
   */
  setScriptFilePath (script: string): void;

}

declare var DzSimpleElementScriptData:
{
  prototype: DzSimpleElementScriptData;

  /**
   * Default constructor.
   * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
   * @param [persistent=true] - If true, the data item will be saved with the element to the native file format.
   */
  new (name: string, persistent?: boolean): DzSimpleElementScriptData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenedata_dz
 * DzCustomData implementation that can be associated with an individual DzElement instance.
 * @remarks TODO: Add detailed description.
 */
interface DzSimpleSceneData extends DzSceneData
{

  /**
   * @returns The settings owned by this scene data item.
   */
  getSettings (): DzSettings;

}

declare var DzSimpleSceneData:
{
  prototype: DzSimpleSceneData;

  /**
   * Default constructor.
   * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
   * @param [persistent=false] - If true, the data item will be saved with the element to the native file format.
   */
  new (name: string, persistent?: boolean): DzSimpleSceneData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenescriptdata_dz
 * DzCustomData implementation that can be associated with a DzScene.
 * @remarks Implements a custom data item that causes a specified script to be executed after the scene has been loaded.
 * A global transient variable named DataItem, which refers to the DzSimpleSceneScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the scene was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the scene.
 */
interface DzSimpleSceneScriptData extends DzSimpleSceneData
{

  /**
   * @returns The file path of the script for this data item (if any), otherwise an empty string.
   */
  getScriptFilePath (): string;

  /**
   * Sets the file path of the script for this data item.
   * @param script - The file path of the script.
   */
  setScriptFilePath (script: string): void;

}

declare var DzSimpleSceneScriptData:
{
  prototype: DzSimpleSceneScriptData;

  /**
   * Default constructor.
   * @param name - The name for the data item. This must be unique for all data items on the scene - i.e. a scene can not have two data items with the same name.
   * @param [persistent=true] - If true, the data item will be saved with the scene to the native file format.
   */
  new (name: string, persistent?: boolean): DzSimpleSceneScriptData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simulationsettingsassetfilter_dz
 * Class for saving DSON-based Simulation Settings Presets.
 * @remarks An asset save filter for saving a Simulation Settings Preset in the DSON format.
 * @seealso Sample: Save a Simulation Settings Preset
 */
interface DzSimulationSettingsAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzSimulationSettingsAssetFilter:
{
  prototype: DzSimulationSettingsAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzSimulationSettingsAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/size
 * DAZScript wrapper for QSize.
 * @remarks This is the DAZScript counterpart to the QSize type used in the DAZ Studio SDK. A Size object is a two dimensional representation of a width and height.
 * @attention Inheritance will change to Object in a pending update.
 */
interface Size extends QObject
{

  /**
   * Holds the height of the size.
   */
  height: number

  /**
   * Holds the width of the size.
   */
  width: number

  /**
   * Swaps the width and height of the size.
   */
  translate (): void;

}

declare var Size:
{
  prototype: Size;

  /**
   * Default constructor.
   */
  new (): Size;

  /**
   * Copy Constructor.
   * @param size - The Size to copy.
   */
  new (size: Size): Size;

  /**
   * @param width - The width for the size.
   * @param height - The height for the size.
   */
  new (width: number, height: number): Size;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeleton_dz
 * The base class which owns a group of connected bones.
 * @remarks TODO: Add detailed description.
 */
interface DzSkeleton extends DzNode
{

  /**
   * Converts an articulate figure to a static prop.
   * @param skeleton - 
   * @param newName - The skeleton to convert.
   */
  convertFigureToProp (skeleton: DzSkeleton, newName: string): DzNode;

  /**
   * Clears the generated morphs.
   */
  clearGeneratedMorphs (): void;

  /**
   * @returns The bone in this skeleton's hierarchy with a matching name (if any), otherwise NULL.
   * @param name - The name of the bone to look for.
   */
  findBone (name: string): DzBone;

  /**
   * @returns The bone in this skeleton's hierarchy with a matching label (if any), otherwise NULL.
   * @param label - The label of the bone to look for.
   */
  findBoneByLabel (label: string): DzBone;

  /**
   * @returns The unique bone name.
   * @param desiredName - The name of the bone to make unique.
   */
  findUniqueBoneName (desiredName: string): string;

  /**
   * @returns A list containing all bones that are part of this skeleton.
   */
  getAllBones (): Array<DzBone>;

  /**
   * @returns true if OpenGL bones will draw in the viewport, otherwise false.
   */
  getDrawGLBones (): boolean;

  /**
   * @returns The boolean property that controls bone drawing in the viewport.
   */
  getDrawGLBonesControl (): DzBoolProperty;

  /**
   * @returns The float property that controls the figure identifier.
   * @since 4.6.2.42
   */
  getFigureIDControl (): DzFloatProperty;

  /**
   * @returns The property that controls which skeleton this skeleton will follow.
   * @seealso getFollowTarget()
   * setFollowTarget()
   */
  getFollowControl (): DzSkeletonProperty;

  /**
   * @returns The current follow mode of the skeleton.
   * @since 4.8.0.23
   */
  getFollowMode (): FollowMode;

  /**
   * @returns The enum property that controls the follow mode of the skeleton.
   * @since 4.8.0.23
   */
  getFollowModeControl (): DzEnumProperty;

  /**
   * @returns The i'th skeleton following this one.
   * @param which - 
   */
  getFollowSkeleton (which: number): DzSkeleton;

  /**
   * @returns The skeleton that this skeleton is currently following (if any), otherwise NULL.
   * @seealso setFollowTarget()
   * getFollowControl()
   */
  getFollowTarget (): DzSkeleton;

  /**
   * @returns The color property that controls bone color in the viewport.
   */
  getGLBonesColorControl (): DzColorProperty;

  /**
   * @returns The float property that controls bone edge opacity in the viewport.
   */
  getGLBonesEdgeOpacityControl (): DzFloatProperty;

  /**
   * @returns The enum property that controls bone edge style in the viewport.
   */
  getGLBonesEdgeStyleControl (): DzEnumProperty;

  /**
   * @returns The float property that controls bone fill opacity in the viewport.
   */
  getGLBonesFillOpacityControl (): DzFloatProperty;

  /**
   * @returns The number of skeletons following this one.
   */
  getNumFollowSkeletons (): number;

  /**
   * Invalidates the bounding boxes for this node, causing them to be recalculated.
   * @param [checkSkeleton=true] - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
   */
  invalidateBoundingBoxes (checkSkeleton?: boolean): void;

  /**
   * Sets whether or not OpenGL bones will draw in the viewport.
   * @param onOff - If true, bones will be drawn in the viewport.
   */
  setDrawGLBones (onOff: boolean): void;

  /**
   * Sets the figure that we are currently following.
   * @seealso getFollowTarget()
   * getFollowControl()
   * @param skeleton - A pointer to the new follow target for the skeleton. If NULL, clears the figure that this skeleton is following.
   */
  setFollowTarget (skeleton: DzSkeleton): void;

  followTargetChanged: Signal<{
    /**
     * Emitted when the follow target for this skeleton has changed.
     * @param skeleton - 
     */
  (skeleton: DzSkeleton): void;
  }>;
}

declare var DzSkeleton:
{
  prototype: DzSkeleton;

  /**
   * Default Constructor.
   */
  new (): DzSkeleton;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeletonproperty_dz
 * A non-animatable skeleton property.
 * @remarks A specialized subclass of DzNodeProperty which will only allow the user to select nodes that are skeletons from the scene. This is currently used by skeletons for the 'Fit To' property.
 */
interface DzSkeletonProperty extends DzNodeProperty
{

  /**
   * @returns The value of the property, NULL if no skeleton is selected.
   */
  getSkeletonValue (): DzSkeleton;

  aboutToChange: Signal<{
    /**
     * Emitted immediately before the value of the property changes.
     */
  (): void;
  }>;
}

declare var DzSkeletonProperty:
{
  prototype: DzSkeletonProperty;

  /**
   * Default Constructor. Creates a non-animatable, non-user property.
   */
  new (): DzSkeletonProperty;

  /**
   * @param name - The name of this property.
   * @param canAnimate - If true, create an animatable property. If false, a non-animatable property is created.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, canAnimate: boolean, isUserProperty: boolean): DzSkeletonProperty;
}

/**
 * @see file://../sdk/dzskinbinding.h
 */
interface DzSkinBinding extends DzModifier, DzSceneAsset
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sourcefiledata_dz
 * DzElementData implementation that stores the source file of an imported item.
 * @remarks This class is mainly used by the framework to store source paths for imported Poser content. The class can be used as follows to retrieve the path of the CR2 file from which a figure was loaded:
 * Todo
 * Examples:
 * This class could also be used by plug-in developers for other custom importers to store the source file for imported items.
 */
interface DzSourceFileData extends DzElementData
{

  /**
   * The path to the source file.
   */
  sourceFilePath: string

  /**
   * @returns true if the source geometry has changed, otherwise false.
   */
  getGeometryChanged (): boolean;

  /**
   * Tries to convert the source path into a “Poser” style Runtime-relative path (i.e. “:Runtime:Libraries:Character:FileName.cr2”). Returns the converted path if successful, and an empty string if unsuccessful.
   * @returns The source path.
   */
  getPoserRuntimeRelativePath (): string;

  /**
   * Sets whether or not the source geometry has changed.
   * @param onoff - 
   */
  setGeometryChanged (onoff: boolean): void;

}

declare var DzSourceFileData:
{
  prototype: DzSourceFileData;

  /**
   * Creates a new Source File Data object that stores the given file path.
   * @param [filePath=“”] - 
   */
  new (filePath?: string): DzSourceFileData;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/splitter_dz
 * DAZScript wrapper for QSplitter.
 * @remarks A DzSplitter provides the user with the ability to control the size of child widgets by dragging the boundary between the children.
 */
interface DzSplitter extends DzWidget
{

  /**
   * Holds whether or not the children widgets of the splitter are collapsible.
   */
  childrenCollapsible: boolean

  /**
   * Holds the width of the splitter handle.
   */
  handleWidth: number

  /**
   * Holds whether or not resizing is opaque.
   * DzWidget::Orientation : orientation
   * Holds the orientation of the splitter.
   */
  opaqueResize: boolean

  /**
   * TODO: Add description.
   * @param widget - 
   */
  addWidget (widget: DzWidget): void;

  /**
   * TODO: Add description.
   */
  count (): number;

  /**
   * TODO: Add description.
   * @param widget - 
   */
  indexOf (widget: DzWidget): number;

  /**
   * TODO: Add description.
   * @param index - 
   * @param widget - 
   */
  insertWidget (index: number, widget: DzWidget): void;

  /**
   * TODO: Add description.
   * @param index - 
   */
  isCollapsible (index: number): boolean;

  /**
   * TODO: Add description.
   * @param state - 
   */
  restoreState (state: ByteArray): boolean;

  /**
   * TODO: Add description.
   */
  saveState (): ByteArray;

  /**
   * TODO: Add description.
   * @param index - 
   * @param collapse - 
   */
  setCollapsible (index: number, collapse: boolean): void;

  /**
   * TODO: Add description.
   * @param index - 
   * @param stretch - 
   */
  setStretchFactor (index: number, stretch: number): void;

  /**
   * TODO: Add description.
   * @param index - 
   */
  widget (index: number): DzWidget;

}

declare var DzSplitter:
{
  prototype: DzSplitter;

  /**
   * Creates a splitter widget as a child of the given parent widget.
   * @param parent - The widget parent for the splitter.
   */
  new (parent: DzWidget): DzSplitter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/spotlight_dz
 * A basic spotlight.
 * @remarks TODO: Add detailed description.
 */
interface DzSpotLight extends DzDistantLight
{

  /**
   * @returns The (scaled) base opacity.
   * @since 4.9.3.145
   */
  getBaseOpacity (): number;

  /**
   * @returns The property that controls the base opacity.
   * @since 4.9.3.145
   */
  getBaseOpacityControl (): DzFloatProperty;

  /**
   * @returns The beam distribution.
   * @since 4.9.3.145
   */
  getBeamDistribution (): number;

  /**
   * @returns The property that controls beam distribution.
   */
  getBeamDistributionControl (): DzFloatProperty;

  /**
   * @returns The decay of the light.
   * @since 4.9.3.145
   */
  getDecay (): number;

  /**
   * @returns The property used to control decay.
   */
  getDecayControl (): DzFloatProperty;

  /**
   * @returns true if the cone will be displayed when the node is not selected, otherwise false.
   * @since 4.9.3.145
   */
  getDisplayPersistence (): boolean;

  /**
   * @returns The property that controls the display persistence.
   * @since 4.9.3.145
   */
  getDisplayPersistenceControl (): DzBoolProperty;

  /**
   * @returns The (scaled) edge opacity.
   * @since 4.9.3.145
   */
  getEdgeOpacity (): number;

  /**
   * @returns The property that controls the edge opacity.
   * @since 4.9.3.145
   */
  getEdgeOpacityControl (): DzFloatProperty;

  /**
   * TODO: Add description.
   * @param lightPercent - 
   */
  getFalloffDistance (lightPercent: number): number;

  /**
   * @returns The exponent (rate of decay from center to edge) of the light.
   * @since 4.8.0.18
   */
  getLightExponent (): number;

  /**
   * @returns The property that controls the beam exponent of the light.
   * @since 4.8.0.18
   */
  getLightExponentControl (): DzFloatProperty;

  /**
   * TODO: Add description.
   */
  getLightVisibility (): boolean;

  /**
   * TODO: Add description.
   */
  getLineOpacity (): number;

  /**
   * @returns The opacity scale.
   * @since 4.9.3.145
   */
  getOpacityScale (): number;

  /**
   * @returns The property that controls the opacity scale.
   * @since 4.9.3.145
   */
  getOpacityScaleControl (): DzFloatProperty;

  /**
   * @returns The ray length.
   * @since 4.9.3.145
   */
  getRayLength (): number;

  /**
   * @returns The property that controls the ray length.
   * @since 4.9.3.145
   */
  getRayLengthControl (): DzFloatProperty;

  /**
   * @returns The (scaled) ray opacity.
   * @since 4.9.3.145
   */
  getRayOpacity (): number;

  /**
   * @returns The property that controls the ray opacity.
   * @since 4.9.3.145
   */
  getRayOpacityControl (): DzFloatProperty;

  /**
   * @returns true if the base should be shown, otherwise false.
   * @since 4.9.3.145
   */
  getShowBase (): boolean;

  /**
   * @returns The property that controls whether or not to show the base control.
   * @since 4.9.3.145
   */
  getShowBaseControl (): DzBoolProperty;

  /**
   * @returns true if the edge should be shown, otherwise false.
   * @since 4.9.3.145
   */
  getShowEdge (): boolean;

  /**
   * @returns The property that controls whether or not to show the edge control.
   * @since 4.9.3.145
   */
  getShowEdgeControl (): DzBoolProperty;

  /**
   * @returns The spread angle of the light.
   * @since 4.9.3.145
   */
  getSpreadAngle (): number;

  /**
   * @returns The property that controls the outer spread angle of the light.
   */
  getSpreadAngleControl (): DzFloatProperty;

  /**
   * Sets the base opacity.
   * @since 4.9.3.145
   * @param opacity - The opacity to set.
   */
  setBaseOpacity (opacity: number): void;

  /**
   * Sets beam distribution.
   * @since 4.9.3.145
   * @param distribution - The beam distribution to set.
   */
  setBeamDistribution (distribution: number): void;

  /**
   * Sets the amount of decay.
   * @since 4.9.3.145
   * @param decay - The decay to set.
   */
  setDecay (decay: number): void;

  /**
   * Sets the persistance of the display cone.
   * @since 4.9.3.145
   * @param persistence - If true, the cone will be displayed when the node is not selected. If false, the cone will not be displayed when the node is not selected.
   */
  setDisplayPersistence (persistence: boolean): void;

  /**
   * Sets the edge opacity.
   * @since 4.9.3.145
   * @param opacity - The opacity to set.
   */
  setEdgeOpacity (opacity: number): void;

  /**
   * Sets the exponent (rate of decay from center to edge) of the light.
   * @since 4.9.3.145
   * @param exponent - The exponent to set.
   */
  setLightExponent (exponent: number): void;

  /**
   * Sets the opacity scale.
   * @since 4.9.3.145
   * @param scale - The scale to set.
   */
  setOpacityScale (scale: number): void;

  /**
   * Sets the ray length.
   * @since 4.9.3.145
   * @param length - The length to set.
   */
  setRayLength (length: number): void;

  /**
   * Sets the ray opacity.
   * @since 4.9.3.145
   * @param opacity - The opacity to set.
   */
  setRayOpacity (opacity: number): void;

  /**
   * Sets whether or not to show the base.
   * @since 4.9.3.145
   * @param yesNo - If true, the base will be shown.
   */
  setShowBase (yesNo: boolean): void;

  /**
   * Sets whether or not to show the edge.
   * @since 4.9.3.145
   * @param yesNo - If true, the edge will be shown.
   */
  setShowEdge (yesNo: boolean): void;

  /**
   * Sets the spread angle.
   * @since 4.9.3.145
   * @param spreadAngle - The angle to set.
   */
  setSpreadAngle (spreadAngle: number): void;

}

declare var DzSpotLight:
{
  prototype: DzSpotLight;

  /**
   * Default Constructor. Creates a new spotlight.
   */
  new (): DzSpotLight;
}
interface String
{
    /**
        * @returns This string object.
        */
    valueOf (): string;
    /**
        * @returns The modified string, replacing the lowest occurrence of %1, %2,… with value.
        * @param value - The text to represent as a string.
        * @param [fieldWidth=0] - Specifies the minimum amount of space that value is padded to. A positive fieldWidth will produce right aligned text, a negative fieldWidth will produce left aligned text.
        */
    arg (value: string, fieldWidth?: number): string;
    /**
        * @returns The modified string, replacing the lowest occurrence of %1, %2,… with value.
        * @param value - The Number to represent as a string.
        * @param [fieldWidth=0] - Specifies the minimum amount of space that value is padded to. A positive fieldWidth will produce right aligned text, a negative fieldWidth will produce left aligned text.
        */
    arg (value: number, fieldWidth?: number): string;
    /**
        * Specialized for cases where value is a decimal.
        * @returns The modified string, replacing the lowest occurrence of %1, %2,… with value.
        * @example
        * var fValue = Math.PI;
        * var sValue = String( "%1" ).argDec( fValue, 0, 'f', 5 );
        *  
        * MessageBox.information( String( "Variable : sValue\nType : %1\nValue : %2" )
        * 	.arg( typeof sValue ).arg( sValue ), "String.argDec(...)", "&OK" );
        * @param value - The Number to represent as a string.
        * @param [fieldWidth=0] - Specifies the minimum amount of space that value is padded to. A positive fieldWidth will produce right aligned text, a negative fieldWidth will produce left aligned text.
        * @param [format="g"] - The format to use:   *         - 'e' : format as [-]9.9e[+|-]999   *         - 'E' : format as [-]9.9E[+|-]999   *         - 'f' : format as [-]9.9   *         - 'g' : use 'e' or 'f' format, whichever is more concise   *         - 'G' : use 'E' or 'f' format, whichever is more concise
        * @param precision - With 'e', 'E' and 'f', this is the numbers of digits after the decimal point. With 'g' and 'G', this is the maximum number of significant digits.
        */
    argDec (value: number, fieldWidth?: number, format?: number, precision?: number): string;
    /**
        * Specialized for cases where value is an integer.
        * @returns The modified string, replacing the lowest occurrence of %1, %2,… with value.
        * @example
        * var nValue = 32;
        * var sValue = String( "%1" ).argInt( nValue, 0, 10 );
        *  
        * MessageBox.information( String( "Variable : sValue\nType : %1\nValue : %2" )
        * 	.arg( typeof sValue ).arg( sValue ), "String.argInt(...)", "&OK" );
        * @param value - The Number to represent as a string.
        * @param [fieldWidth=0] - Specifies the minimum amount of space that value is padded to. A positive fieldWidth will produce right aligned text, a negative fieldWidth will produce left aligned text.
        * @param [base=10] - The base, which must be between 2 and 36.
        */
    argInt (value: number, fieldWidth?: number, base?: number): string;
    /**
        * @returns true if the string ends with pattern, otherwise false.
        * @param pattern - The pattern to search the string for.
        */
    endsWith (pattern: string): boolean;
    /**
        * @returns true if the string ends with pattern, otherwise false.
        * @param pattern - The pattern to search the string for.
        */
    endsWith (pattern: RegExp): boolean;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at position startPos. If startPos is not specified, the function starts at the beginning of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        * @param [startPos=0] - The [zero-based] index to begin the search at.
        */
    find (pattern: RegExp, startPos?: number): number;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at position startPos. If startPos is not specified, the function starts at the beginning of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        * @param [startPos=0] - The [zero-based] index to begin the search at.
        */
    find (pattern: string, startPos?: number): number;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at position startPos. If startPos is not specified, the function starts at the end of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        * @param [startPos=length-1] - The [zero-based] index to begin the search at.
        */
    findRev (pattern: RegExp, startPos?: number): number;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at position startPos. If startPos is not specified, the function starts at the end of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        * @param [startPos=length-1] - The [zero-based] index to begin the search at.
        */
    findRev (pattern: string, startPos?: number): number;
    /**
        * @returns true if the string is empty (has a length of 0), otherwise false.
        */
    isEmpty (): boolean;
    /**
        * @returns The substring of this string containing the num leftmost characters.
        * @param num - The number of characters to copy from the beginning of the string.
        */
    left (num: number): string;
    /**
        * @returns The string, with all characters converted to lower case.
        * @seealso toLowerCase()
        */
    lower (): string;
    /**
        * @returns The substring of this string starting at startIndex including num characters.
        * @seealso substring()
        * @param startIndex - The index of the first character to copy from the string.
        * @param num - The number of characters to copy from the string.
        */
    mid (startIndex: number, num: number): string;
    /**
        * @returns The substring of this string containing the num rightmost characters.
        * @param num - The number of characters to copy from the end of the string.
        */
    right (num: number): string;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at the end of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        */
    searchRev (pattern: RegExp): number;
    /**
        * @returns The index of the first occurrence of pattern in the string, starting at the end of the string. If the pattern is not found in the string, -1 is returned.
        * @param pattern - The pattern to search the string for.
        */
    searchRev (pattern: string): number;
    /**
        * @returns true if the string starts with pattern, otherwise false.
        * @param pattern - The pattern to search the string for.
        */
    startsWith (pattern: RegExp): boolean;
    /**
        * @returns true if the string starts with pattern, otherwise false.
        * @param pattern - The pattern to search the string for.
        */
    startsWith (pattern: string): boolean;
    /**
        * @returns The string, with all characters converted to upper case.
        * @seealso toUpperCase()
        */
    upper (): string;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/stringhelper_dz
 * Convenience object to make working with a String object easier.
 * @remarks TODO: Add detailed description.
 */
interface DzStringHelper extends QObject
{

  /**
   * @returns A copy of the input string, with each occurence of a special character replaced by chars
   * @param text - The string to inspect for special characters; using the regular expression “[/\\\\:*?\”<>|!. ]“
   * @param chars - The character(s) to replace each occurence of a special character with
   */
  changeSpecialChars (text: string, chars: string): string;

  /**
   * @returns An array of strings, where each element is a match
   * @param text - The string to check for matches
   * @param expression - The regular expression to use
   */
  getMatches (text: string, expression: string): Array<unknown>;

  /**
   * @returns An array of strings, where each element is a word from the input string
   * @param text - The string to split at each space
   * @param removeEmpties - Whether or not to remove empty entries that result from multiple adjacent spaces
   */
  getWords (text: string, removeEmpties: boolean): Array<unknown>;

  /**
   * @returns A copy of the input string indented the specified number of times
   * @param text - The string to indent
   * @param level - The number of tabs (\t) to prepend to the input string
   */
  indentString (text: string, level: number): string;

  /**
   * @returns A copy of the input string, with chars prepended if it began with a numeric character
   * @param text - The string to inspect for numeric characters; using the regular expression “^[0-9]”
   * @param chars - The character(s) to prepend to the input string if it begines with a numeric character
   */
  prependCharsIfNumeric (text: string, chars: string): string;

  /**
   * @returns A copy of the input string with all occurrences of findText replaced by replaceText
   * @param source - The string to replace the specified character(s) in
   * @param findText - The character(s) to replace
   * @param replaceText - The character(s) to replace with
   */
  replaceAll (source: string, findText: string, replaceText: string): string;

  /**
   * @returns A copy of the input string with all carriage return and linefeed characters removed
   * @param text - The string to strip all carriage return (\r) and linefeed (\n) characters from
   */
  stripCRLF (text: string): string;

  /**
   * @returns A copy of the input string with all spaces removed
   * @param text - The string to strip spaces from
   */
  stripSpaces (text: string): string;

}

declare var DzStringHelper:
{
  prototype: DzStringHelper;

  /**
   * Default Constructor
   */
  new (): DzStringHelper;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/stringproperty_dz
 * A static (non-animatable) string property.
 * @remarks TODO: Add detailed description.
 */
interface DzStringProperty extends DzProperty
{

  /**
   * @returns The string value of this property.
   */
  getValue (): string;

  /**
   * Sets the string value.
   * @param val - The string value to set.
   */
  setValue (val: string): boolean;

}

declare var DzStringProperty:
{
  prototype: DzStringProperty;

  /**
   * Default Constructor. Creates a non-user property.
   */
  new (): DzStringProperty;

  /**
   * @param name - The name of this property.
   * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
   */
  new (name: string, isUserProperty: boolean): DzStringProperty;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/style_dz
 * Class that defines the look and feel of the DAZ Studio interface.
 * @example
 * Reset the current style colors to their default values.
 * 		var oSTYLE = App.getStyle();
 * 		var nCOLORS = oSTYLE.getNumInterfaceColors();
 * 		for( var i = 0; i < nCOLORS; i += 1 )
 * 		{
 * 			oSTYLE.setInterfaceColor( i, oSTYLE.getInterfaceColorDefault( i ) );
 * 		}
 */
interface DzStyle extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * The mode when the user is not interacting with the pixmap, but the item represented by the pixmap is available.
   */
  readonly Normal: number;

  /**
   * The mode when the item represented by the pixmap is not available.
   */
  readonly Disabled: number;

  /**
   * The mode when the item represented by the pixmap is available and the user is interacting with it.
   */
  readonly Active: number;

  /**
   * The mode when the item represented by the pixmap is selected.
   */
  readonly Selected: number;

  /**
   * TODO: Add description.
   */
  /**
   * The pixmap when the widget is in the On state.
   */
  readonly On: number;

  /**
   * The pixmap when the widget is in the Off state.
   */
  readonly Off: number;

  /**
   * @returns A Pixmap from the DzAction with the class name.
   * @param className - 
   * @param mode - 
   * @param state - 
   */
  actionPixmap (className: string, mode: number, state: number): Pixmap;

  /**
   * Compiles a text-based style definition and its images into a single binary style definition file.
   * @returns true on success, false on failure
   * @param infile - The name of the XML-based text style description
   * @param outfile - The name of the DAZ Studio style definition file to create
   */
  compileStyleDefinition (infile: string, outfile: string): DzError;

  /**
   * @returns The index of the given interface color, or -1 if the color cannot be found.
   * @param name - 
   */
  findInterfaceColor (name: string): number;

  /**
   * @returns The index of the given interface number, or -1 if the number cannot be found.
   * @since 4.9.0.43
   * @param name - 
   */
  findInterfaceNumber (name: string): number;

  /**
   * @returns The current value of the given interface color.
   * @param name - 
   */
  getInterfaceColor (name: string): Color;

  /**
   * @returns The current value of the given interface color.
   * @param which - 
   */
  getInterfaceColor (which: number): Color;

  /**
   * @returns The default value of the given interface color.
   * @param which - 
   */
  getInterfaceColorDefault (which: number): Color;

  /**
   * @returns A user-readable description for the given interface color
   * @param which - 
   */
  getInterfaceColorDescription (which: number): string;

  /**
   * @since 4.9.0.43
   * @param which - 
   * @param settings - 
   */
  getInterfaceColorDisplaySettings (which: number, settings: DzSettings): void;

  /**
   * @returns The name for the given interface color
   * @param which - 
   */
  getInterfaceColorName (which: number): string;

  /**
   * @returns The current value of the given interface number.
   * @since 4.9.0.43
   * @param name - 
   */
  getInterfaceNumber (name: string): number;

  /**
   * @returns The current value of the given interface number.
   * @since 4.9.0.43
   * @param which - 
   */
  getInterfaceNumber (which: number): number;

  /**
   * @returns The default value of the given interface number.
   * @since 4.9.0.43
   * @param which - 
   */
  getInterfaceNumberDefault (which: number): number;

  /**
   * @returns A user-readable description for the given interface number
   * @since 4.9.0.43
   * @param which - 
   */
  getInterfaceNumberDescription (which: number): string;

  /**
   * @since 4.9.0.43
   * @param which - 
   * @param settings - 
   */
  getInterfaceNumberDisplaySettings (which: number, settings: DzSettings): void;

  /**
   * @returns The name for the given interface number
   * @since 4.9.0.43
   * @param which - 
   */
  getInterfaceNumberName (which: number): string;

  /**
   * @returns The number of user-customizable interface colors for the current style
   */
  getNumInterfaceColors (): number;

  /**
   * @returns The number of user-customizable interface numbers for the current style
   * @since 4.9.0.43
   */
  getNumInterfaceNumbers (): number;

  /**
   * @returns The name of the currently active style definition.
   */
  getStyleDefinition (): string;

  /**
   * @returns The value of the pixel metric with the given name. The name must match one of the pixel metric names from the style definition.
   * @param metricName - 
   */
  pixelMetric (metricName: string): number;

  /**
   * Sets the given interface color to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
   * @param which - 
   * @param color - 
   */
  setInterfaceColor (which: number, color: Color): void;

  /**
   * Sets the given interface number to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
   * @since 4.9.0.43
   * @param which - 
   * @param number - 
   */
  setInterfaceNumber (which: number, number: number): void;

  /**
   * @returns A Pixmap with the given name. The name must match one of the standard pixmap names from the style definition.
   * @param pixmapName - 
   */
  standardPixmap (pixmapName: string): Pixmap;

  /**
   * @returns The Font of the text style with the given name. The name must match one of the text style names from the style definition.
   * @param styleName - 
   */
  textStyle (styleName: string): Font;

  /**
   * @returns The Color of the text style with the given name. The name must match one of the text style names from the style definition.
   * @param styleName - 
   */
  textStyleColor (styleName: string): Color;

  interfaceColorsChanged: Signal<{
    /**
     * Emitted when the interface color settings have changed.
     */
  (): void;
  }>;
}

declare namespace DzStyle
{

  /**
   * TODO: Add description.
   */
  /**
   * The mode when the user is not interacting with the pixmap, but the item represented by the pixmap is available.
   */
  export const Normal: number;
  /**
   * The mode when the item represented by the pixmap is not available.
   */
  export const Disabled: number;
  /**
   * The mode when the item represented by the pixmap is available and the user is interacting with it.
   */
  export const Active: number;
  /**
   * The mode when the item represented by the pixmap is selected.
   */
  export const Selected: number;

  /**
   * TODO: Add description.
   */
  /**
   * The pixmap when the widget is in the On state.
   */
  export const On: number;
  /**
   * The pixmap when the widget is in the Off state.
   */
  export const Off: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/subtractblend_dz
 * A subtractive image blending operation.
 * @remarks TODO: Add detailed description.
 */
interface DzSubtractBlend extends DzImageBlend
{

}

declare var DzSubtractBlend:
{
  prototype: DzSubtractBlend;

  /**
   * Default Constructor
   */
  new (): DzSubtractBlend;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/system_dz
 * DAZScript's global static object for system services.
 * @remarks The DzSystem object provides functions to access and manipulate environment variables. It is accessible via the Global::System variable.
 */
interface DzSystem extends QObject
{

  /**
   * @returns The String stored in environmentVariable.
   * @example
   * var sEnv = System.getenv( "DAZSTUDIO" );
   * print( sEnv ); //C:/Program Files/DAZ/Studio
   * @param environmentVariable - The name of the environment variable to retrieve. The 'environment' only exists within the context of the script process, for the duration of said process.
   */
  getenv (environmentVariable: string): string;

  /**
   * Deprecated
   * Use Global::print() instead.
   * @param expression - 
   */
  print (expression: string): void;

  /**
   * Deprecated
   * Use Global::print() instead.
   * @param expression - 
   */
  println (expression: string): void;

  /**
   * Sets the value of an environment variable. If the environment variable does not exist, it is created. The environment is only changed within the context of the script process, for the duration of said process.
   * @example
   * System.setenv( "DAZSTUDIO", App.getHomePath() );
   * var sEnv = System.getenv( "DAZSTUDIO" );
   * print( sEnv ); // C:/Program Files/DAZ/Studio
   * @param environmentVariable - The environment variable to set the value of
   * @param value - The new value of the environment variable.
   */
  setenv (environmentVariable: string, value: string): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/tabwidget_dz
 * DAZScript wrapper for QTabWidget.
 * @remarks A DzTabWidget provides a stack of tabbed widgets.
 */
interface DzTabWidget extends DzWidget
{

  /**
   * Enumerated value for describing where the tab is drawn.
   */
  /**
   * The top of the widget.
   */
  readonly North: number;

  /**
   * The bottom of the widget.
   */
  readonly South: number;

  /**
   * The left of the widget.
   */
  readonly West: number;

  /**
   * The right of the widget.
   */
  readonly East: number;

  /**
   * The number of tabs in the tab stack. (Read-Only)
   */
  count: number

  /**
   * The index position of the current tab page.
   */
  currentIndex: number

  /**
   * Whether or not the widget is rendered in a mode suitable for document pages, without a frame.
   */
  documentMode: boolean

  /**
   * Whether or not the tabs can be reordered.
   */
  movable: boolean

  /**
   * Holds which side of the widget the tab row is drawn on.
   */
  tabPosition: number

  /**
   * Whether or not close buttons are automatically added to each tab.
   * @seealso tabCloseRequested()
   */
  tabsClosable: boolean

  /**
   * Whether or not a tab bar should use buttons to scroll tabs when it has many tabs.
   */
  usesScrollButtons: boolean

  /**
   * Adds page as a new tab with the given label.
   * @returns The index of the added tab
   * @param page - 
   * @param label - 
   */
  addTab (page: DzWidget, label: string): number;

  /**
   * Removes all the pages, but does not delete them.
   */
  clear (): void;

  /**
   * @returns The widget shown in the corner of the tab widget or null.
   */
  cornerWidget (): DzWidget;

  /**
   * @returns The widget for the page currently being displayed.
   */
  currentWidget (): DzWidget;

  /**
   * @returns The index position of the page occupied by widget, or -1 if widget cannot be found.
   * @param page - 
   */
  indexOf (page: DzWidget): number;

  /**
   * Inserts page as a new tab with the label label at position index.
   * @returns The index of the inserted tab.
   * @param index - 
   * @param page - 
   * @param label - 
   */
  insertTab (index: number, page: DzWidget, label: string): number;

  /**
   * @returns true if the page at position index is enabled, otherwise false.
   * @param index - 
   */
  isTabEnabled (index: number): boolean;

  /**
   * Removes the page at index from the tab widget.
   * @attention The widget itself is not deleted.
   * @param index - 
   */
  removeTab (index: number): void;

  /**
   * Sets widget to be shown in the corner of the tab widget.
   * @param widget - 
   */
  setCornerWidget (widget: DzWidget): void;

  /**
   * Makes widget the current page.
   * @param page - 
   */
  setCurrentWidget (page: DzWidget): void;

  /**
   * Sets the enabled state of the page at position index.
   * @param index - 
   * @param enable - 
   */
  setTabEnabled (index: number, enable: boolean): void;

  /**
   * Sets the label of the page at position index.
   * @param index - 
   * @param label - 
   */
  setTabText (index: number, label: string): void;

  /**
   * Sets the tool tip text for the page at position index.
   * @param index - 
   * @param tip - 
   */
  setTabToolTip (index: number, tip: string): void;

  /**
   * Sets the what's this text for the page at position index.
   * @param index - 
   * @param text - 
   */
  setTabWhatsThis (index: number, text: string): void;

  /**
   * @returns The label of the page at position index.
   * @param index - 
   */
  tabText (index: number): string;

  /**
   * @returns The tool tip for the page at position index.
   * @param index - 
   */
  tabToolTip (index: number): string;

  /**
   * @returns The whats this text for the page at position index.
   * @param index - 
   */
  tabWhatsThis (index: number): string;

  /**
   * @returns The widget for the page at position index.
   * @param index - 
   */
  widget (index: number): DzWidget;

  currentChanged: Signal<{
    /**
     * Emitted whenever the current page index changes.
     * @param index - 
     */
  (index: number): void;
  }>;
  tabCloseRequested: Signal<{
    /**
     * Emitted when the close button on a tab is clicked.
     * @param index - 
     */
  (index: number): void;
  }>;
}

declare var DzTabWidget:
{
  prototype: DzTabWidget;

  /**
   * Creates a tab widget as a child of the given parent widget.
   * @param parent - The widget parent for the tab widget.
   */
  new (parent: DzWidget): DzTabWidget;

  /**
   * Enumerated value for describing where the tab is drawn.
   */
  /**
   * The top of the widget.
   */
  readonly North: number;
  /**
   * The bottom of the widget.
   */
  readonly South: number;
  /**
   * The left of the widget.
   */
  readonly West: number;
  /**
   * The right of the widget.
   */
  readonly East: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textbrowser_dz
 * DAZScript wrapper for QTextBrowser.
 * @remarks A DzTextBrowser extends DzTextEdit (in read-only mode), adding functionality that allows users to navigate hyper-linked documents.
 */
interface DzTextBrowser extends DzTextEdit
{

  /**
   * Holds the number of locations backward in the history. (Read Only)
   * @since 4.9.3.93
   */
  backwardCount: number

  /**
   * Holds the number of locations forward in the history. (Read Only)
   * @since 4.9.3.93
   */
  forwardCount: number

  /**
   * Holds whether or not the browser can go backward in the document history. (Read Only)
   * @since 4.9.3.93
   */
  isBackwardAvailable: boolean

  /**
   * Holds whether or not the browser can go forward in the document history. (Read Only)
   * @since 4.9.3.93
   */
  isForwardAvailable: boolean

  /**
   * Holds whether or not the browser should open links to external sources using App.showUrl() instead of emitting the anchorClicked signal. Links are considered external if their scheme is not 'file://'. (since 4.9.3.93)
   */
  openExternalLinks: boolean

  /**
   * Holds whether or not the browser should automatically open links the user tries to activate by mouse or keyboard.
   * @since 4.9.3.93
   */
  openLinks: boolean

  /**
   * Holds the search paths used by the browser to find supporting content.
   * @since 4.9.3.93
   */
  searchPaths: Array<unknown>

  /**
   * Holds the name of the displayed document. This will be empty if the URL is invalid, if no document is displayed, or if the source is unknown.
   * When setting this property the browser attempts to find a document with the specified name in searchPaths and the directory of the current source, unless the value is an absolute path. It also checks for optional anchors and scrolls the document accordingly.
   * If the first tag in the document is <qt type=detail>, the document is displayed as a popup rather than as new document in the browser itself. Otherwise, the document is displayed normally in the browser with the text set to the contents of the named document with DzTextEdit::html.
   */
  source: string

  /**
   * Changes the document displayed to the previous document in the list built by navigating links. Does nothing if there is no previous document.
   */
  backward (): void;

  /**
   * Clears the history of visited documents and disables the forward and backward navigation.
   * @since 4.9.3.93
   */
  clearHistory (): void;

  /**
   * Changes the document displayed to the next document in the list built by navigating links. Does nothing if there is no next document.
   */
  forward (): void;

  /**
   * @returns The DzTextEdit::documentTitle of the history item.
   * @since 4.9.3.93
   * @param index - The zero-based index of the history item. * index < 0 : backward() history   *         - index == 0 : current   *         - index > 0 : forward() history
   */
  historyTitle (index: number): string;

  /**
   * @returns The URL of the history item.
   * @since 4.9.3.93
   * @param index - The zero-based index of the history item. * index < 0 : backward() history   *         - index == 0 : current, see source   *         - index > 0 : forward() history
   */
  historyUrl (index: number): string;

  /**
   * Changes the current document displayed to be the first document displayed.
   */
  home (): void;

  /**
   * Reloads the current document.
   */
  reload (): void;

  anchorClicked: Signal<{
    /**
     * Emitted when the user clicks an anchor.
     * @param name - The value of the href, or the name of the target document
     * @param link - The name of the anchor
     */
  (name: string, link: string): void;
  }>;
  backwardAvailable: Signal<{
    /**
     * Emitted when the availability of backward() changes.
     * @param available - false when user is at home(), otherwise true.
     */
  (available: boolean): void;
  }>;
  forwardAvailable: Signal<{
    /**
     * Emitted when the availability of forward() changes.
     * @param available - true when the user navigates backward(), false when the user goes forward() or if there is no next document.
     */
  (available: boolean): void;
  }>;
  highlighted: Signal<{
    /**
     * Emitted when the user selects a link but does not activate it.
     * @param link - The selected link.
     */
  (link: string): void;
  }>;
  historyChanged: Signal<{
    /**
     * Emitted when the history changes.
     */
  (): void;
  }>;
  linkClicked: Signal<{
    /**
     * Emitted when the user clicks a link.
     * @attention The link will be the absolute location of the document, based on the value of the anchor's href tag.
     * @param link - The value of the href, or the name of the target document.
     */
  (link: string): void;
  }>;
  sourceChanged: Signal<{
    /**
     * Emitted when the mime source of the browser changes.
     * @param src - The name of the document being displayed in the browser.
     */
  (src: string): void;
  }>;
}

declare var DzTextBrowser:
{
  prototype: DzTextBrowser;

  /**
   * Creates a text browser widget as a child of the given parent widget.
   * @param parent - The widget parent for the text browser.
   */
  new (parent: DzWidget): DzTextBrowser;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textedit_dz
 * DAZScript wrapper for QTextEdit.
 * @remarks A DzTextEdit provides a powerful single-page rich text editor widget.
 */
interface DzTextEdit extends DzWidget
{

  /**
   * Enumerated values for auto formatting.
   * @since 4.9.3.93
   */
  /**
   * Do not perform any automatic formatting.
   */
  readonly AutoNone: number;

  /**
   * Only automatically format bulletted lists.
   */
  readonly AutoBulletList: number;

  /**
   * Apply all available autoformatting.
   */
  readonly AutoAll: number;

  /**
   * Enumerated values for how lines should wrap.
   * @since 4.9.3.93
   */
  /**
   * Do not wrap the text.
   */
  readonly NoLineWrap: number;

  /**
   * Wrap the text at the current width of the widget.
   */
  readonly WidgetWidth: number;

  /**
   * Wrap the text at a fixed number of pixels from the widget's left side.
   */
  readonly FixedPixelWidth: number;

  /**
   * Wrap the text at a fixed number of character columns from the widget's left side.
   */
  readonly FixedColumnWidth: number;

  /**
   * Enumerated values for how characters in a word should wrap.
   * @since 4.9.3.93
   */
  /**
   * Do not wrap the text at all.
   */
  readonly NoWrap: number;

  /**
   * Wrap the text at word boundaries.
   */
  readonly WordWrap: number;

  /**
   * Same as NoWrap.
   */
  readonly ManualWrap: number;

  /**
   * Wrap the text at any point on a line, even if it occurs in the middle of a word.
   */
  readonly WrapAnywhere: number;

  /**
   * If possible, WordWrap, otherwise WrapAnywhere.
   */
  readonly WrapAtWordBoundaryOrAnywhere: number;

  /**
   * Holds whether or not the text edit accepts rich text insertions by the user.
   * @since 4.9.3.93
   */
  acceptRichText: boolean

  /**
   * Holds the enabled set of auto formatting features.
   * @since 4.9.3.93
   */
  autoFormatting: number

  /**
   * Holds the number of text blocks (e.g., paragraphs) in the document. (Read-Only)
   */
  blockCount: number

  /**
   * Holds whether or not the font of the current format is bold.
   */
  bold: boolean

  /**
   * Holds the number of characters in the text. (Read-Only)
   * @since 4.9.3.93
   */
  characterCount: number

  /**
   * Holds the width of the cursor in pixels.
   * @since 4.9.3.93
   */
  cursorWidth: number

  /**
   * Holds the title of the document.
   */
  documentTitle: string

  /**
   * Holds the font family of the current format.
   * @since 4.9.3.93
   */
  family: string

  /**
   * Holds the font of the current format.
   * @since 4.9.3.93
   */
  font: Font

  /**
   * Holds the editor's contents as HTML.
   * @since 4.9.3.93
   */
  html: string

  /**
   * Holds whether or not the font of the current format is italic.
   */
  italic: boolean

  /**
   * Holds the number of lines in the text. (Read-Only)
   * @since 4.9.3.93
   */
  lineCount: number

  /**
   * Holds the position (in pixels or columns depending on the lineWrapMode) where text will be wrapped.
   * @since 4.9.3.93
   */
  lineWrapColumnOrWidth: number

  /**
   * Holds the mode the editor will use when wrapping text within words.
   * @since 4.9.3.93
   */
  lineWrapMode: number

  /**
   * Holds whether or not the text in the editor has been modified.
   * @since 4.9.3.93
   */
  modified: boolean

  /**
   * Holds whether or not text entered by the user will overwrite existing text.
   * @since 4.9.3.93
   */
  overwriteMode: boolean

  /**
   * Holds the editor's contents as plain text.
   * @since 4.9.3.93
   */
  plainText: string

  /**
   * Holds the point size of the font of the current format.
   */
  pointSize: number

  /**
   * Holds whether or not the text in the editor can be edited by the user.
   * @since 4.9.3.93
   */
  readOnly: boolean

  /**
   * Holds whether or not a redo operation is available. (Read Only)
   * @since 4.9.3.93
   */
  redoAvailable: boolean

  /**
   * Holds the selected text (if any) of the editor.
   * @since 4.9.3.93
   */
  selectedText: string

  /**
   * Holds whether pressing the Tab key changes focus or is accepted as input.
   * @since 4.9.3.93
   */
  tabChangesFocus: boolean

  /**
   * Holds the tab stop width in pixels; default is 80.
   * @since 4.9.3.93
   */
  tabStopWidth: number

  /**
   * Holds the text of the editor.
   */
  text: string

  /**
   * Holds the text background color of the current format.
   * @since 4.9.3.93
   */
  textBackgroundColor: Color

  /**
   * Holds the text color of the current format.
   * @since 4.9.3.93
   * DzWidget::TextInteractionFlags : textInteractionFlags
   * Holds the value that is used to determine how the label reacts to user input.
   * @since 4.9.3.93
   */
  textColor: Color

  /**
   * Holds whether or not the font of the current format is underlined.
   */
  underline: boolean

  /**
   * Holds whether or not an undo operation is available. (Read Only)
   * @since 4.9.3.93
   */
  undoAvailable: boolean

  /**
   * Holds holds whether or not undo and redo are enabled.
   * @since 4.9.3.93
   */
  undoRedoEnabled: boolean

  /**
   * Holds the font weight of the current format. 25 = Light, 50 = Normal, 63 = DemiBold, 75 = Bold, 87 = Black.
   * @since 4.9.3.93
   */
  weight: number

  /**
   * Holds the mode the editor will use when wrapping text by words.
   * @since 4.9.3.93
   */
  wordWrapMode: number

  /**
   * @returns The name of the anchor at position pos, or an empty string if no anchor exists at that point.
   * @since 4.9.3.93
   * @param pos - The position to get the anchor at.
   */
  anchorAt (pos: Point): string;

  /**
   * Adds text as a new paragraph to the end of the editor.
   * @since 4.9.3.93
   * @param text - The text to add.
   */
  append (text: string): void;

  /**
   * If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
   * @since 4.9.3.93
   */
  backspace (): void;

  /**
   * If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the cursor will be moved one word to the left and the word will be deleted.
   * @since 4.9.3.93
   */
  backspaceWord (): void;

  /**
   * Removes all text from the editor.
   * @since 4.9.3.93
   */
  clear (): void;

  /**
   * Copies the selected text into the clipboard.
   * @since 4.9.3.93
   */
  copy (): void;

  /**
   * Moves the cursor backward the given number of characters.
   * @since 4.9.3.93
   * @param [mark=false] - If true, each character that is stepped over will be added to the current selection.
   * @param [steps=1] - The number of characters to move the cursor.
   */
  cursorBackward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor forward the given number of characters.
   * @since 4.9.3.93
   * @param [mark=false] - If true, each character that is stepped over will be added to the current selection.
   * @param [steps=1] - The number of characters to move the cursor.
   */
  cursorForward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor backward one word.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the word will be added to the current selection.
   * @param [steps=1] - The number of words to move the cursor.
   */
  cursorWordBackward (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor forward one word.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the word will be added to the current selection.
   * @param [steps=1] - The number of words to move the cursor.
   */
  cursorWordForward (mark?: boolean, steps?: number): void;

  /**
   * Copies the selected text into the clipboard, and removes it from the editor.
   * @since 4.9.3.93
   */
  cut (): void;

  /**
   * If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
   * @since 4.9.3.93
   */
  del (): void;

  /**
   * If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the word to the right of the cursor will be deleted.
   * @since 4.9.3.93
   */
  deleteWord (): void;

  /**
   * Moves the cursor to the line below the current line.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the position of the cursor in the line below the current line to the cursor's previous position will be added to the current selection.
   * @param [steps=1] - The number of lines to move the cursor.
   */
  down (mark?: boolean, steps?: number): void;

  /**
   * Moves the cursor to the end of the document.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the cursor's previous position to the end of the document will be added to the current selection.
   */
  end (mark?: boolean): void;

  /**
   * Ensures that the cursor is visible by scrolling the editor if necessary.
   * @since 4.9.3.93
   */
  ensureCursorVisible (): void;

  /**
   * Finds the next occurrence of expression using the given options and changes the cursor to select the match.
   * @returns true if expression was found, otherwise false.
   * @since 4.9.3.93
   * @param expression - The expression to find.
   * @param [caseSensitive=false] - If true, the search is case sensitive.
   * @param [wholeWord=false] - If true, the search looks for whole words.
   * @param [backward=false] - If true, the search is performed in the reverse direction.
   */
  find (expression: string, caseSensitive?: boolean, wholeWord?: boolean, backward?: boolean): boolean;

  /**
   * @returns true if text is selected, otherwise false.
   */
  hasSelectedText (): boolean;

  /**
   * Moves the cursor to the beginning of the document.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the beginning of the document to the cursor's previous position will be added to the current selection.
   */
  home (mark?: boolean): void;

  /**
   * Splits the block (paragraph) at the cursor position.
   * @since 4.9.3.93
   */
  insertBlock (): void;

  /**
   * Inserts text, which is assumed to be HTML formatted, at the current cursor position.
   * @since 4.9.3.93
   * @param text - The HTML formatted text to insert.
   */
  insertHtml (text: string): void;

  /**
   * Inserts text at the current cursor position.
   * @since 4.9.3.93
   * @param text - The text to insert.
   */
  insertPlainText (text: string): void;

  /**
   * Moves the cursor to the end of the line.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
   */
  lineEnd (mark?: boolean): void;

  /**
   * Moves the cursor to the beginning of the line.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
   */
  lineStart (mark?: boolean): void;

  /**
   * Moves the cursor a page down in the document.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the cursor's previous position to a page down in the document will be added to the current selection.
   */
  pageDown (mark?: boolean): void;

  /**
   * Moves the cursor a page up in the document.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from a page up in the document to the cursor's previous position will be added to the current selection.
   */
  pageUp (mark?: boolean): void;

  /**
   * Inserts any text on the clipboard into the line at the cursor's current position.
   * @since 4.9.3.93
   */
  paste (): void;

  /**
   * If redoAvailable is true, redoes the next operation in the editor.
   * @since 4.9.3.93
   */
  redo (): void;

  /**
   * Scrolls the editor to make the text at the anchor name visible, if it can be found in the document. If the anchor isn't found no scrolling will occur. An anchor is defined using the HTML anchor tag, e.g., <a name=“target”>.
   * @since 4.9.3.93
   * @param name - The name of the anchor to scroll to.
   */
  scrollToAnchor (name: string): void;

  /**
   * Selects all the text in the editor.
   * @since 4.9.3.93
   */
  selectAll (): void;

  /**
   * @returns The selected text (if any), or an empty string.
   */
  selectedText (): string;

  /**
   * @returns The character position at which the current selection ends.
   */
  selectionEnd (): number;

  /**
   * @returns The character position at which the current selection begins.
   */
  selectionStart (): number;

  /**
   * @returns If blockIdx is in range, the text of the block at blockIdx, otherwise an empty string.
   * @param blockIdx - The index of the block to get the text of.
   */
  text (blockIdx: number): string;

  /**
   * If undoAvailable is true, undoes the last operation in the editor.
   * @since 4.9.3.93
   */
  undo (): void;

  /**
   * Moves the cursor to the line above the current line.
   * @since 4.9.3.93
   * @param [mark=false] - If true, the text from the position of the cursor in the line above the current line to the cursor's previous position will be added to the current selection.
   * @param [steps=1] - The number of lines to move the cursor.
   */
  up (mark?: boolean, steps?: number): void;

  /**
   * Zooms in on the text by making the base font size range points larger and recalculating all font sizes to be the new size.
   * @since 4.9.3.93
   * @param [range=1] - The number of points to increase the fonts sizes by.
   */
  zoomIn (range?: number): void;

  /**
   * Zooms out on the text by making the base font size range points smaller and recalculating all font sizes to be the new size.
   * @since 4.9.3.93
   * @param [range=1] - The number of points to decrease the fonts sizes by.
   */
  zoomOut (range?: number): void;

  copyAvailable: Signal<{
    /**
     * Emitted when text is selected or de-selected in the editor.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
  cursorPositionChanged: Signal<{
    /**
     * Emitted when the position of the cursor has changed.
     */
  (): void;
  }>;
  redoAvailable: Signal<{
    /**
     * Emitted when the availability of redo changes. If yesNo is true, redo() will work until redoAvailable(false) is next emitted.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
  selectionChanged: Signal<{
    /**
     * Emitted when the selection changes.
     */
  (): void;
  }>;
  textChanged: Signal<{
    /**
     * Emitted when the text in the editor changes.
     */
  (): void;
  }>;
  undoAvailable: Signal<{
    /**
     * Emitted when the availability of undo changes. If yesNo is true, undo() will work until undoAvailable(false) is next emitted.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
}

declare var DzTextEdit:
{
  prototype: DzTextEdit;

  /**
   * Creates a text edit widget as a child of the given parent widget.
   * @param parent - The widget parent for the text edit.
   */
  new (parent: DzWidget): DzTextEdit;

  /**
   * Enumerated values for auto formatting.
   * @since 4.9.3.93
   */
  /**
   * Do not perform any automatic formatting.
   */
  readonly AutoNone: number;
  /**
   * Only automatically format bulletted lists.
   */
  readonly AutoBulletList: number;
  /**
   * Apply all available autoformatting.
   */
  readonly AutoAll: number;

  /**
   * Enumerated values for how lines should wrap.
   * @since 4.9.3.93
   */
  /**
   * Do not wrap the text.
   */
  readonly NoLineWrap: number;
  /**
   * Wrap the text at the current width of the widget.
   */
  readonly WidgetWidth: number;
  /**
   * Wrap the text at a fixed number of pixels from the widget's left side.
   */
  readonly FixedPixelWidth: number;
  /**
   * Wrap the text at a fixed number of character columns from the widget's left side.
   */
  readonly FixedColumnWidth: number;

  /**
   * Enumerated values for how characters in a word should wrap.
   * @since 4.9.3.93
   */
  /**
   * Do not wrap the text at all.
   */
  readonly NoWrap: number;
  /**
   * Wrap the text at word boundaries.
   */
  readonly WordWrap: number;
  /**
   * Same as NoWrap.
   */
  readonly ManualWrap: number;
  /**
   * Wrap the text at any point on a line, even if it occurs in the middle of a word.
   */
  readonly WrapAnywhere: number;
  /**
   * If possible, WordWrap, otherwise WrapAnywhere.
   */
  readonly WrapAtWordBoundaryOrAnywhere: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texture_dz
 * Class that handles sharing of data for image maps.
 * @remarks This is a sharable object that stores information for a texture (image map) that is used in OpenGL. Do not create a texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 */
interface DzTexture extends QObject, DzRefCountedItem
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Standard: number;

  /**
   * TODO: Add description.
   */
  readonly LatLong: number;

  /**
   * TODO: Add description.
   */
  readonly LightProbe: number;

  /**
   * TODO: Add description.
   */
  readonly CustomTexture: number;

  /**
   * @returns The source file name for this image.
   */
  getFilename (): string;

  /**
   * @returns The gamma of the source file for this image. This is used for gamma correction. gamma⇐0 - do best guess of the image gamma gamma==1 - no gamma correction needed gamma>0 != 1 - the image is at the specified gamma
   */
  getGamma (): number;

  /**
   * @returns The actual size of the OpenGL texture alpha image.
   */
  getGLAlphaTextureSize (): Size;

  /**
   * @returns The actual size of the OpenGL texture image.
   */
  getGLTextureSize (): Size;

  /**
   * @returns The size of the original image that was the source of this texture.
   */
  getOriginalImageSize (): Size;

  /**
   * @returns A pixmap for this texture
   * @param size - size for the pixmap.
   */
  getPreviewPixmap (size: Size): Pixmap;

  /**
   * @returns A pixmap for this texture
   * @param width - for the pixmap.
   * @param height - for the pixmap.
   */
  getPreviewPixmap (width: number, height: number): Pixmap;

  /**
   * @returns The temp file name for this image.
   */
  getTempFilename (): string;

  /**
   * @returns The texture type of this texture
   */
  getTextureType (): number;

  /**
   * TODO: Add description.
   * @param image - 
   */
  loadImageData (image: Image): boolean;

  /**
   * Reloads the image if its source file has changed
   */
  refresh (): void;

  /**
   * @param gamma - the gamma for this image. gamma⇐0 - do best guess of the image gamma, gamma==1 - no gamma correction needed, gamma>0 != 1 - the image is at the specified gamma
   */
  setGamma (gamma: number): void;

  /**
   * @param type - the texture type for this texture
   */
  setTextureType (type: number): void;

  drawnDataChanged: Signal<{
    /**
     * Emitted when the data of the texture has changed - e.g. after a call to refresh()
     */
  (): void;
  }>;
  tempFilenameChanged: Signal<{
    /**
     * Emitted when the temp filename for the image has changed
     * @param filename - 
     */
  (filename: string): void;
  }>;
}

declare namespace DzTexture
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const Standard: number;
  /**
   * TODO: Add description.
   */
  export const LatLong: number;
  /**
   * TODO: Add description.
   */
  export const LightProbe: number;
  /**
   * TODO: Add description.
   */
  export const CustomTexture: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturecomponent_dz
 * NEEDS BRIEF.
 * @remarks NEEDS DESCRIPTION
 */
interface DzTextureComponent extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly RotNone: number;

  /**
   * TODO: Add description.
   */
  readonly Rot90: number;

  /**
   * TODO: Add description.
   */
  readonly Rot180: number;

  /**
   * TODO: Add description.
   */
  readonly Rot270: number;

  /**
   * TODO: Add description.
   */
  color: Color

  /**
   * Whether the component is enabled.
   */
  enabled: boolean

  /**
   * TODO: Add description.
   */
  flippedHorizontal: boolean

  /**
   * TODO: Add description.
   */
  flippedVertical: boolean

  /**
   * TODO: Add description.
   */
  imageFile: string

  /**
   * TODO: Add description.
   */
  invert: boolean

  /**
   * TODO: Add description.
   */
  offset: Point

  /**
   * TODO: Add description.
   */
  opacity: number

  /**
   * TODO: Add description.
   */
  rotation: number

  /**
   * TODO: Add description.
   */
  xOffset: number

  /**
   * TODO: Add description.
   */
  xScale: number

  /**
   * TODO: Add description.
   */
  yOffset: number

  /**
   * TODO: Add description.
   */
  yScale: number

  /**
   * TODO: Add description.
   * @param horizontal - 
   * @param vertical - 
   */
  flip (horizontal: boolean, vertical: boolean): void;

  /**
   * TODO: Add description.
   * @param image - 
   */
  loadImageData (image: Image): boolean;

  colorChanged: Signal<{
    /**
     * TODO: Add description.
     * @param color - 
     */
  (color: Color): void;
  }>;
  dataChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  enabledChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  flippedHorizontalChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  flippedVerticalChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  imageChanged: Signal<{
    /**
     * TODO: Add description.
     * @param filename - 
     */
  (filename: string): void;
  }>;
  invertedChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  labelChanged: Signal<{
    /**
     * TODO: Add description.
     * @param label - 
     */
  (label: string): void;
  }>;
  offsetChanged: Signal<{
    /**
     * TODO: Add description.
     * @param offset - 
     */
  (offset: Point): void;
  }>;
  opacityChanged: Signal<{
    /**
     * TODO: Add description.
     * @param opacity - 
     */
  (opacity: number): void;
  }>;
  rotationChanged: Signal<{
    /**
     * TODO: Add description.
     * @param rotation - 
     */
  (rotation: number): void;
  }>;
  scaleChanged: Signal<{
    /**
     * TODO: Add description.
     * @param x - 
     * @param y - 
     */
  (x: number, y: number): void;
  }>;
}

declare namespace DzTextureComponent
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const RotNone: number;
  /**
   * TODO: Add description.
   */
  export const Rot90: number;
  /**
   * TODO: Add description.
   */
  export const Rot180: number;
  /**
   * TODO: Add description.
   */
  export const Rot270: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturelayer_dz
 * NEEDS BRIEF.
 * @remarks NEEDS DESCRIPTION
 */
interface DzTextureLayer extends DzTextureComponent
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly BlendAlpha: number;

  /**
   * TODO: Add description.
   */
  readonly BlendAdd: number;

  /**
   * TODO: Add description.
   */
  readonly BlendSubtract: number;

  /**
   * TODO: Add description.
   */
  readonly BlendMultiply: number;

  /**
   * The blend mode of the texture.
   */
  blendMode: number

  /**
   * TODO: Add description.
   */
  clearMask (): void;

  /**
   * TODO: Add description.
   * @param maskLabel - 
   */
  createMask (maskLabel: string): DzTextureMask;

  /**
   * TODO: Add description.
   */
  getMask (): DzTextureMask;

  /**
   * TODO: Add description.
   * @param mask - 
   */
  setMask (mask: DzTextureMask): void;

  aboutToChangeMask: Signal<{
    /**
     * TODO: Add description.
     * @param oldMask - 
     * @param newMask - 
     */
  (oldMask: DzTextureMask, newMask: DzTextureMask): void;
  }>;
  blendModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mode - 
     */
  (mode: number): void;
  }>;
  maskChanged: Signal<{
    /**
     * TODO: Add description.
     * @param oldMask - 
     * @param newMask - 
     */
  (oldMask: DzTextureMask, newMask: DzTextureMask): void;
  }>;
}

declare namespace DzTextureLayer
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const BlendAlpha: number;
  /**
   * TODO: Add description.
   */
  export const BlendAdd: number;
  /**
   * TODO: Add description.
   */
  export const BlendSubtract: number;
  /**
   * TODO: Add description.
   */
  export const BlendMultiply: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturemask_dz
 * NEEDS BRIEF.
 * @remarks NEEDS DESCRIPTION
 */
interface DzTextureMask extends DzTextureComponent
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/time_dz
 * DAZScript time type.
 * @remarks DzTime is used for storing and passing time values. Time references in DAZ Studio are stored in 'ticks' - there are 4800 ticks per second. This number was chosen because of its divisibility by typical frame rates. For example, at 60 fps (frames per second) there are 80 ticks between each frame; at 30 fps, 160 ticks; at 20 fps, 180 ticks; etc.
 * @attention Methods throughout the DAZ Studio API that take a DzTime as an argument can also take a Number in its place.
 * @example
 * var oTimeStep = Scene.getTimeStep();
 * print( typeof oTimeStep );
 *  
 * var nTimeStep = oTimeStep.valueOf();
 * print( nTimeStep );
 *  
 * var oTime = Scene.getTime();
 * print( typeof oTime );
 *  
 * var nTime = oTime.valueOf();
 * print( nTime );
 *  
 * Scene.setTime( nTimeStep * 2 );
 *  
 * oTime = Scene.getTime();
 * print( typeof oTime );
 *  
 * nTime = oTime.valueOf();
 * print( nTime );
 */
interface DzTime
{

  /**
   * @returns The value of the DzTime as a Number.
   */
  valueOf (): number;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timeedit_dz
 * DAZScript wrapper for QTimeEdit.
 * @remarks A DzTimeEdit provides a time editor.
 */
interface DzTimeEdit extends DzDateTimeEdit
{

  /**
   * Holds the maximum value for the widget.
   */
  max: Date

  /**
   * Holds the minimum value for the widget.
   */
  min: Date

  /**
   * Holds the separator used by the widget.
   */
  separator: string

  valueChanged: Signal<{
    /**
     * Emitted when the time in the widget has changed, passes the new time.
     * @param time - 
     */
  (time: DzTime): void;
  }>;
}

declare var DzTimeEdit:
{
  prototype: DzTimeEdit;

  /**
   * Creates a time edit widget as a child of the given parent widget.
   * @param parent - The widget parent for the time edit.
   */
  new (parent: DzWidget): DzTimeEdit;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timer_dz
 * DAZScript wrapper for QTimer.
 * @remarks Provides repetitive and single-shot timers.
 */
interface DzTimer extends QObject
{

  /**
   * Holds whether the timer is running. (Read Only)
   */
  active: boolean

  /**
   * Holds the timeout interval in milliseconds; default is 0 - will time out as soon as all events in the window system's event queue have been processed.
   */
  interval: number

  /**
   * Holds whether the timer is the type that runs only once; if false, timer runs every interval milliseconds.
   */
  singleShot: number

  /**
   * Starts, or restarts, the timer with a timeout interval of msec milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
   * @param msec - The duration, in milliseconds, for the timer to run.
   */
  start (msec: number): void;

  /**
   * Starts, or restarts, the timer with a timeout interval of interval milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
   */
  start (): void;

  /**
   * Stops the timer.
   */
  stop (): void;

  timeout: Signal<{
    /**
     * Emitted when the timer times out.
     */
  (): void;
  }>;
}

declare var DzTimer:
{
  prototype: DzTimer;

  /**
   * Construct a timer with the given parent.
   * @param [parent=undefined] - 
   */
  new (parent?: QObject): DzTimer;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timerange_dz
 * Represents an interval of time with a beginning and an end.
 * @remarks TODO: Add detailed description.
 */
interface DzTimeRange extends Object
{

  /**
   * The end of the time range.
   */
  end: number

  /**
   * The start of the time range.
   */
  start: number

  /**
   * @returns The result of adding the given amount of time to both ends of this range
   * @param time - 
   */
  add (time: number): DzTimeRange;

  /**
   * Extends the ends of this range by the given amount of time
   * @param time - 
   */
  extendEndsBy (time: number): void;

  /**
   * @returns The length of the time range.
   */
  getDuration (): number;

  /**
   * Sets the time range to include the given time
   * @param time - 
   */
  include (time: number): void;

  /**
   * Sets the time range to include the given time range
   * @param range - 
   */
  include (range: DzTimeRange): void;

  /**
   * Sets this time range to the intersection with the given time range.
   * @param range - 
   */
  intersect (range: DzTimeRange): void;

  /**
   * @returns True if the range is length 0.
   */
  isEmpty (): boolean;

  /**
   * @returns True if the given time falls inside this range
   * @param time - 
   */
  isIncluded (time: number): boolean;

  /**
   * @returns True if the given range falls inside this range
   * @param range - 
   */
  isIncluded (range: DzTimeRange): boolean;

  /**
   * Sets the time range to be empty.
   */
  makeEmpty (): void;

  /**
   * @returns True if the given range overlaps this range
   * @param range - 
   */
  overlaps (range: DzTimeRange): boolean;

  /**
   * @returns The result of subtracting the given amount of time from both ends of the range
   * @param time - 
   */
  subtract (time: number): DzTimeRange;

}

declare var DzTimeRange:
{
  prototype: DzTimeRange;

  /**
   * Default Constructor. Creates the time range [DZ_MIN_TIME,DZ_MAX_TIME]
   */
  new (): DzTimeRange;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @param interval - 
   */
  new (interval: DzTimeRange): DzTimeRange;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @param start - 
   * @param end - 
   */
  new (start: DzTime, end: DzTime): DzTimeRange;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbar_dz
 * Class that encapsulates a QToolBar that contains DzToolBarItem items.
 * @remarks This class provides access to a toolbar in the interface. This class is not intended to be constructed directly, rather an instance of the class is created using DzPaneMgr::createToolBar().
 */
interface DzToolBar extends QWidget
{

  /**
   * The areas of a DzActivityLayout where the toolbar can be docked.
   */
  /**
   * The dock area at the top of a DzActivityLayout.
   */
  readonly ToolBarTop: number;

  /**
   * The dock area at the bottom of a DzActivityLayout.
   */
  readonly ToolBarBottom: number;

  /**
   * The dock area on the left side of a DzActivityLayout.
   */
  readonly ToolBarLeft: number;

  /**
   * The dock area on the right side of a DzActivityLayout.
   */
  readonly ToolBarRight: number;

  /**
   * No dock area. The toolbar cannot be docked.
   */
  readonly NoToolBarArea: number;

  /**
   * Removes all items from the bar.
   */
  clear (): void;

  /**
   * Docks the toolbar in the specified area on the DzActivityLayout, and shows the toolbar if it is hidden.
   * @param area - The DockArea to dock the toolbar to.
   * @param [beforeBar=“”] - The name of the bar in the area to dock before.
   */
  dock (area: number, beforeBar?: string): void;

  /**
   * @returns The dock area that the toolbar is docked in.
   */
  dockedArea (): number;

  /**
   * @returns A pointer to the toolbar item at the given index, NULL if the index is invalid
   * @param which - The index of the item in the menu
   */
  getItem (which: number): DzToolBarItem;

  /**
   * This function is provided for DAZ Script access. Plug-in developers are encouraged to use the much more efficient itemListIterator() method.
   * @returns A list of all the items in this toolbar.
   */
  getItemList (): Array<unknown>;

  /**
   * @returns The number of items in the toolbar
   */
  getNumItems (): number;

  /**
   * @returns true if there are items in this toolbar, false if the toolbar is empty.
   */
  hasItems (): boolean;

  /**
   * Adds the given action to the toolbar.
   * @param action - The DzAction that will be added to the toolbar.
   * @param before - The DzAction to insert action before.
   */
  insertAction (action: DzAction, before: DzAction): void;

  /**
   * Adds the given action to the toolbar.
   * @param action - The class name of the DzAction that will be added to the toolbar.
   * @param [index=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertAction (action: string, index?: number): void;

  /**
   * Adds the given custom action to the toolbar.
   * @param action - The name of the custom action that will be added to the toolbar.
   * @param [index=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertCustomAction (action: string, index?: number): void;

  /**
   * Adds a custom widget to the toolbar.
   * @param uiScript - A path to the DAZ Script that loads the QtDesigner .ui file for the custom widget. A global function named getWidget() is provided to uiScript that returns a DzWidget which should be used as the parent argument in a DzUiLoader::load() call.
   * @param [index=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertCustomWidget (uiScript: string, index?: number): void;

  /**
   * Inserts the given item into the toolbar at the given location.
   * @param item - The item to insert into the toolbar
   * @param [index=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the toolbar.
   */
  insertItem (item: DzToolBarItem, index?: number): void;

  /**
   * Adds a separator to the toolbar.
   * @param [index=-1] - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertSeparator (index?: number): void;

  /**
   * Adds a spacer to the toolbar which adjusts itself so that items added after it are aligned over the application viewport.
   * @param alignment - The alignment to use for toolbar items. Currently supports Qt::AlignLeft and Qt::AlignCenter
   * @param [index=-1] - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertViewportAlignmentSpacer (alignment: number, index?: number): void;

  /**
   * Adds a spacer to the toolbar which adjusts itself so that any items after it are centered over the application viewport.
   * @param [index=-1] - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertViewportCenterAlignSpacer (index?: number): void;

  /**
   * Adds a spacer to the toolbar which adjusts itself so that any items after it are left aligned over the application viewport.
   * @param [index=-1] - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
   */
  insertViewportLeftAlignSpacer (index?: number): void;

  /**
   * @returns true if the toolbar is closed (not displayed), false if the toolbar is open (displayed).
   */
  isClosed (): boolean;

  /**
   * @param index - The index of the item to remove.
   */
  removeItem (index: number): void;

  /**
   * @param item - The item to remove.
   */
  removeItem (item: DzToolBarItem): void;

  /**
   * Sets whether the toolbar is closed (not displayed), or open (displayed).
   * @param onOff - 
   */
  setClosed (onOff: boolean): void;

  /**
   * Undocks the toolbar, moves it to the given global coordinates, and shows the toolbar if it is hidden.
   * @param pos - 
   */
  undock (pos: Point): void;

  itemListChanged: Signal<{
    /**
     * Emitted when items are added to or removed from this toolbar
     */
  (): void;
  }>;
}

declare namespace DzToolBar
{

  /**
   * The areas of a DzActivityLayout where the toolbar can be docked.
   */
  /**
   * The dock area at the top of a DzActivityLayout.
   */
  export const ToolBarTop: number;
  /**
   * The dock area at the bottom of a DzActivityLayout.
   */
  export const ToolBarBottom: number;
  /**
   * The dock area on the left side of a DzActivityLayout.
   */
  export const ToolBarLeft: number;
  /**
   * The dock area on the right side of a DzActivityLayout.
   */
  export const ToolBarRight: number;
  /**
   * No dock area. The toolbar cannot be docked.
   */
  export const NoToolBarArea: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbaritem_dz
 * Class that encapsulates an item in a DzToolBar.
 * @remarks TODO: Add detailed description.
 */
interface DzToolBarItem extends QObject
{

  /**
   * The types of action menu items
   */
  /**
   * A toolbar separator (i.e. divider)
   */
  readonly Separator: number;

  /**
   * An action item - a toolbar item that activates a DzAction
   */
  readonly Action: number;

  /**
   * A toolbar item that activates a custom DzAction. See Also: DzActionMgr for more about custom actions.
   */
  readonly CustomAction: number;

  /**
   * A toolbar item that provides a non-standard widget.
   */
  readonly CustomWidget: number;

  /**
   * A toolbar item that adjusts itself so that any items after it are left aligned over the application viewport.
   */
  readonly ViewportLeftAlignSpacer: number;

  /**
   * A toolbar item that adjusts itself so that any items after it are centered over the application viewport.
   */
  readonly ViewportCenterAlignSpacer: number;

  /**
   * The class name of the action
   */
  action: string

  /**
   * The type of the menu item. (Read Only)
   */
  type: number

  /**
   * If the menu item type is CustomWidget, the name of the script that defines the UI for this menu item, or if the type of the item is not CustomWidget, an empty string is returned.
   */
  uiScript: string

}

declare namespace DzToolBarItem
{

  /**
   * The types of action menu items
   */
  /**
   * A toolbar separator (i.e. divider)
   */
  export const Separator: number;
  /**
   * An action item - a toolbar item that activates a DzAction
   */
  export const Action: number;
  /**
   * A toolbar item that activates a custom DzAction. See Also: DzActionMgr for more about custom actions.
   */
  export const CustomAction: number;
  /**
   * A toolbar item that provides a non-standard widget.
   */
  export const CustomWidget: number;
  /**
   * A toolbar item that adjusts itself so that any items after it are left aligned over the application viewport.
   */
  export const ViewportLeftAlignSpacer: number;
  /**
   * A toolbar item that adjusts itself so that any items after it are centered over the application viewport.
   */
  export const ViewportCenterAlignSpacer: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toplevelassetcontainer_dz
 * A container type that represents the top level of an asset container hierarchy.
 * @remarks This container type does not directly support assets. The primary purpose of this container type is to serve as the top-most container in an asset containers hierarchy.
 */
interface DzTopLevelAssetContainer extends DzAbstractAssetContainer
{

  /**
   * The different states of a top-level asset container.
   */
  /**
   * The container is idle.
   */
  readonly csNone: number;

  /**
   * The container is busy with an update.
   */
  readonly csBusy: number;

  /**
   * The update operation completed without errors.
   */
  readonly csFinished: number;

  /**
   * The update operation was canceled.
   */
  readonly csCanceled: number;

  /**
   * An error occured during the update operation.
   */
  readonly csError: number;

  /**
   * @returns The current state of the containter.
   * @seealso DzAssetMgr.getContentDirs()
   * DzAssetMgr.getPoserDirs()
   * DzAssetMgr.getImportDirs()
   * DzAssetMgr.getProducts()
   * DzAssetMgr.getCategories()
   * DzAssetMgr.getCompatibilityBases()
   * DzAssetMgr.searchFiles()
   * DzAssetMgr.searchForAssetsByKeywords()
   * DzAssetMgr.searchForAssets()
   * DzAssetMgr.searchForProductAssets()
   * DzAssetMgr.searchForAssetAddOns()
   * DzAssetMgr.searchForAssetTargets()
   * DzAssetMgr.searchForProducts()
   * @since 4.9.1.17
   */
  getState (): number;

  /**
   * Sets the state of this container.
   * @attention Generally this should not be called from script.
   * @since 4.9.1.17
   * @param state - The state to set.
   */
  setState (state: number): void;

  stateChanged: Signal<{
    /**
     * Emitted when the state of this container has changed.
     * @param state - The new state of this container.
     */
  (state: number): void;
  }>;
}

declare namespace DzTopLevelAssetContainer
{

  /**
   * The different states of a top-level asset container.
   */
  /**
   * The container is idle.
   */
  export const csNone: number;
  /**
   * The container is busy with an update.
   */
  export const csBusy: number;
  /**
   * The update operation completed without errors.
   */
  export const csFinished: number;
  /**
   * The update operation was canceled.
   */
  export const csCanceled: number;
  /**
   * An error occured during the update operation.
   */
  export const csError: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/transferutility_dz
 * Implements the logic of transferring weights, morph, maps, etc using projection.
 * @attention This object is provided by the Transfer Utility plugin. It is only available when the Transfer Utility plugin is activated and enabled.
 * @since 4.6.2.85
 */
interface DzTransferUtility extends QObject
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoAsset: number;

  /**
   * TODO: Add description.
   */
  readonly GeometryAsset: number;

  /**
   * TODO: Add description.
   */
  readonly NodeAsset: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly BaseGeom: number;

  /**
   * TODO: Add description.
   */
  readonly BaseMorph: number;

  /**
   * TODO: Add description.
   */
  readonly BaseCurrent: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoMorphs: number;

  /**
   * TODO: Add description.
   */
  readonly NameList: number;

  /**
   * TODO: Add description.
   */
  readonly Favorites: number;

  /**
   * TODO: Add description.
   */
  readonly FavoritesAndSubComponets: number;

  /**
   * TODO: Add description.
   */
  readonly ShapingAndPoseType: number;

  /**
   * TODO: Add description.
   */
  readonly AllMorphs: number;

  /**
   * Performs the projection transfer based on the current settings.
   * @returns true if the transfer was successful, false if the transfer could not be completed.
   */
  doTransfer (): boolean;

  /**
   * @returns The adaptive tolerance factor for calculating the projection.
   * @since 4.8.1.78
   */
  getAdaptiveTolerance (): number;

  /**
   * @returns true if a smoothing modifier will be added to the target figure., otherwise false.
   */
  getAddSmoothModifier (): boolean;

  /**
   * @returns true if the target geometry will be adjusted to the source base geometry, otherwise false.
   */
  getAdjustTargetBase (): boolean;

  /**
   * @returns The content type to be set on the presentation of the figure.
   */
  getContentType (): string;

  /**
   * @returns The distance squared tolerance for calculating the projection.
   * @since 4.10.0.50
   */
  getDistanceSquaredTolerance (): number;

  /**
   * @returns true if the target figure will be fit to the source figure once the projection has been performed, otherwise false.
   */
  getFitToFigure (): boolean;

  /**
   * @returns true if the view will be locked during the transfer, otherwise false.
   */
  getLockViewOnTransfer (): boolean;

  /**
   * @returns true if node hierarchies will be merged on the target figure, otherwise false.
   */
  getMergeHierarchies (): boolean;

  /**
   * @returns A list of morph names that will be transfered.
   */
  getMorphTransferList (): Array<unknown>;

  /**
   * @returns The nearness factor for calculating the projection.
   */
  getNearness (): number;

  /**
   * @returns true if existing morphs on the target figure will be replaced, otherwise false.
   */
  getOverrideExistingMorphs (): boolean;

  /**
   * @returns true if the target figure will be parented to the source figure once the projection has been performed, otherwise false.
   * @since 4.10.0.50
   */
  getParentToFigure (): boolean;

  /**
   * @returns The path to a template figure to use for projection.
   * @since 4.9.3.48
   */
  getProjectionTemplatePath (): string;

  /**
   * @returns Whether or not unused bones should be removed from the target after skin binding is transfered.
   */
  getRemoveUnusedTargetBones (): boolean;

  /**
   * @returns true if the transfer of weightmaps will respect hidden facets on the target figure, otherwise false.
   */
  getRespectHiddenFacets (): boolean;

  /**
   * @returns Whether or not smart left/right handling will be used during projection calculation.
   */
  getSmartLeftRightHandling (): boolean;

  /**
   * @returns The type of projection base that will be used for the source asset.
   */
  getSourceBase (): number;

  /**
   * @returns The morph that will be used for the source projection base, or NULL if a different base type will be used.
   */
  getSourceBaseMorph (): DzMorph;

  /**
   * @returns The shape containing the source asset if the source asset type is GeometryAsset, otherwise NULL.
   */
  getSourceGeom (): shape_dz;

  /**
   * @returns The node containing the source asset if the source asset type is NodeAsset, otherwise NULL.
   */
  getSourceNode (): DzNode;

  /**
   * @returns The type of asset currently set for the projection source.
   */
  getSourceType (): number;

  /**
   * @returns The type of projection base that will be used for the target asset.
   */
  getTargetBase (): number;

  /**
   * @returns The morph that will be used for the target projection base, or NULL if a different base type will be used.
   */
  getTargetBaseMorph (): DzMorph;

  /**
   * @returns The shape containing the target asset if the target asset type is GeometryAsset, otherwise NULL.
   */
  getTargetGeom (): shape_dz;

  /**
   * @returns The node containing the target asset if the target asset type is NodeAsset, otherwise NULL.
   */
  getTargetNode (): DzNode;

  /**
   * @returns The target output figure.
   */
  getTargetOutputFigure (): figure_dz;

  /**
   * @returns Whether or not the target will replace the source in the scene.
   */
  getTargetReplacesSource (): boolean;

  /**
   * @returns The type of asset currently set for the projection target.
   */
  getTargetType (): number;

  /**
   * @returns true if skin binding will be projected, otherwise false.
   */
  getTransferBinding (): boolean;

  /**
   * @returns true if face grouping will be projected, otherwise false.
   */
  getTransferFaceGroups (): boolean;

  /**
   * @returns true if material grouping will be projected, otherwise false.
   */
  getTransferMaterialGroups (): boolean;

  /**
   * @returns true if morphs will be projected, otherwise false.
   */
  getTransferMorphs (): boolean;

  /**
   * @returns true if region grouping will be projected, otherwise false.
   */
  getTransferRegionGroups (): boolean;

  /**
   * @returns true if the selection map will be projected, otherwise false.
   */
  getTransferSelectionMap (): boolean;

  /**
   * @returns Which morphs are projected from the source figure.
   */
  getTransferSourceMorphs (): number;

  /**
   * @returns true if morphs should be projected from the template figure, otherwise false.
   * @since 4.9.3.48
   */
  getTransferTemplateMorphs (): boolean;

  /**
   * @returns true if UV maps will be projected, otherwise false.
   */
  getTransferUVs (): boolean;

  /**
   * @returns true if near vertices will be used for calculation of the projection, otherwise false.
   */
  getUseNearness (): boolean;

  /**
   * @returns true if the specified content type should be used to set the target content type, otherwise false.
   */
  getUseSpecifiedContentType (): boolean;

  /**
   * @returns Whether or not UV space will be used during projection calculation.
   * @since 4.9.3.1
   */
  getUVSpaceProjection (): boolean;

  /**
   * @returns Whether vertices or facets are looked at first on the source for projection.
   * @since 4.9.3.38
   */
  getVertexFirstProjection (): boolean;

  /**
   * @returns true if the morph that will be used for the source projection base is a “clone”, otherwise false.
   * @since 4.9.4.84
   */
  isSourceBaseMorphClone (): boolean;

  /**
   * Removes unused bones from the given figure. Unused bones are those whose bone binding weight maps are all filled with zero.
   * @param figure - 
   */
  removeUnusedBones (figure: figure_dz): void;

  /**
   * Sets the adaptive tolerance factor if near vertices will be used to calculate the projection.
   * @since 4.8.1.78
   * @param val - The adaptive tolerance factor.
   */
  setAdaptiveTolerance (val: number): void;

  /**
   * Sets whether or not to add a smoothing modifier to the target figure.
   * @param yesNo - 
   */
  setAddSmoothModifier (yesNo: boolean): void;

  /**
   * Sets whether or not the target will be adjusted to the unmodified base geometry of the source.
   * @param onOff - If true, the target geometry will be adjusted, otherwiseThe target geometry will not be changed.
   */
  setAdjustTargetBase (onOff: boolean): void;

  /**
   * Sets the content type to be set on the presentation of the figure.
   * @param conType - The content type to set.
   */
  setContentType (conType: string): void;

  /**
   * Sets the distance squared tolerance to use for calculating the projection.
   * @since 4.10.0.50
   * @param val - The distance squared tolerance value.
   */
  setDistanceSquaredTolerance (val: number): void;

  /**
   * Sets whether or not the target figure will be fit to the source figure once the projection has been performed.
   * @param yesNo - If true, the target figure will be fit to the source figure.
   */
  setFitToFigure (yesNo: boolean): void;

  /**
   * Sets whether or not the view will be locked during the transfer.
   * @param onOff - If true, the view will be locked.
   */
  setLockViewOnTransfer (onOff: boolean): void;

  /**
   * Sets whether or not node hierarchies will be merged on the target figure.
   * @param onOff - If true, node hierarchies will be merged.
   */
  setMergeHierarchies (onOff: boolean): void;

  /**
   * Sets the list of morph names to transfer.
   * @param list - The list of morph names to set.
   */
  setMorphTransferList (list: Array<unknown>): void;

  /**
   * Sets the nearness factor if near vertices will be used to calculate the projection.
   * @param val - The nearness factor.
   */
  setNearness (val: number): void;

  /**
   * Sets whether or not to override morphs that already exist onthe target figure.
   * @param onOff - If true (default), existing morphs on the target figure will be replaced.
   */
  setOverrideExistingMorphs (onOff: boolean): void;

  /**
   * Sets whether or not the target figure will be parented to the source figure once the projection has been performed.
   * @since 4.10.0.50
   * @param yesNo - If true, the target figure will be parented to the source figure.
   */
  setParentToFigure (yesNo: boolean): void;

  /**
   * Sets the path to a template figure to use for projection.
   * @since 4.9.3.48
   * @param path - The path to set.
   */
  setProjectionTemplatePath (path: string): void;

  /**
   * Sets whether or not unused bones should be removed from the target after skin binding is transfered.
   * @param onOff - 
   */
  setRemoveUnusedTargetBones (onOff: boolean): void;

  /**
   * Sets whether or not the transfer of weightmaps will respect hidden facets on the target figure.
   * @param onOff - If true, the transfer of weightmaps will respect hidden facets on the target figure.
   */
  setRespectHiddenFacets (onOff: boolean): void;

  /**
   * Sets whether importers that may need to be invoked should run silently, or with user input. Currently this only affects transfers using DzTransferPoserFigureAssets. This needs to be called before setSource() or setTarget() are called.
   * @param onOff - 
   */
  setSilentImporters (onOff: boolean): void;

  /**
   * Sets whether or not smart left/right handling will be used during projection calculation.
   * @param onOff - 
   */
  setSmartLeftRightHandling (onOff: boolean): void;

  /**
   * Sets the source asset to be the geometry contained by the given node.
   * @param node - The node to use as a projection source.
   */
  setSource (node: DzNode): boolean;

  /**
   * Sets the source asset to be the geometry contained by the given shape.
   * @param geom - The shape containing the geometry to use as a projection source.
   */
  setSource (geom: shape_dz): boolean;

  /**
   * Sets the transfer utility to use the current world-space cached geometry of the source asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the source asset is a node.
   * @returns false if the source asset is not a node, otherwise true.
   */
  setSourceBaseCurrent (): boolean;

  /**
   * Sets the morph that will be applied to the source geometry before the projection is calculated. Only valid if the source asset is a node.
   * @returns true if the morph will be used, false if the morph is invalid or the source asset is not a node.
   * @param morph - The morph that will act as the projection base.
   */
  setSourceBaseMorph (morph: DzMorph): boolean;

  /**
   * Sets the target asset to be the geometry contained by the given node.
   * @param node - The node to use as a projection target.
   */
  setTarget (node: DzNode): boolean;

  /**
   * Sets the target asset to be the geometry contained by the given shape.
   * @param geom - The shape containing the geometry to use as a projection target.
   */
  setTarget (geom: shape_dz): boolean;

  /**
   * Sets the transfer utility to use the current world-space cached geometry of the target asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the target asset is a node.
   * @returns false if the target asset is not a node, otherwise true.
   */
  setTargetBaseCurrent (): boolean;

  /**
   * @returns The morph that will be used for the target projection base, or NULL if a different base type will be used.
   * @param morph - 
   */
  setTargetBaseMorph (morph: DzMorph): boolean;

  /**
   * Sets whether or not the target will replace the source in the scene
   * @param onOff - true for on, false off
   */
  setTargetReplacesSource (onOff: boolean): void;

  /**
   * Sets whether or not skin binding will be projected to the target.
   * @param onOff - If true, the skin binding weights will be projected, otherwise no binding will be projected.
   */
  setTransferBinding (onOff: boolean): void;

  /**
   * Sets whether or not face grouping will be projected to the target.
   * @param onOff - If true, the face groups will be projected, otherwise no face grouping will be projected.
   */
  setTransferFaceGroups (onOff: boolean): void;

  /**
   * Sets whether or not material grouping will be projected to the target.
   * @param onOff - If true, the material groups will be projected, otherwise no material groups will be projected.
   */
  setTransferMaterialGroups (onOff: boolean): void;

  /**
   * Sets whether or not morphs will be projected to the target.
   * @param onOff - If true, the morphs will be projected, otherwise no morphs will be projected.
   */
  setTransferMorphs (onOff: boolean): void;

  /**
   * Sets whether or not region grouping will be projected to the target.
   * @param onOff - If true, the face groups will be projected, otherwise no face grouping will be projected.
   */
  setTransferRegionGroups (onOff: boolean): void;

  /**
   * Sets whether or not the selection map will be created on the target.
   * @param onOff - If true, the selection map will be projected, otherwise no selection map will be projected.
   */
  setTransferSelectionMap (onOff: boolean): void;

  /**
   * Sets which type of morphs to project from the source figure.
   * @param type - The type of morphs on the source figure to project.
   */
  setTransferSourceMorphs (type: number): void;

  /**
   * Sets whether or not morphs should be projected from the template figure.
   * @since 4.9.3.48
   * @param onOff - If true, morphs will be projected from the template figure.
   */
  setTransferTemplateMorphs (onOff: boolean): void;

  /**
   * Sets whether or not UV maps will be projected to the target.
   * @param onOff - If true, the UV maps will be projected, otherwise no UV mapping will be projected.
   */
  setTransferUVs (onOff: boolean): void;

  /**
   * Sets whether or not face near vertices will be used to calculate the projection.
   * @param onOff - If true, near vertices will be used, otherwiseonly the closest mesh location will be used.
   */
  setUseNearness (onOff: boolean): void;

  /**
   * Sets whether or not the specified content type should be used to set the target content type.
   * @param yesNo - If true, the specified content type will be set.
   */
  setUseSpecifiedContentType (yesNo: boolean): void;

  /**
   * Sets whether or not UV space will be used during projection calculation.
   * @since 4.9.3.1
   * @param onOff - 
   */
  setUVSpaceProjection (onOff: boolean): void;

  /**
   * Sets whether vertices or facets are looked at first on the source for projection.
   * @since 4.9.3.38
   * @param onOff - 
   */
  setVertexFirstProjection (onOff: boolean): void;

}

declare var DzTransferUtility:
{
  prototype: DzTransferUtility;

  /**
   * Default Constructor. Creates a transfer utility that can be used to transfer weights, morph, maps, etc using projection.
   */
  new (): DzTransferUtility;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoAsset: number;
  /**
   * TODO: Add description.
   */
  readonly GeometryAsset: number;
  /**
   * TODO: Add description.
   */
  readonly NodeAsset: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly BaseGeom: number;
  /**
   * TODO: Add description.
   */
  readonly BaseMorph: number;
  /**
   * TODO: Add description.
   */
  readonly BaseCurrent: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoMorphs: number;
  /**
   * TODO: Add description.
   */
  readonly NameList: number;
  /**
   * TODO: Add description.
   */
  readonly Favorites: number;
  /**
   * TODO: Add description.
   */
  readonly FavoritesAndSubComponets: number;
  /**
   * TODO: Add description.
   */
  readonly ShapingAndPoseType: number;
  /**
   * TODO: Add description.
   */
  readonly AllMorphs: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/typeassetcontainer_dz
 * A generic asset container for hierarchical structures that can be represented by a slash ('/') delimted path.
 * @remarks A generic asset container that takes on the type of the data assigned to it, which can be used to present hierarchical structures that are representable by a slash ('/') delimted path.
 */
interface DzTypeAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem
{

  /**
   * Holds the data associated with this container; type depends on the type of the data assigned.
   */
  data: Object

  /**
   * Adds a new container with the given name, if one doesn't already exist.
   * @returns The index of the newly inserted container. If a container of the same type already exists, the index of that container will be returned.
   * @param typePath - The slash ('/') delimited path of a container to add.
   */
  addChildContainer (typePath: string): number;

  /**
   * Adds the given container if one of the same type name doesn't exist.
   * @returns The index of the newly added container or, if a container already exists with the same name, the index of that container.
   * @param container - The child container to be inserted.
   */
  addChildContainer (container: DzTypeAssetContainer): number;

  /**
   * Clears all the child containers and assets associated with this container. Emits endAssetRemove() and endChildContainerRemove().
   */
  clear (): void;

  /**
   * @returns The container with the given type name, if it exists, otherwise null.
   * @param typePath - The path of the container to find.
   */
  findChildContainer (typePath: string): DzTypeAssetContainer;

  /**
   * @returns The displayed text path of this container.
   * @param [ignoreRoot=true] - If true, the root item will not be included in the path.
   */
  getTextPath (ignoreRoot?: boolean): string;

  /**
   * @returns The type name for this container.
   */
  getTypeName (): string;

  /**
   * Attempts to insert the asset to a specific type.
   * @returns true if successful, otherwise false.
   * @param asset - The asset to be inserted.
   * @param typePath - The slash ('/') delimited path of the type for the asset.
   */
  insertToSpecificType (asset: DzAsset, typePath: string): boolean;

  aboutToClear: Signal<{
    /**
     * Emitted when this container is about to be cleared.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/u3dexporter_dz
 * Class for exporting to the Universal 3D (*.u3d) format.
 * @seealso DzExportMgr::findExporterByClassName()
 * DzExportMgr::findExporter()
 */
interface DzU3DExporter extends DzExporter
{

}

declare var DzU3DExporter:
{
  prototype: DzU3DExporter;

  /**
   * Default Constructor.
   */
  new (): DzU3DExporter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiloader_dz
 * DAZScript wrapper for QUiLoader.
 * @remarks Provides functionality that allows QtDesigner to be used in the creation of graphical user interfaces used by scripts.
 * @seealso designer-manual
 */
interface DzUiLoader extends QObject
{

  /**
   * Adds a path to the list of paths the .ui loader searches when locating QtDesigner plug-ins.
   * @param path - The path to add.
   */
  addPluginPath (path: string): void;

  /**
   * @returns A list of the names of layouts that can be built using createLayout().
   */
  availableLayouts (): Array<unknown>;

  /**
   * @returns A list of the names of widgets that can be built using createWidget().
   */
  availableWidgets (): Array<unknown>;

  /**
   * Clears the list of paths the .ui loader searches when locating QtDesigner plug-ins.
   */
  clearPluginPaths (): void;

  /**
   * Creates a new layout.
   * @returns The created layout (if any), otherwise null.
   * @param className - The name of the class to create an instance of.
   * @param [parent=0] - The object to parent the layout to.
   * @param [name=“”] - The name to assign to the layout.
   */
  createLayout (className: string, parent?: QObject, name?: string): DzLayout;

  /**
   * Creates a new widget.
   * @returns The created widget (if any), otherwise null.
   * @seealso load()
   * @param className - The name of the class to create an instance of.
   * @param parent - The widget to parent the widget to.
   * @param [name=“”] - The name to assign to the widget.
   */
  createWidget (className: string, parent: DzWidget, name?: string): DzWidget;

  /**
   * Loads a QtDesigner form (*.ui) and creates a new widget.
   * @returns A widget parented to parent that holds the contents of the loaded form (if any), otherwise null.
   * @param filePath - 
   * @param [parent=0] - The path of the .ui file to load.
   */
  load (filePath: string, parent?: DzWidget): DzWidget;

  /**
   * @returns A list of the paths the .ui loader searches when locating custom QtDesigner widget plug-ins.
   */
  pluginPaths (): Array<unknown>;

  /**
   * Sets the base directory of the .ui loader. The .ui loader looks for other resources, such as icons and resource files, in paths relative to this directory.
   * @param dir - The path to use as the base directory for other resources.
   */
  setWorkingDirectory (dir: string): void;

  /**
   * @returns The working directory of the .ui loader.
   */
  workingDirectory (): string;

}

declare var DzUiLoader:
{
  prototype: DzUiLoader;

  /**
   * Default Constructor.
   */
  new (): DzUiLoader;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uipopupwgt_dz
 * A popup widget constructed from a QtDesigner *.ui file.
 * @remarks TODO: Add detailed description.
 */
interface DzUIPopUpWgt extends QWidget
{

  /**
   * @returns The filename that was used to load the ui file
   */
  getFileName (): string;

  /**
   * @returns The current main QWidget.
   */
  getUIWidget (): QWidget;

  /**
   * @returns The current working directory for the ui file.
   */
  getWorkingDirectory (): string;

  /**
   * Sets the main widget for this popup from the ui file.
   * @param filename - The path to the ui file to show in the widget.
   */
  loadUI (filename: string): void;

  /**
   * Moves the popup to the point defined.
   * @param newPos - The position to move the popup widget to
   */
  movePopUp (newPos: Point): void;

  /**
   * Sets the widget for the ui popup widget.
   * @param widget - The widget for the popup
   */
  setWidget (widget: QWidget): void;

  /**
   * @param str - the working directory for the ui loader.   *         Note:   *         This has no effect if set after DzUIPopUpWgt::loadUI() is called.
   */
  setWorkingDirectory (str: string): void;

}

declare var DzUIPopUpWgt:
{
  prototype: DzUIPopUpWgt;

  /**
   * Default Constructor. Creates a new ui popup widget.
   * @param parent - The parent widget for the popup
   */
  new (parent: QWidget): DzUIPopUpWgt;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiwidget_dz
 * A DzWidget created by DzUiLoader.
 * @remarks Encapsulates a widget loaded from a QtDesigner (*.ui) file. Do not create an instance of this class, request an instance via DzUiLoader.
 * @seealso DzUiLoader.createWidget()
 * DzUiLoader.load()
 */
interface DzUiWidget extends DzWidget
{

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/undostack_dz
 * The application undo stack.
 * @remarks There is only one undo stack in the application, which is created and owned by DzApp. This object is directly available using the Global::UndoStack variable.
 */
interface DzUndoStack extends QObject
{

  /**
   * It is recommended that you use Global::acceptUndo() instead of calling this function directly to avoid leaving the undo stack open.
   * Finishes the hold and pushes the undo list onto the stack. If the stack is already at maximum depth, it pushes the oldest item off of the list.
   * @param caption - A descriptive string to display for the undo list.
   */
  accept (caption: string): void;

  /**
   * It is recommended that you use Global::beginUndo() instead of calling this function directly to avoid leaving the undo stack open.
   * Begins a hold, collecting all undo items into one undo entry. Every call to begin hold must be matched by a call to accept() or cancel().
   */
  beginHold (): void;

  /**
   * It is recommended that you use Global::cancelUndo() instead of calling this function directly to avoid leaving the undo stack open.
   * Finishes the hold but immediately calls undo to restore the state of the list to what it was before the matching beginHold() call.
   */
  cancel (): void;

  /**
   * @returns true if undo items can be pushed onto the stack, otherwise false.
   */
  canPushItems (): boolean;

  /**
   * @returns true if redo() can be called, otherwise false.
   */
  canRedo (): boolean;

  /**
   * @returns true if undo() can be called, otherwise false.
   */
  canUndo (): boolean;

  /**
   * Clears the undo stack. This must be called at least whenever the list changes.
   * @seealso Global::clearUndoStack()
   */
  clearAll (): void;

  /**
   * It is recommended that you use Global::dropUndo() instead of calling this function directly to avoid leaving the undo stack open.
   * Accepts the actions performed and closes the undo stack hold without adding the items to the undo stack - the memory associated with the items is freed.
   */
  drop (): void;

  /**
   * @returns If getCurrentIndex() + offset is within the [0, getNumItems() - 1] range, the caption assigned to the item at the index, otherwise an empty string.
   * @since 4.9.3.61
   * @param [offset=0] - The number of positions from the current position.
   */
  getCaption (offset?: number): string;

  /**
   * @returns The index of the current position in the stack.
   * @attention Each time an item is added or removed from the stack, each time undo() or redo() is called, each time accept() or clearAll() is called, the current index is changed.
   * @since 4.9.3.61
   */
  getCurrentIndex (): number;

  /**
   * @returns The total number of items in the undo stack.
   */
  getNumItems (): number;

  /**
   * @returns The total number of list items on the redo stack.
   */
  getNumRedoItems (): number;

  /**
   * @returns The total number of list items on the undo stack.
   */
  getNumUndoItems (): number;

  /**
   * @returns The caption assigned to the redo item at the top of the stack.
   */
  getRedoCaption (): string;

  /**
   * @returns The caption assigned to the undo item at the top of the stack.
   */
  getUndoCaption (): string;

  /**
   * @returns true if there are items on the undo stack, otherwise false.
   */
  hasItems (): boolean;

  /**
   * @returns true if the undo stack is currently engaged in an undo/redo operation. This is useful for items that need to perform certain operations if the undo stack is not the one effecting data changes.
   */
  isInUndoRedo (): boolean;

  /**
   * Disables items from being pushed onto the stack. This will be toggled by items to prevent undo operations from creating new undo items during an undo. Every call to lock() must be matched by a call to unlock().
   */
  lock (): void;

  /**
   * Calls redo on the item at the top of the stack, then moves the pointer to the next item in the stack.
   * @returns true on success, false on error or if the stack is empty.
   */
  redo (): boolean;

  /**
   * Calls undo on the item at the top of the stack, then moves the pointer to the previous item in the stack.
   * @returns true if successful, false on error or if the stack is empty.
   */
  undo (): boolean;

  /**
   * Enables items to be pushed onto the stack after a lock() call.
   */
  unlock (): void;

  redoAvailable: Signal<{
    /**
     * Emitted when the availability of the redo stack changes.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
  redoCaptionChanged: Signal<{
    /**
     * Emitted when the caption of the redo stack changes.
     * @param caption - 
     */
  (caption: string): void;
  }>;
  undoAvailable: Signal<{
    /**
     * Emitted when the availability of the undo stack changes.
     * @param yesNo - 
     */
  (yesNo: boolean): void;
  }>;
  undoCaptionChanged: Signal<{
    /**
     * Emitted when the caption of the undo stack changes.
     * @param caption - 
     */
  (caption: string): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uri_dz
 * Represents a Uniform Resource Indicator as used for Scene Asset I/O.
 * @remarks Represents a URI as it is used for the DSON file format. DzUri provides functionality in addition to standard URI/URL representations that is specific to the DSON file format.
 * DzUri provides for a traditional URI with path and fragment portions. In addition, it further divides the fragment into 1 to 3 parts for ease of use in the DSON file format. The following is an example of a URI as represented by the DzURI class:
 * /Converted/Victoria4/Victoria4.dsf::rCollar?rotation/x
 * The file path portion of this URI is: “/Converted/Victoria4/Victoria4.dsf”
 * The fragment portion of this URI is: “rCollar?rotation/x”
 * The fragment is further divided into an identifier and a property path. In this case the identifier is “rCollar” and the property path is “rotation/x”.
 * All the sections of the fragment are optional, however, to be valid, each section in the fragment requires the preceding section to also be valid. So, the following URIs are valid:
 * /Converted/Victoria4/Victoria4.dsf::rCollar
 * /Converted/Victoria4/Victoria4.dsf::rCollar?rotation
 * /Converted/Victoria4/Victoria4.dsf::rCollar?rotation/x
 * And the following URIs are not valid:
 * /Converted/Victoria4/Victoria4.dsf#?rotation/x
 * /Converted/Victoria4/Victoria4.dsf#?/x
 * /Converted/Victoria4/Victoria4.dsf#?rotation
 * @since 4.8.1.18
 */
interface DzUri extends Object
{

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoPart: number;

  /**
   * TODO: Add description.
   */
  readonly Scheme: number;

  /**
   * TODO: Add description.
   */
  readonly NodePath: number;

  /**
   * TODO: Add description.
   */
  readonly ModifierPath: number;

  /**
   * TODO: Add description.
   */
  readonly PropertyPath: number;

  /**
   * TODO: Add description.
   */
  readonly IDPart: number;

  /**
   * TODO: Add description.
   */
  readonly FilePath: number;

  /**
   * TODO: Add description.
   */
  readonly AllParts: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoScheme: number;

  /**
   * TODO: Add description.
   */
  readonly ID: number;

  /**
   * TODO: Add description.
   */
  readonly Name: number;

  /**
   * Holds the file path portion of the URI, if any.
   */
  filePath: string

  /**
   * Holds the file version of this URI, as a 64 bit unsigned integer. If not read from a file, this will be invalid.
   */
  fileVersion: DzVersion

  /**
   * Holds the identifier portion of this URI's fragment, if any.
   */
  id: string

  /**
   * Holds the modifier path portion of the URI, if any.
   */
  modifierPath: Array<unknown>

  /**
   * Holds the node path portion of this URI, if any.
   */
  nodePath: Array<unknown>

  /**
   * Holds the property portion of the URI, if any.
   */
  propertyPath: Array<unknown>

  /**
   * Holds the scheme type for this URI. Default is SchemeType.ID.
   */
  schemeType: number

  /**
   * Escapes any reserved characters in the in the given string.
   * @returns URI escape sequences.
   * @param str - The string to replace reserved characters in.
   * @param exclude - The list of characters to not be escaped from the resultant string
   * @param closer - The list of characters to be escaped from the resultant string
   */
  escape (str: string, exclude: ByteArray, closer: ByteArray): string;

  /**
   * Converts the string list into an escaped path string.
   * @returns URI path escape sequences.
   * @param list - The string list to replace reserved characters in.
   * @param exclude - The list of characters to not be escaped from the resultant string
   * @param include - The list of characters to be escaped from the resultant string
   */
  escapedPath (list: Array<unknown>, exclude: ByteArray, include: ByteArray): string;

  /**
   * Holds wether or not this uri was points to a cloud asset.
   * Creates a new URI using the path of a local file.
   * @param filePath - A local file path.
   */
  fromLocalFilename (filePath: string): boolean;

  /**
   * Converts any escape sequences in the given string back to the corresponding character.
   * @returns The given string with any escape sequences replaced with the appropriate character.
   * @param str - The string to convert escape sequences in.
   */
  unescape (str: string): string;

  /**
   * Converts the string into a string list of unescaped path pieces.
   * @param path - 
   */
  unescapePath (path: string): Array<unknown>;

  /**
   * Clears the current values of this URI.
   */
  clear (): void;

  /**
   * TODO: Add description.
   */
  clearFoundLocalFilename (): void;

  /**
   * Detaches this URI from any shared data. Makes the underlying data in this URI unique from all other URIs.
   */
  detach (): void;

  /**
   * @returns true if this URI is empty, otherwise false.
   */
  isEmpty (): boolean;

  /**
   * @returns true if this URI is null, otherwise false. A DzUri may be empty without being Null, but a Null uri is always empty
   * @since 4.9.2.12
   */
  isNull (): boolean;

  /**
   * Sets the value of this URI from a string representation of the full URI.
   * @param uri - The string containing the full URI.
   */
  setUri (uri: string): void;

  /**
   * Attempts to convert the URI to the path of a local file.
   * @returns A string representation of the URI converted to a local file path.
   * @param preferredPath - The path to attempt resolving against before other local drive paths are checked.
   */
  toLocalFilename (preferredPath: string): string;

  /**
   * Attempts to convert the URI to the path of a local file.
   * @returns A string representation of the path of the URI converted to a local file path.
   */
  toLocalFilename (): string;

  /**
   * Attempts to convert the URI to the path of a local file.
   * @returns A string representation of the URI converted to a file path. If the file represented by the URI exists, the string will be an absolute file path. If the file represented by the URI does not exist, the string will be a relative path.
   * @since 4.9.1.26
   * @param [preferredPath=“”] - The path to attempt resolving against before other local drive paths are checked.
   */
  toPath (preferredPath?: string): string;

  /**
   * @returns A string representation of the URI containing the parts specified by flags.
   * @param flags? - 
   */
  toString (flags?: number): string;

}

declare var DzUri:
{
  prototype: DzUri;

  /**
   * Default constructor. Creates an empty URI.
   */
  new (): DzUri;

  /**
   * Copy constructor. Creates a URI as a copy of another URI.
   * @param uri - 
   */
  new (uri: DzUri): DzUri;

  /**
   * Constructor. Creates a URI from its string representation.
   * @param uri - 
   */
  new (uri: string): DzUri;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoPart: number;
  /**
   * TODO: Add description.
   */
  readonly Scheme: number;
  /**
   * TODO: Add description.
   */
  readonly NodePath: number;
  /**
   * TODO: Add description.
   */
  readonly ModifierPath: number;
  /**
   * TODO: Add description.
   */
  readonly PropertyPath: number;
  /**
   * TODO: Add description.
   */
  readonly IDPart: number;
  /**
   * TODO: Add description.
   */
  readonly FilePath: number;
  /**
   * TODO: Add description.
   */
  readonly AllParts: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoScheme: number;
  /**
   * TODO: Add description.
   */
  readonly ID: number;
  /**
   * TODO: Add description.
   */
  readonly Name: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/userdrawstyle_dz
 * Base class for draw styles that the user can select from the viewport drop-down list.
 * @remarks Any draw styles which should be available to the user for selecting need to be derived from this class. Subclasses must implement the getPixmap() to return the icon that will be displayed in the viewport drop-down list, and getDescription() to return the text that accompanies the icon.
 */
interface DzUserDrawStyle extends DzDrawStyle
{

  /**
   * Read-Only - Whether or not the user style is available for use.
   */
  isEnabled: boolean

  /**
   * Derived classes should return a description for display in the viewport drop-down list.
   */
  getDescription (): string;

  /**
   * Derived classes should return an icon for display in the viewport drop-down list.
   */
  getPixmap (): Pixmap;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvset_dz
 * Represents vertex map containing the data for a UV set.
 * @remarks TODO: Add detailed description.
 */
interface DzUVSet extends vertexmap_dz, DzRefCountedItem
{

  /**
   * The author of the file for this vertex map. (Read Only)
   * @since 4.8.1.21
   */
  assetAuthor: DzAuthor

  /**
   * The revision version of the asset file for this vertex map. (Read Only)
   * @since 4.8.1.21
   */
  assetFileRevision: DzVersion

  /**
   * The asset id for this vertex map.
   * @since 4.8.1.18
   */
  assetId: string

  /**
   * The modified date of the asset file for this vertex map. (Read Only)
   * @since 4.8.1.21
   */
  assetModifiedDate: Date

  /**
   * The URI of the asset source for this vertex map; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
   * @since 4.8.1.21
   */
  assetSource: DzUri

  /**
   * The asset URI for this vertex map. (Read Only)
   * @since 4.8.1.18
   */
  assetUri: DzUri

  assetModified: Signal<{
    /**
     * @null 
     * Emitted when the UV set has been modified.
     */
  (): void;
  }>;
  assetWasSaved: Signal<{
    /**
     * @null 
     * Emitted after the UV set has been saved.
     */
  (): void;
  }>;
}

declare var DzUVSet:
{
  prototype: DzUVSet;

  /**
   * TODO: Add description.
   */
  new (): DzUVSet;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvsupportassetfilter_dz
 * Class for saving a DSON-based UV Set Definition Support Asset.
 * @remarks An asset save filter for saving a UV Set Definition Support Asset in the DSON format.
 * @seealso Sample: Save a UV Set Definition Support Asset
 */
interface DzUVSupportAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzUVSupportAssetFilter:
{
  prototype: DzUVSupportAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzUVSupportAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vboxlayout_dz
 * DAZScript wrapper for QVBoxLayout.
 * @remarks Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout::TopToBottom.
 */
interface DzVBoxLayout extends DzBoxLayout
{

}

declare var DzVBoxLayout:
{
  prototype: DzVBoxLayout;

  /**
   * Creates a vertical box layout that manages the children widgets of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzVBoxLayout;

  /**
   * Creates a vertical box layout as a sub-layout of the given layout
   * @param parent - 
   */
  new (parent: DzLayout): DzVBoxLayout;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vbuttongroup_dz
 * DAZScript wrapper for Q3VButtonGroup.
 * @remarks DzButtonGroup with a vertical layout.
 */
interface DzVButtonGroup extends DzButtonGroup
{

}

declare var DzVButtonGroup:
{
  prototype: DzVButtonGroup;

  /**
   * Creates a button group as a child of the given parent widget
   * @param parent - 
   */
  new (parent: DzWidget): DzVButtonGroup;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec2_dz
 * A two dimensional floating-point-based vector.
 * @seealso DzInt2
 * @since 4.6.4.88
 */
interface DzVec2 extends Object
{

  /**
   * Holds the x value of this vector.
   */
  x: number

  /**
   * Holds the y value of this vector.
   */
  y: number

  /**
   * Sets the value of each component to its respective absolute value.
   */
  abs (): void;

  /**
   * @returns The result of adding another vector to this vector.
   * @param vec - 
   */
  add (vec: DzVec2): DzVec2;

  /**
   * @returns The average of each component of this vector.
   * @since 4.9.3.118
   */
  average (): number;

  /**
   * Clamps each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamp (min: number, max: number): void;

  /**
   * @returns A copy of this vector where each component has been clamped to min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamped (min: number, max: number): DzVec2;

  /**
   * @returns A copy of this vector where each component has been clamped to max.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampedMax (max: number): DzVec2;

  /**
   * @returns A copy of this vector where each component has been clamped to min.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampedMin (min: number): DzVec2;

  /**
   * Clamps the maximum value for each component of this vector.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampMax (max: number): void;

  /**
   * Clamps the minimum value for each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampMin (min: number): void;

  /**
   * @returns The cross product of this vector and another vector.
   * @param vec - The target vector.
   */
  cross (vec: DzVec2): DzVec2;

  /**
   * @returns The result of dividing this vector by another vector.
   * @param vec - 
   */
  divide (vec: DzVec2): DzVec2;

  /**
   * @returns The dot product of this vector and another vector.
   * @param vec - The target vector.
   */
  dot (vec: DzVec2): number;

  /**
   * Tests if this vector and another vector are considered equal, within a tolerance.
   * @returns true if all components are within tolerance of the components of the given vector.
   * @since 4.9.3.118
   * @param vec - The vector to compare this vector against.
   * @param [tolerance=1e-6] - The amount of deviation allowed.
   */
  equals (vec: DzVec2, tolerance?: number): boolean;

  /**
   * @returns The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
   * @param vec - The target vector.
   */
  getAngleTo (vec: DzVec2): number;

  /**
   * @returns The length of this vector.
   */
  length (): number;

  /**
   * @returns The length of this vector, squared.
   */
  lengthSquared (): number;

  /**
   * Performs a linear interpolation between v1 and v2 based on the value of t.
   * @returns v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
   * @since 4.9.3.118
   * @param t - The value to evaluate.
   * @param v1 - 
   * @param v2 - The first vector.
   */
  linearInterp (t: number, v1: DzVec2, v2: DzVec2): DzVec2;

  /**
   * Sets this vector to (1.0, 1.0).
   */
  makeIdentity (): void;

  /**
   * Sets this vector to (0.0, 0.0).
   */
  makeZero (): void;

  /**
   * @returns A copy of this vector where each component has been modulated by min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulate (min: number, max: number): DzVec2;

  /**
   * Modulates each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulo (min: number, max: number): void;

  /**
   * @returns The result of multiplying this vector by another vector.
   * @param vec - 
   */
  multiply (vec: DzVec2): DzVec2;

  /**
   * Negates each component of this vector.
   */
  negate (): void;

  /**
   * Modifies this vector to be its unit length.
   */
  normalize (): void;

  /**
   * @returns A copy of this vector that has been normalized.
   */
  normalized (): DzVec2;

  /**
   * Sets this vector to have a specific length in the current direction.
   * @seealso length()
   * makeZero()
   * @param length - The length to set.
   */
  setLength (length: number): void;

  /**
   * Sets the value of each component to its respective squared value.
   */
  square (): void;

  /**
   * @returns The result of subtracting another vector from this vector.
   * @param vec - 
   */
  subtract (vec: DzVec2): DzVec2;

}

declare var DzVec2:
{
  prototype: DzVec2;

  /**
   * Default Constructor. Creates an uninitialized vector.
   */
  new (): DzVec2;

  /**
   * Copy Constructor.
   * @param vec - 
   */
  new (vec: DzInt2): DzVec2;

  /**
   * Copy Constructor.
   * @param vec - 
   */
  new (vec: DzVec2): DzVec2;

  /**
   * Creates and inititializes this vector with an array of 2 float values.
   * @param vals - 
   */
  new (vals: Array<unknown>): DzVec2;

  /**
   * Creates and inititializes this vector with 2 floats.
   * @param x - 
   * @param y - 
   */
  new (x: number, y: number): DzVec2;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec3_dz
 * A three dimensional floating-point-based vector.
 * @seealso DzVec2
 * DzInt2
 */
interface DzVec3 extends Object
{

  /**
   * Holds the x value of this vector.
   */
  x: number

  /**
   * Holds the y value of this vector.
   */
  y: number

  /**
   * Holds the z value of this vector.
   */
  z: number

  /**
   * Sets the value of each component to its respective absolute value.
   */
  abs (): void;

  /**
   * @returns The result of adding another vector to this vector.
   * @param vec - 
   */
  add (vec: DzVec3): DzVec3;

  /**
   * @returns The average of each component of this vector.
   * @since 4.9.3.118
   */
  average (): number;

  /**
   * Clamps each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamp (min: number, max: number): void;

  /**
   * @returns A copy of this vector where each component has been clamped to min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  clamped (min: number, max: number): DzVec3;

  /**
   * @returns A copy of this vector where each component has been clamped to max.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampedMax (max: number): DzVec3;

  /**
   * @returns A copy of this vector where each component has been clamped to min.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampedMin (min: number): DzVec3;

  /**
   * Clamps the maximum value for each component of this vector.
   * @since 4.9.3.118
   * @param max - The maximum value.
   */
  clampMax (max: number): void;

  /**
   * Clamps the minimum value for each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   */
  clampMin (min: number): void;

  /**
   * @returns The cross product of this vector and another vector.
   * @param vec - The target vector.
   */
  cross (vec: DzVec3): DzVec3;

  /**
   * @returns The result of dividing this vector by another vector.
   * @param vec - 
   */
  divide (vec: DzVec3): DzVec3;

  /**
   * @returns The dot product of this vector and another vector.
   * @param vec - The target vector.
   */
  dot (vec: DzVec3): number;

  /**
   * Tests if this vector and another vector are considered equal, within a tolerance.
   * @returns true if all components are within tolerance of the components of the given vector.
   * @since 4.9.3.118
   * @param vec - The vector to compare this vector against.
   * @param [tolerance=1e-6] - The amount of deviation allowed.
   */
  equals (vec: DzVec3, tolerance?: number): boolean;

  /**
   * @returns The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
   * @param vec - The target vector.
   */
  getAngleTo (vec: DzVec3): number;

  /**
   * @returns The rotation that will swing this vector to the target vector.
   * @param vec - The target vector.
   */
  getRotationTo (vec: DzVec3): DzQuat;

  /**
   * @returns The length of this vector.
   */
  length (): number;

  /**
   * @returns The length of this vector, squared.
   */
  lengthSquared (): number;

  /**
   * Performs a linear interpolation between v1 and v2 based on the value of t.
   * @returns v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
   * @since 4.9.3.118
   * @param t - The value to evaluate.
   * @param v1 - 
   * @param v2 - The first vector.
   */
  linearInterp (t: number, v1: DzVec3, v2: DzVec3): DzVec3;

  /**
   * Sets this vector to (1.0, 1.0, 1.0).
   */
  makeIdentity (): void;

  /**
   * Sets this vector to (0.0, 0.0, 0.0).
   */
  makeZero (): void;

  /**
   * @returns A copy of this vector where each component has been modulated by min and max.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulate (min: number, max: number): DzVec3;

  /**
   * Modulates each component of this vector.
   * @since 4.9.3.118
   * @param min - The minimum value.
   * @param max - The maximum value.
   */
  modulo (min: number, max: number): void;

  /**
   * @returns The result of multiplying this vector by another vector.
   * @param vec - 
   */
  multiply (vec: DzVec3): DzVec3;

  /**
   * Negates each component of this vector.
   */
  negate (): void;

  /**
   * Modifies this vector to be its unit length.
   */
  normalize (): void;

  /**
   * @returns A copy of this vector that has been normalized.
   */
  normalized (): DzVec3;

  /**
   * Sets this vector to have a specific length in the current direction.
   * @seealso length()
   * makeZero()
   * @param length - The length to set.
   */
  setLength (length: number): void;

  /**
   * Sets the value of each component to its respective squared value.
   */
  square (): void;

  /**
   * @returns The result of subtracting another vector from this vector.
   * @param vec - 
   */
  subtract (vec: DzVec3): DzVec3;

}

declare var DzVec3:
{
  prototype: DzVec3;

  /**
   * Default Constructor. Creates an uninitialized vector.
   */
  new (): DzVec3;

  /**
   * Copy Constructor.
   * @param vec - 
   */
  new (vec: DzVec3): DzVec3;

  /**
   * Creates and inititializes this vector with an array of 3 float values.
   * @since 4.6.4.88
   * @param vals - 
   */
  new (vals: Array<unknown>): DzVec3;

  /**
   * Creates and inititializes this vector with 3 floats.
   * @param x - 
   * @param y - 
   * @param z - 
   */
  new (x: number, y: number, z: number): DzVec3;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/version_dz
 * Class representing a 8-byte (64-bit) version number.
 * @remarks This class was added to DAZ Studio 4.x to make it easier to work with 64-bit version numbers and to facilitate compatibility with the old 32-bit version numbers.
 * Version numbers are typically displayed to the user as short version strings, e.g. 4.0, or long version strings, e.g. 4.0.0.0.
 * The version number consists of 4 components: The Major version number, the Minor version number, the Revision number, and the Build number. This is displayed in the following order: Major.Minor.Revision.Build.
 * In DAZ Studio, version numbers are typically stored as 64-bit unsigned integers with 16 bits for each number. This means that each number has a valid range of 0-65535. The most significant 16 bits are the Major version number, the next most significant 16 bits are the Minor version number, the next most significant 16 bits are the Revision number and the least significant 16 bits are the Build number. So, a packed version number in hexadecimal notation might look like: 0x1111222233334444 where 1111 is the Major version number, 2222 is the Minor version number 3333 is the Revision number and 4444 is the build number.
 * It is recommended that this class be used when possible to reduce confusion when dealing with version numbers in code.
 * This class provides methods for all of the numerical comparison operators (<, >, <=, >=, ==, !=) to make it easy to compare version numbers without directly using the packed value, or the individual components.
 * @since 4.8.1.20
 */
interface DzVersion extends Object
{

  /**
   * Parses a version string into a version number.
   * @returns The version number that was created from the string.
   * @param versionStr - A string representation of the version number in the form “N.N.N.N”
   */
  fromString (versionStr: string): DzVersion;

  /**
   * @returns true if the version numbers are the same, otherwise false.
   * @param version - 
   */
  equal (version: DzVersion): boolean;

  /**
   * @returns The Build number.
   */
  getBuildNumber (): number;

  /**
   * @returns A string containing all four version numbers separated with a dot, e.g. “4.0.0.0”
   */
  getLongVersionString (): string;

  /**
   * @returns The Major version number.
   */
  getMajorVersion (): number;

  /**
   * @returns The Minor version number.
   */
  getMinorVersion (): number;

  /**
   * @returns The Revision number.
   */
  getRevisionNumber (): number;

  /**
   * @returns The 64-bit packed representation of the version number.
   */
  getVersionNumber (): number;

  /**
   * @returns A 32-bit packed representation of the version number.
   * @attention For backwards compatibility with old 32-bit version numbers - this function should only be used if absolutely necessary. It is highly recommended that all functionality be ported to the new 64-bit version number system. Using this function will result in inaccurate version numbering if one of the version numbers is greater than 255.
   */
  getVersionNumber32 (): number;

  /**
   * @returns A string containing the Major and Minor version numbers separated with a dot, e.g. “4.0”
   */
  getVersionString (): string;

  /**
   * @returns true if the version number is greater than (newer than) this version number, otherwise false.
   * @param version - 
   */
  greaterThan (version: DzVersion): boolean;

  /**
   * @returns true if the version number is greater than or equal (newer than or the same as) this version number, otherwise false.
   * @param version - 
   */
  greaterThanOrEqual (version: DzVersion): boolean;

  /**
   * @returns true if the version number has been initialized, otherwise false.
   */
  isValid (): boolean;

  /**
   * @returns true if the version number is less than (older than) this version number, otherwise false.
   * @param version - 
   */
  lessThan (version: DzVersion): boolean;

  /**
   * @returns true if the version number is less than or equal (older than or the same as) this version number, otherwise false.
   * @param version - 
   */
  lessThanOrEqual (version: DzVersion): boolean;

  /**
   * @returns true if the version numbers are different, otherwise false.
   * @param version - 
   */
  notEqual (version: DzVersion): boolean;

  /**
   * Sets the 64-bit version number from an old 32-bit version number.
   * @param version - The old 32-bit version number.   *         Sets the version number from a 64-bit packed version number.   *         Or the version number as a packed 64-bit value.
   */
  setVersionNumber (version: number): void;

  /**
   * Sets the version number from the 4 16-bit components.
   * @param major - The major version number.
   * @param minor - The minor version number.
   * @param revision - The revision number.
   * @param build - The build number.
   */
  setVersionNumber (major: number, minor: number, revision: number, build: number): void;

}

declare var DzVersion:
{
  prototype: DzVersion;

  /**
   * Default constructor. Creates an empty version number - i.e. 0.0.0.0
   */
  new (): DzVersion;

  /**
   * TODO: Add description.
   * @param version - 
   */
  new (version: string): DzVersion;

  /**
   * Creates a version number from the 4 16-bit components.
   * @param major - The major version number.
   * @param minor - The minor version number.
   * @param revision - The revision number.
   * @param build - The build number.
   */
  new (major: number, minor: number, revision: number, build: number): DzVersion;

  /**
   * Compatibility constructor. Creates a 64-bit version number from an old 32-bit version number.
   * @param version - The 32-bit version number to convert.   *         Creates a version number from a 64-bit packed representation.   *         version - The 64-bit version number.
   */
  new (version: number): DzVersion;

  /**
   * Copy constructor. Creates a version that is a copy of the given number.
   * @param version - The version number to create a copy of.
   */
  new (version: DzVersion): DzVersion;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vgroupbox_dz
 * DAZScript wrapper for Q3VGroupBox.
 * @remarks A DzHGroupBox provides a DzGroupBox with a vertical layout.
 */
interface DzVGroupBox extends DzGroupBox
{

}

declare var DzVGroupBox:
{
  prototype: DzVGroupBox;

  /**
   * Creates a group box as a child of the given parent widget.
   * @param parent - The widget parent for the group box.
   */
  new (parent: DzWidget): DzVGroupBox;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoclip_dz
 * Class that encapsulates a simple video clip with per frame images.
 * @remarks TODO: Add detailed description.
 */
interface DzVideoClip extends QObject
{

  /**
   * Adds a frame to the end of the clip
   * @param img - Image to add as a frame.
   */
  appendFrame (img: Image): void;

  /**
   * Adds a frame to the end of the clip
   * @param imgFilename - Image file to add as a frame.
   */
  appendFrameFile (imgFilename: string): void;

  /**
   * @returns The audio (if any) that is associated with the video.
   */
  getAudio (): DzAudioClip;

  /**
   * @returns The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
   */
  getAudioStartTime (): DzTime;

  /**
   * @returns The i'th frame in still image form
   * @param i - 
   */
  getFrame (i: number): Image;

  /**
   * @returns The number of frames per second for the clip
   */
  getFrameRate (): number;

  /**
   * @returns The height of the video clip.
   */
  getHeight (): number;

  /**
   * @returns The number of frames in the video clip.
   */
  getNumFrames (): number;

  /**
   * @returns The width of the video clip.
   */
  getWidth (): number;

  /**
   * Set the audio that accompanies the video clip
   * @param audio - The audio clip for the video.
   * @param audioStartTime - The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
   */
  setAudio (audio: DzAudioClip, audioStartTime: DzTime): void;

  /**
   * Set the frame rate of the clip
   * @param rate - The number of frames per second for the clip
   */
  setFrameRate (rate: number): void;

}

declare var DzVideoClip:
{
  prototype: DzVideoClip;

  /**
   * Default Constructor.
   */
  new (): DzVideoClip;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @param width - 
   * @param height - 
   * @param rate - 
   */
  new (width: number, height: number, rate: number): DzVideoClip;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoexporter_dz
 * Base class for all image exporters.
 * @remarks TODO: Add detailed description.
 */
interface DzVideoExporter extends DzFileIO
{

  /**
   * @returns A description of the exporter that can be placed in a file type selection combo box (e.g. “AVI Format”)
   */
  getDescription (): string;

  /**
   * @returns The extension that this exporter will force filenames to (excluding the preceeding '.').
   */
  getExtension (): string;

  /**
   * @returns true if this exporter writes to a 'real' file. Derived classes should override this to indicate whether or not they are writing out to a real file. Exporters can, if they want to, write to entities other than files (e.g. sockets, pipes, etc.)
   */
  isFileExporter (): boolean;

  /**
   * Writes the file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - The name of the file to save the video to.
   * @param clip - Video clip to save to file.
   */
  saveClip (filename: string, clip: DzVideoClip): DzError;

  /**
   * Writes the file.
   * @returns DZ_NO_ERROR on success, otherwise an error code.
   * @param filename - The name of the file to save the video to.
   * @param clip - Video clip to save to file.
   * @param options - 
   */
  saveClip (filename: string, clip: DzVideoClip, options: DzFileIOSettings): DzError;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/view_dz
 * A widget that can be displayed in one of the interactive viewports.
 * @remarks TODO: Add detailed description.
 */
interface DzView extends QWidget
{

  /**
   * @returns A user-readable description of the view.
   */
  getDescription (): string;

  /**
   * @returns A pixmap icon to represent the view.
   */
  getIcon (): Pixmap;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewport_dz
 * A viewport.
 * @remarks Encapsulation of a 3D viewport. This object includes the surrounding decoration and camera manipulation controls. It contains the actual 3D viewport.
 */
interface DzViewport extends QWidget
{

  /**
   * @returns The embedded 3D viewport that this viewport encapsulates.
   */
  get3DViewport (): Dz3DViewport;

  /**
   * @returns The manager of this viewport.
   */
  getManager (): DzViewportMgr;

  /**
   * @returns The alternate view currently being displayed in the viewport; NULL if an alternate view is not displayed (i.e. the 3D viewport is active).
   */
  getView (): DzView;

  /**
   * @returns true if this viewport is custom; otherwise false.
   * @since 4.7.1.104
   */
  isCustom (): boolean;

  /**
   * Sets the alternate view for the viewport; this replaces the 3D viewport while active. Pass in NULL to clear the alternate view and restore the 3D viewport.
   * @param view - The view to display in the viewport.
   */
  setView (view: DzView): void;

  /**
   * Sets the visible state of the alternate view for this viewport, if an alternate view has been set.
   * @seealso setView()
   * @param onOff - 
   */
  setViewVisible (onOff: boolean): void;

  dimensionsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  view3dCurrentDimensionsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  viewChanged: Signal<{
    /**
     * TODO: Add description.
     * @param view - 
     */
  (view: DzView): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewportmgr_dz
 * Manager class for all visible and non-visible 3D view ports.
 * @remarks There is only one of these widgets in the application. This widget is created and owned by DzMainWindow, and can be accessed by requesting a pointer to it from DzMainWindow via DzMainWindow::getViewportMgr().
 */
interface DzViewportMgr extends QWidget
{

  /**
   * The possible layout styles.
   */
  /**
   * No visible view ports
   */
  readonly NO_PANES: number;

  /**
   * A single visible viewport
   */
  readonly SINGLE_PANE: number;

  /**
   * 2 visible view ports split the view area into right and left
   */
  readonly LEFT_RIGHT: number;

  /**
   * 2 visible view ports split the view area into top and bottom
   */
  readonly TOP_BOTTOM: number;

  /**
   * 3 visible view ports 2 on the left side and 1 on the right
   */
  readonly LEFT2_RIGHT: number;

  /**
   * 4 visible view ports 3 on the left side and 1 on the right
   */
  readonly LEFT3_RIGHT: number;

  /**
   * 3 visible view ports 2 on the right side and 1 on the left
   */
  readonly LEFT_RIGHT2: number;

  /**
   * 4 visible view ports 3 on the right side and 1 on the left
   */
  readonly LEFT_RIGHT3: number;

  /**
   * 3 visible view ports 2 on the top side and 1 on the bottom
   */
  readonly TOP2_BOTTOM: number;

  /**
   * 4 visible view ports 3 on the top side and 1 on the bottom
   */
  readonly TOP3_BOTTOM: number;

  /**
   * 3 visible view ports 2 on the bottom side and 1 on the top
   */
  readonly TOP_BOTTOM2: number;

  /**
   * 4 visible view ports 3 on the bottom side and 1 on the top
   */
  readonly TOP_BOTTOM3: number;

  /**
   * 4 visible view ports one in each corner
   */
  readonly FOUR_PANE: number;

  /**
   * Total number of layouts
   */
  readonly NUM_LAYOUTS: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Node: number;

  /**
   * TODO: Add description.
   */
  readonly SkeletonThenNode: number;

  /**
   * TODO: Add description.
   */
  readonly Skeleton: number;

  /**
   * The possible Quick Draw modes
   */
  /**
   * No Quick draw enabled.
   */
  readonly QDOff: number;

  /**
   * Wireframe Quick draw enabled.
   */
  readonly QDWire: number;

  /**
   * Smooth-Shade Quick draw enabled.
   */
  readonly QDSmooth: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly Nested: number;

  /**
   * TODO: Add description.
   */
  readonly Flat: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoAccel: number;

  /**
   * TODO: Add description.
   */
  readonly LeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly RightClick: number;

  /**
   * TODO: Add description.
   */
  readonly MidClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly ShiftLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly ShiftRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly ShiftMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlShiftLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlShiftRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlShiftMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltShiftLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltShiftRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly AltShiftMidClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltShiftLeftClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltShiftRightClick: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltShiftMidClick: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoModifier: number;

  /**
   * TODO: Add description.
   */
  readonly Alt: number;

  /**
   * TODO: Add description.
   */
  readonly Shift: number;

  /**
   * TODO: Add description.
   */
  readonly Ctrl: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAlt: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlShift: number;

  /**
   * TODO: Add description.
   */
  readonly CtrlAltShift: number;

  /**
   * TODO: Add description.
   */
  readonly ShiftAlt: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  readonly NoOperation: number;

  /**
   * TODO: Add description.
   */
  readonly OrbitCamera: number;

  /**
   * TODO: Add description.
   */
  readonly RotateCamera: number;

  /**
   * TODO: Add description.
   */
  readonly PanCamera: number;

  /**
   * TODO: Add description.
   */
  readonly DollyCamera: number;

  /**
   * TODO: Add description.
   */
  readonly BankCamera: number;

  /**
   * TODO: Add description.
   */
  readonly ZoomDCamera: number;

  /**
   * TODO: Add description.
   */
  readonly ZoomFCamera: number;

  /**
   * Sets the next tool in the list after the currently active tool to be the currently active tool.
   */
  activateNextTool (): void;

  /**
   * Sets the tool in the list before the currently active tool to be the currently active tool.
   */
  activatePrevTool (): void;

  /**
   * Causes the color of each viewport to be set to their respective values, if the color is defined in the current style.
   */
  applyStyleColors (): void;

  /**
   * @returns The tool with the given class name - NULL if none exists.
   * @param className - 
   */
  findTool (className: string): DzViewTool;

  /**
   * @returns A new instance of the draw style with the given description, otherwise null
   * @param name - 
   */
  findUserDrawStyle (name: string): DzUserDrawStyle;

  /**
   * @returns The active view tool.
   */
  getActiveTool (): DzViewTool;

  /**
   * @returns The currently active viewport
   */
  getActiveViewport (): DzViewport;

  /**
   * @returns The custom viewport at the given index.
   * @since 4.7.1.104
   * @param which - 
   */
  getCustomViewport (which: number): DzViewport;

  /**
   * @returns The default viewport at the given index.
   * @since 4.7.1.104
   * @param which - 
   */
  getDefaultViewport (which: number): DzViewport;

  /**
   * @returns true if mouse wheel response in the view ports is currently inverted.
   */
  getInvertMouseWheel (): boolean;

  /**
   * @returns Current view layout.
   */
  getLayout (): number;

  /**
   * TODO: Add description.
   * @param operation - 
   */
  getMouseBtnAccelerator (operation: number): number;

  /**
   * TODO: Add description.
   * @param str - 
   */
  getMouseBtnAccelerator (str: string): number;

  /**
   * TODO: Add description.
   * @param button - 
   * @param modifiers - 
   */
  getMouseBtnAccelerator (button: number, modifiers: number): number;

  /**
   * TODO: Add description.
   * @param mouseBtn - 
   * @param ctrl - 
   * @param alt - 
   * @param shift - 
   */
  getMouseBtnAccelerator (mouseBtn: number, ctrl: boolean, alt: boolean, shift: boolean): number;

  /**
   * TODO: Add description.
   * @param accel - 
   */
  getMouseBtnAcceleratorString (accel: number): string;

  /**
   * TODO: Add description.
   * @param operation - 
   */
  getMouseBtnAcceleratorString (operation: number): string;

  /**
   * TODO: Add description.
   * @param str - 
   */
  getMouseModifier (str: string): number;

  /**
   * TODO: Add description.
   * @param modifiers - 
   */
  getMouseModifier (modifiers: number): number;

  /**
   * TODO: Add description.
   * @param ctrl - 
   * @param alt - 
   * @param shift - 
   */
  getMouseModifier (ctrl: boolean, alt: boolean, shift: boolean): number;

  /**
   * TODO: Add description.
   * @param accel - 
   */
  getMouseModifierString (accel: number): string;

  /**
   * @returns the node click mode for pick tools
   */
  getNodeClickMode (): number;

  /**
   * @returns The number of custom viewports.
   * @since 4.7.1.104
   */
  getNumCustomViewports (): number;

  /**
   * @returns The number of default (non-custom) viewports.
   * @since 4.7.1.104
   */
  getNumDefaultViewports (): number;

  /**
   * @returns Number of view tools.
   */
  getNumTools (): number;

  /**
   * @returns The number of user selectable draw styles
   */
  getNumUserDrawStyles (): number;

  /**
   * @returns Number of view cameras
   */
  getNumViewCameras (): number;

  /**
   * @returns The number of view ports in the application. Currently, this will always be 4, but it is safest to call this function to get the number of available view ports.
   * @returns The total number of viewports.
   */
  getNumViewports (): number;

  /**
   * @returns The number of available view classes
   */
  getNumViews (): number;

  /**
   * @returns The number of custom viewports currently showing.
   * @since 4.7.1.104
   */
  getNumVisibleCustomViewports (): number;

  /**
   * @returns The number of default viewports currently showing.
   * @since 4.7.1.104
   */
  getNumVisibleDefaultViewports (): number;

  /**
   * @returns The total number of viewports currently showing.
   */
  getNumVisibleViewports (): number;

  /**
   * TODO: Add description.
   * @param accel - 
   */
  getOperation (accel: number): number;

  /**
   * @returns Whether or not to propagate a background color change to all viewports.
   */
  getPropagateBackgroundColor (): boolean;

  /**
   * @returns the region click mode for pick tools
   */
  getRegionClickMode (): number;

  /**
   * @returns The view tool at the given index.
   * @param i - 
   */
  getTool (i: number): DzViewTool;

  /**
   * TODO: Add description.
   */
  getUsePerPixelLighting (): boolean;

  /**
   * @returns A new instance of the draw style at the given index
   * @param which - 
   */
  getUserDrawStyle (which: number): DzUserDrawStyle;

  /**
   * @returns A new instance of the view class at the given index.
   * @param which - 
   */
  getView (which: number): DzView;

  /**
   * @returns The View (non-animatable) camera of the given type.
   * @param type - 
   */
  getViewCamera (type: number): DzCamera;

  /**
   * @returns The View (non-animatable) camera at the given index.
   * @param which - 
   */
  getViewCamera (which: number): DzCamera;

  /**
   * @returns The viewport at the given index.
   * Note:
   * An index outside the default range [0,3] will overflow to getCustomViewport().
   * @param which - 
   */
  getViewport (which: number): DzViewport;

  /**
   * A convenience method that forces a repaint of the currently active 3D viewport.
   */
  repaintActive3DViewport (): void;

  /**
   * Resets all the view cameras to their defaults.
   */
  resetViewCameras (): void;

  /**
   * This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
   * @param which - 
   */
  setActiveTool (which: number): void;

  /**
   * Sets the currently active 3D tool.
   * @param tool - 
   */
  setActiveTool (tool: DzViewTool): void;

  /**
   * Set the active DzViewport. The given DzViewport must already be attached as an interface to this Scene.
   * @param activeView - 
   */
  setActiveViewport (activeView: DzViewport): void;

  /**
   * TODO: Add description.
   * @param onOff - 
   */
  setInvertMouseWheel (onOff: boolean): void;

  /**
   * Set the current layout. If we are in single pane mode, the new layout will take effect after single pane mode is switched off.
   * @param val - 
   */
  setLayout (val: number): void;

  /**
   * TODO: Add description.
   * @param operation - 
   * @param accel - 
   */
  setMouseBtnAccelerator (operation: number, accel: number): void;

  /**
   * Set the click mode for node selection tools
   * @param mode - 
   */
  setNodeClickMode (mode: number): void;

  /**
   * Set whether or not a background color change of a single viewport should be propagated to the other viewports.
   * @param onOff - 
   */
  setPropagateBackgroundColor (onOff: boolean): void;

  /**
   * Set the click mode for region selection tools
   * @param mode - 
   */
  setRegionClickMode (mode: number): void;

  /**
   * TODO: Add description.
   * @param yesNo - 
   */
  setUsePerPixelLighting (yesNo: boolean): void;

  /**
   * Sets the ratios that are used to layout the view ports inside the view area. Each value is a percentage of the available area that will be allocated to the given view port(s). The values passed in are clamped to valid ranges before applying them. The values should be specified in decimal notation - i.e. 0.0 is 0%, 0.5 is 50%, and 1.0 is 100%. The minimum percentage of the area allocated to any viewport on any axis is 20% (0.2). Therefore, any values that are below this value will be increased to this value, and any values that would result in a remainder less than this value will be decreased.
   * For example, when the view ports are laid out one right, and on left, there is one vertical division, so the vSingle value will be used. If the value of vSingle is 0.6 and the width of the view area is 1000 pixels, then the left view will be (0.6 * 1000) = 600 pixels wide, and the right view will be the remainder (1000 - 600) = 400 pixels wide.
   * In a more complex example, the viewports are laid out three on top, and one on bottom. There is one horizontal division, so the hSingle value is used, and two vertical divisions, so the v1 and v2 values are used. The value of hSingle is 0.35, the value of v1 is 0.3, the value of v2 is 0.5, and the view area is 1000 x 1000 pixels. Then, the top views will be (0.35 * 1000) = 350 pixels high, and the bottom view will be (1000 - 350) = 650 pixels high. The top-left view will be (0.3 * 1000) = 300 pixels wide, the top-center view will be (0.5 * 1000) = 500 pixels wide, and the top-right view will be (1000 - 300 - 500) = 200 pixels wide.
   * @param hSingle - The percentage of the height taken by the top view port(s) when the area has a single horizontal division
   * @param h1 - The percentage of the height taken by the top view port when the area has two horizontal divisions
   * @param h2 - The percentage of the height taken by the center view port when the area has two horizontal divisions
   * @param vSingle - The percentage of the width taken by the left view port(s) when the area has a single vertical division
   * @param v1 - The percentage of the width taken by the left view port when the area has two vertical divisions
   * @param v2 - The percentage of the width taken by the center view port when the area has two vertical divisions
   */
  setViewRatios (hSingle: number, h1: number, h2: number, vSingle: number, v1: number, v2: number): void;

  /**
   * TODO: Add description.
   * @param accel - 
   */
  validateMouseBtnAccelerator (accel: number): boolean;

  /**
   * TODO: Add description.
   * @param accel - 
   */
  validateMouseWheelAccelerator (accel: number): boolean;

  accelChanged: Signal<{
    /**
     * TODO: Add description.
     * @param operation - 
     * @param accel - 
     */
  (operation: number, accel: number): void;
  }>;
  acceleratorsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  acitve3DViewCurrentDimensionsChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  activeToolDrawnDataChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  activeToolSwitched: Signal<{
    /**
     * Emitted when the active tool changes
     */
  (): void;
  }>;
  activeViewResized: Signal<{
    /**
     * Emitted when the active view changes size
     */
  (): void;
  }>;
  activeViewSwitched: Signal<{
    /**
     * Emitted when the active view changes
     */
  (): void;
  }>;
  contextMenuAboutToShow: Signal<{
    /**
     * Emitted when the active viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user.
     * @param menu - 
     * @param view - 
     * @param pos - 
     */
  (menu: DzMenu, view: Dz3DViewport, pos: Point): void;
  }>;
  drawElementsListChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  graftDrawingChanged: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
  invertMouseWheelChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  manipFinished: Signal<{
    /**
     * Emitted when a quick draw operation is finished
     */
  (): void;
  }>;
  manipStarted: Signal<{
    /**
     * Emitted when a quick draw operation is started
     */
  (): void;
  }>;
  manipulationBindingChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  nodeClickModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mode - 
     */
  (mode: number): void;
  }>;
  propagateBackgroundColorChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  quickDrawModeChanged: Signal<{
    /**
     * Emitted when the quick draw mode changes
     * @param mode - 
     */
  (mode: number): void;
  }>;
  redrawsLocked: Signal<{
    /**
     * Emitted when the redraw lock state changes
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  regionClickModeChanged: Signal<{
    /**
     * TODO: Add description.
     * @param mode - 
     */
  (mode: number): void;
  }>;
  subDManipulationChanged: Signal<{
    /**
     * TODO: Add description.
     * @param onOff - 
     */
  (onOff: boolean): void;
  }>;
  toolListChanged: Signal<{
    /**
     * Emitted when the tool list changes
     */
  (): void;
  }>;
  viewLayoutChanged: Signal<{
    /**
     * Emitted when the layout of the view ports changes
     */
  (): void;
  }>;
  viewportCameraListChanged: Signal<{
    /**
     * Emitted when the global list of available cameras changes
     */
  (): void;
  }>;
}

declare namespace DzViewportMgr
{

  /**
   * The possible layout styles.
   */
  /**
   * No visible view ports
   */
  export const NO_PANES: number;
  /**
   * A single visible viewport
   */
  export const SINGLE_PANE: number;
  /**
   * 2 visible view ports split the view area into right and left
   */
  export const LEFT_RIGHT: number;
  /**
   * 2 visible view ports split the view area into top and bottom
   */
  export const TOP_BOTTOM: number;
  /**
   * 3 visible view ports 2 on the left side and 1 on the right
   */
  export const LEFT2_RIGHT: number;
  /**
   * 4 visible view ports 3 on the left side and 1 on the right
   */
  export const LEFT3_RIGHT: number;
  /**
   * 3 visible view ports 2 on the right side and 1 on the left
   */
  export const LEFT_RIGHT2: number;
  /**
   * 4 visible view ports 3 on the right side and 1 on the left
   */
  export const LEFT_RIGHT3: number;
  /**
   * 3 visible view ports 2 on the top side and 1 on the bottom
   */
  export const TOP2_BOTTOM: number;
  /**
   * 4 visible view ports 3 on the top side and 1 on the bottom
   */
  export const TOP3_BOTTOM: number;
  /**
   * 3 visible view ports 2 on the bottom side and 1 on the top
   */
  export const TOP_BOTTOM2: number;
  /**
   * 4 visible view ports 3 on the bottom side and 1 on the top
   */
  export const TOP_BOTTOM3: number;
  /**
   * 4 visible view ports one in each corner
   */
  export const FOUR_PANE: number;
  /**
   * Total number of layouts
   */
  export const NUM_LAYOUTS: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const Node: number;
  /**
   * TODO: Add description.
   */
  export const SkeletonThenNode: number;
  /**
   * TODO: Add description.
   */
  export const Skeleton: number;

  /**
   * The possible Quick Draw modes
   */
  /**
   * No Quick draw enabled.
   */
  export const QDOff: number;
  /**
   * Wireframe Quick draw enabled.
   */
  export const QDWire: number;
  /**
   * Smooth-Shade Quick draw enabled.
   */
  export const QDSmooth: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const Nested: number;
  /**
   * TODO: Add description.
   */
  export const Flat: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const NoAccel: number;
  /**
   * TODO: Add description.
   */
  export const LeftClick: number;
  /**
   * TODO: Add description.
   */
  export const RightClick: number;
  /**
   * TODO: Add description.
   */
  export const MidClick: number;
  /**
   * TODO: Add description.
   */
  export const AltLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const AltRightClick: number;
  /**
   * TODO: Add description.
   */
  export const AltMidClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlRightClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlMidClick: number;
  /**
   * TODO: Add description.
   */
  export const ShiftLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const ShiftRightClick: number;
  /**
   * TODO: Add description.
   */
  export const ShiftMidClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltRightClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltMidClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlShiftLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlShiftRightClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlShiftMidClick: number;
  /**
   * TODO: Add description.
   */
  export const AltShiftLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const AltShiftRightClick: number;
  /**
   * TODO: Add description.
   */
  export const AltShiftMidClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltShiftLeftClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltShiftRightClick: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltShiftMidClick: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const NoModifier: number;
  /**
   * TODO: Add description.
   */
  export const Alt: number;
  /**
   * TODO: Add description.
   */
  export const Shift: number;
  /**
   * TODO: Add description.
   */
  export const Ctrl: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAlt: number;
  /**
   * TODO: Add description.
   */
  export const CtrlShift: number;
  /**
   * TODO: Add description.
   */
  export const CtrlAltShift: number;
  /**
   * TODO: Add description.
   */
  export const ShiftAlt: number;

  /**
   * TODO: Add description.
   */
  /**
   * TODO: Add description.
   */
  export const NoOperation: number;
  /**
   * TODO: Add description.
   */
  export const OrbitCamera: number;
  /**
   * TODO: Add description.
   */
  export const RotateCamera: number;
  /**
   * TODO: Add description.
   */
  export const PanCamera: number;
  /**
   * TODO: Add description.
   */
  export const DollyCamera: number;
  /**
   * TODO: Add description.
   */
  export const BankCamera: number;
  /**
   * TODO: Add description.
   */
  export const ZoomDCamera: number;
  /**
   * TODO: Add description.
   */
  export const ZoomFCamera: number;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewrenderhandler_dz
 * A render handler that renders to a new window.
 * @remarks TODO: Add detailed description.
 */
interface DzViewRenderHandler extends DzImageRenderHandler
{

}

declare var DzViewRenderHandler:
{
  prototype: DzViewRenderHandler;

  /**
   * Create a new view render handler for rendering a single frame.
   * @example
   * // Get the active viewport and camera
   * var oActiveView = MainWindow.getViewportMgr().getActiveViewport();
   * var oCamera = oActiveView.get3DViewport().getCamera();
   *  
   * // Get the render options
   * var oRenderOptions = App.getRenderOptions();
   *  
   * // Create a handler
   * var oHandler = new DzViewRenderHandler( oRenderOptions.getImageSize(), 0, App.getTempPath() + "/test.jpg", true );
   *  
   * // If we have a valid handler
   * if( oHandler ){
   * 	// Set the background color
   * 	oHandler.setBackColor( oActiveView.get3DViewport().background );
   *  
   * 	// Get the renderer
   * 	var oRenderer = oRenderOptions.getActiveRenderer();
   *  
   * 	// Render, using our handler and options
   * 	oRenderer.render( oHandler, oCamera, oRenderOptions );
   * }
   * @param size - The width & height of the rendered image.
   * @param time - The time to render the frame at.
   * @param filename - The filename to save the image to.
   * @param isSoftware - If true, the window shows itself at the beginning of rendering so that the user can see the progress of the render. If false, the window stays hidden until the render is complete so that it does not interfere with the OpenGL viewport.
   */
  new (size: Size, time: DzTime, filename: string, isSoftware: boolean): DzViewRenderHandler;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewtool_dz
 * Base class for all tools that function in the 3D viewports.
 * @remarks View Tools are registered with the DzViewportMgr singleton and are available to access and modifiy via DAZScript.
 */
interface DzViewTool extends DzBase
{

  /**
   * Derived classes can return a popup menu that will be displayed when the user selects the options menu for the Tool pane.
   * @returns The DzActionMenu for the tool.
   */
  getOptionsMenu (): DzActionMenu;

  activated: Signal<{
    /**
     * Emitted when the viewtool becomes the active tool in the viewport.
     */
  (): void;
  }>;
  deactivated: Signal<{
    /**
     * Emitted when the viewtool stops being the active tool in the viewport.
     */
  (): void;
  }>;
  drawnDataChanged: Signal<{
    /**
     * Emitted when the viewtool needs to be redrawn in the viewport.
     */
  (): void;
  }>;
  rebuildMenu: Signal<{
    /**
     * TODO: Add description.
     */
  (): void;
  }>;
}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/wearablesassetfilter_dz
 * Class for saving DSON-based Wearable(s) Presets.
 * @remarks An asset save filter for saving a Wearable(s) Preset in the DSON format.
 * @seealso Sample: Save a Wearable(s) Preset
 */
interface DzWearablesAssetFilter extends DzAssetFileOutFilter
{

}

declare var DzWearablesAssetFilter:
{
  prototype: DzWearablesAssetFilter;

  /**
   * TODO: Add description.
   */
  new (): DzWearablesAssetFilter;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/weld_dz
 * Represents a welding operation between bone geometries.
 * @remarks TODO: Add detailed description.
 */
interface DzWeld extends DzBase
{

  /**
   * @returns The bone whose geometry is not modified by the weld operation.
   */
  getTargetBone (): DzBone;

  /**
   * @returns The bone whose geometry is modified by the weld operation.
   */
  getWeldBone (): DzBone;

  /**
   * Sets the bone that will be welded to - the welding operation will not modify this bone's geometry, only the normals on the border.
   * @param targetBone - 
   */
  setTargetBone (targetBone: DzBone): void;

  /**
   * Sets the bone that will be welded - the welding operation will move boundary points in this bone's geometry, and recalculate the affected normals.
   * @param weldBone - 
   */
  setWeldBone (weldBone: DzBone): void;

  targetBoneChanged: Signal<{
    /**
     * @null 
     * Emitted when the target bone has changed.
     */
  (): void;
  }>;
  weldBoneChanged: Signal<{
    /**
     * @null 
     * Emitted when the weld bone has changed.
     */
  (): void;
  }>;
}

declare var DzWeld:
{
  prototype: DzWeld;

  /**
   * Creates a new weld operation.
   */
  new (): DzWeld;

  /**
   * Creates a new weld operation that welds the given bones.
   * @param weldBone - 
   * @param targetBone - 
   */
  new (weldBone: DzBone, targetBone: DzBone): DzWeld;
}

/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_dz
 * DAZScript wrapper for QWidget.
 * @remarks The base class for all wrapped widgets. This is an abstract base class that provides general functionality for DAZScript widget components.
 */
interface DzWidget extends QObject
{

  /**
   * Enumerated values for describing how widgets should be aligned.
   * @since 4.9.3.93
   */
  /**
   * Aligns horizontally with the left edge.
   */
  readonly AlignLeft: number;

  /**
   * TODO: Add description.
   */
  readonly AlignLeading: number;

  /**
   * Aligns horizontally with the right edge.
   */
  readonly AlignRight: number;

  /**
   * TODO: Add description.
   */
  readonly AlignTrailing: number;

  /**
   * Aligns horizontally in the center.
   */
  readonly AlignHCenter: number;

  /**
   * Justifies the text in the available space.
   */
  readonly AlignJustify: number;

  /**
   * TODO: Add description.
   */
  readonly AlignAbsolute: number;

  /**
   * TODO: Add description.
   */
  readonly AlignHorizontal_Mask: number;

  /**
   * Aligns vertically with the top edge.
   */
  readonly AlignTop: number;

  /**
   * Aligns vertically with the bottom edge.
   */
  readonly AlignBottom: number;

  /**
   * Aligns vertically in the center.
   */
  readonly AlignVCenter: number;

  /**
   * TODO: Add description.
   */
  readonly AlignVertical_Mask: number;

  /**
   * Aligns in the center in both dimensions.
   */
  readonly AlignCenter: number;

  /**
   * Aligns horizontally according to the language (left for most).
   */
  readonly AlignAuto: number;

  /**
   * Enumerated values for describing how widgets should be oriented.
   * @since 4.9.3.93
   */
  /**
   * Horizontal orientation (Left to Right).
   */
  readonly Horizontal: number;

  /**
   * Vertical orientation (Top to Bottom).
   */
  readonly Vertical: number;

  /**
   * Enumerated values for describing the order that items should be sorted.
   * @since 4.9.3.93
   */
  /**
   * Sort in ascending order.
   */
  readonly AscendingOrder: number;

  /**
   * Sort in descending order.
   */
  readonly DescendingOrder: number;

  /**
   * Provided for backward compatability.
   */
  readonly Ascending: number;

  /**
   * Provided for backward compatability.
   */
  readonly Descending: number;

  /**
   * Enumerated values that describe how the text string is elided.
   * @since 4.10.0.22
   */
  /**
   * TODO: Add description.
   */
  readonly ElideLeft: number;

  /**
   * TODO: Add description.
   */
  readonly ElideRight: number;

  /**
   * TODO: Add description.
   */
  readonly ElideMiddle: number;

  /**
   * TODO: Add description.
   */
  readonly ElideNone: number;

  /**
   * Enumerated values for describing text modifiers.
   * @since 4.10.0.22
   */
  /**
   * Treat all whitespace as spaces and print one line.
   */
  readonly TextSingleLine: number;

  /**
   * If it is impossible to stay within the bounds, print outside.
   */
  readonly TextDontClip: number;

  /**
   * Makes the ASCII tab character move to the next tab stop.
   */
  readonly TextExpandTabs: number;

  /**
   * Diplays the string “&P” as P. For an ampersand, use “&&”.
   */
  readonly TextShowMnemonic: number;

  /**
   * Break lines at appropriate points, e.g., word boundaries.
   */
  readonly TextWordWrap: number;

  /**
   * Break lines anywhere, even within words.
   */
  readonly TextWrapAnywhere: number;

  /**
   * Treat this text as “hidden” and do not print it.
   */
  readonly TextDontPrint: number;

  /**
   * TODO: Add description.
   */
  readonly TextIncludeTrailingSpaces: number;

  /**
   * Same as TextShowMnemonic but does not draw the underlines.
   */
  readonly TextHideMnemonic: number;

  /**
   * Ensures that text lines are justified.
   */
  readonly TextJustificationForced: number;

  /**
   * TODO: Add description.
   */
  readonly TextForceLeftToRight: number;

  /**
   * TODO: Add description.
   */
  readonly TextForceRightToLeft: number;

  /**
   * TODO: Add description.
   */
  readonly TextLongestVariant: number;

  /**
   * TODO: Add description.
   */
  readonly TextBypassShaping: number;

  /**
   * Enumerated values that describe how a label reacts to user input.
   * @since 4.9.3.93
   */
  /**
   * TODO: Add description.
   */
  readonly NoTextInteraction: number;

  /**
   * No interaction with the text is possible.
   */
  readonly TextSelectableByMouse: number;

  /**
   * Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.
   */
  readonly TextSelectableByKeyboard: number;

  /**
   * Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
   */
  readonly LinksAccessibleByMouse: number;

  /**
   * Links can be highlighted and activated with the mouse.
   */
  readonly LinksAccessibleByKeyboard: number;

  /**
   * Links can be focused using tab and activated with enter.
   */
  readonly TextEditable: number;

  /**
   * The text is fully editable.
   */
  readonly TextEditorInteraction: number;

  /**
   * The default for a DzTextEdit.
   */
  readonly TextBrowserInteraction: number;

  /**
   * Holds the number of different colors available for the widget. (Read Only)
   * @since 4.9.0.9
   */
  colorCount: number

  /**
   * Holds the bit depth (number of bit planes) of the widget. (Read Only)
   * @since 4.9.0.9
   */
  depth: number

  /**
   * Holds whether the widget is enabled or disabled.
   */
  enabled: boolean

  /**
   * Holds the Font for the widget and all child widgets that do not have a custom font of their own.
   */
  font: Font

  /**
   * Holds the x position of the widget, relative to the desktop. (Read Only)
   */
  globalX: number

  /**
   * Holds the y position of the widget, relative to the desktop. (Read Only)
   */
  globalY: number

  /**
   * Holds the height of the widget.
   */
  height: number

  /**
   * Holds the height of the widget in millimeters. (Read Only)
   * @since 4.9.0.9
   */
  heightMM: number

  /**
   * Holds the horizontal resolution of the widget in dots per inch. (Read Only)
   * @since 4.9.0.9
   */
  logicalDpiX: number

  /**
   * Holds the vertical resolution of the widget in dots per inch. (Read Only)
   * @since 4.9.0.9
   */
  logicalDpiY: number

  /**
   * Holds the maximum height of the widget.
   */
  maxHeight: number

  /**
   * Holds the maximum width of the widget.
   */
  maxWidth: number

  /**
   * Holds the minimum height of the widget.
   */
  minHeight: number

  /**
   * Holds the minimum width of the widget.
   */
  minWidth: number

  /**
   * Holds the Palette for the widget and all child widgets that do not have a custom palette of their own.
   */
  palette: Palette

  /**
   * Holds the background color of the widget.
   */
  paletteBackgroundColor: Color

  /**
   * Holds the background Pixmap of the widget.
   */
  paletteBackgroundPixmap: Pixmap

  /**
   * Holds the foreground color of the widget.
   */
  paletteForegroundColor: Color

  /**
   * Holds the horizontal resolution of the widget in dots per inch. (Read Only)
   * @since 4.9.0.9
   */
  physicalDpiX: number

  /**
   * Holds the vertical resolution of the widget in dots per inch. (Read Only)
   * @since 4.9.0.9
   */
  physicalDpiY: number

  /**
   * Holds the tool tip text for the widget and all child widgets that do not have a custom tool tip text of their own.
   */
  toolTip: string

  /**
   * Holds the “Whats This” text for the widget and all child widgets that do not have a custom “Whats This” text of their own.
   */
  whatsThis: string

  /**
   * Holds the width of the widget.
   */
  width: number

  /**
   * Holds the width of the widget in millimeters. (Read Only)
   * @since 4.9.0.9
   */
  widthMM: number

  /**
   * Holds the x position of the widget, relative to its parent.
   */
  x: number

  /**
   * Holds the y position of the widget, relative to its parent.
   */
  y: number

  /**
   * @returns The child widget named name, otherwise undefined.
   * @param name - 
   */
  findChildOfWidget (name: string): DzWidget;

  /**
   * @returns A list of this widget's children.
   * @param [name=“”] - 
   */
  getChildrenOfWidget (name?: string): Array<unknown>;

  /**
   * @returns The layout managing this widget.
   */
  getLayout (): DzLayout;

  /**
   * @returns The wrapped QWidget.
   */
  getWidget (): QWidget;

  /**
   * Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
   * @returns If the rectangle doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
   * @since 4.9.3.105
   * @param rectangle - The rectangle, relative to the top left corner of the widget, to capture.
   */
  grab (rectangle: Rect): Pixmap;

  /**
   * Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
   * @returns If the rectangle defined by x, y, w, and h doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
   * @since 4.9.3.105
   * @param [x=0] - The relative x position of the rectangle to capture.
   * @param [y=0] - The relative y position of the rectangle to capture.
   * @param [width=-1] - 
   * @param [height=-1] - The width of the rectangle to capture.
   */
  grab (x?: number, y?: number, width?: number, height?: number): Pixmap;

  /**
   * Hide the widget; make it invisible.
   */
  hide (): void;

  /**
   * Translates the widget coordinate pos from the coordinate system of parent to this widget's coordinate system. parent must not be undefined and must be a parent of the calling widget.
   * @since 4.9.0.9
   * @param parent - The widget in the parent chain to map from.
   * @param pos - The position to map.
   */
  mapFrom (parent: DzWidget, pos: Point): Point;

  /**
   * Translates the global screen coordinate pos to widget coordinates.
   * @seealso Point::cursorPos()
   * @since 4.9.0.9
   * @param pos - The position to map.
   */
  mapFromGlobal (pos: Point): Point;

  /**
   * Translates the widget coordinate pos from the coordinate system of the parent widget to this widget's coordinate system.
   * @since 4.9.0.9
   * @param pos - The position to map.
   */
  mapFromParent (pos: Point): Point;

  /**
   * Translates the widget coordinate pos to the coordinate system of parent. parent must not be undefined and must be a parent of the calling widget.
   * @since 4.9.0.9
   * @param parent - The widget in the parent chain to map to.
   * @param pos - The position to map.
   */
  mapTo (parent: DzWidget, pos: Point): Point;

  /**
   * Translates the widget coordinate pos to global screen coordinates. For example, mapToGlobal( Point(0, 0) ) would give the global coordinates of the top-left pixel of the widget.
   * @since 4.9.0.9
   * @param pos - The position to map.
   */
  mapToGlobal (pos: Point): Point;

  /**
   * Translates the widget coordinate pos to a coordinate in the parent widget.
   * @since 4.9.0.9
   * @param pos - The position to map.
   */
  mapToParent (pos: Point): Point;

  /**
   * Reparents the widget.
   * @param parent - The new parent widget for this widget.
   * @param pnt - The location in the new parent widget to place this widget.
   * @param [showIt=false] - If true, show() is called on the widget after it is reparented.
   */
  reparent (parent: DzWidget, pnt: Point, showIt?: boolean): void;

  /**
   * Sets a fixed height for the widget.
   * @param height - 
   */
  setFixedHeight (height: number): void;

  /**
   * Sets a fixed width and height for the widget.
   * @param width - 
   * @param height - 
   */
  setFixedSize (width: number, height: number): void;

  /**
   * Sets a fixed width for the widget.
   * @param width - 
   */
  setFixedWidth (width: number): void;

  /**
   * Sets the position and size for the widget (relative to its parent).
   * @param x - 
   * @param y - 
   * @param w - 
   * @param h - 
   */
  setGeometry (x: number, y: number, w: number, h: number): void;

  /**
   * Show the widget; make it visible if its parent is visible.
   */
  show (): void;

}

declare var DzWidget:
{
  prototype: DzWidget;

  /**
   * Creates a new widget as a child of the given parent widget.
   * @param parent - The widget parent for the widget.
   */
  new (parent: DzWidget): DzWidget;

  /**
   * Enumerated values for describing how widgets should be aligned.
   * @since 4.9.3.93
   */
  /**
   * Aligns horizontally with the left edge.
   */
  readonly AlignLeft: number;
  /**
   * TODO: Add description.
   */
  readonly AlignLeading: number;
  /**
   * Aligns horizontally with the right edge.
   */
  readonly AlignRight: number;
  /**
   * TODO: Add description.
   */
  readonly AlignTrailing: number;
  /**
   * Aligns horizontally in the center.
   */
  readonly AlignHCenter: number;
  /**
   * Justifies the text in the available space.
   */
  readonly AlignJustify: number;
  /**
   * TODO: Add description.
   */
  readonly AlignAbsolute: number;
  /**
   * TODO: Add description.
   */
  readonly AlignHorizontal_Mask: number;
  /**
   * Aligns vertically with the top edge.
   */
  readonly AlignTop: number;
  /**
   * Aligns vertically with the bottom edge.
   */
  readonly AlignBottom: number;
  /**
   * Aligns vertically in the center.
   */
  readonly AlignVCenter: number;
  /**
   * TODO: Add description.
   */
  readonly AlignVertical_Mask: number;
  /**
   * Aligns in the center in both dimensions.
   */
  readonly AlignCenter: number;
  /**
   * Aligns horizontally according to the language (left for most).
   */
  readonly AlignAuto: number;

  /**
   * Enumerated values for describing how widgets should be oriented.
   * @since 4.9.3.93
   */
  /**
   * Horizontal orientation (Left to Right).
   */
  readonly Horizontal: number;
  /**
   * Vertical orientation (Top to Bottom).
   */
  readonly Vertical: number;

  /**
   * Enumerated values for describing the order that items should be sorted.
   * @since 4.9.3.93
   */
  /**
   * Sort in ascending order.
   */
  readonly AscendingOrder: number;
  /**
   * Sort in descending order.
   */
  readonly DescendingOrder: number;
  /**
   * Provided for backward compatability.
   */
  readonly Ascending: number;
  /**
   * Provided for backward compatability.
   */
  readonly Descending: number;

  /**
   * Enumerated values that describe how the text string is elided.
   * @since 4.10.0.22
   */
  /**
   * TODO: Add description.
   */
  readonly ElideLeft: number;
  /**
   * TODO: Add description.
   */
  readonly ElideRight: number;
  /**
   * TODO: Add description.
   */
  readonly ElideMiddle: number;
  /**
   * TODO: Add description.
   */
  readonly ElideNone: number;

  /**
   * Enumerated values for describing text modifiers.
   * @since 4.10.0.22
   */
  /**
   * Treat all whitespace as spaces and print one line.
   */
  readonly TextSingleLine: number;
  /**
   * If it is impossible to stay within the bounds, print outside.
   */
  readonly TextDontClip: number;
  /**
   * Makes the ASCII tab character move to the next tab stop.
   */
  readonly TextExpandTabs: number;
  /**
   * Diplays the string “&P” as P. For an ampersand, use “&&”.
   */
  readonly TextShowMnemonic: number;
  /**
   * Break lines at appropriate points, e.g., word boundaries.
   */
  readonly TextWordWrap: number;
  /**
   * Break lines anywhere, even within words.
   */
  readonly TextWrapAnywhere: number;
  /**
   * Treat this text as “hidden” and do not print it.
   */
  readonly TextDontPrint: number;
  /**
   * TODO: Add description.
   */
  readonly TextIncludeTrailingSpaces: number;
  /**
   * Same as TextShowMnemonic but does not draw the underlines.
   */
  readonly TextHideMnemonic: number;
  /**
   * Ensures that text lines are justified.
   */
  readonly TextJustificationForced: number;
  /**
   * TODO: Add description.
   */
  readonly TextForceLeftToRight: number;
  /**
   * TODO: Add description.
   */
  readonly TextForceRightToLeft: number;
  /**
   * TODO: Add description.
   */
  readonly TextLongestVariant: number;
  /**
   * TODO: Add description.
   */
  readonly TextBypassShaping: number;

  /**
   * Enumerated values that describe how a label reacts to user input.
   * @since 4.9.3.93
   */
  /**
   * TODO: Add description.
   */
  readonly NoTextInteraction: number;
  /**
   * No interaction with the text is possible.
   */
  readonly TextSelectableByMouse: number;
  /**
   * Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.
   */
  readonly TextSelectableByKeyboard: number;
  /**
   * Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
   */
  readonly LinksAccessibleByMouse: number;
  /**
   * Links can be highlighted and activated with the mouse.
   */
  readonly LinksAccessibleByKeyboard: number;
  /**
   * Links can be focused using tab and activated with enter.
   */
  readonly TextEditable: number;
  /**
   * The text is fully editable.
   */
  readonly TextEditorInteraction: number;
  /**
   * The default for a DzTextEdit.
   */
  readonly TextBrowserInteraction: number;
}

/**
 * http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_q
 * DAZScript accessible portions of the Qt native QWidget class.
 * @remarks This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QWidget class.
 */
interface QWidget extends QObject
{

  /**
   * TODO: Add description.
   */
  acceptDrops: boolean

  /**
   * TODO: Add description.
   */
  accessibleDescription: string

  /**
   * TODO: Add description.
   */
  accessibleName: string

  /**
   * TODO: Add description.
   */
  autoFillBackground: boolean

  /**
   * TODO: Add description.
   */
  baseSize: Size

  /**
   * TODO: Add description.
   */
  childrenRect: Rect

  /**
   * TODO: Add description.
   */
  enabled: boolean

  /**
   * TODO: Add description.
   */
  focus: boolean

  /**
   * TODO: Add description.
   */
  font: Font

  /**
   * TODO: Add description.
   */
  frameGeometry: Rect

  /**
   * TODO: Add description.
   */
  frameSize: Size

  /**
   * TODO: Add description.
   */
  fullScreen: boolean

  /**
   * TODO: Add description.
   */
  geometry: Rect

  /**
   * TODO: Add description.
   */
  height: number

  /**
   * TODO: Add description.
   */
  isActiveWindow: boolean

  /**
   * TODO: Add description.
   */
  maximized: boolean

  /**
   * TODO: Add description.
   */
  maximumHeight: number

  /**
   * TODO: Add description.
   */
  maximumSize: Size

  /**
   * TODO: Add description.
   */
  maximumWidth: number

  /**
   * TODO: Add description.
   */
  minimized: boolean

  /**
   * TODO: Add description.
   */
  minimumHeight: number

  /**
   * TODO: Add description.
   */
  minimumSize: Size

  /**
   * TODO: Add description.
   */
  minimumSizeHint: Size

  /**
   * TODO: Add description.
   */
  minimumWidth: number

  /**
   * TODO: Add description.
   */
  mouseTracking: boolean

  /**
   * TODO: Add description.
   */
  normalGeometry: Rect

  /**
   * TODO: Add description.
   */
  palette: Palette

  /**
   * TODO: Add description.
   */
  pos: Point

  /**
   * TODO: Add description.
   */
  rect: Rect

  /**
   * TODO: Add description.
   */
  size: Size

  /**
   * TODO: Add description.
   */
  sizeHint: Size

  /**
   * TODO: Add description.
   */
  sizeIncrement: Size

  /**
   * TODO: Add description.
   */
  statusTip: string

  /**
   * TODO: Add description.
   */
  styleSheet: string

  /**
   * TODO: Add description.
   */
  toolTip: string

  /**
   * TODO: Add description.
   */
  updatesEnabled: boolean

  /**
   * TODO: Add description.
   */
  visible: boolean

  /**
   * TODO: Add description.
   */
  whatsThis: string

  /**
   * TODO: Add description.
   */
  width: number

  /**
   * TODO: Add description.
   */
  windowFilePath: string

  /**
   * TODO: Add description.
   */
  windowIconText: string

  /**
   * TODO: Add description.
   */
  windowModified: boolean

  /**
   * TODO: Add description.
   */
  windowOpacity: number

  /**
   * TODO: Add description.
   */
  windowTitle: string

  /**
   * TODO: Add description.
   */
  x: number

  /**
   * TODO: Add description.
   */
  y: number

  /**
   * TODO: Add description.
   */
  close (): boolean;

  /**
   * TODO: Add description.
   */
  hide (): void;

  /**
   * TODO: Add description.
   */
  lower (): void;

  /**
   * TODO: Add description.
   */
  raise (): void;

  /**
   * TODO: Add description.
   */
  repaint (): void;

  /**
   * TODO: Add description.
   * @param disable - 
   */
  setDisabled (disable: boolean): void;

  /**
   * TODO: Add description.
   * @param enabled - 
   */
  setEnabled (enabled: boolean): void;

  /**
   * TODO: Add description.
   */
  setFocus (): void;

  /**
   * TODO: Add description.
   * @param hidden - 
   */
  setHidden (hidden: boolean): void;

  /**
   * TODO: Add description.
   * @param styleSheet - 
   */
  setStyleSheet (styleSheet: string): void;

  /**
   * TODO: Add description.
   * @param visible - 
   */
  setVisible (visible: boolean): void;

  /**
   * TODO: Add description.
   * @param modified - 
   */
  setWindowModified (modified: boolean): void;

  /**
   * TODO: Add description.
   * @param title - 
   */
  setWindowTitle (title: string): void;

  /**
   * TODO: Add description.
   */
  show (): void;

  /**
   * TODO: Add description.
   */
  showFullScreen (): void;

  /**
   * TODO: Add description.
   */
  showMaximized (): void;

  /**
   * TODO: Add description.
   */
  showMinimized (): void;

  /**
   * TODO: Add description.
   */
  showNormal (): void;

  /**
   * TODO: Add description.
   */
  update (): void;

}


/**
 * @see http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/zipfile_dz
 * DAZ Script *.zip (zlib) file I/O class.
 * @remarks Provides functionality for reading and writing zlib compressed *.zip files.
 */
interface DzZipFile extends DzFileInfo
{

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   */
  /**
   * Open the file for reading only.
   */
  readonly ReadOnly: number;

  /**
   * Open the file for writing only.
   */
  readonly WriteOnly: number;

  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;

  /**
   * Compresses all the files in the given directory.
   * @since 4.9.3.149
   * @param pathOnDisk - The path of the directory that contains the directory to compress.
   * @param pathInZip - The path of the directory to compress to within the zip.
   */
  addDirToZip (pathOnDisk: string, pathInZip: string): boolean;

  /**
   * Compresses the file into the zip.
   * @since 4.9.3.149
   * @param pathOnDisk - The path of the directory that contains the file to compress.
   * @param pathInZip - The path of the file to compress to within the zip.
   */
  addFileToZip (pathOnDisk: string, pathInZip: string): boolean;

  /**
   * Close the file.
   */
  close (): void;

  /**
   * Compresses all the files in the given directory.
   * @param path - The path to the directory to compress files from.
   * @param [recursive=true] - If true, path represents the base path of the directory tree to compress (i.e., the contents of the directory, all subdirectories, and the contents of those directories, recursively). If false, only files in the given path are compressed.
   */
  compressAll (path: string, recursive?: boolean): boolean;

  /**
   * Extracts all the files from the zip file. The relative path of the files are appended to the specified base path.
   * @param basePath - The base path to extract the files to.
   */
  extractAll (basePath: string): boolean;

  /**
   * Extracts the current file from the zip file. The relative path of the current file is appended to the specified base path.
   * @since 4.9.3.149
   * @param basePath - The base path to extract to.
   */
  extractCurrentFile (basePath: string): boolean;

  /**
   * @returns The number of the entry in the current file (if any).
   * @since 4.9.3.149
   */
  getCurrentFileAtributes (): number;

  /**
   * @returns The comment for the current file (if any).
   */
  getCurrentFileComment (): string;

  /**
   * @returns The compressed size of the current file.
   * @since 4.9.3.149
   */
  getCurrentFileCompressedSize (): number;

  /**
   * @returns The compression method of the current file.
   * @since 4.9.3.149
   */
  getCurrentFileCompressionMethod (): string;

  /**
   * @returns The ratio of compression on the current file.
   * @since 4.9.3.149
   */
  getCurrentFileCompressionRatio (): number;

  /**
   * @returns The CRC value of the current file.
   * @since 4.9.3.149
   */
  getCurrentFileCRC (): string;

  /**
   * @returns true if the current entry is a folder, otherwise false.
   * @since 4.9.3.149
   */
  getCurrentFileIsFolder (): boolean;

  /**
   * @returns The name of the current file.
   */
  getCurrentFileName (): string;

  /**
   * @returns The compressed size of the current file.
   * @since 4.9.3.149
   */
  getCurrentFileUncompressedSize (): number;

  /**
   * @returns A list of the file names in the zip file.
   */
  getFileNames (): Array<unknown>;

  /**
   * @returns The global comment for the zip file.
   */
  getGlobalComment (): string;

  /**
   * @returns The number of entries in the zip file.
   */
  getNumEntries (): number;

  /**
   * Set the current file of the zip file to the first file.
   */
  goToFirstFile (): boolean;

  /**
   * Set the current file of the zip file to the next file.
   */
  goToNextFile (): boolean;

  /**
   * Attempts to locate an entry in the zip file.
   * @returns true if the file was found, otherwise false.
   * @attention If the entry is found, it becomes the current.
   * @param pathInZip - The path of the entry to locate within the zip.
   */
  locateFile (pathInZip: string): boolean;

  /**
   * Open the file with the given mode.
   * @returns true if the file was opened successfully, otherwise false.
   * @param mode - 
   */
  open (mode: number): boolean;

  /**
   * The global comment for the zip file.
   * @returns true if the comment was set, otherwise false.
   * @since 4.9.3.149
   * @param comment - 
   */
  setGlobalComment (comment: string): boolean;

}

declare var DzZipFile:
{
  prototype: DzZipFile;

  /**
   * Creates a zip file with the given file name.
   * @param file - The path of the *.zip file.
   */
  new (file: string): DzZipFile;

  /**
   * Enumerated values used with open() to describe the mode in which a file is opened.
   */
  /**
   * Open the file for reading only.
   */
  readonly ReadOnly: number;
  /**
   * Open the file for writing only.
   */
  readonly WriteOnly: number;
  /**
   * The file is opened in append mode, so that all data is written to the end of the file.
   */
  readonly Append: number;
}